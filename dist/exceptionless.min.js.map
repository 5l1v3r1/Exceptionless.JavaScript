{"version":3,"sources":["tracekit.js","/source/exceptionless.ts","exceptionless.min.js"],"names":["window","undefined","_has","object","key","Object","prototype","hasOwnProperty","call","_isUndefined","what","TraceKit","_oldTraceKit","_slice","slice","UNKNOWN_FUNCTION","noConflict","wrap","func","wrapped","apply","this","arguments","e","report","subscribe","handler","installGlobalHandler","handlers","push","unsubscribe","i","length","splice","notifyHandlers","stack","isWindowError","exception","collectWindowErrors","concat","inner","traceKitWindowOnError","message","url","lineNo","columnNo","errorObj","lastExceptionStack","computeStackTrace","augmentStackTraceWithInitialElement","processLastException","location","line","column","guessFunctionName","context","gatherContext","mode","_oldOnerrorHandler","_onErrorHandlerInstalled","onerror","_lastExceptionStack","_lastArgs","lastArgs","lastException","ex","setTimeout","incomplete","loadSource","remoteFetching","getXHR","XMLHttpRequest","ActiveXObject","request","open","send","responseText","getSource","sourceCache","source","domain","document","indexOf","split","m","reFunctionArgNames","reGuessFunction","maxLines","exec","linesBefore","Math","floor","linesOfContext","linesAfter","start","max","end","min","escapeRegExp","text","replace","escapeCodeAsRegExpForMatchingInsideHTML","body","findSourceInUrls","re","urls","j","join","substring","index","lastIndexOf","findSourceInLine","fragment","RegExp","findSourceByFunctionBody","parts","result","href","scripts","getElementsByTagName","code","codeRE","eventRE","script","src","name","args","event","computeStackTraceFromStackProp","element","chrome","gecko","winjs","lines","reference","isNative","columnNumber","computeStackTraceFromStacktraceProp","stacktrace","opera10Regex","opera11Regex","exc","computeStackTraceFromOperaMultiLineMessage","lineRE1","lineRE2","lineRE3","inlineScriptBlocks","s","item","relativeLine","pos","innerText","midline","stackInfo","initial","unshift","partial","computeStackTraceByWalkingCallerChain","depth","functionName","funcs","recursion","curr","caller","toString","input","description","sourceURL","fileName","lineNumber","debug","computeStackTraceOfCaller","Error","ofCaller","extendToAsynchronousCallbacks","_helper","fnName","originalFn","originalCallback","global","root","factory","define","amd","exports","module","require","exceptionless","getDefaultsSettingsFromScriptTag","getHashCodeForError","error","stack_trace","JSON","stringify","getHashCode","char","hash","charCodeAt","Utils","parseQueryString","pop","processUnhandledException","stackTrace","options","builder","ExceptionlessClient","createUnhandledException","status","pluginContextData","submit","SettingsManager","_handlers","changed","config","checkVersion","version","savedConfigVersion","parseInt","storage","get","_configPath","isNaN","log","info","updateSettings","_this","isValid","submissionClient","getSettings","response","success","settings","merge","savedServerSettings","getSavedServerSettings","path","save","settingsVersion","DefaultLastReferenceIdManager","_lastReferenceId","getLast","clearLast","setLast","eventId","ConsoleLog","warn","level","console","NullLog","EventPluginContext","client","contextData","ContextData","defineProperty","enumerable","configurable","EventPluginManager","run","callback","plugin","next","cancelled","plugins","wrappedPlugins","priority","addDefaultPlugins","addPlugin","ConfigurationDefaultsPlugin","ErrorPlugin","DuplicateCheckerPlugin","ModuleInfoPlugin","RequestInfoPlugin","EnvironmentInfoPlugin","SubmissionMethodPlugin","ReferenceIdPlugin","reference_id","type","guid","DefaultEventQueue","_processingQueue","_config","enqueue","ensureQueueTimer","areQueuedItemsDiscarded","Date","toJSON","randomNumber","process","isAppExiting","getEvents","events","items","value","queueNotProcessed","enabled","getList","submissionBatchSize","serverUrl","postEvents","processSubmissionResponse","suspendProcessing","durationInMinutes","discardFutureQueuedItems","clearQueue","_suspendProcessingUntil","getTime","_discardQueuedItemsUntil","removeEvents","_queueTimer","setInterval","onProcessQueue","isQueueProcessingSuspended","noSubmission","serviceUnavailable","paymentRequired","unableToAuthenticate","notFound","badRequest","requestEntityTooLarge","round","remove","InMemoryStorage","maxItems","_items","_maxItems","created","shift","searchPattern","limit","regex","results","test","DefaultSubmissionClient","configurationVersionHeader","data","dataExclusions","createRequest","cb","createSubmissionCallback","submissionAdapter","sendRequest","postUserDescription","referenceId","encodeURIComponent","headers","SettingsResponse","parse","method","apiKey","userAgent","SubmissionResponse","addRange","target","values","_i","character","getCookies","cookies","cookie","s4","random","defaultValues","parseVersion","versionRegex","matches","query","pairs","pair","decodeURIComponent","exclusions","checkForMatch","pattern","trim","toLowerCase","startsWithWildcard","endsWithWildcard","stringifyImpl","obj","excludedKeys","cache","Configuration","configSettings","inject","fn","defaultTags","defaultData","lastReferenceIdManager","_plugins","_serverUrl","_dataExclusions","defaults","environmentInfoCollector","errorParser","moduleCollector","requestInfoCollector","queue","applySavedServerSettings","_apiKey","set","addDataExclusions","sort","p1","p2","pluginOrName","pluginAction","pluginExists","removePlugin","setVersion","setUserIdentity","userInfoOrIdentity","USER_KEY","userInfo","identity","shouldRemove","useReferenceIds","useDebugLogger","_defaultSettings","EventBuilder","_validIdentifierErrorMessage","setType","setSource","setSessionId","sessionId","isValidIdentifier","session_id","setReferenceId","setMessage","setGeo","latitude","longitude","geo","setProperty","setValue","addTags","tags","markAsCritical","critical","addRequestInfo","submitEvent","isDigit","isLetter","isMinus","setException","getException","markAsUnhandledError","setSubmissionMethod","getSubmissionMethod","statusCode","settingsOrApiKey","createException","createEvent","submitException","submissionMethod","submitUnhandledException","createFeatureUsage","feature","submitFeatureUsage","createLog","sourceOrMessage","callee","submitLog","createNotFound","resource","submitNotFound","createSessionStart","submitSessionStart","createSessionEnd","submitSessionEnd","date","ctx","ev","updateUserEmailAndDescription","email","userDescription","email_address","getLastReferenceId","_instance","tag","ignoredProperties","ERROR_KEY","EXTRA_PROPERTIES_KEY","parser","additionalData","getAdditionalData","getOwnPropertyNames","collector","modules","getModules","REQUEST_KEY","requestInfo","getRequestInfo","ENVIRONMENT_KEY","environmentInfo","getEnvironmentInfo","WINDOW_MILLISECONDS","MAX_QUEUE_LENGTH","recentlyProcessedErrors","isDuplicate","checkDuplicate","getNow","now","hashCode","repeatWindow","some","h","timestamp","DefaultErrorParser","getParameters","parameters","params","getStackFrames","stackFrames","ANONYMOUS","frames","frame","file_name","line_number","TRACEKIT_STACK_TRACE_KEY","DefaultModuleCollector","module_id","innerHTML","DefaultRequestInfoCollector","navigator","user_agent","is_secure","protocol","host","hostname","port","pathname","query_string","search","referrer","DefaultSubmissionAdapter","complete","xhr","parseResponseHeaders","headerStr","headerPairs","headerPair","separator","isCompleted","statusText","TIMEOUT","LOADED","responseBody","getAllResponseHeaders","WITH_CREDENTIALS","setRequestHeader","XDomainRequest","useSetTimeout","timeout","onreadystatechange","readyState","onprogress","ontimeout","onload","stackTraceLimit","Infinity"],"mappings":"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","file":"exceptionless.min.js","sourcesContent":["/*\n TraceKit - Cross browser stack traces - github.com/csnover/TraceKit\n MIT license\n*/\n\n(function(window, undefined) {\nif (!window) {\n    return;\n}\n\nvar TraceKit = {};\nvar _oldTraceKit = window.TraceKit;\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n\n/**\n * _has, a better form of hasOwnProperty\n * Example: _has(MainHostObject, property) === true/false\n *\n * @param {Object} object to check property\n * @param {string} key to check\n */\nfunction _has(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\n\nfunction _isUndefined(what) {\n    return typeof what === 'undefined';\n}\n\n/**\n * TraceKit.noConflict: Export TraceKit out to another variable\n * Example: var TK = TraceKit.noConflict()\n */\nTraceKit.noConflict = function noConflict() {\n    window.TraceKit = _oldTraceKit;\n    return TraceKit;\n};\n\n/**\n * TraceKit.wrap: Wrap any function in a TraceKit reporter\n * Example: func = TraceKit.wrap(func);\n *\n * @param {Function} func Function to be wrapped\n * @return {Function} The wrapped func\n */\nTraceKit.wrap = function traceKitWrapper(func) {\n    function wrapped() {\n        try {\n            return func.apply(this, arguments);\n        } catch (e) {\n            TraceKit.report(e);\n            throw e;\n        }\n    }\n    return wrapped;\n};\n\n/**\n * TraceKit.report: cross-browser processing of unhandled exceptions\n *\n * Syntax:\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *              on top frame; column number is not guaranteed\n *   - Opera:   full stack trace with line and column numbers\n *   - Chrome:  full stack trace with line and column numbers\n *   - Safari:  line and column number for the top frame only; some frames\n *              may be missing, and column number is not guaranteed\n *   - IE:      line and column number for the top frame only; some frames\n *              may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a stackInfo object as described in the\n * TraceKit.computeStackTrace docs.\n */\nTraceKit.report = (function reportModuleWrapper() {\n    var handlers = [],\n        lastArgs = null,\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {Object.<string, *>} stack\n     */\n    function notifyHandlers(stack, isWindowError) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n          return;\n        }\n        for (var i in handlers) {\n            if (_has(handlers, i)) {\n                try {\n                    handlers[i].apply(null, [stack].concat(_slice.call(arguments, 2)));\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error\n     * occurred.\n     * @param {?(number|string)} columnNo The column number at which the error\n     * occurred.\n     * @param {?Error} errorObj The actual Error object.\n     */\n    function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {\n        var stack = null;\n\n        if (lastExceptionStack) {\n            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n    \t    processLastException();\n\t    } else if (errorObj) {\n            stack = TraceKit.computeStackTrace(errorObj);\n            notifyHandlers(stack, true);\n        } else {\n            var location = {\n              'url': url,\n              'line': lineNo,\n              'column': columnNo\n            };\n            location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);\n            location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);\n            stack = {\n              'mode': 'onerror',\n              'message': message,\n              'stack': [location]\n            };\n\n            notifyHandlers(stack, true);\n        }\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    function installGlobalHandler () {\n        if (_onErrorHandlerInstalled === true) {\n            return;\n        }\n        _oldOnerrorHandler = window.onerror;\n        window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    function processLastException() {\n        var _lastExceptionStack = lastExceptionStack,\n            _lastArgs = lastArgs;\n        lastArgs = null;\n        lastExceptionStack = null;\n        lastException = null;\n        notifyHandlers.apply(null, [_lastExceptionStack, false].concat(_lastArgs));\n    }\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     */\n    function report(ex) {\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n              processLastException();\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n        lastArgs = _slice.call(arguments, 1);\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        window.setTimeout(function () {\n            if (lastException === ex) {\n                processLastException();\n            }\n        }, (stack.incomplete ? 2000 : 0));\n\n        throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    return report;\n}());\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   s = TraceKit.computeStackTrace.ofCaller([depth])\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n * Returns:\n *   s.name              - exception name\n *   s.message           - exception message\n *   s.stack[i].url      - JavaScript or HTML file URL\n *   s.stack[i].func     - function name, or empty for anonymous functions (if guessing did not work)\n *   s.stack[i].args     - arguments passed to the function, if known\n *   s.stack[i].line     - line number, if known\n *   s.stack[i].column   - column number, if known\n *   s.stack[i].context  - an array of source code lines; the middle element corresponds to the correct line#\n *   s.mode              - 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n * Tracing example:\n *     function trace(message) {\n *         var stackInfo = TraceKit.computeStackTrace.ofCaller();\n *         var data = message + \"\\n\";\n *         for(var i in stackInfo.stack) {\n *             var item = stackInfo.stack[i];\n *             data += (item.func || '[anonymous]') + \"() in \" + item.url + \":\" + (item.line || '0') + \"\\n\";\n *         }\n *         if (window.console)\n *             console.info(data);\n *         else\n *             alert(data);\n *     }\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n    var debug = false,\n        sourceCache = {};\n\n    /**\n     * Attempts to retrieve source code via XMLHttpRequest, which is used\n     * to look up anonymous function names.\n     * @param {string} url URL of source code.\n     * @return {string} Source contents.\n     */\n    function loadSource(url) {\n        if (!TraceKit.remoteFetching) { //Only attempt request if remoteFetching is on.\n            return '';\n        }\n        try {\n            var getXHR = function() {\n                try {\n                    return new window.XMLHttpRequest();\n                } catch (e) {\n                    // explicitly bubble up the exception if not found\n                    return new window.ActiveXObject('Microsoft.XMLHTTP');\n                }\n            };\n\n            var request = getXHR();\n            request.open('GET', url, false);\n            request.send('');\n            return request.responseText;\n        } catch (e) {\n            return '';\n        }\n    }\n\n    /**\n     * Retrieves source code from the source code cache.\n     * @param {string} url URL of source code.\n     * @return {Array.<string>} Source contents.\n     */\n    function getSource(url) {\n        if (typeof url !== 'string') {\n            return [];\n        }\n\n        if (!_has(sourceCache, url)) {\n            // URL needs to be able to fetched within the acceptable domain.  Otherwise,\n            // cross-domain errors will be triggered.\n            var source = '';\n            var domain = '';\n            try { domain = document.domain; } catch (e) {}\n            if (url.indexOf(domain) !== -1) {\n                source = loadSource(url);\n            }\n            sourceCache[url] = source ? source.split('\\n') : [];\n        }\n\n        return sourceCache[url];\n    }\n\n    /**\n     * Tries to use an externally loaded copy of source code to determine\n     * the name of a function by looking at the name of the variable it was\n     * assigned to, if any.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} lineNo Line number in source code.\n     * @return {string} The function name, if discoverable.\n     */\n    function guessFunctionName(url, lineNo) {\n        var reFunctionArgNames = /function ([^(]*)\\(([^)]*)\\)/,\n            reGuessFunction = /['\"]?([0-9A-Za-z$_]+)['\"]?\\s*[:=]\\s*(function|eval|new Function)/,\n            line = '',\n            maxLines = 10,\n            source = getSource(url),\n            m;\n\n        if (!source.length) {\n            return UNKNOWN_FUNCTION;\n        }\n\n        // Walk backwards from the first line in the function until we find the line which\n        // matches the pattern above, which is the function definition\n        for (var i = 0; i < maxLines; ++i) {\n            line = source[lineNo - i] + line;\n\n            if (!_isUndefined(line)) {\n                if ((m = reGuessFunction.exec(line))) {\n                    return m[1];\n                } else if ((m = reFunctionArgNames.exec(line))) {\n                    return m[1];\n                }\n            }\n        }\n\n        return UNKNOWN_FUNCTION;\n    }\n\n    /**\n     * Retrieves the surrounding lines from where an exception occurred.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} line Line number in source code to centre\n     * around for context.\n     * @return {?Array.<string>} Lines of source code.\n     */\n    function gatherContext(url, line) {\n        var source = getSource(url);\n\n        if (!source.length) {\n            return null;\n        }\n\n        var context = [],\n            // linesBefore & linesAfter are inclusive with the offending line.\n            // if linesOfContext is even, there will be one extra line\n            //   *before* the offending line.\n            linesBefore = Math.floor(TraceKit.linesOfContext / 2),\n            // Add one extra line if linesOfContext is odd\n            linesAfter = linesBefore + (TraceKit.linesOfContext % 2),\n            start = Math.max(0, line - linesBefore - 1),\n            end = Math.min(source.length, line + linesAfter - 1);\n\n        line -= 1; // convert to 0-based index\n\n        for (var i = start; i < end; ++i) {\n            if (!_isUndefined(source[i])) {\n                context.push(source[i]);\n            }\n        }\n\n        return context.length > 0 ? context : null;\n    }\n\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    /**\n     * Determines where a code fragment occurs in the source code.\n     * @param {RegExp} re The function definition.\n     * @param {Array.<string>} urls A list of URLs to search.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     */\n    function findSourceInUrls(re, urls) {\n        var source, m;\n        for (var i = 0, j = urls.length; i < j; ++i) {\n            // console.log('searching', urls[i]);\n            if ((source = getSource(urls[i])).length) {\n                source = source.join('\\n');\n                if ((m = re.exec(source))) {\n                    // console.log('Found function in ' + urls[i]);\n\n                    return {\n                        'url': urls[i],\n                        'line': source.substring(0, m.index).split('\\n').length,\n                        'column': m.index - source.lastIndexOf('\\n', m.index) - 1\n                    };\n                }\n            }\n        }\n\n        // console.log('no match');\n\n        return null;\n    }\n\n    /**\n     * Determines at which column a code fragment occurs on a line of the\n     * source code.\n     * @param {string} fragment The code fragment.\n     * @param {string} url The URL to search.\n     * @param {(string|number)} line The line number to examine.\n     * @return {?number} The column number.\n     */\n    function findSourceInLine(fragment, url, line) {\n        var source = getSource(url),\n            re = new RegExp('\\\\b' + escapeRegExp(fragment) + '\\\\b'),\n            m;\n\n        line -= 1;\n\n        if (source && source.length > line && (m = re.exec(source[line]))) {\n            return m.index;\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines where a function was defined within the source code.\n     * @param {(Function|string)} func A function reference or serialized\n     * function definition.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     */\n    function findSourceByFunctionBody(func) {\n        if (_isUndefined(document)) {\n            return;\n        }\n\n        var urls = [window.location.href],\n            scripts = document.getElementsByTagName('script'),\n            body,\n            code = '' + func,\n            codeRE = /^function(?:\\s+([\\w$]+))?\\s*\\(([\\w\\s,]*)\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            eventRE = /^function on([\\w$]+)\\s*\\(event\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            re,\n            parts,\n            result;\n\n        for (var i = 0; i < scripts.length; ++i) {\n            var script = scripts[i];\n            if (script.src) {\n                urls.push(script.src);\n            }\n        }\n\n        if (!(parts = codeRE.exec(code))) {\n            re = new RegExp(escapeRegExp(code).replace(/\\s+/g, '\\\\s+'));\n        }\n\n        // not sure if this is really necessary, but I don’t have a test\n        // corpus large enough to confirm that and it was in the original.\n        else {\n            var name = parts[1] ? '\\\\s+' + parts[1] : '',\n                args = parts[2].split(',').join('\\\\s*,\\\\s*');\n\n            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\\s+/g, '\\\\s+');\n            re = new RegExp('function' + name + '\\\\s*\\\\(\\\\s*' + args + '\\\\s*\\\\)\\\\s*{\\\\s*' + body + '\\\\s*}');\n        }\n\n        // look for a normal function definition\n        if ((result = findSourceInUrls(re, urls))) {\n            return result;\n        }\n\n        // look for an old-school event handler function\n        if ((parts = eventRE.exec(code))) {\n            var event = parts[1];\n            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);\n\n            // look for a function defined in HTML as an onXXX handler\n            re = new RegExp('on' + event + '=[\\\\\\'\"]\\\\s*' + body + '\\\\s*[\\\\\\'\"]', 'i');\n\n            if ((result = findSourceInUrls(re, urls[0]))) {\n                return result;\n            }\n\n            // look for ???\n            re = new RegExp(body);\n\n            if ((result = findSourceInUrls(re, urls))) {\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (!ex.stack) {\n            return null;\n        }\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?@?((?:file|https?|blob|chrome|\\[).*?)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:ms-appx|https?|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if ((parts = chrome.exec(lines[i]))) {\n                var isNative = parts[2] && parts[2].indexOf('native') !== -1;\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ( parts = winjs.exec(lines[i]) ) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = gecko.exec(lines[i]))) {\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = guessFunctionName(element.url, element.line);\n            }\n\n            if (element.line) {\n                element.context = gatherContext(element.url, element.line);\n            }\n\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        if (stack[0] && stack[0].line && !stack[0].column && reference) {\n            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);\n        } else if (!stack[0].column && !_isUndefined(ex.columnNumber)) {\n            // FireFox uses this awesome columnNumber property for its top frame\n            // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n            // so adding 1\n            stack[0].column = ex.columnNumber + 1;\n        }\n\n        return {\n            'mode': 'stack',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * Computes stack trace information from the stacktrace property.\n     * Opera 10+ uses this property.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceFromStacktraceProp(ex) {\n        // Access and store the stacktrace property before doing ANYTHING\n        // else to it because Opera is not very good at providing it\n        // reliably in other circumstances.\n        var stacktrace = ex.stacktrace;\n        if (!stacktrace) {\n            return;\n        }\n\n        var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i,\n            opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i,\n            lines = stacktrace.split('\\n'),\n            stack = [],\n            parts;\n\n        for (var line = 0; line < lines.length; line += 2) {\n            var element = null;\n            if ((parts = opera10Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[2],\n                    'line': +parts[1],\n                    'column': null,\n                    'func': parts[3],\n                    'args':[]\n                };\n            } else if ((parts = opera11Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[6],\n                    'line': +parts[1],\n                    'column': +parts[2],\n                    'func': parts[3] || parts[4],\n                    'args': parts[5] ? parts[5].split(',') : []\n                };\n            }\n\n            if (element) {\n                if (!element.func && element.line) {\n                    element.func = guessFunctionName(element.url, element.line);\n                }\n                if (element.line) {\n                    try {\n                        element.context = gatherContext(element.url, element.line);\n                    } catch (exc) {}\n                }\n\n                if (!element.context) {\n                    element.context = [lines[line + 1]];\n                }\n\n                stack.push(element);\n            }\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        return {\n            'mode': 'stacktrace',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * NOT TESTED.\n     * Computes stack trace information from an error message that includes\n     * the stack trace.\n     * Opera 9 and earlier use this method if the option to show stack\n     * traces is turned on in opera:config.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack information.\n     */\n    function computeStackTraceFromOperaMultiLineMessage(ex) {\n        // TODO: Clean this function up\n        // Opera includes a stack trace into the exception message. An example is:\n        //\n        // Statement on line 3: Undefined variable: undefinedFunc\n        // Backtrace:\n        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz\n        //         undefinedFunc(a);\n        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy\n        //           zzz(x, y, z);\n        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx\n        //           yyy(a, a, a);\n        //   Line 1 of function script\n        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }\n        //   ...\n\n        var lines = ex.message.split('\\n');\n        if (lines.length < 4) {\n            return null;\n        }\n\n        var lineRE1 = /^\\s*Line (\\d+) of linked script ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE2 = /^\\s*Line (\\d+) of inline#(\\d+) script in ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE3 = /^\\s*Line (\\d+) of function script\\s*$/i,\n            stack = [],\n            scripts = document.getElementsByTagName('script'),\n            inlineScriptBlocks = [],\n            parts;\n\n        for (var s in scripts) {\n            if (_has(scripts, s) && !scripts[s].src) {\n                inlineScriptBlocks.push(scripts[s]);\n            }\n        }\n\n        for (var line = 2; line < lines.length; line += 2) {\n            var item = null;\n            if ((parts = lineRE1.exec(lines[line]))) {\n                item = {\n                    'url': parts[2],\n                    'func': parts[3],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null\n                };\n            } else if ((parts = lineRE2.exec(lines[line]))) {\n                item = {\n                    'url': parts[3],\n                    'func': parts[4],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.\n                };\n                var relativeLine = (+parts[1]); // relative to the start of the <SCRIPT> block\n                var script = inlineScriptBlocks[parts[2] - 1];\n                if (script) {\n                    var source = getSource(item.url);\n                    if (source) {\n                        source = source.join('\\n');\n                        var pos = source.indexOf(script.innerText);\n                        if (pos >= 0) {\n                            item.line = relativeLine + source.substring(0, pos).split('\\n').length;\n                        }\n                    }\n                }\n            } else if ((parts = lineRE3.exec(lines[line]))) {\n                var url = window.location.href.replace(/#.*$/, '');\n                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));\n                var src = findSourceInUrls(re, [url]);\n                item = {\n                    'url': url,\n                    'func': '',\n                    'args': [],\n                    'line': src ? src.line : parts[1],\n                    'column': null\n                };\n            }\n\n            if (item) {\n                if (!item.func) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n                var context = gatherContext(item.url, item.line);\n                var midline = (context ? context[Math.floor(context.length / 2)] : null);\n                if (context && midline.replace(/^\\s*/, '') === lines[line + 1].replace(/^\\s*/, '')) {\n                    item.context = context;\n                } else {\n                    // if (context) alert(\"Context mismatch. Correct midline:\\n\" + lines[i+1] + \"\\n\\nMidline:\\n\" + midline + \"\\n\\nContext:\\n\" + context.join(\"\\n\") + \"\\n\\nURL:\\n\" + item.url);\n                    item.context = [lines[line + 1]];\n                }\n                stack.push(item);\n            }\n        }\n        if (!stack.length) {\n            return null; // could not parse multiline exception message as Opera stack trace\n        }\n\n        return {\n            'mode': 'multiline',\n            'name': ex.name,\n            'message': lines[0],\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {Object.<string, *>} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = guessFunctionName(initial.url, initial.line);\n            }\n\n            if (!initial.context) {\n                initial.context = gatherContext(initial.url, initial.line);\n            }\n\n            var reference = / '([^']+)' /.exec(message);\n            if (reference) {\n                initial.column = findSourceInLine(reference[1], initial.url, initial.line);\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        stackInfo.stack[0].context = initial.context;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                // console.log('skipping internal function');\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'args': [],\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if ((parts = functionName.exec(curr.toString()))) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n              try {\n                item.func = parts.input.substring(0, parts.input.indexOf('{'));\n              } catch (e) { }\n            }\n\n            if ((source = findSourceByFunctionBody(curr))) {\n                item.url = source.url;\n                item.line = source.line;\n\n                if (item.func === UNKNOWN_FUNCTION) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n\n                var reference = / '([^']+)' /.exec(ex.message || ex.description);\n                if (reference) {\n                    item.column = findSourceInLine(reference[1], source.url, source.line);\n                }\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            }else{\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            // console.log('depth is ' + depth);\n            // console.log('stack is ' + stack.length);\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'mode': 'callers',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = (depth == null ? 0 : +depth);\n\n        try {\n            // This must be tried first because Opera 10 *destroys*\n            // its stacktrace property if you try to access the stack\n            // property first!!\n            stack = computeStackTraceFromStacktraceProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromOperaMultiLineMessage(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        return {\n            'mode': 'failed'\n        };\n    }\n\n    /**\n     * Logs a stacktrace starting from the previous call and working down.\n     * @param {(number|string)=} depth How many frames deep to trace.\n     * @return {Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceOfCaller(depth) {\n        depth = (depth == null ? 0 : +depth) + 1; // \"+ 1\" because \"ofCaller\" should drop one frame\n        try {\n            throw new Error();\n        } catch (ex) {\n            return computeStackTrace(ex, depth + 1);\n        }\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.guessFunctionName = guessFunctionName;\n    computeStackTrace.gatherContext = gatherContext;\n    computeStackTrace.ofCaller = computeStackTraceOfCaller;\n    computeStackTrace.getSource = getSource;\n\n    return computeStackTrace;\n}());\n\n/**\n * Extends support for global error handling for asynchronous browser\n * functions. Adopted from Closure Library's errorhandler.js\n */\nTraceKit.extendToAsynchronousCallbacks = function () {\n    var _helper = function _helper(fnName) {\n        var originalFn = window[fnName];\n        window[fnName] = function traceKitAsyncExtension() {\n            // Make a copy of the arguments\n            var args = _slice.call(arguments);\n            var originalCallback = args[0];\n            if (typeof (originalCallback) === 'function') {\n                args[0] = TraceKit.wrap(originalCallback);\n            }\n            // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n            // also only supports 2 argument and doesn't care what \"this\" is, so we\n            // can just call the original function directly.\n            if (originalFn.apply) {\n                return originalFn.apply(this, args);\n            } else {\n                return originalFn(args[0], args[1]);\n            }\n        };\n    };\n\n    _helper('setTimeout');\n    _helper('setInterval');\n};\n\n//Default options:\nif (!TraceKit.remoteFetching) {\n  TraceKit.remoteFetching = true;\n}\nif (!TraceKit.collectWindowErrors) {\n  TraceKit.collectWindowErrors = true;\n}\nif (!TraceKit.linesOfContext || TraceKit.linesOfContext < 1) {\n  // 5 lines before, the offending line, 5 lines after\n  TraceKit.linesOfContext = 11;\n}\n\n\n\n// Export to global object\nwindow.TraceKit = TraceKit;\n\n}(typeof window !== 'undefined' ? window : global));\n","export interface IEvent {\n  type?:string;\n  source?:string;\n  date?:Date;\n  tags?:string[];\n  message?:string;\n  geo?:string;\n  value?:number;\n  data?:any;\n  reference_id?:string;\n  session_id?:string;\n}\n\nexport interface ILastReferenceIdManager {\n  getLast(): string;\n  clearLast(): void;\n  setLast(eventId:string): void;\n}\n\nexport interface ILog {\n  info(message:string):void;\n  warn(message:string):void;\n  error(message:string):void;\n}\n\n                                          \n\nexport interface IEventQueue {\n  enqueue(event:IEvent):void;\n  process(isAppExiting?:boolean):void;\n  suspendProcessing(durationInMinutes?:number, discardFutureQueuedItems?:boolean, clearQueue?:boolean):void;\n}\n\n                                                                                                                                  \n\nexport interface IEnvironmentInfoCollector {\n  getEnvironmentInfo(context:EventPluginContext):IEnvironmentInfo;\n}\n\n                                                                                                              \n\nexport interface IErrorParser {\n  parse(context:EventPluginContext, exception:Error): IError;\n}\n\n                                                                                                                \n\nexport interface IModuleCollector {\n  getModules(context:EventPluginContext):IModule[];\n}\n\n                                                                                                                          \n\nexport interface IRequestInfoCollector {\n  getRequestInfo(context:EventPluginContext):IRequestInfo;\n}\n\n                                              \n\nexport interface IStorage<T> {\n  save(path:string, value:T):boolean;\n  get(path:string):T;\n  getList(searchPattern?:string, limit?:number):IStorageItem<T>[];\n  remove(path:string):void;\n}\n\n                                                                                                                   \n\nexport interface ISubmissionAdapter {\n  sendRequest(request:SubmissionRequest, callback:SubmissionCallback, isAppExiting?:boolean): void;\n}\n\n                                                                                                                                                                                                                                                                                           \n\nexport interface ISubmissionClient {\n  postEvents(events:IEvent[], config:Configuration, callback:(response:SubmissionResponse) => void, isAppExiting?:boolean):void;\n  postUserDescription(referenceId:string, description:IUserDescription, config:Configuration, callback:(response:SubmissionResponse) => void):void;\n  getSettings(config:Configuration, callback:(response:SettingsResponse) => void):void;\n}\n\nn\nexport interface IConfigurationSettings {\n  apiKey?:string;\n  serverUrl?:string;\n  environmentInfoCollector?:IEnvironmentInfoCollector;\n  errorParser?:IErrorParser;\n  lastReferenceIdManager?:ILastReferenceIdManager;\n  log?:ILog;\n  moduleCollector?:IModuleCollector;\n  requestInfoCollector?:IRequestInfoCollector;\n  submissionBatchSize?:number;\n  submissionClient?:ISubmissionClient;\n  submissionAdapter?:ISubmissionAdapter;\n  storage?:IStorage<any>;\n  queue?:IEventQueue;\n}\n\n                                                                                                                                                     \n\nexport class SettingsManager {\n  /**\n   * The configuration settings path.\n   * @type {string}\n   * @private\n   */\n  private static _configPath:string = 'ex-server-settings.json';\n\n  /**\n   * A list of handlers that will be fired when the settings change.\n   * @type {Array}\n   * @private\n   */\n  private static _handlers:{ (config:Configuration):void }[] = [];\n\n  public static onChanged(handler:(config:Configuration) => void) {\n    !!handler && this._handlers.push(handler);\n  }\n\n  public static applySavedServerSettings(config:Configuration):void {\n    config.log.info('Applying saved settings.');\n    config.settings = Utils.merge(config.settings, this.getSavedServerSettings(config));\n    this.changed(config);\n  }\n\n  public static checkVersion(version:number, config:Configuration):void {\n    if (version) {\n      let savedConfigVersion = parseInt(<string>config.storage.get(`${this._configPath}-version`), 10);\n      if (isNaN(savedConfigVersion) || version > savedConfigVersion) {\n        config.log.info(`Updating settings from v${(!isNaN(savedConfigVersion) ? savedConfigVersion : 0)} to v${version}`);\n        this.updateSettings(config);\n      }\n    }\n  }\n\n  public static updateSettings(config:Configuration):void {\n    if (!config.isValid) {\n      config.log.error('Unable to update settings: ApiKey is not set.');\n      return;\n    }\n\n    config.submissionClient.getSettings(config, (response:SettingsResponse) => {\n      if (!response || !response.success || !response.settings) {\n        return;\n      }\n\n      config.settings = Utils.merge(config.settings, response.settings);\n\n      // TODO: Store snapshot of settings after reading from config and attributes and use that to revert to defaults.\n      // Remove any existing server settings that are not in the new server settings.\n      let savedServerSettings = SettingsManager.getSavedServerSettings(config);\n      for (let key in savedServerSettings) {\n        if (response.settings[key]) {\n          continue;\n        }\n\n        delete config.settings[key];\n      }\n\n      let path = SettingsManager._configPath; // optimization for minifier.\n      config.storage.save(`${path}-version`, response.settingsVersion);\n      config.storage.save(path, response.settings);\n\n      config.log.info('Updated settings');\n      this.changed(config);\n    });\n  }\n\n  private static changed(config:Configuration) {\n    let handlers = this._handlers; // optimization for minifier.\n    for (let index = 0; index < handlers.length; index++) {\n      handlers[index](config);\n    }\n  }\n\n  private static getSavedServerSettings(config:Configuration):Object {\n    return config.storage.get(this._configPath) || {};\n  }\n}\n\n                                                                    \n\nexport class DefaultLastReferenceIdManager implements ILastReferenceIdManager {\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @type {string}\n   * @private\n   */\n  private _lastReferenceId:string = null;\n\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @returns {string}\n   */\n  getLast(): string {\n    return this._lastReferenceId;\n  }\n\n  /**\n   * Clears the last event's reference id.\n   */\n  clearLast():void {\n    this._lastReferenceId = null;\n  }\n\n  /**\n   * Sets the last event's reference id.\n   * @param eventId\n   */\n  setLast(eventId:string):void {\n    this._lastReferenceId = eventId;\n  }\n}\n\n                              \n\nexport class ConsoleLog implements ILog {\n  public info(message:string):void {\n    this.log('info', message);\n  }\n\n  public warn(message:string):void {\n    this.log('warn', message);\n  }\n\n  public error(message:string):void {\n    this.log('error', message);\n  }\n\n  private log(level:string, message:string) {\n    if (console && console[level]) {\n      console[level](`[${level}] Exceptionless: ${message}`);\n    }\n  }\n}\n\n                              \n\nexport class NullLog implements ILog {\n  public info(message:string):void {}\n  public warn(message:string):void {}\n  public error(message:string):void {}\n}\n\nexport interface IUserInfo {\n  identity?:string;\n  name?:string;\n  data?:any;\n}\n\n                                                                                                         \n\nexport interface IEventPlugin {\n  priority?:number;\n  name?:string;\n  run(context:EventPluginContext, next?:() => void): void;\n}\n\n                                                                                                                                                                                             \n\nexport class EventPluginContext {\n  public cancelled:boolean;\n  public client:ExceptionlessClient;\n  public event:IEvent;\n  public contextData:ContextData;\n\n  constructor(client:ExceptionlessClient, event:IEvent, contextData?:ContextData) {\n    this.client = client;\n    this.event = event;\n    this.contextData = contextData ? contextData : new ContextData();\n  }\n\n  public get log(): ILog {\n    return this.client.config.log;\n  }\n}\n\nn\nexport class EventPluginManager {\n  public static run(context:EventPluginContext, callback:(context?:EventPluginContext) => void): void {\n    let wrap = function (plugin:IEventPlugin, next?:() => void): () => void {\n      return () => {\n        try {\n          if (!context.cancelled) {\n            plugin.run(context, next);\n          }\n        } catch (ex) {\n          context.cancelled = true;\n          context.log.error(`Error running plugin '${plugin.name}': ${ex.message}. Discarding Event.`);\n        }\n\n        if (context.cancelled && !!callback) {\n          callback(context);\n        }\n      };\n    };\n\n    let plugins:IEventPlugin[] = context.client.config.plugins; // optimization for minifier.\n    let wrappedPlugins:{ (): void }[] = [];\n    if (!!callback) {\n      wrappedPlugins[plugins.length] = wrap({ name: 'cb', priority: 9007199254740992, run: callback }, null);\n    }\n\n    for (let index = plugins.length - 1; index > -1; index--) {\n      wrappedPlugins[index] = wrap(plugins[index], !!callback || (index < plugins.length - 1) ? wrappedPlugins[index + 1] : null);\n    }\n\n    wrappedPlugins[0]();\n  }\n\n  public static addDefaultPlugins(config:Configuration): void {\n    config.addPlugin(new ConfigurationDefaultsPlugin());\n    config.addPlugin(new ErrorPlugin());\n    config.addPlugin(new DuplicateCheckerPlugin());\n    config.addPlugin(new ModuleInfoPlugin());\n    config.addPlugin(new RequestInfoPlugin());\n    config.addPlugin(new EnvironmentInfoPlugin());\n    config.addPlugin(new SubmissionMethodPlugin());\n  }\n}\n\n                                                                                                                                                \n\nexport class ReferenceIdPlugin implements IEventPlugin {\n  public priority:number = 20;\n  public name:string = 'ReferenceIdPlugin';\n\n  public run(context:EventPluginContext, next?:() => void): void {\n    if ((!context.event.reference_id || context.event.reference_id.length === 0) && context.event.type === 'error') {\n      context.event.reference_id = Utils.guid().replace('-', '').substring(0, 10);\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                                                                                                                               \n\nexport class DefaultEventQueue implements IEventQueue {\n  /**\n   * The configuration object.\n   * @type {Configuration}\n   * @private\n   */\n  private _config:Configuration;\n\n  /**\n   * Suspends processing until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _suspendProcessingUntil:Date;\n\n  /**\n   * Discards queued items until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _discardQueuedItemsUntil:Date;\n\n  /**\n   * Returns true if the queue is processing.\n   * @type {boolean}\n   * @private\n   */\n  private _processingQueue:boolean = false;\n\n  /**\n   * Processes the queue every xx seconds.\n   * @type {Timer}\n   * @private\n   */\n  private _queueTimer:any;\n\n  constructor(config:Configuration) {\n    this._config = config;\n  }\n\n  public enqueue(event:IEvent): void {\n    let config:Configuration = this._config; // Optimization for minifier.\n    this.ensureQueueTimer();\n\n    if (this.areQueuedItemsDiscarded()) {\n      config.log.info('Queue items are currently being discarded. The event will not be queued.');\n      return;\n    }\n\n    let key = `ex-q-${new Date().toJSON()}-${Utils.randomNumber()}`;\n    config.log.info(`Enqueuing event: ${key} type=${event.type} ${!!event.reference_id ? 'refid=' + event.reference_id : ''}`);\n    config.storage.save(key, event);\n  }\n\n  public process(isAppExiting?:boolean): void {\n    function getEvents(events:{ path:string, value:IEvent }[]):IEvent[] {\n      let items:IEvent[] = [];\n      for (let index = 0; index < events.length; index++) {\n        items.push(events[index].value);\n      }\n\n      return items;\n    }\n\n    const queueNotProcessed:string = 'The queue will not be processed.'; // optimization for minifier.\n    let config:Configuration = this._config; // Optimization for minifier.\n    let log:ILog = config.log; // Optimization for minifier.\n\n    this.ensureQueueTimer();\n\n    if (this._processingQueue) {\n      return;\n    }\n\n    log.info('Processing queue...');\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${queueNotProcessed}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${queueNotProcessed}`);\n      return;\n    }\n\n    this._processingQueue = true;\n\n    try {\n      let events = config.storage.getList('ex-q', config.submissionBatchSize);\n      if (!events || events.length === 0) {\n        this._processingQueue = false;\n        return;\n      }\n\n      log.info(`Sending ${events.length} events to ${config.serverUrl}.`);\n      config.submissionClient.postEvents(getEvents(events), config, (response:SubmissionResponse) => {\n        this.processSubmissionResponse(response, events);\n        log.info('Finished processing queue.');\n        this._processingQueue = false;\n      }, isAppExiting);\n    } catch (ex) {\n      log.error(`Error processing queue: ${ex}`);\n      this.suspendProcessing();\n      this._processingQueue = false;\n    }\n  }\n\n  public suspendProcessing(durationInMinutes?:number, discardFutureQueuedItems?:boolean, clearQueue?:boolean): void {\n    let config:Configuration = this._config; // Optimization for minifier.\n\n    if (!durationInMinutes || durationInMinutes <= 0) {\n      durationInMinutes = 5;\n    }\n\n    config.log.info(`Suspending processing for ${durationInMinutes} minutes.`);\n    this._suspendProcessingUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\n\n    if (discardFutureQueuedItems) {\n      this._discardQueuedItemsUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\n    }\n\n    if (clearQueue) {\n      // Account is over the limit and we want to ensure that the sample size being sent in will contain newer errors.\n      this.removeEvents(config.storage.getList('ex-q'));\n    }\n  }\n\n  private areQueuedItemsDiscarded(): boolean {\n    return this._discardQueuedItemsUntil && this._discardQueuedItemsUntil > new Date();\n  }\n\n  private ensureQueueTimer(): void {\n    if (!this._queueTimer) {\n      this._queueTimer = setInterval(() => this.onProcessQueue(), 10000);\n    }\n  }\n\n  private isQueueProcessingSuspended(): boolean {\n    return this._suspendProcessingUntil && this._suspendProcessingUntil > new Date();\n  }\n\n  private onProcessQueue(): void {\n    if (!this.isQueueProcessingSuspended() && !this._processingQueue) {\n      this.process();\n    }\n  }\n\n  private processSubmissionResponse(response:SubmissionResponse, events:{ path:string, value:IEvent }[]): void {\n    const noSubmission:string = 'The event will not be submitted.'; // Optimization for minifier.\n    let config:Configuration = this._config; // Optimization for minifier.\n    let log:ILog = config.log; // Optimization for minifier.\n\n    if (response.success) {\n      log.info(`Sent ${events.length} events.`);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.serviceUnavailable) {\n      // You are currently over your rate limit or the servers are under stress.\n      log.error('Server returned service unavailable.');\n      this.suspendProcessing();\n      return;\n    }\n\n    if (response.paymentRequired) {\n      // If the organization over the rate limit then discard the event.\n      log.info('Too many events have been submitted, please upgrade your plan.');\n      this.suspendProcessing(null, true, true);\n      return;\n    }\n\n    if (response.unableToAuthenticate) {\n      // The api key was suspended or could not be authorized.\n      log.info(`Unable to authenticate, please check your configuration. ${noSubmission}`);\n      this.suspendProcessing(15);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.notFound || response.badRequest) {\n      // The service end point could not be found.\n      log.error(`Error while trying to submit data: ${response.message}`);\n      this.suspendProcessing(60 * 4);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.requestEntityTooLarge) {\n      let message = 'Event submission discarded for being too large.';\n      if (config.submissionBatchSize > 1) {\n        log.error(`${message} Retrying with smaller batch size.`);\n        config.submissionBatchSize = Math.max(1, Math.round(config.submissionBatchSize / 1.5));\n      } else {\n        log.error(`${message} ${noSubmission}`);\n        this.removeEvents(events);\n      }\n\n      return;\n    }\n\n    if (!response.success) {\n      log.error(`Error submitting events: ${response.message || 'Please check the network tab for more info.'}`);\n      this.suspendProcessing();\n    }\n  }\n\n  private removeEvents(events:{ path:string, value:IEvent }[]) {\n    for (let index = 0; index < (events || []).length; index++) {\n      this._config.storage.remove(events[index].path);\n    }\n  }\n}\n\n                                                                                     \n\nexport class InMemoryStorage<T> implements IStorage<T> {\n  private _items:IStorageItem<T>[] = [];\n  private _maxItems:number;\n\n  constructor(maxItems?:number) {\n    this._maxItems = maxItems > 0 ? maxItems : 250;\n  }\n\n  public save(path:string, value:T):boolean {\n    if (!path || !value) {\n      return false;\n    }\n\n    this.remove(path);\n    if (this._items.push({ created: new Date().getTime(), path: path, value: value }) > this._maxItems) {\n      this._items.shift();\n    }\n\n    return true;\n  }\n\n  public get(path:string):T {\n    let item:IStorageItem<T> = path ? this.getList(`^${path}$`, 1)[0] : null;\n    return item ? item.value : null;\n  }\n\n  public getList(searchPattern?:string, limit?:number):IStorageItem<T>[] {\n    let items = this._items; // Optimization for minifier\n    if (!searchPattern) {\n      return items.slice(0, limit);\n    }\n\n    let regex = new RegExp(searchPattern);\n    let results:IStorageItem<T>[] = [];\n    for (let index = 0; index < items.length; index++) {\n      if (regex.test(items[index].path)) {\n        results.push(items[index]);\n\n        if (results.length >= limit) {\n          break;\n        }\n      }\n    }\n\n    return results;\n  }\n\n  public remove(path:string):void {\n    if (path) {\n      let item = this.getList(`^${path}$`, 1)[0];\n      if (item) {\n        this._items.splice(this._items.indexOf(item), 1);\n      }\n    }\n  }\n}\n\nn\ndeclare var XDomainRequest:{ new (); create(); };\n\nexport class DefaultSubmissionClient implements ISubmissionClient {\n  public configurationVersionHeader:string = 'x-exceptionless-configversion';\n\n  public postEvents(events:IEvent[], config:Configuration, callback:(response:SubmissionResponse) => void, isAppExiting?:boolean):void {\n    let data = Utils.stringify(events, config.dataExclusions);\n    let request = this.createRequest(config, 'POST', '/api/v2/events', data);\n    let cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb, isAppExiting);\n  }\n\n  public postUserDescription(referenceId:string, description:IUserDescription, config:Configuration, callback:(response:SubmissionResponse) => void):void {\n    let path = `/api/v2/events/by-ref/${encodeURIComponent(referenceId)}/user-description`;\n    let data = Utils.stringify(description, config.dataExclusions);\n    let request = this.createRequest(config, 'POST', path, data);\n    let cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public getSettings(config:Configuration, callback:(response:SettingsResponse) => void):void {\n    let request = this.createRequest(config, 'GET', '/api/v2/projects/config');\n    let cb = (status, message, data?, headers?) => {\n      if (status !== 200) {\n        return callback(new SettingsResponse(false, null, -1, null, message));\n      }\n\n      let settings:IClientConfiguration;\n      try {\n        settings = JSON.parse(data);\n      } catch (e) {\n        config.log.error(`Unable to parse settings: '${data}'`);\n      }\n\n      if (!settings || isNaN(settings.version)) {\n        return callback(new SettingsResponse(false, null, -1, null, 'Invalid configuration settings.'));\n      }\n\n      callback(new SettingsResponse(true, settings.settings || {}, settings.version));\n    };\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  private createRequest(config: Configuration, method: string, path: string, data: string = null): SubmissionRequest {\n    return {\n      method,\n      path,\n      data,\n      serverUrl: config.serverUrl,\n      apiKey: config.apiKey,\n      userAgent: config.userAgent\n    };\n  }\n\n  private createSubmissionCallback(config:Configuration, callback:(response:SubmissionResponse) => void) {\n    return (status, message, data?, headers?) => {\n      let settingsVersion:number = headers && parseInt(headers[this.configurationVersionHeader], 10);\n      SettingsManager.checkVersion(settingsVersion, config);\n\n      callback(new SubmissionResponse(status, message));\n    };\n  }\n}\n\nexport class Utils {\n  public static addRange<T>(target:T[], ...values:T[]) {\n    if (!target) {\n      target = [];\n    }\n\n    if (!values || values.length === 0) {\n      return target;\n    }\n\n    for (let index = 0; index < values.length; index++) {\n      if (values[index] && target.indexOf(values[index]) < 0) {\n        target.push(values[index]);\n      }\n    }\n\n    return target;\n  }\n\n  public static getHashCode(source:string): string {\n    if (!source || source.length === 0) {\n      return null;\n    }\n\n    let hash:number = 0;\n    for (let index = 0; index < source.length; index++) {\n      let character   = source.charCodeAt(index);\n      hash  = ((hash << 5) - hash) + character;\n      hash |= 0;\n    }\n\n    return hash.toString();\n  }\n\n  public static getCookies(cookies:string): Object {\n    let result:Object = {};\n\n    let parts:string[] = (cookies || '').split('; ');\n    for (let index = 0; index < parts.length; index++) {\n      let cookie:string[] = parts[index].split('=');\n      result[cookie[0]] = cookie[1];\n    }\n\n    return result;\n  }\n\n  public static guid(): string {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    }\n\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n  }\n\n  public static merge(defaultValues:Object, values:Object) {\n    let result:Object = {};\n\n    for (let key in defaultValues || {}) {\n      if (!!defaultValues[key]) {\n        result[key] = defaultValues[key];\n      }\n    }\n\n    for (let key in values || {}) {\n      if (!!values[key]) {\n        result[key] = values[key];\n      }\n    }\n\n    return result;\n  }\n\n  public static parseVersion(source:string): string {\n    if (!source) {\n      return null;\n    }\n\n    let versionRegex = /(v?((\\d+)\\.(\\d+)(\\.(\\d+))?)(?:-([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?(?:\\+([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?)/;\n    let matches = versionRegex.exec(source);\n    if (matches && matches.length > 0) {\n      return matches[0];\n    }\n\n    return null;\n  }\n\n  public static parseQueryString(query:string) {\n    if (!query || query.length === 0) {\n      return null;\n    }\n\n    let pairs:string[] = query.split('&');\n    if (pairs.length === 0) {\n      return null;\n    }\n\n    let result:Object = {};\n    for (let index = 0; index < pairs.length; index++) {\n      let pair = pairs[index].split('=');\n      result[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n    }\n\n    return result;\n  }\n\n  public static randomNumber(): number {\n    return Math.floor(Math.random() * 9007199254740992);\n  }\n\n  public static stringify(data:any, exclusions?:string[]): string {\n    function checkForMatch(pattern:string, value:string): boolean {\n      if (!pattern || !value || typeof value !== 'string') {\n        return false;\n      }\n\n      let trim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n      pattern = pattern.toLowerCase().replace(trim, '');\n      value = value.toLowerCase().replace(trim, '');\n\n      if (pattern.length <= 0) {\n        return false;\n      }\n\n      let startsWithWildcard:boolean = pattern[0] === '*';\n      if (startsWithWildcard) {\n        pattern = pattern.slice(1);\n      }\n\n      let endsWithWildcard:boolean = pattern[pattern.length - 1] === '*';\n      if (endsWithWildcard) {\n        pattern = pattern.substring(0, pattern.length - 1);\n      }\n\n      if (startsWithWildcard && endsWithWildcard) {\n        return value.indexOf(pattern) !== -1;\n      }\n\n      if (startsWithWildcard) {\n        return value.lastIndexOf(pattern) === (value.length - pattern.length);\n      }\n\n      if (endsWithWildcard) {\n        return value.indexOf(pattern) === 0;\n      }\n\n      return value === pattern;\n    }\n\n    function stringifyImpl(obj:any, excludedKeys:string[]): string {\n      let cache:string[] = [];\n      return JSON.stringify(obj, function(key:string, value:any) {\n        for (let index = 0; index < (excludedKeys || []).length; index++) {\n          if (checkForMatch(excludedKeys[index], key)) {\n            return;\n          }\n        }\n\n        if (typeof value === 'object' && !!value) {\n          if (cache.indexOf(value) !== -1) {\n            // Circular reference found, discard key\n            return;\n          }\n\n          cache.push(value);\n        }\n\n        return value;\n      });\n    }\n\n    if (({}).toString.call(data) === '[object Array]') {\n      let result = [];\n      for (let index = 0; index < data.length; index++) {\n        result[index] = JSON.parse(stringifyImpl(data[index], exclusions || []));\n      }\n\n      return JSON.stringify(result);\n    }\n\n    return stringifyImpl(data, exclusions || []);\n  }\n}\n\nn\nexport class Configuration implements IConfigurationSettings {\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @type {IConfigurationSettings}\n   * @private\n   */\n  private static _defaultSettings:IConfigurationSettings = null;\n\n  /**\n   * A default list of tags that will automatically be added to every\n   * report submitted to the server.\n   *\n   * @type {Array}\n   */\n  public defaultTags:string[] = [];\n\n  /**\n   * A default list of of extended data objects that will automatically\n   * be added to every report submitted to the server.\n   *\n   * @type {{}}\n   */\n  public defaultData:Object = {};\n\n  /**\n   * Whether the client is currently enabled or not. If it is disabled,\n   * submitted errors will be discarded and no data will be sent to the server.\n   *\n   * @returns {boolean}\n   */\n  public enabled:boolean = true;\n\n  public environmentInfoCollector:IEnvironmentInfoCollector;\n  public errorParser:IErrorParser;\n  public lastReferenceIdManager:ILastReferenceIdManager = new DefaultLastReferenceIdManager();\n  public log:ILog;\n  public moduleCollector:IModuleCollector;\n  public requestInfoCollector:IRequestInfoCollector;\n\n  /**\n   * Maximum number of events that should be sent to the server together in a batch. (Defaults to 50)\n   */\n  public submissionBatchSize:number;\n  public submissionAdapter:ISubmissionAdapter;\n  public submissionClient:ISubmissionClient;\n\n  /**\n   * Contains a dictionary of custom settings that can be used to control\n   * the client and will be automatically updated from the server.\n   */\n  public settings:Object = {};\n\n  public storage:IStorage<Object>;\n\n  public queue:IEventQueue;\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @type {Array}\n   * @private\n   */\n  private _plugins:IEventPlugin[] = [];\n\n  constructor(configSettings?:IConfigurationSettings) {\n    function inject(fn:any) {\n      return typeof fn === 'function' ? fn(this) : fn;\n    }\n\n    configSettings = Utils.merge(Configuration.defaults, configSettings);\n\n    this.log = inject(configSettings.log) || new NullLog();\n    this.apiKey = configSettings.apiKey;\n    this.serverUrl = configSettings.serverUrl;\n\n    this.environmentInfoCollector = inject(configSettings.environmentInfoCollector);\n    this.errorParser = inject(configSettings.errorParser);\n    this.lastReferenceIdManager = inject(configSettings.lastReferenceIdManager) || new DefaultLastReferenceIdManager();\n    this.moduleCollector = inject(configSettings.moduleCollector);\n    this.requestInfoCollector = inject(configSettings.requestInfoCollector);\n    this.submissionBatchSize = inject(configSettings.submissionBatchSize) || 50;\n    this.submissionAdapter = inject(configSettings.submissionAdapter);\n    this.submissionClient = inject(configSettings.submissionClient) || new DefaultSubmissionClient();\n    this.storage = inject(configSettings.storage) || new InMemoryStorage<any>();\n    this.queue = inject(configSettings.queue) || new DefaultEventQueue(this);\n\n    SettingsManager.applySavedServerSettings(this);\n    EventPluginManager.addDefaultPlugins(this);\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @type {string}\n   * @private\n   */\n  private _apiKey:string;\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @returns {string}\n   */\n  public get apiKey():string {\n    return this._apiKey;\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @param value\n   */\n  public set apiKey(value:string) {\n    this._apiKey = value || null;\n    this.log.info(`apiKey: ${this._apiKey}`);\n  }\n\n  /**\n   * Returns true if the apiKey is valid.\n   * @returns {boolean}\n   */\n  public get isValid():boolean {\n    return !!this.apiKey && this.apiKey.length >= 10;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _serverUrl:string = 'https://collector.exceptionless.io';\n\n  /**\n   * The server url that all events will be sent to.\n   * @returns {string}\n   */\n  public get serverUrl():string {\n    return this._serverUrl;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @param value\n   */\n  public set serverUrl(value:string) {\n    if (!!value) {\n      this._serverUrl = value;\n      this.log.info(`serverUrl: ${this._serverUrl}`);\n    }\n  }\n\n  /**\n   * A list of exclusion patterns.\n   * @type {Array}\n   * @private\n   */\n  private _dataExclusions:string[] = [];\n\n  /**\n   *  A list of exclusion patterns that will automatically remove any data that\n   *  matches them from any data submitted to the server.\n   *\n   *  For example, entering CreditCard will remove any extended data properties,\n   *  form fields, cookies and query parameters from the report.\n   *\n   * @returns {string[]}\n   */\n  public get dataExclusions():string[] {\n    let exclusions:string = this.settings['@@DataExclusions'];\n    return this._dataExclusions.concat(exclusions && exclusions.split(',') || []);\n  }\n\n  /**\n   * Add items to the list of exclusion patterns that will automatically remove any\n   * data that matches them from any data submitted to the server.\n   *\n   * For example, entering CreditCard will remove any extended data properties, form\n   * fields, cookies and query parameters from the report.\n   *\n   * @param exclusions\n   */\n  public addDataExclusions(...exclusions:string[]) {\n    this._dataExclusions = Utils.addRange<string>(this._dataExclusions, ...exclusions);\n  }\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @returns {IEventPlugin[]}\n   */\n  public get plugins():IEventPlugin[] {\n    return this._plugins.sort((p1:IEventPlugin, p2:IEventPlugin) => {\n      return (p1.priority < p2.priority) ? -1 : (p1.priority > p2.priority) ? 1 : 0;\n    });\n  }\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param plugin\n   */\n  public addPlugin(plugin:IEventPlugin): void;\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param name The name used to identify the plugin.\n   * @param priority Used to determine plugins priority.\n   * @param pluginAction A function that is run.\n   */\n  public addPlugin(name:string, priority:number, pluginAction:(context:EventPluginContext, next?:() => void) => void): void;\n  public addPlugin(pluginOrName:IEventPlugin|string, priority?:number, pluginAction?:(context:EventPluginContext, next?:() => void) => void): void {\n    let plugin:IEventPlugin = !!pluginAction ? { name: <string>pluginOrName, priority: priority, run: pluginAction } : <IEventPlugin>pluginOrName;\n    if (!plugin || !plugin.run) {\n      this.log.error('Add plugin failed: Run method not defined');\n      return;\n    }\n\n    if (!plugin.name) {\n      plugin.name = Utils.guid();\n    }\n\n    if (!plugin.priority) {\n      plugin.priority = 0;\n    }\n\n    let pluginExists:boolean = false;\n    let plugins = this._plugins; // optimization for minifier.\n    for (let index = 0; index < plugins.length; index++) {\n      if (plugins[index].name === plugin.name) {\n        pluginExists = true;\n        break;\n      }\n    }\n\n    if (!pluginExists) {\n      plugins.push(plugin);\n    }\n  }\n\n  /**\n   * Remove the plugin from this configuration.\n   * @param plugin\n   */\n  public removePlugin(plugin:IEventPlugin): void;\n\n  /**\n   * Remove an plugin by key from this configuration.\n   * @param name\n   */\n  public removePlugin(name:string): void;\n  public removePlugin(pluginOrName:IEventPlugin|string): void {\n    let name:string = typeof pluginOrName === 'string' ? pluginOrName : pluginOrName.name;\n    if (!name) {\n      this.log.error('Remove plugin failed: Plugin name not defined');\n      return;\n    }\n\n    let plugins = this._plugins; // optimization for minifier.\n    for (let index = 0; index < plugins.length; index++) {\n      if (plugins[index].name === name) {\n        plugins.splice(index, 1);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Automatically set the application version for events.\n   * @param version\n   */\n  public setVersion(version:string): void {\n    if (!!version) {\n      this.defaultData['@version'] = version;\n    }\n  }\n\n  public setUserIdentity(userInfo:IUserInfo): void;\n  public setUserIdentity(identity:string): void;\n  public setUserIdentity(identity:string, name:string): void;\n  public setUserIdentity(userInfoOrIdentity:IUserInfo|string, name?:string): void {\n    const USER_KEY:string = '@user'; // optimization for minifier.\n    let userInfo:IUserInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name: name };\n\n    let shouldRemove:boolean = !userInfo || (!userInfo.identity && !userInfo.name);\n    if (shouldRemove) {\n      delete this.defaultData[USER_KEY];\n    } else {\n      this.defaultData[USER_KEY] = userInfo;\n    }\n\n    this.log.info(`user identity: ${shouldRemove ? 'null' : userInfo.identity}`);\n  }\n\n  /**\n   * Used to identify the client that sent the events to the server.\n   * @returns {string}\n   */\n  public get userAgent():string {\n    return 'exceptionless-js/1.0.0.0';\n  }\n\n  /**\n   * Automatically set a reference id for error events.\n   */\n  public useReferenceIds(): void {\n    this.addPlugin(new ReferenceIdPlugin());\n  }\n\n  // TODO: Support a min log level.\n  public useDebugLogger(): void {\n    this.log = new ConsoleLog();\n  }\n\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @returns {IConfigurationSettings}\n   */\n  public static get defaults() {\n    if (Configuration._defaultSettings === null) {\n      Configuration._defaultSettings = {};\n    }\n\n    return Configuration._defaultSettings;\n  }\n}\n\n                                                                                                                                                                                                                                                                                                               \n\nexport class EventBuilder {\n  public target:IEvent;\n  public client:ExceptionlessClient;\n  public pluginContextData:ContextData;\n\n  private _validIdentifierErrorMessage:string = 'must contain between 8 and 100 alphanumeric or \\'-\\' characters.'; // optimization for minifier.\n\n  constructor(event:IEvent, client:ExceptionlessClient, pluginContextData?:ContextData) {\n    this.target = event;\n    this.client = client;\n    this.pluginContextData = pluginContextData || new ContextData();\n  }\n\n  public setType(type:string): EventBuilder {\n    if (!!type) {\n      this.target.type = type;\n    }\n\n    return this;\n  }\n\n  public setSource(source:string): EventBuilder {\n    if (!!source) {\n      this.target.source = source;\n    }\n\n    return this;\n  }\n\n  public setSessionId(sessionId:string): EventBuilder {\n    if (!this.isValidIdentifier(sessionId)) {\n      throw new Error(`SessionId ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.target.session_id = sessionId;\n    return this;\n  }\n\n  public setReferenceId(referenceId:string): EventBuilder {\n    if (!this.isValidIdentifier(referenceId)) {\n      throw new Error(`ReferenceId ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.target.reference_id = referenceId;\n    return this;\n  }\n\n  public setMessage(message:string): EventBuilder {\n    if (!!message) {\n      this.target.message = message;\n    }\n\n    return this;\n  }\n\n  public setGeo(latitude: number, longitude: number): EventBuilder {\n    if (latitude < -90.0 || latitude > 90.0) {\n      throw new Error('Must be a valid latitude value between -90.0 and 90.0.');\n    }\n\n    if (longitude < -180.0 || longitude > 180.0) {\n      throw new Error('Must be a valid longitude value between -180.0 and 180.0.');\n    }\n\n    this.target.geo = `${latitude},${longitude}`;\n    return this;\n  }\n\n  public setUserIdentity(userInfo:IUserInfo): EventBuilder;\n  public setUserIdentity(identity:string): EventBuilder;\n  public setUserIdentity(identity:string, name:string): EventBuilder;\n  public setUserIdentity(userInfoOrIdentity:IUserInfo|string, name?:string): EventBuilder {\n    let userInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name: name };\n    if (!userInfo || (!userInfo.identity && !userInfo.name)) {\n      return this;\n    }\n\n    this.setProperty('@user', userInfo);\n    return this;\n  }\n\n  public setValue(value:number): EventBuilder {\n    if (!!value) {\n      this.target.value = value;\n    }\n\n    return this;\n  }\n\n  public addTags(...tags:string[]): EventBuilder {\n    this.target.tags = Utils.addRange<string>(this.target.tags, ...tags);\n    return this;\n  }\n\n  public setProperty(name:string, value:any): EventBuilder {\n    if (!name || (value === undefined || value == null)) {\n      return this;\n    }\n\n    if (!this.target.data) {\n      this.target.data = {};\n    }\n\n    this.target.data[name] = value;\n    return this;\n  }\n\n  public markAsCritical(critical:boolean): EventBuilder {\n    if (critical) {\n      this.addTags('Critical');\n    }\n\n    return this;\n  }\n\n  public addRequestInfo(request:Object): EventBuilder {\n    if (!!request) {\n      this.pluginContextData['@request'] = request;\n    }\n\n    return this;\n  }\n\n  public submit(callback?:(context:EventPluginContext) => void): void {\n    this.client.submitEvent(this.target, this.pluginContextData, callback);\n  }\n\n  private isValidIdentifier(value:string): boolean {\n    if (!value) {\n      return true;\n    }\n\n    if (value.length < 8 || value.length > 100) {\n      return false;\n    }\n\n    for (var index = 0; index < value.length; index++) {\n      let code = value.charCodeAt(index);\n      let isDigit = (code >= 48) && (code <= 57);\n      let isLetter = ((code >= 65) && (code <= 90)) || ((code >= 97) && (code <= 122));\n      let isMinus = code === 45;\n\n      if (!(isDigit || isLetter) && !isMinus) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nexport interface IUserDescription {\n  email_address?:string;\n  description?:string;\n  data?:any;\n}\n\nexport class ContextData {\n  public setException(exception:Error): void {\n    if (exception) {\n      this['@@_Exception'] = exception;\n    }\n  }\n\n  public get hasException(): boolean {\n    return !!this['@@_Exception'];\n  }\n\n  public getException(): Error {\n    return this['@@_Exception'] || null;\n  }\n\n  public markAsUnhandledError(): void {\n    this['@@_IsUnhandledError'] = true;\n  }\n\n  public get isUnhandledError(): boolean {\n    return !!this['@@_IsUnhandledError'];\n  }\n\n  public setSubmissionMethod(method:string): void {\n    if (method) {\n      this['@@_SubmissionMethod'] = method;\n    }\n  }\n\n  public getSubmissionMethod(): string {\n    return this['@@_SubmissionMethod'] || null;\n  }\n}\n\nexport class SubmissionResponse {\n  success:boolean = false;\n  badRequest:boolean = false;\n  serviceUnavailable:boolean = false;\n  paymentRequired:boolean = false;\n  unableToAuthenticate:boolean = false;\n  notFound:boolean = false;\n  requestEntityTooLarge:boolean = false;\n  statusCode:number;\n  message:string;\n\n  constructor(statusCode:number, message?:string) {\n    this.statusCode = statusCode;\n    this.message = message;\n\n    this.success = statusCode >= 200 && statusCode <= 299;\n    this.badRequest = statusCode === 400;\n    this.serviceUnavailable = statusCode === 503;\n    this.paymentRequired = statusCode === 402;\n    this.unableToAuthenticate = statusCode === 401 || statusCode === 403;\n    this.notFound = statusCode === 404;\n    this.requestEntityTooLarge = statusCode === 413;\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n\nexport class ExceptionlessClient {\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   * @private\n   */\n  private static _instance:ExceptionlessClient = null;\n\n  public config:Configuration;\n\n  constructor();\n  constructor(settings:IConfigurationSettings);\n  constructor(apiKey:string, serverUrl?:string);\n  constructor(settingsOrApiKey?:IConfigurationSettings|string, serverUrl?:string) {\n    if (typeof settingsOrApiKey !== 'object') {\n      this.config = new Configuration(settingsOrApiKey);\n    } else {\n      this.config = new Configuration({ apiKey: <string>settingsOrApiKey, serverUrl: serverUrl });\n    }\n  }\n\n  public createException(exception:Error): EventBuilder {\n    let pluginContextData = new ContextData();\n    pluginContextData.setException(exception);\n    return this.createEvent(pluginContextData).setType('error');\n  }\n\n  public submitException(exception:Error, callback?:(context:EventPluginContext) => void): void {\n    this.createException(exception).submit(callback);\n  }\n\n  public createUnhandledException(exception:Error, submissionMethod?:string): EventBuilder {\n    let builder = this.createException(exception);\n    builder.pluginContextData.markAsUnhandledError();\n    builder.pluginContextData.setSubmissionMethod(submissionMethod);\n\n    return builder;\n  }\n\n  public submitUnhandledException(exception:Error, submissionMethod?:string, callback?:(context:EventPluginContext) => void) {\n    this.createUnhandledException(exception, submissionMethod).submit(callback);\n  }\n\n  public createFeatureUsage(feature:string): EventBuilder {\n    return this.createEvent().setType('usage').setSource(feature);\n  }\n\n  public submitFeatureUsage(feature:string, callback?:(context:EventPluginContext) => void): void {\n    this.createFeatureUsage(feature).submit(callback);\n  }\n\n  public createLog(message:string): EventBuilder;\n  public createLog(source:string, message:string): EventBuilder;\n  public createLog(source:string, message:string, level:string): EventBuilder;\n  public createLog(sourceOrMessage:string, message?:string, level?:string): EventBuilder {\n    let builder = this.createEvent().setType('log');\n\n    if (message && level) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message).setProperty('@level', level);\n    } else if (message) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message);\n    } else {\n      // TODO: Look into using https://www.stevefenton.co.uk/Content/Blog/Date/201304/Blog/Obtaining-A-Class-Name-At-Runtime-In-TypeScript/\n      let caller:any = arguments.callee.caller;\n      builder = builder.setSource(caller && caller.name).setMessage(sourceOrMessage);\n    }\n\n    return builder;\n  }\n\n  public submitLog(message:string): void;\n  public submitLog(source:string, message:string): void;\n  public submitLog(source:string, message:string, level:string, callback?:(context:EventPluginContext) => void): void;\n  public submitLog(sourceOrMessage:string, message?:string, level?:string, callback?:(context:EventPluginContext) => void): void {\n    this.createLog(sourceOrMessage, message, level).submit(callback);\n  }\n\n  public createNotFound(resource:string): EventBuilder {\n    return this.createEvent().setType('404').setSource(resource);\n  }\n\n  public submitNotFound(resource:string, callback?:(context:EventPluginContext) => void): void {\n    this.createNotFound(resource).submit(callback);\n  }\n\n  public createSessionStart(sessionId:string): EventBuilder {\n    return this.createEvent().setType('start').setSessionId(sessionId);\n  }\n\n  public submitSessionStart(sessionId:string, callback?:(context:EventPluginContext) => void): void {\n    this.createSessionStart(sessionId).submit(callback);\n  }\n\n  public createSessionEnd(sessionId:string): EventBuilder {\n    return this.createEvent().setType('end').setSessionId(sessionId);\n  }\n\n  public submitSessionEnd(sessionId:string, callback?:(context:EventPluginContext) => void): void {\n    this.createSessionEnd(sessionId).submit(callback);\n  }\n\n  public createEvent(pluginContextData?:ContextData): EventBuilder {\n    return new EventBuilder({ date: new Date() }, this, pluginContextData);\n  }\n\n  /**\n   * Submits the event to be sent to the server.\n   * @param event The event data.\n   * @param pluginContextData Any contextual data objects to be used by Exceptionless plugins to gather default information for inclusion in the report information.\n   * @param callback\n   */\n  public submitEvent(event:IEvent, pluginContextData?:ContextData, callback?:(context:EventPluginContext) => void): void {\n    function cancelled(context:EventPluginContext) {\n      if (!!context) {\n        context.cancelled = true;\n      }\n\n      return !!callback && callback(context);\n    }\n\n    let context = new EventPluginContext(this, event, pluginContextData);\n    if (!event) {\n      return cancelled(context);\n    }\n\n    if (!this.config.enabled) {\n      this.config.log.info('Event submission is currently disabled.');\n      return cancelled(context);\n    }\n\n    if (!event.data) {\n      event.data = {};\n    }\n\n    if (!event.tags || !event.tags.length) {\n      event.tags = [];\n    }\n\n    EventPluginManager.run(context, function (ctx:EventPluginContext) {\n      let ev = ctx.event;\n      if (!ctx.cancelled) {\n        // ensure all required data\n        if (!ev.type || ev.type.length === 0) {\n          ev.type = 'log';\n        }\n\n        if (!ev.date) {\n          ev.date = new Date();\n        }\n\n        let config = ctx.client.config;\n        config.queue.enqueue(ev);\n\n        if (ev.reference_id && ev.reference_id.length > 0) {\n          ctx.log.info(`Setting last reference id '${ev.reference_id}'`);\n          config.lastReferenceIdManager.setLast(ev.reference_id);\n        }\n      }\n\n      !!callback && callback(ctx);\n    });\n  }\n\n  /**\n   * Updates the user's email address and description of an event for the specified reference id.\n   * @param referenceId The reference id of the event to update.\n   * @param email The user's email address to set on the event.\n   * @param description The user's description of the event.\n   */\n  public updateUserEmailAndDescription(referenceId:string, email:string, description:string, callback?:(response:SubmissionResponse) => void) {\n    if (!referenceId || !email || !description || !this.config.enabled) {\n      return !!callback && callback(new SubmissionResponse(500, 'cancelled'));\n    }\n\n    let userDescription:IUserDescription = { email_address: email, description: description };\n    this.config.submissionClient.postUserDescription(referenceId, userDescription, this.config, (response:SubmissionResponse) => {\n      if (!response.success) {\n        this.config.log.error(`Failed to submit user email and description for event '${referenceId}': ${response.statusCode} ${response.message}`);\n      }\n\n      !!callback && callback(response);\n    });\n  }\n\n  /**\n   * Gets the last event client id that was submitted to the server.\n   * @returns {string} The event client id.\n   */\n  public getLastReferenceId(): string {\n    return this.config.lastReferenceIdManager.getLast();\n  }\n\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   */\n  public static get default() {\n    if (ExceptionlessClient._instance === null) {\n      ExceptionlessClient._instance = new ExceptionlessClient(null);\n    }\n\n    return ExceptionlessClient._instance;\n  }\n}\n\nexport interface IModule {\n  data?:any;\n\n  module_id?:number;\n  name?:string;\n  version?:string;\n  is_entry?:boolean;\n  created_date?:Date;\n  modified_date?:Date;\n}\n\nexport interface IRequestInfo {\n  user_agent?:string;\n  http_method?:string;\n  is_secure?:boolean;\n  host?:string;\n  port?:number;\n  path?:string;\n  referrer?:string;\n  client_ip_address?:string;\n  cookies?:any;\n  post_data?:any;\n  query_string?:any;\n  data?:any;\n}\n\nexport interface IEnvironmentInfo {\n  processor_count?:number;\n  total_physical_memory?:number;\n  available_physical_memory?:number;\n  command_line?:string;\n  process_name?:string;\n  process_id?:string;\n  process_memory_size?:number;\n  thread_id?:string;\n  architecture?:string;\n  o_s_name?:string;\n  o_s_version?:string;\n  ip_address?:string;\n  machine_name?:string;\n  install_id?:string;\n  runtime_version?:string;\n  data?:any;\n}\n\nexport interface IParameter {\n  data?:any;\n  generic_arguments?:string[];\n\n  name?:string;\n  type?:string;\n  type_namespace?:string;\n}\n\n                                          \n\nexport interface IMethod {\n  data?:any;\n  generic_arguments?:string[];\n  parameters?:IParameter[];\n\n  is_signature_target?:boolean;\n  declaring_namespace?:string;\n  declaring_type?:string;\n  name?:string;\n  module_id?:number;\n}\n\n                                    \n\nexport interface IStackFrame extends IMethod {\n  file_name?:string;\n  line_number?:number;\n  column?:number;\n}\n\n                                                                                 \n\nexport interface IInnerError {\n  message?:string;\n  type?:string;\n  code?:string;\n  data?:any;\n  inner?:IInnerError;\n  stack_trace?:IStackFrame[];\n  target_method?:IMethod;\n}\n\n                                                                                                           \n\nexport class ConfigurationDefaultsPlugin implements IEventPlugin {\n  public priority:number = 10;\n  public name:string = 'ConfigurationDefaultsPlugin';\n\n  public run(context:EventPluginContext, next?:() => void): void {\n    let defaultTags:string[] = context.client.config.defaultTags || [];\n    for (let index = 0; index < defaultTags.length; index++) {\n      let tag = defaultTags[index];\n      if (!!tag && context.event.tags.indexOf(tag) < 0) {\n        context.event.tags.push(tag);\n      }\n    }\n\n    let defaultData:Object = context.client.config.defaultData || {};\n    for (let key in defaultData) {\n      if (!!defaultData[key]) {\n        context.event.data[key] = defaultData[key];\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                           \n\nexport class ErrorPlugin implements IEventPlugin {\n  public priority: number = 30;\n  public name: string = 'ErrorPlugin';\n  public ignoredProperties: string[] = [\n    'arguments',\n    'column',\n    'columnNumber',\n    'description',\n    'fileName',\n    'message',\n    'name',\n    'number',\n    'line',\n    'lineNumber',\n    'opera#sourceloc',\n    'sourceId',\n    'sourceURL',\n    'stack',\n    'stackArray',\n    'stacktrace'\n  ];\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\n    const EXTRA_PROPERTIES_KEY: string = '@ext';\n\n    let exception = context.contextData.getException();\n    if (!!exception) {\n      context.event.type = 'error';\n\n      if (!context.event.data[ERROR_KEY]) {\n        let parser = context.client.config.errorParser;\n        if (!parser) {\n          throw new Error('No error parser was defined.');\n        }\n\n        let result = parser.parse(context, exception);\n        if (!!result) {\n          let additionalData = this.getAdditionalData(exception);\n          if (!!additionalData) {\n            if (!result.data) {\n              result.data = {};\n            }\n            result.data[EXTRA_PROPERTIES_KEY] = additionalData;\n          }\n\n          context.event.data[ERROR_KEY] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n\n  private getAdditionalData(exception: Error): { [key: string]: any } {\n    let additionalData = {};\n    for (var key in exception) {\n      if (this.ignoredProperties.indexOf(key) >= 0) {\n        continue;\n      }\n      let value = exception[key];\n      if (typeof value !== 'function') {\n        additionalData[key] = value;\n      }\n    }\n\n    return Object.getOwnPropertyNames(additionalData).length\n      ? additionalData\n      : null;\n  }\n}\n\n                                                                                                                                                           \n\nexport class ModuleInfoPlugin implements IEventPlugin {\n  public priority:number = 50;\n  public name:string = 'ModuleInfoPlugin';\n\n  public run(context:EventPluginContext, next?:() => void): void {\n    const ERROR_KEY:string = '@error'; // optimization for minifier.\n\n    let collector = context.client.config.moduleCollector;\n    if (context.event.data[ERROR_KEY] && !context.event.data['@error'].modules && !!collector) {\n      let modules:IModule[] = collector.getModules(context);\n      if (modules && modules.length > 0) {\n        context.event.data[ERROR_KEY].modules = modules;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                     \n\nexport class RequestInfoPlugin implements IEventPlugin {\n  public priority:number = 70;\n  public name:string = 'RequestInfoPlugin';\n\n  public run(context:EventPluginContext, next?:() => void): void {\n    const REQUEST_KEY:string = '@request'; // optimization for minifier.\n\n    let collector = context.client.config.requestInfoCollector;\n    if (!context.event.data[REQUEST_KEY] && !!collector) {\n      let requestInfo:IRequestInfo = collector.getRequestInfo(context);\n      if (!!requestInfo) {\n        context.event.data[REQUEST_KEY] = requestInfo;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                             \n\nexport class EnvironmentInfoPlugin implements IEventPlugin {\n  public priority:number = 80;\n  public name:string = 'EnvironmentInfoPlugin';\n\n  public run(context:EventPluginContext, next?:() => void): void {\n    const ENVIRONMENT_KEY:string = '@environment'; // optimization for minifier.\n\n    let collector = context.client.config.environmentInfoCollector;\n    if (!context.event.data[ENVIRONMENT_KEY] && collector) {\n      let environmentInfo:IEnvironmentInfo = collector.getEnvironmentInfo(context);\n      if (!!environmentInfo) {\n        context.event.data[ENVIRONMENT_KEY] = environmentInfo;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                           \n\nexport class SubmissionMethodPlugin implements IEventPlugin {\n  public priority:number = 100;\n  public name:string = 'SubmissionMethodPlugin';\n\n  public run(context:EventPluginContext, next?:() => void): void {\n    let submissionMethod:string = context.contextData.getSubmissionMethod();\n    if (!!submissionMethod) {\n      context.event.data['@submission_method'] = submissionMethod;\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                                                                                        \n\nconst ERROR_KEY: string = '@error';\nconst WINDOW_MILLISECONDS = 2000;\nconst MAX_QUEUE_LENGTH = 10;\n\nexport class DuplicateCheckerPlugin implements IEventPlugin {\n  public priority: number = 40;\n  public name: string = 'DuplicateCheckerPlugin';\n\n  private recentlyProcessedErrors: TimestampedHash[] = [];\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    if (context.event.type === 'error') {\n      let error = context.event.data[ERROR_KEY];\n      let isDuplicate = this.checkDuplicate(error, context.log);\n      if (isDuplicate) {\n        context.cancelled = true;\n        return;\n      }\n    }\n\n    next && next();\n  }\n\n  private getNow() {\n    return Date.now();\n  }\n\n  private checkDuplicate(error: IInnerError, log: ILog): boolean {\n    let now = this.getNow();\n    let repeatWindow = now - WINDOW_MILLISECONDS;\n    let hashCode: number;\n    while (error) {\n      hashCode = getHashCodeForError(error);\n\n      // make sure that we don't process the same error multiple times within the repeat window\n      if (hashCode && this.recentlyProcessedErrors.some(h =>\n        h.hash === hashCode && h.timestamp >= repeatWindow)) {\n        log.info(`Ignoring duplicate error event: hash=${hashCode}`);\n        return true;\n      }\n\n      // add this exception to our list of recent errors that we have processed\n      this.recentlyProcessedErrors.push({ hash: hashCode, timestamp: now });\n\n      // only keep the last 10 recent errors\n      while (this.recentlyProcessedErrors.length > MAX_QUEUE_LENGTH) {\n        this.recentlyProcessedErrors.shift();\n      }\n\n      error = error.inner;\n    }\n\n    return false;\n  }\n}\n\ninterface TimestampedHash {\n  hash: number;\n  timestamp: number;\n}\n\nfunction getHashCodeForError(error: IInnerError): number {\n  if (!error.stack_trace) {\n    return null;\n  }\n\n  let stack = JSON.stringify(error.stack_trace);\n  return getHashCode(stack);\n}\n\nfunction getHashCode(s: string): number {\n  let hash = 0, length = s.length, char;\n  for (let i = 0; i < length; i++) {\n    char = s.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash |= 0;\n  }\n  return hash;\n}\n\n                                                                                 \n\nexport interface IError extends IInnerError {\n  modules?:IModule[];\n}\n\nexport interface IStorageItem<T> {\n  created:number;\n  path:string;\n  value:T;\n}\n\nexport interface SubmissionCallback {\n  (status: number, message: string, data?: string, headers?: Object): void;\n}\n\nexport interface SubmissionRequest {\n  serverUrl: string;\n  apiKey: string;\n  userAgent: string;\n  method: string;\n  path: string;\n  data: string;\n}\n\nexport class SettingsResponse {\n  success:boolean = false;\n  settings:any;\n  settingsVersion:number = -1;\n  message:string;\n  exception:any;\n\n  constructor(success:boolean, settings:any, settingsVersion:number = -1, exception:any = null, message:string = null) {\n    this.success = success;\n    this.settings = settings;\n    this.settingsVersion = settingsVersion;\n    this.exception = exception;\n    this.message = message;\n  }\n}\n\nexport interface IClientConfiguration {\n  settings:Object;\n  version:number;\n}\n\n                                                                                                                                                                                                                                                                     \n\nexport class DefaultErrorParser implements IErrorParser {\n  public parse(context:EventPluginContext, exception:Error): IError {\n    function getParameters(parameters:string|string[]): IParameter[] {\n      let params:string[] = (typeof parameters === 'string' ? [parameters] : parameters) || [];\n\n      let result:IParameter[] = [];\n      for (let index = 0; index < params.length; index++) {\n        result.push({ name: params[index] });\n      }\n\n      return result;\n    }\n\n    function getStackFrames(stackFrames:TraceKit.StackFrame[]): IStackFrame[] {\n      const ANONYMOUS:string = '<anonymous>';\n      let frames:IStackFrame[] = [];\n\n      for (let index = 0; index < stackFrames.length; index++) {\n        let frame = stackFrames[index];\n        frames.push({\n          name: (frame.func || ANONYMOUS).replace('?', ANONYMOUS),\n          parameters: getParameters(frame.args),\n          file_name: frame.url,\n          line_number: frame.line || 0,\n          column: frame.column || 0\n        });\n      }\n\n      return frames;\n    }\n\n    const TRACEKIT_STACK_TRACE_KEY:string = '@@_TraceKit.StackTrace'; // optimization for minifier.\n\n    let stackTrace:TraceKit.StackTrace = !!context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      ? context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      : TraceKit.computeStackTrace(exception, 25);\n\n    if (!stackTrace) {\n      throw new Error('Unable to parse the exceptions stack trace.');\n    }\n\n    return {\n      type: stackTrace.name,\n      message: stackTrace.message || exception.message,\n      stack_trace: getStackFrames(stackTrace.stack || [])\n    };\n  }\n}\n\n                                                                                                                                                                                                         \n\nexport class DefaultModuleCollector implements IModuleCollector {\n  public getModules(context:EventPluginContext): IModule[] {\n    if (document && document.getElementsByTagName) {\n      return null;\n    }\n\n    let modules:IModule[] = [];\n    let scripts = document.getElementsByTagName('script');\n    if (scripts && scripts.length > 0) {\n      for (let index = 0; index < scripts.length; index++) {\n        if (scripts[index].src) {\n          modules.push({\n            module_id: index,\n            name: scripts[index].src,\n            version: Utils.parseVersion(scripts[index].src)\n          });\n        } else if (!!scripts[index].innerHTML) {\n          modules.push({\n            module_id: index,\n            name: 'Script Tag',\n            version: Utils.getHashCode(scripts[index].innerHTML)\n          });\n        }\n      }\n    }\n\n    return modules;\n  }\n}\n\n                                                                                                                                                                                                                             \n\nexport class DefaultRequestInfoCollector implements IRequestInfoCollector {\n  public getRequestInfo(context:EventPluginContext): IRequestInfo {\n    if (!document || !navigator || !location) {\n      return null;\n    }\n\n    let requestInfo:IRequestInfo = {\n      user_agent: navigator.userAgent,\n      is_secure: location.protocol === 'https:',\n      host: location.hostname,\n      port: location.port && location.port !== '' ? parseInt(location.port, 10) : 80,\n      path: location.pathname,\n      // client_ip_address: 'TODO',\n      cookies: Utils.getCookies(document.cookie),\n      query_string: Utils.parseQueryString(location.search.substring(1))\n    };\n\n    if (document.referrer && document.referrer !== '') {\n      requestInfo.referrer = document.referrer;\n    }\n\n    return requestInfo;\n  }\n}\n\n                                                                                                                                                                              \n\ndeclare var XDomainRequest: { new (); create(); };\n\nexport class DefaultSubmissionAdapter implements ISubmissionAdapter {\n  public sendRequest(request: SubmissionRequest, callback: SubmissionCallback, isAppExiting?:boolean) {\n    // TODO: Handle sending events when app is exiting with send beacon.\n    const TIMEOUT: string = 'timeout';  // optimization for minifier.\n    const LOADED: string = 'loaded';  // optimization for minifier.\n    const WITH_CREDENTIALS: string = 'withCredentials';  // optimization for minifier.\n\n    let isCompleted: boolean = false;\n    let useSetTimeout: boolean = false;\n    function complete(mode: string, xhr: XMLHttpRequest) {\n      function parseResponseHeaders(headerStr) {\n        function trim(value) {\n          return value.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n        }\n\n        let headers = {};\n        let headerPairs = (headerStr || '').split('\\u000d\\u000a');\n        for (let index: number = 0; index < headerPairs.length; index++) {\n          let headerPair = headerPairs[index];\n          // Can't use split() here because it does the wrong thing\n          // if the header value has the string \": \" in it.\n          let separator = headerPair.indexOf('\\u003a\\u0020');\n          if (separator > 0) {\n            headers[trim(headerPair.substring(0, separator).toLowerCase())] = headerPair.substring(separator + 2);\n          }\n        }\n\n        return headers;\n      }\n\n      if (isCompleted) {\n        return;\n      }\n\n      isCompleted = true;\n\n      let message: string = xhr.statusText;\n      let responseText: string = xhr.responseText;\n      let status: number = xhr.status;\n\n      if (mode === TIMEOUT || status === 0) {\n        message = 'Unable to connect to server.';\n        status = 0;\n      } else if (mode === LOADED && !status) {\n        status = request.method === 'POST' ? 202 : 200;\n      } else if (status < 200 || status > 299) {\n        let responseBody: any = xhr.responseBody;\n        if (!!responseBody && !!responseBody.message) {\n          message = responseBody.message;\n        } else if (!!responseText && responseText.indexOf('message') !== -1) {\n          try {\n            message = JSON.parse(responseText).message;\n          } catch (e) {\n            message = responseText;\n          }\n        }\n      }\n\n      callback(status || 500, message || '', responseText, parseResponseHeaders(xhr.getAllResponseHeaders && xhr.getAllResponseHeaders()));\n    }\n\n    function createRequest(userAgent:string, method: string, url: string): XMLHttpRequest {\n      let xhr: any = new XMLHttpRequest();\n      if (WITH_CREDENTIALS in xhr) {\n        xhr.open(method, url, true);\n\n        xhr.setRequestHeader('X-Exceptionless-Client', userAgent);\n        if (method === 'POST') {\n          xhr.setRequestHeader('Content-Type', 'application/json');\n        }\n      } else if (typeof XDomainRequest !== 'undefined') {\n        useSetTimeout = true;\n        xhr = new XDomainRequest();\n        xhr.open(method, location.protocol === 'http:' ? url.replace('https:', 'http:') : url);\n      } else {\n        xhr = null;\n      }\n\n      if (xhr) {\n        xhr.timeout = 10000;\n      }\n\n      return xhr;\n    }\n\n    let url = `${request.serverUrl}${request.path}?access_token=${encodeURIComponent(request.apiKey) }`;\n    let xhr = createRequest(request.userAgent, request.method || 'POST', url);\n    if (!xhr) {\n      return callback(503, 'CORS not supported.');\n    }\n\n    if (WITH_CREDENTIALS in xhr) {\n      xhr.onreadystatechange = () => {\n        // xhr not ready.\n        if (xhr.readyState !== 4) {\n          return;\n        }\n\n        complete(LOADED, xhr);\n      };\n    }\n\n    xhr.onprogress = () => {};\n    xhr.ontimeout = () => complete(TIMEOUT, xhr);\n    xhr.onerror = () => complete('error', xhr);\n    xhr.onload = () => complete(LOADED, xhr);\n\n    if (useSetTimeout) {\n      setTimeout(() => xhr.send(request.data), 500);\n    } else {\n      xhr.send(request.data);\n    }\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n\nfunction getDefaultsSettingsFromScriptTag(): IConfigurationSettings {\n  if (!document || !document.getElementsByTagName) {\n    return null;\n  }\n\n  let scripts = document.getElementsByTagName('script');\n  for (let index = 0; index < scripts.length; index++) {\n    if (scripts[index].src && scripts[index].src.indexOf('/exceptionless') > -1) {\n      return Utils.parseQueryString(scripts[index].src.split('?').pop());\n    }\n  }\n  return null;\n}\n\nfunction processUnhandledException(stackTrace:TraceKit.StackTrace, options?:any): void {\n  let builder = ExceptionlessClient.default.createUnhandledException(new Error(stackTrace.message || (options || {}).status || 'Script error'), 'onerror');\n  builder.pluginContextData['@@_TraceKit.StackTrace'] = stackTrace;\n  builder.submit();\n}\n\n/*\nTODO: We currently are unable to parse string exceptions.\nfunction processJQueryAjaxError(event, xhr, settings, error:string): void {\n  let client = ExceptionlessClient.default;\n  if (xhr.status === 404) {\n    client.submitNotFound(settings.url);\n  } else if (xhr.status !== 401) {\n    client.createUnhandledException(error, 'JQuery.ajaxError')\n      .setSource(settings.url)\n      .setProperty('status', xhr.status)\n      .setProperty('request', settings.data)\n      .setProperty('response', xhr.responseText && xhr.responseText.slice && xhr.responseText.slice(0, 1024))\n      .submit();\n  }\n}\n*/\n\nlet defaults = Configuration.defaults;\nlet settings = getDefaultsSettingsFromScriptTag();\nif (settings && (settings.apiKey || settings.serverUrl)) {\n  defaults.apiKey = settings.apiKey;\n  defaults.serverUrl = settings.serverUrl;\n}\n\ndefaults.errorParser = new DefaultErrorParser();\ndefaults.moduleCollector = new DefaultModuleCollector();\ndefaults.requestInfoCollector = new DefaultRequestInfoCollector();\ndefaults.submissionAdapter = new DefaultSubmissionAdapter();\n\nTraceKit.report.subscribe(processUnhandledException);\nTraceKit.extendToAsynchronousCallbacks();\n\n// window && window.addEventListener && window.addEventListener('beforeunload', function () {\n//   ExceptionlessClient.default.config.queue.process(true);\n// });\n\n// if (typeof $ !== 'undefined' && $(document)) {\n//   $(document).ajaxError(processJQueryAjaxError);\n// }\n\n(<any>Error).stackTraceLimit = Infinity;\n\ndeclare var $;\n\n","/*\n TraceKit - Cross browser stack traces - github.com/csnover/TraceKit\n MIT license\n*/\n\n(function(window, undefined) {\nif (!window) {\n    return;\n}\n\nvar TraceKit = {};\nvar _oldTraceKit = window.TraceKit;\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n\n/**\n * _has, a better form of hasOwnProperty\n * Example: _has(MainHostObject, property) === true/false\n *\n * @param {Object} object to check property\n * @param {string} key to check\n */\nfunction _has(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\n\nfunction _isUndefined(what) {\n    return typeof what === 'undefined';\n}\n\n/**\n * TraceKit.noConflict: Export TraceKit out to another variable\n * Example: var TK = TraceKit.noConflict()\n */\nTraceKit.noConflict = function noConflict() {\n    window.TraceKit = _oldTraceKit;\n    return TraceKit;\n};\n\n/**\n * TraceKit.wrap: Wrap any function in a TraceKit reporter\n * Example: func = TraceKit.wrap(func);\n *\n * @param {Function} func Function to be wrapped\n * @return {Function} The wrapped func\n */\nTraceKit.wrap = function traceKitWrapper(func) {\n    function wrapped() {\n        try {\n            return func.apply(this, arguments);\n        } catch (e) {\n            TraceKit.report(e);\n            throw e;\n        }\n    }\n    return wrapped;\n};\n\n/**\n * TraceKit.report: cross-browser processing of unhandled exceptions\n *\n * Syntax:\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *              on top frame; column number is not guaranteed\n *   - Opera:   full stack trace with line and column numbers\n *   - Chrome:  full stack trace with line and column numbers\n *   - Safari:  line and column number for the top frame only; some frames\n *              may be missing, and column number is not guaranteed\n *   - IE:      line and column number for the top frame only; some frames\n *              may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a stackInfo object as described in the\n * TraceKit.computeStackTrace docs.\n */\nTraceKit.report = (function reportModuleWrapper() {\n    var handlers = [],\n        lastArgs = null,\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {Object.<string, *>} stack\n     */\n    function notifyHandlers(stack, isWindowError) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n          return;\n        }\n        for (var i in handlers) {\n            if (_has(handlers, i)) {\n                try {\n                    handlers[i].apply(null, [stack].concat(_slice.call(arguments, 2)));\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error\n     * occurred.\n     * @param {?(number|string)} columnNo The column number at which the error\n     * occurred.\n     * @param {?Error} errorObj The actual Error object.\n     */\n    function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {\n        var stack = null;\n\n        if (lastExceptionStack) {\n            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n    \t    processLastException();\n\t    } else if (errorObj) {\n            stack = TraceKit.computeStackTrace(errorObj);\n            notifyHandlers(stack, true);\n        } else {\n            var location = {\n              'url': url,\n              'line': lineNo,\n              'column': columnNo\n            };\n            location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);\n            location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);\n            stack = {\n              'mode': 'onerror',\n              'message': message,\n              'stack': [location]\n            };\n\n            notifyHandlers(stack, true);\n        }\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    function installGlobalHandler () {\n        if (_onErrorHandlerInstalled === true) {\n            return;\n        }\n        _oldOnerrorHandler = window.onerror;\n        window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    function processLastException() {\n        var _lastExceptionStack = lastExceptionStack,\n            _lastArgs = lastArgs;\n        lastArgs = null;\n        lastExceptionStack = null;\n        lastException = null;\n        notifyHandlers.apply(null, [_lastExceptionStack, false].concat(_lastArgs));\n    }\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     */\n    function report(ex) {\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n              processLastException();\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n        lastArgs = _slice.call(arguments, 1);\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        window.setTimeout(function () {\n            if (lastException === ex) {\n                processLastException();\n            }\n        }, (stack.incomplete ? 2000 : 0));\n\n        throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    return report;\n}());\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   s = TraceKit.computeStackTrace.ofCaller([depth])\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n * Returns:\n *   s.name              - exception name\n *   s.message           - exception message\n *   s.stack[i].url      - JavaScript or HTML file URL\n *   s.stack[i].func     - function name, or empty for anonymous functions (if guessing did not work)\n *   s.stack[i].args     - arguments passed to the function, if known\n *   s.stack[i].line     - line number, if known\n *   s.stack[i].column   - column number, if known\n *   s.stack[i].context  - an array of source code lines; the middle element corresponds to the correct line#\n *   s.mode              - 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n * Tracing example:\n *     function trace(message) {\n *         var stackInfo = TraceKit.computeStackTrace.ofCaller();\n *         var data = message + \"\\n\";\n *         for(var i in stackInfo.stack) {\n *             var item = stackInfo.stack[i];\n *             data += (item.func || '[anonymous]') + \"() in \" + item.url + \":\" + (item.line || '0') + \"\\n\";\n *         }\n *         if (window.console)\n *             console.info(data);\n *         else\n *             alert(data);\n *     }\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n    var debug = false,\n        sourceCache = {};\n\n    /**\n     * Attempts to retrieve source code via XMLHttpRequest, which is used\n     * to look up anonymous function names.\n     * @param {string} url URL of source code.\n     * @return {string} Source contents.\n     */\n    function loadSource(url) {\n        if (!TraceKit.remoteFetching) { //Only attempt request if remoteFetching is on.\n            return '';\n        }\n        try {\n            var getXHR = function() {\n                try {\n                    return new window.XMLHttpRequest();\n                } catch (e) {\n                    // explicitly bubble up the exception if not found\n                    return new window.ActiveXObject('Microsoft.XMLHTTP');\n                }\n            };\n\n            var request = getXHR();\n            request.open('GET', url, false);\n            request.send('');\n            return request.responseText;\n        } catch (e) {\n            return '';\n        }\n    }\n\n    /**\n     * Retrieves source code from the source code cache.\n     * @param {string} url URL of source code.\n     * @return {Array.<string>} Source contents.\n     */\n    function getSource(url) {\n        if (typeof url !== 'string') {\n            return [];\n        }\n\n        if (!_has(sourceCache, url)) {\n            // URL needs to be able to fetched within the acceptable domain.  Otherwise,\n            // cross-domain errors will be triggered.\n            var source = '';\n            var domain = '';\n            try { domain = document.domain; } catch (e) {}\n            if (url.indexOf(domain) !== -1) {\n                source = loadSource(url);\n            }\n            sourceCache[url] = source ? source.split('\\n') : [];\n        }\n\n        return sourceCache[url];\n    }\n\n    /**\n     * Tries to use an externally loaded copy of source code to determine\n     * the name of a function by looking at the name of the variable it was\n     * assigned to, if any.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} lineNo Line number in source code.\n     * @return {string} The function name, if discoverable.\n     */\n    function guessFunctionName(url, lineNo) {\n        var reFunctionArgNames = /function ([^(]*)\\(([^)]*)\\)/,\n            reGuessFunction = /['\"]?([0-9A-Za-z$_]+)['\"]?\\s*[:=]\\s*(function|eval|new Function)/,\n            line = '',\n            maxLines = 10,\n            source = getSource(url),\n            m;\n\n        if (!source.length) {\n            return UNKNOWN_FUNCTION;\n        }\n\n        // Walk backwards from the first line in the function until we find the line which\n        // matches the pattern above, which is the function definition\n        for (var i = 0; i < maxLines; ++i) {\n            line = source[lineNo - i] + line;\n\n            if (!_isUndefined(line)) {\n                if ((m = reGuessFunction.exec(line))) {\n                    return m[1];\n                } else if ((m = reFunctionArgNames.exec(line))) {\n                    return m[1];\n                }\n            }\n        }\n\n        return UNKNOWN_FUNCTION;\n    }\n\n    /**\n     * Retrieves the surrounding lines from where an exception occurred.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} line Line number in source code to centre\n     * around for context.\n     * @return {?Array.<string>} Lines of source code.\n     */\n    function gatherContext(url, line) {\n        var source = getSource(url);\n\n        if (!source.length) {\n            return null;\n        }\n\n        var context = [],\n            // linesBefore & linesAfter are inclusive with the offending line.\n            // if linesOfContext is even, there will be one extra line\n            //   *before* the offending line.\n            linesBefore = Math.floor(TraceKit.linesOfContext / 2),\n            // Add one extra line if linesOfContext is odd\n            linesAfter = linesBefore + (TraceKit.linesOfContext % 2),\n            start = Math.max(0, line - linesBefore - 1),\n            end = Math.min(source.length, line + linesAfter - 1);\n\n        line -= 1; // convert to 0-based index\n\n        for (var i = start; i < end; ++i) {\n            if (!_isUndefined(source[i])) {\n                context.push(source[i]);\n            }\n        }\n\n        return context.length > 0 ? context : null;\n    }\n\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    /**\n     * Determines where a code fragment occurs in the source code.\n     * @param {RegExp} re The function definition.\n     * @param {Array.<string>} urls A list of URLs to search.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     */\n    function findSourceInUrls(re, urls) {\n        var source, m;\n        for (var i = 0, j = urls.length; i < j; ++i) {\n            // console.log('searching', urls[i]);\n            if ((source = getSource(urls[i])).length) {\n                source = source.join('\\n');\n                if ((m = re.exec(source))) {\n                    // console.log('Found function in ' + urls[i]);\n\n                    return {\n                        'url': urls[i],\n                        'line': source.substring(0, m.index).split('\\n').length,\n                        'column': m.index - source.lastIndexOf('\\n', m.index) - 1\n                    };\n                }\n            }\n        }\n\n        // console.log('no match');\n\n        return null;\n    }\n\n    /**\n     * Determines at which column a code fragment occurs on a line of the\n     * source code.\n     * @param {string} fragment The code fragment.\n     * @param {string} url The URL to search.\n     * @param {(string|number)} line The line number to examine.\n     * @return {?number} The column number.\n     */\n    function findSourceInLine(fragment, url, line) {\n        var source = getSource(url),\n            re = new RegExp('\\\\b' + escapeRegExp(fragment) + '\\\\b'),\n            m;\n\n        line -= 1;\n\n        if (source && source.length > line && (m = re.exec(source[line]))) {\n            return m.index;\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines where a function was defined within the source code.\n     * @param {(Function|string)} func A function reference or serialized\n     * function definition.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     */\n    function findSourceByFunctionBody(func) {\n        if (_isUndefined(document)) {\n            return;\n        }\n\n        var urls = [window.location.href],\n            scripts = document.getElementsByTagName('script'),\n            body,\n            code = '' + func,\n            codeRE = /^function(?:\\s+([\\w$]+))?\\s*\\(([\\w\\s,]*)\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            eventRE = /^function on([\\w$]+)\\s*\\(event\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            re,\n            parts,\n            result;\n\n        for (var i = 0; i < scripts.length; ++i) {\n            var script = scripts[i];\n            if (script.src) {\n                urls.push(script.src);\n            }\n        }\n\n        if (!(parts = codeRE.exec(code))) {\n            re = new RegExp(escapeRegExp(code).replace(/\\s+/g, '\\\\s+'));\n        }\n\n        // not sure if this is really necessary, but I don’t have a test\n        // corpus large enough to confirm that and it was in the original.\n        else {\n            var name = parts[1] ? '\\\\s+' + parts[1] : '',\n                args = parts[2].split(',').join('\\\\s*,\\\\s*');\n\n            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\\s+/g, '\\\\s+');\n            re = new RegExp('function' + name + '\\\\s*\\\\(\\\\s*' + args + '\\\\s*\\\\)\\\\s*{\\\\s*' + body + '\\\\s*}');\n        }\n\n        // look for a normal function definition\n        if ((result = findSourceInUrls(re, urls))) {\n            return result;\n        }\n\n        // look for an old-school event handler function\n        if ((parts = eventRE.exec(code))) {\n            var event = parts[1];\n            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);\n\n            // look for a function defined in HTML as an onXXX handler\n            re = new RegExp('on' + event + '=[\\\\\\'\"]\\\\s*' + body + '\\\\s*[\\\\\\'\"]', 'i');\n\n            if ((result = findSourceInUrls(re, urls[0]))) {\n                return result;\n            }\n\n            // look for ???\n            re = new RegExp(body);\n\n            if ((result = findSourceInUrls(re, urls))) {\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (!ex.stack) {\n            return null;\n        }\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?@?((?:file|https?|blob|chrome|\\[).*?)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:ms-appx|https?|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if ((parts = chrome.exec(lines[i]))) {\n                var isNative = parts[2] && parts[2].indexOf('native') !== -1;\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ( parts = winjs.exec(lines[i]) ) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = gecko.exec(lines[i]))) {\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = guessFunctionName(element.url, element.line);\n            }\n\n            if (element.line) {\n                element.context = gatherContext(element.url, element.line);\n            }\n\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        if (stack[0] && stack[0].line && !stack[0].column && reference) {\n            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);\n        } else if (!stack[0].column && !_isUndefined(ex.columnNumber)) {\n            // FireFox uses this awesome columnNumber property for its top frame\n            // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n            // so adding 1\n            stack[0].column = ex.columnNumber + 1;\n        }\n\n        return {\n            'mode': 'stack',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * Computes stack trace information from the stacktrace property.\n     * Opera 10+ uses this property.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceFromStacktraceProp(ex) {\n        // Access and store the stacktrace property before doing ANYTHING\n        // else to it because Opera is not very good at providing it\n        // reliably in other circumstances.\n        var stacktrace = ex.stacktrace;\n        if (!stacktrace) {\n            return;\n        }\n\n        var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i,\n            opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i,\n            lines = stacktrace.split('\\n'),\n            stack = [],\n            parts;\n\n        for (var line = 0; line < lines.length; line += 2) {\n            var element = null;\n            if ((parts = opera10Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[2],\n                    'line': +parts[1],\n                    'column': null,\n                    'func': parts[3],\n                    'args':[]\n                };\n            } else if ((parts = opera11Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[6],\n                    'line': +parts[1],\n                    'column': +parts[2],\n                    'func': parts[3] || parts[4],\n                    'args': parts[5] ? parts[5].split(',') : []\n                };\n            }\n\n            if (element) {\n                if (!element.func && element.line) {\n                    element.func = guessFunctionName(element.url, element.line);\n                }\n                if (element.line) {\n                    try {\n                        element.context = gatherContext(element.url, element.line);\n                    } catch (exc) {}\n                }\n\n                if (!element.context) {\n                    element.context = [lines[line + 1]];\n                }\n\n                stack.push(element);\n            }\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        return {\n            'mode': 'stacktrace',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * NOT TESTED.\n     * Computes stack trace information from an error message that includes\n     * the stack trace.\n     * Opera 9 and earlier use this method if the option to show stack\n     * traces is turned on in opera:config.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack information.\n     */\n    function computeStackTraceFromOperaMultiLineMessage(ex) {\n        // TODO: Clean this function up\n        // Opera includes a stack trace into the exception message. An example is:\n        //\n        // Statement on line 3: Undefined variable: undefinedFunc\n        // Backtrace:\n        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz\n        //         undefinedFunc(a);\n        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy\n        //           zzz(x, y, z);\n        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx\n        //           yyy(a, a, a);\n        //   Line 1 of function script\n        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }\n        //   ...\n\n        var lines = ex.message.split('\\n');\n        if (lines.length < 4) {\n            return null;\n        }\n\n        var lineRE1 = /^\\s*Line (\\d+) of linked script ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE2 = /^\\s*Line (\\d+) of inline#(\\d+) script in ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE3 = /^\\s*Line (\\d+) of function script\\s*$/i,\n            stack = [],\n            scripts = document.getElementsByTagName('script'),\n            inlineScriptBlocks = [],\n            parts;\n\n        for (var s in scripts) {\n            if (_has(scripts, s) && !scripts[s].src) {\n                inlineScriptBlocks.push(scripts[s]);\n            }\n        }\n\n        for (var line = 2; line < lines.length; line += 2) {\n            var item = null;\n            if ((parts = lineRE1.exec(lines[line]))) {\n                item = {\n                    'url': parts[2],\n                    'func': parts[3],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null\n                };\n            } else if ((parts = lineRE2.exec(lines[line]))) {\n                item = {\n                    'url': parts[3],\n                    'func': parts[4],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.\n                };\n                var relativeLine = (+parts[1]); // relative to the start of the <SCRIPT> block\n                var script = inlineScriptBlocks[parts[2] - 1];\n                if (script) {\n                    var source = getSource(item.url);\n                    if (source) {\n                        source = source.join('\\n');\n                        var pos = source.indexOf(script.innerText);\n                        if (pos >= 0) {\n                            item.line = relativeLine + source.substring(0, pos).split('\\n').length;\n                        }\n                    }\n                }\n            } else if ((parts = lineRE3.exec(lines[line]))) {\n                var url = window.location.href.replace(/#.*$/, '');\n                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));\n                var src = findSourceInUrls(re, [url]);\n                item = {\n                    'url': url,\n                    'func': '',\n                    'args': [],\n                    'line': src ? src.line : parts[1],\n                    'column': null\n                };\n            }\n\n            if (item) {\n                if (!item.func) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n                var context = gatherContext(item.url, item.line);\n                var midline = (context ? context[Math.floor(context.length / 2)] : null);\n                if (context && midline.replace(/^\\s*/, '') === lines[line + 1].replace(/^\\s*/, '')) {\n                    item.context = context;\n                } else {\n                    // if (context) alert(\"Context mismatch. Correct midline:\\n\" + lines[i+1] + \"\\n\\nMidline:\\n\" + midline + \"\\n\\nContext:\\n\" + context.join(\"\\n\") + \"\\n\\nURL:\\n\" + item.url);\n                    item.context = [lines[line + 1]];\n                }\n                stack.push(item);\n            }\n        }\n        if (!stack.length) {\n            return null; // could not parse multiline exception message as Opera stack trace\n        }\n\n        return {\n            'mode': 'multiline',\n            'name': ex.name,\n            'message': lines[0],\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {Object.<string, *>} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = guessFunctionName(initial.url, initial.line);\n            }\n\n            if (!initial.context) {\n                initial.context = gatherContext(initial.url, initial.line);\n            }\n\n            var reference = / '([^']+)' /.exec(message);\n            if (reference) {\n                initial.column = findSourceInLine(reference[1], initial.url, initial.line);\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        stackInfo.stack[0].context = initial.context;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                // console.log('skipping internal function');\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'args': [],\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if ((parts = functionName.exec(curr.toString()))) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n              try {\n                item.func = parts.input.substring(0, parts.input.indexOf('{'));\n              } catch (e) { }\n            }\n\n            if ((source = findSourceByFunctionBody(curr))) {\n                item.url = source.url;\n                item.line = source.line;\n\n                if (item.func === UNKNOWN_FUNCTION) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n\n                var reference = / '([^']+)' /.exec(ex.message || ex.description);\n                if (reference) {\n                    item.column = findSourceInLine(reference[1], source.url, source.line);\n                }\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            }else{\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            // console.log('depth is ' + depth);\n            // console.log('stack is ' + stack.length);\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'mode': 'callers',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = (depth == null ? 0 : +depth);\n\n        try {\n            // This must be tried first because Opera 10 *destroys*\n            // its stacktrace property if you try to access the stack\n            // property first!!\n            stack = computeStackTraceFromStacktraceProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromOperaMultiLineMessage(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        return {\n            'mode': 'failed'\n        };\n    }\n\n    /**\n     * Logs a stacktrace starting from the previous call and working down.\n     * @param {(number|string)=} depth How many frames deep to trace.\n     * @return {Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceOfCaller(depth) {\n        depth = (depth == null ? 0 : +depth) + 1; // \"+ 1\" because \"ofCaller\" should drop one frame\n        try {\n            throw new Error();\n        } catch (ex) {\n            return computeStackTrace(ex, depth + 1);\n        }\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.guessFunctionName = guessFunctionName;\n    computeStackTrace.gatherContext = gatherContext;\n    computeStackTrace.ofCaller = computeStackTraceOfCaller;\n    computeStackTrace.getSource = getSource;\n\n    return computeStackTrace;\n}());\n\n/**\n * Extends support for global error handling for asynchronous browser\n * functions. Adopted from Closure Library's errorhandler.js\n */\nTraceKit.extendToAsynchronousCallbacks = function () {\n    var _helper = function _helper(fnName) {\n        var originalFn = window[fnName];\n        window[fnName] = function traceKitAsyncExtension() {\n            // Make a copy of the arguments\n            var args = _slice.call(arguments);\n            var originalCallback = args[0];\n            if (typeof (originalCallback) === 'function') {\n                args[0] = TraceKit.wrap(originalCallback);\n            }\n            // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n            // also only supports 2 argument and doesn't care what \"this\" is, so we\n            // can just call the original function directly.\n            if (originalFn.apply) {\n                return originalFn.apply(this, args);\n            } else {\n                return originalFn(args[0], args[1]);\n            }\n        };\n    };\n\n    _helper('setTimeout');\n    _helper('setInterval');\n};\n\n//Default options:\nif (!TraceKit.remoteFetching) {\n  TraceKit.remoteFetching = true;\n}\nif (!TraceKit.collectWindowErrors) {\n  TraceKit.collectWindowErrors = true;\n}\nif (!TraceKit.linesOfContext || TraceKit.linesOfContext < 1) {\n  // 5 lines before, the offending line, 5 lines after\n  TraceKit.linesOfContext = 11;\n}\n\n\n\n// Export to global object\nwindow.TraceKit = TraceKit;\n\n}(typeof window !== 'undefined' ? window : global));\n\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory(require, exports, module);\n  } else {\n    root.exceptionless = factory();\n  }\n}(this, function(require, exports, module) {\nif (!exports) {\n\tvar exports = {};\n}\n\n\nvar SettingsManager = (function () {\n    function SettingsManager() {\n    }\n    SettingsManager.onChanged = function (handler) {\n        !!handler && this._handlers.push(handler);\n    };\n    SettingsManager.applySavedServerSettings = function (config) {\n        config.log.info('Applying saved settings.');\n        config.settings = Utils.merge(config.settings, this.getSavedServerSettings(config));\n        this.changed(config);\n    };\n    SettingsManager.checkVersion = function (version, config) {\n        if (version) {\n            var savedConfigVersion = parseInt(config.storage.get(this._configPath + \"-version\"), 10);\n            if (isNaN(savedConfigVersion) || version > savedConfigVersion) {\n                config.log.info(\"Updating settings from v\" + (!isNaN(savedConfigVersion) ? savedConfigVersion : 0) + \" to v\" + version);\n                this.updateSettings(config);\n            }\n        }\n    };\n    SettingsManager.updateSettings = function (config) {\n        var _this = this;\n        if (!config.isValid) {\n            config.log.error('Unable to update settings: ApiKey is not set.');\n            return;\n        }\n        config.submissionClient.getSettings(config, function (response) {\n            if (!response || !response.success || !response.settings) {\n                return;\n            }\n            config.settings = Utils.merge(config.settings, response.settings);\n            var savedServerSettings = SettingsManager.getSavedServerSettings(config);\n            for (var key in savedServerSettings) {\n                if (response.settings[key]) {\n                    continue;\n                }\n                delete config.settings[key];\n            }\n            var path = SettingsManager._configPath;\n            config.storage.save(path + \"-version\", response.settingsVersion);\n            config.storage.save(path, response.settings);\n            config.log.info('Updated settings');\n            _this.changed(config);\n        });\n    };\n    SettingsManager.changed = function (config) {\n        var handlers = this._handlers;\n        for (var index = 0; index < handlers.length; index++) {\n            handlers[index](config);\n        }\n    };\n    SettingsManager.getSavedServerSettings = function (config) {\n        return config.storage.get(this._configPath) || {};\n    };\n    SettingsManager._configPath = 'ex-server-settings.json';\n    SettingsManager._handlers = [];\n    return SettingsManager;\n})();\nexports.SettingsManager = SettingsManager;\nvar DefaultLastReferenceIdManager = (function () {\n    function DefaultLastReferenceIdManager() {\n        this._lastReferenceId = null;\n    }\n    DefaultLastReferenceIdManager.prototype.getLast = function () {\n        return this._lastReferenceId;\n    };\n    DefaultLastReferenceIdManager.prototype.clearLast = function () {\n        this._lastReferenceId = null;\n    };\n    DefaultLastReferenceIdManager.prototype.setLast = function (eventId) {\n        this._lastReferenceId = eventId;\n    };\n    return DefaultLastReferenceIdManager;\n})();\nexports.DefaultLastReferenceIdManager = DefaultLastReferenceIdManager;\nvar ConsoleLog = (function () {\n    function ConsoleLog() {\n    }\n    ConsoleLog.prototype.info = function (message) {\n        this.log('info', message);\n    };\n    ConsoleLog.prototype.warn = function (message) {\n        this.log('warn', message);\n    };\n    ConsoleLog.prototype.error = function (message) {\n        this.log('error', message);\n    };\n    ConsoleLog.prototype.log = function (level, message) {\n        if (console && console[level]) {\n            console[level](\"[\" + level + \"] Exceptionless: \" + message);\n        }\n    };\n    return ConsoleLog;\n})();\nexports.ConsoleLog = ConsoleLog;\nvar NullLog = (function () {\n    function NullLog() {\n    }\n    NullLog.prototype.info = function (message) { };\n    NullLog.prototype.warn = function (message) { };\n    NullLog.prototype.error = function (message) { };\n    return NullLog;\n})();\nexports.NullLog = NullLog;\nvar EventPluginContext = (function () {\n    function EventPluginContext(client, event, contextData) {\n        this.client = client;\n        this.event = event;\n        this.contextData = contextData ? contextData : new ContextData();\n    }\n    Object.defineProperty(EventPluginContext.prototype, \"log\", {\n        get: function () {\n            return this.client.config.log;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return EventPluginContext;\n})();\nexports.EventPluginContext = EventPluginContext;\nvar EventPluginManager = (function () {\n    function EventPluginManager() {\n    }\n    EventPluginManager.run = function (context, callback) {\n        var wrap = function (plugin, next) {\n            return function () {\n                try {\n                    if (!context.cancelled) {\n                        plugin.run(context, next);\n                    }\n                }\n                catch (ex) {\n                    context.cancelled = true;\n                    context.log.error(\"Error running plugin '\" + plugin.name + \"': \" + ex.message + \". Discarding Event.\");\n                }\n                if (context.cancelled && !!callback) {\n                    callback(context);\n                }\n            };\n        };\n        var plugins = context.client.config.plugins;\n        var wrappedPlugins = [];\n        if (!!callback) {\n            wrappedPlugins[plugins.length] = wrap({ name: 'cb', priority: 9007199254740992, run: callback }, null);\n        }\n        for (var index = plugins.length - 1; index > -1; index--) {\n            wrappedPlugins[index] = wrap(plugins[index], !!callback || (index < plugins.length - 1) ? wrappedPlugins[index + 1] : null);\n        }\n        wrappedPlugins[0]();\n    };\n    EventPluginManager.addDefaultPlugins = function (config) {\n        config.addPlugin(new ConfigurationDefaultsPlugin());\n        config.addPlugin(new ErrorPlugin());\n        config.addPlugin(new DuplicateCheckerPlugin());\n        config.addPlugin(new ModuleInfoPlugin());\n        config.addPlugin(new RequestInfoPlugin());\n        config.addPlugin(new EnvironmentInfoPlugin());\n        config.addPlugin(new SubmissionMethodPlugin());\n    };\n    return EventPluginManager;\n})();\nexports.EventPluginManager = EventPluginManager;\nvar ReferenceIdPlugin = (function () {\n    function ReferenceIdPlugin() {\n        this.priority = 20;\n        this.name = 'ReferenceIdPlugin';\n    }\n    ReferenceIdPlugin.prototype.run = function (context, next) {\n        if ((!context.event.reference_id || context.event.reference_id.length === 0) && context.event.type === 'error') {\n            context.event.reference_id = Utils.guid().replace('-', '').substring(0, 10);\n        }\n        next && next();\n    };\n    return ReferenceIdPlugin;\n})();\nexports.ReferenceIdPlugin = ReferenceIdPlugin;\nvar DefaultEventQueue = (function () {\n    function DefaultEventQueue(config) {\n        this._processingQueue = false;\n        this._config = config;\n    }\n    DefaultEventQueue.prototype.enqueue = function (event) {\n        var config = this._config;\n        this.ensureQueueTimer();\n        if (this.areQueuedItemsDiscarded()) {\n            config.log.info('Queue items are currently being discarded. The event will not be queued.');\n            return;\n        }\n        var key = \"ex-q-\" + new Date().toJSON() + \"-\" + Utils.randomNumber();\n        config.log.info(\"Enqueuing event: \" + key + \" type=\" + event.type + \" \" + (!!event.reference_id ? 'refid=' + event.reference_id : ''));\n        config.storage.save(key, event);\n    };\n    DefaultEventQueue.prototype.process = function (isAppExiting) {\n        var _this = this;\n        function getEvents(events) {\n            var items = [];\n            for (var index = 0; index < events.length; index++) {\n                items.push(events[index].value);\n            }\n            return items;\n        }\n        var queueNotProcessed = 'The queue will not be processed.';\n        var config = this._config;\n        var log = config.log;\n        this.ensureQueueTimer();\n        if (this._processingQueue) {\n            return;\n        }\n        log.info('Processing queue...');\n        if (!config.enabled) {\n            log.info(\"Configuration is disabled. \" + queueNotProcessed);\n            return;\n        }\n        if (!config.isValid) {\n            log.info(\"Invalid Api Key. \" + queueNotProcessed);\n            return;\n        }\n        this._processingQueue = true;\n        try {\n            var events = config.storage.getList('ex-q', config.submissionBatchSize);\n            if (!events || events.length === 0) {\n                this._processingQueue = false;\n                return;\n            }\n            log.info(\"Sending \" + events.length + \" events to \" + config.serverUrl + \".\");\n            config.submissionClient.postEvents(getEvents(events), config, function (response) {\n                _this.processSubmissionResponse(response, events);\n                log.info('Finished processing queue.');\n                _this._processingQueue = false;\n            }, isAppExiting);\n        }\n        catch (ex) {\n            log.error(\"Error processing queue: \" + ex);\n            this.suspendProcessing();\n            this._processingQueue = false;\n        }\n    };\n    DefaultEventQueue.prototype.suspendProcessing = function (durationInMinutes, discardFutureQueuedItems, clearQueue) {\n        var config = this._config;\n        if (!durationInMinutes || durationInMinutes <= 0) {\n            durationInMinutes = 5;\n        }\n        config.log.info(\"Suspending processing for \" + durationInMinutes + \" minutes.\");\n        this._suspendProcessingUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\n        if (discardFutureQueuedItems) {\n            this._discardQueuedItemsUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\n        }\n        if (clearQueue) {\n            this.removeEvents(config.storage.getList('ex-q'));\n        }\n    };\n    DefaultEventQueue.prototype.areQueuedItemsDiscarded = function () {\n        return this._discardQueuedItemsUntil && this._discardQueuedItemsUntil > new Date();\n    };\n    DefaultEventQueue.prototype.ensureQueueTimer = function () {\n        var _this = this;\n        if (!this._queueTimer) {\n            this._queueTimer = setInterval(function () { return _this.onProcessQueue(); }, 10000);\n        }\n    };\n    DefaultEventQueue.prototype.isQueueProcessingSuspended = function () {\n        return this._suspendProcessingUntil && this._suspendProcessingUntil > new Date();\n    };\n    DefaultEventQueue.prototype.onProcessQueue = function () {\n        if (!this.isQueueProcessingSuspended() && !this._processingQueue) {\n            this.process();\n        }\n    };\n    DefaultEventQueue.prototype.processSubmissionResponse = function (response, events) {\n        var noSubmission = 'The event will not be submitted.';\n        var config = this._config;\n        var log = config.log;\n        if (response.success) {\n            log.info(\"Sent \" + events.length + \" events.\");\n            this.removeEvents(events);\n            return;\n        }\n        if (response.serviceUnavailable) {\n            log.error('Server returned service unavailable.');\n            this.suspendProcessing();\n            return;\n        }\n        if (response.paymentRequired) {\n            log.info('Too many events have been submitted, please upgrade your plan.');\n            this.suspendProcessing(null, true, true);\n            return;\n        }\n        if (response.unableToAuthenticate) {\n            log.info(\"Unable to authenticate, please check your configuration. \" + noSubmission);\n            this.suspendProcessing(15);\n            this.removeEvents(events);\n            return;\n        }\n        if (response.notFound || response.badRequest) {\n            log.error(\"Error while trying to submit data: \" + response.message);\n            this.suspendProcessing(60 * 4);\n            this.removeEvents(events);\n            return;\n        }\n        if (response.requestEntityTooLarge) {\n            var message = 'Event submission discarded for being too large.';\n            if (config.submissionBatchSize > 1) {\n                log.error(message + \" Retrying with smaller batch size.\");\n                config.submissionBatchSize = Math.max(1, Math.round(config.submissionBatchSize / 1.5));\n            }\n            else {\n                log.error(message + \" \" + noSubmission);\n                this.removeEvents(events);\n            }\n            return;\n        }\n        if (!response.success) {\n            log.error(\"Error submitting events: \" + (response.message || 'Please check the network tab for more info.'));\n            this.suspendProcessing();\n        }\n    };\n    DefaultEventQueue.prototype.removeEvents = function (events) {\n        for (var index = 0; index < (events || []).length; index++) {\n            this._config.storage.remove(events[index].path);\n        }\n    };\n    return DefaultEventQueue;\n})();\nexports.DefaultEventQueue = DefaultEventQueue;\nvar InMemoryStorage = (function () {\n    function InMemoryStorage(maxItems) {\n        this._items = [];\n        this._maxItems = maxItems > 0 ? maxItems : 250;\n    }\n    InMemoryStorage.prototype.save = function (path, value) {\n        if (!path || !value) {\n            return false;\n        }\n        this.remove(path);\n        if (this._items.push({ created: new Date().getTime(), path: path, value: value }) > this._maxItems) {\n            this._items.shift();\n        }\n        return true;\n    };\n    InMemoryStorage.prototype.get = function (path) {\n        var item = path ? this.getList(\"^\" + path + \"$\", 1)[0] : null;\n        return item ? item.value : null;\n    };\n    InMemoryStorage.prototype.getList = function (searchPattern, limit) {\n        var items = this._items;\n        if (!searchPattern) {\n            return items.slice(0, limit);\n        }\n        var regex = new RegExp(searchPattern);\n        var results = [];\n        for (var index = 0; index < items.length; index++) {\n            if (regex.test(items[index].path)) {\n                results.push(items[index]);\n                if (results.length >= limit) {\n                    break;\n                }\n            }\n        }\n        return results;\n    };\n    InMemoryStorage.prototype.remove = function (path) {\n        if (path) {\n            var item = this.getList(\"^\" + path + \"$\", 1)[0];\n            if (item) {\n                this._items.splice(this._items.indexOf(item), 1);\n            }\n        }\n    };\n    return InMemoryStorage;\n})();\nexports.InMemoryStorage = InMemoryStorage;\nvar DefaultSubmissionClient = (function () {\n    function DefaultSubmissionClient() {\n        this.configurationVersionHeader = 'x-exceptionless-configversion';\n    }\n    DefaultSubmissionClient.prototype.postEvents = function (events, config, callback, isAppExiting) {\n        var data = Utils.stringify(events, config.dataExclusions);\n        var request = this.createRequest(config, 'POST', '/api/v2/events', data);\n        var cb = this.createSubmissionCallback(config, callback);\n        return config.submissionAdapter.sendRequest(request, cb, isAppExiting);\n    };\n    DefaultSubmissionClient.prototype.postUserDescription = function (referenceId, description, config, callback) {\n        var path = \"/api/v2/events/by-ref/\" + encodeURIComponent(referenceId) + \"/user-description\";\n        var data = Utils.stringify(description, config.dataExclusions);\n        var request = this.createRequest(config, 'POST', path, data);\n        var cb = this.createSubmissionCallback(config, callback);\n        return config.submissionAdapter.sendRequest(request, cb);\n    };\n    DefaultSubmissionClient.prototype.getSettings = function (config, callback) {\n        var request = this.createRequest(config, 'GET', '/api/v2/projects/config');\n        var cb = function (status, message, data, headers) {\n            if (status !== 200) {\n                return callback(new SettingsResponse(false, null, -1, null, message));\n            }\n            var settings;\n            try {\n                settings = JSON.parse(data);\n            }\n            catch (e) {\n                config.log.error(\"Unable to parse settings: '\" + data + \"'\");\n            }\n            if (!settings || isNaN(settings.version)) {\n                return callback(new SettingsResponse(false, null, -1, null, 'Invalid configuration settings.'));\n            }\n            callback(new SettingsResponse(true, settings.settings || {}, settings.version));\n        };\n        return config.submissionAdapter.sendRequest(request, cb);\n    };\n    DefaultSubmissionClient.prototype.createRequest = function (config, method, path, data) {\n        if (data === void 0) { data = null; }\n        return {\n            method: method,\n            path: path,\n            data: data,\n            serverUrl: config.serverUrl,\n            apiKey: config.apiKey,\n            userAgent: config.userAgent\n        };\n    };\n    DefaultSubmissionClient.prototype.createSubmissionCallback = function (config, callback) {\n        var _this = this;\n        return function (status, message, data, headers) {\n            var settingsVersion = headers && parseInt(headers[_this.configurationVersionHeader], 10);\n            SettingsManager.checkVersion(settingsVersion, config);\n            callback(new SubmissionResponse(status, message));\n        };\n    };\n    return DefaultSubmissionClient;\n})();\nexports.DefaultSubmissionClient = DefaultSubmissionClient;\nvar Utils = (function () {\n    function Utils() {\n    }\n    Utils.addRange = function (target) {\n        var values = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n        }\n        if (!target) {\n            target = [];\n        }\n        if (!values || values.length === 0) {\n            return target;\n        }\n        for (var index = 0; index < values.length; index++) {\n            if (values[index] && target.indexOf(values[index]) < 0) {\n                target.push(values[index]);\n            }\n        }\n        return target;\n    };\n    Utils.getHashCode = function (source) {\n        if (!source || source.length === 0) {\n            return null;\n        }\n        var hash = 0;\n        for (var index = 0; index < source.length; index++) {\n            var character = source.charCodeAt(index);\n            hash = ((hash << 5) - hash) + character;\n            hash |= 0;\n        }\n        return hash.toString();\n    };\n    Utils.getCookies = function (cookies) {\n        var result = {};\n        var parts = (cookies || '').split('; ');\n        for (var index = 0; index < parts.length; index++) {\n            var cookie = parts[index].split('=');\n            result[cookie[0]] = cookie[1];\n        }\n        return result;\n    };\n    Utils.guid = function () {\n        function s4() {\n            return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n        }\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n    };\n    Utils.merge = function (defaultValues, values) {\n        var result = {};\n        for (var key in defaultValues || {}) {\n            if (!!defaultValues[key]) {\n                result[key] = defaultValues[key];\n            }\n        }\n        for (var key in values || {}) {\n            if (!!values[key]) {\n                result[key] = values[key];\n            }\n        }\n        return result;\n    };\n    Utils.parseVersion = function (source) {\n        if (!source) {\n            return null;\n        }\n        var versionRegex = /(v?((\\d+)\\.(\\d+)(\\.(\\d+))?)(?:-([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?(?:\\+([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?)/;\n        var matches = versionRegex.exec(source);\n        if (matches && matches.length > 0) {\n            return matches[0];\n        }\n        return null;\n    };\n    Utils.parseQueryString = function (query) {\n        if (!query || query.length === 0) {\n            return null;\n        }\n        var pairs = query.split('&');\n        if (pairs.length === 0) {\n            return null;\n        }\n        var result = {};\n        for (var index = 0; index < pairs.length; index++) {\n            var pair = pairs[index].split('=');\n            result[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n        }\n        return result;\n    };\n    Utils.randomNumber = function () {\n        return Math.floor(Math.random() * 9007199254740992);\n    };\n    Utils.stringify = function (data, exclusions) {\n        function checkForMatch(pattern, value) {\n            if (!pattern || !value || typeof value !== 'string') {\n                return false;\n            }\n            var trim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n            pattern = pattern.toLowerCase().replace(trim, '');\n            value = value.toLowerCase().replace(trim, '');\n            if (pattern.length <= 0) {\n                return false;\n            }\n            var startsWithWildcard = pattern[0] === '*';\n            if (startsWithWildcard) {\n                pattern = pattern.slice(1);\n            }\n            var endsWithWildcard = pattern[pattern.length - 1] === '*';\n            if (endsWithWildcard) {\n                pattern = pattern.substring(0, pattern.length - 1);\n            }\n            if (startsWithWildcard && endsWithWildcard) {\n                return value.indexOf(pattern) !== -1;\n            }\n            if (startsWithWildcard) {\n                return value.lastIndexOf(pattern) === (value.length - pattern.length);\n            }\n            if (endsWithWildcard) {\n                return value.indexOf(pattern) === 0;\n            }\n            return value === pattern;\n        }\n        function stringifyImpl(obj, excludedKeys) {\n            var cache = [];\n            return JSON.stringify(obj, function (key, value) {\n                for (var index = 0; index < (excludedKeys || []).length; index++) {\n                    if (checkForMatch(excludedKeys[index], key)) {\n                        return;\n                    }\n                }\n                if (typeof value === 'object' && !!value) {\n                    if (cache.indexOf(value) !== -1) {\n                        return;\n                    }\n                    cache.push(value);\n                }\n                return value;\n            });\n        }\n        if (({}).toString.call(data) === '[object Array]') {\n            var result = [];\n            for (var index = 0; index < data.length; index++) {\n                result[index] = JSON.parse(stringifyImpl(data[index], exclusions || []));\n            }\n            return JSON.stringify(result);\n        }\n        return stringifyImpl(data, exclusions || []);\n    };\n    return Utils;\n})();\nexports.Utils = Utils;\nvar Configuration = (function () {\n    function Configuration(configSettings) {\n        this.defaultTags = [];\n        this.defaultData = {};\n        this.enabled = true;\n        this.lastReferenceIdManager = new DefaultLastReferenceIdManager();\n        this.settings = {};\n        this._plugins = [];\n        this._serverUrl = 'https://collector.exceptionless.io';\n        this._dataExclusions = [];\n        function inject(fn) {\n            return typeof fn === 'function' ? fn(this) : fn;\n        }\n        configSettings = Utils.merge(Configuration.defaults, configSettings);\n        this.log = inject(configSettings.log) || new NullLog();\n        this.apiKey = configSettings.apiKey;\n        this.serverUrl = configSettings.serverUrl;\n        this.environmentInfoCollector = inject(configSettings.environmentInfoCollector);\n        this.errorParser = inject(configSettings.errorParser);\n        this.lastReferenceIdManager = inject(configSettings.lastReferenceIdManager) || new DefaultLastReferenceIdManager();\n        this.moduleCollector = inject(configSettings.moduleCollector);\n        this.requestInfoCollector = inject(configSettings.requestInfoCollector);\n        this.submissionBatchSize = inject(configSettings.submissionBatchSize) || 50;\n        this.submissionAdapter = inject(configSettings.submissionAdapter);\n        this.submissionClient = inject(configSettings.submissionClient) || new DefaultSubmissionClient();\n        this.storage = inject(configSettings.storage) || new InMemoryStorage();\n        this.queue = inject(configSettings.queue) || new DefaultEventQueue(this);\n        SettingsManager.applySavedServerSettings(this);\n        EventPluginManager.addDefaultPlugins(this);\n    }\n    Object.defineProperty(Configuration.prototype, \"apiKey\", {\n        get: function () {\n            return this._apiKey;\n        },\n        set: function (value) {\n            this._apiKey = value || null;\n            this.log.info(\"apiKey: \" + this._apiKey);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Configuration.prototype, \"isValid\", {\n        get: function () {\n            return !!this.apiKey && this.apiKey.length >= 10;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Configuration.prototype, \"serverUrl\", {\n        get: function () {\n            return this._serverUrl;\n        },\n        set: function (value) {\n            if (!!value) {\n                this._serverUrl = value;\n                this.log.info(\"serverUrl: \" + this._serverUrl);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Configuration.prototype, \"dataExclusions\", {\n        get: function () {\n            var exclusions = this.settings['@@DataExclusions'];\n            return this._dataExclusions.concat(exclusions && exclusions.split(',') || []);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Configuration.prototype.addDataExclusions = function () {\n        var exclusions = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            exclusions[_i - 0] = arguments[_i];\n        }\n        this._dataExclusions = Utils.addRange.apply(Utils, [this._dataExclusions].concat(exclusions));\n    };\n    Object.defineProperty(Configuration.prototype, \"plugins\", {\n        get: function () {\n            return this._plugins.sort(function (p1, p2) {\n                return (p1.priority < p2.priority) ? -1 : (p1.priority > p2.priority) ? 1 : 0;\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Configuration.prototype.addPlugin = function (pluginOrName, priority, pluginAction) {\n        var plugin = !!pluginAction ? { name: pluginOrName, priority: priority, run: pluginAction } : pluginOrName;\n        if (!plugin || !plugin.run) {\n            this.log.error('Add plugin failed: Run method not defined');\n            return;\n        }\n        if (!plugin.name) {\n            plugin.name = Utils.guid();\n        }\n        if (!plugin.priority) {\n            plugin.priority = 0;\n        }\n        var pluginExists = false;\n        var plugins = this._plugins;\n        for (var index = 0; index < plugins.length; index++) {\n            if (plugins[index].name === plugin.name) {\n                pluginExists = true;\n                break;\n            }\n        }\n        if (!pluginExists) {\n            plugins.push(plugin);\n        }\n    };\n    Configuration.prototype.removePlugin = function (pluginOrName) {\n        var name = typeof pluginOrName === 'string' ? pluginOrName : pluginOrName.name;\n        if (!name) {\n            this.log.error('Remove plugin failed: Plugin name not defined');\n            return;\n        }\n        var plugins = this._plugins;\n        for (var index = 0; index < plugins.length; index++) {\n            if (plugins[index].name === name) {\n                plugins.splice(index, 1);\n                break;\n            }\n        }\n    };\n    Configuration.prototype.setVersion = function (version) {\n        if (!!version) {\n            this.defaultData['@version'] = version;\n        }\n    };\n    Configuration.prototype.setUserIdentity = function (userInfoOrIdentity, name) {\n        var USER_KEY = '@user';\n        var userInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name: name };\n        var shouldRemove = !userInfo || (!userInfo.identity && !userInfo.name);\n        if (shouldRemove) {\n            delete this.defaultData[USER_KEY];\n        }\n        else {\n            this.defaultData[USER_KEY] = userInfo;\n        }\n        this.log.info(\"user identity: \" + (shouldRemove ? 'null' : userInfo.identity));\n    };\n    Object.defineProperty(Configuration.prototype, \"userAgent\", {\n        get: function () {\n            return 'exceptionless-js/1.2.0';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Configuration.prototype.useReferenceIds = function () {\n        this.addPlugin(new ReferenceIdPlugin());\n    };\n    Configuration.prototype.useDebugLogger = function () {\n        this.log = new ConsoleLog();\n    };\n    Object.defineProperty(Configuration, \"defaults\", {\n        get: function () {\n            if (Configuration._defaultSettings === null) {\n                Configuration._defaultSettings = {};\n            }\n            return Configuration._defaultSettings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Configuration._defaultSettings = null;\n    return Configuration;\n})();\nexports.Configuration = Configuration;\nvar EventBuilder = (function () {\n    function EventBuilder(event, client, pluginContextData) {\n        this._validIdentifierErrorMessage = 'must contain between 8 and 100 alphanumeric or \\'-\\' characters.';\n        this.target = event;\n        this.client = client;\n        this.pluginContextData = pluginContextData || new ContextData();\n    }\n    EventBuilder.prototype.setType = function (type) {\n        if (!!type) {\n            this.target.type = type;\n        }\n        return this;\n    };\n    EventBuilder.prototype.setSource = function (source) {\n        if (!!source) {\n            this.target.source = source;\n        }\n        return this;\n    };\n    EventBuilder.prototype.setSessionId = function (sessionId) {\n        if (!this.isValidIdentifier(sessionId)) {\n            throw new Error(\"SessionId \" + this._validIdentifierErrorMessage);\n        }\n        this.target.session_id = sessionId;\n        return this;\n    };\n    EventBuilder.prototype.setReferenceId = function (referenceId) {\n        if (!this.isValidIdentifier(referenceId)) {\n            throw new Error(\"ReferenceId \" + this._validIdentifierErrorMessage);\n        }\n        this.target.reference_id = referenceId;\n        return this;\n    };\n    EventBuilder.prototype.setMessage = function (message) {\n        if (!!message) {\n            this.target.message = message;\n        }\n        return this;\n    };\n    EventBuilder.prototype.setGeo = function (latitude, longitude) {\n        if (latitude < -90.0 || latitude > 90.0) {\n            throw new Error('Must be a valid latitude value between -90.0 and 90.0.');\n        }\n        if (longitude < -180.0 || longitude > 180.0) {\n            throw new Error('Must be a valid longitude value between -180.0 and 180.0.');\n        }\n        this.target.geo = latitude + \",\" + longitude;\n        return this;\n    };\n    EventBuilder.prototype.setUserIdentity = function (userInfoOrIdentity, name) {\n        var userInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name: name };\n        if (!userInfo || (!userInfo.identity && !userInfo.name)) {\n            return this;\n        }\n        this.setProperty('@user', userInfo);\n        return this;\n    };\n    EventBuilder.prototype.setValue = function (value) {\n        if (!!value) {\n            this.target.value = value;\n        }\n        return this;\n    };\n    EventBuilder.prototype.addTags = function () {\n        var tags = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            tags[_i - 0] = arguments[_i];\n        }\n        this.target.tags = Utils.addRange.apply(Utils, [this.target.tags].concat(tags));\n        return this;\n    };\n    EventBuilder.prototype.setProperty = function (name, value) {\n        if (!name || (value === undefined || value == null)) {\n            return this;\n        }\n        if (!this.target.data) {\n            this.target.data = {};\n        }\n        this.target.data[name] = value;\n        return this;\n    };\n    EventBuilder.prototype.markAsCritical = function (critical) {\n        if (critical) {\n            this.addTags('Critical');\n        }\n        return this;\n    };\n    EventBuilder.prototype.addRequestInfo = function (request) {\n        if (!!request) {\n            this.pluginContextData['@request'] = request;\n        }\n        return this;\n    };\n    EventBuilder.prototype.submit = function (callback) {\n        this.client.submitEvent(this.target, this.pluginContextData, callback);\n    };\n    EventBuilder.prototype.isValidIdentifier = function (value) {\n        if (!value) {\n            return true;\n        }\n        if (value.length < 8 || value.length > 100) {\n            return false;\n        }\n        for (var index = 0; index < value.length; index++) {\n            var code = value.charCodeAt(index);\n            var isDigit = (code >= 48) && (code <= 57);\n            var isLetter = ((code >= 65) && (code <= 90)) || ((code >= 97) && (code <= 122));\n            var isMinus = code === 45;\n            if (!(isDigit || isLetter) && !isMinus) {\n                return false;\n            }\n        }\n        return true;\n    };\n    return EventBuilder;\n})();\nexports.EventBuilder = EventBuilder;\nvar ContextData = (function () {\n    function ContextData() {\n    }\n    ContextData.prototype.setException = function (exception) {\n        if (exception) {\n            this['@@_Exception'] = exception;\n        }\n    };\n    Object.defineProperty(ContextData.prototype, \"hasException\", {\n        get: function () {\n            return !!this['@@_Exception'];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ContextData.prototype.getException = function () {\n        return this['@@_Exception'] || null;\n    };\n    ContextData.prototype.markAsUnhandledError = function () {\n        this['@@_IsUnhandledError'] = true;\n    };\n    Object.defineProperty(ContextData.prototype, \"isUnhandledError\", {\n        get: function () {\n            return !!this['@@_IsUnhandledError'];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ContextData.prototype.setSubmissionMethod = function (method) {\n        if (method) {\n            this['@@_SubmissionMethod'] = method;\n        }\n    };\n    ContextData.prototype.getSubmissionMethod = function () {\n        return this['@@_SubmissionMethod'] || null;\n    };\n    return ContextData;\n})();\nexports.ContextData = ContextData;\nvar SubmissionResponse = (function () {\n    function SubmissionResponse(statusCode, message) {\n        this.success = false;\n        this.badRequest = false;\n        this.serviceUnavailable = false;\n        this.paymentRequired = false;\n        this.unableToAuthenticate = false;\n        this.notFound = false;\n        this.requestEntityTooLarge = false;\n        this.statusCode = statusCode;\n        this.message = message;\n        this.success = statusCode >= 200 && statusCode <= 299;\n        this.badRequest = statusCode === 400;\n        this.serviceUnavailable = statusCode === 503;\n        this.paymentRequired = statusCode === 402;\n        this.unableToAuthenticate = statusCode === 401 || statusCode === 403;\n        this.notFound = statusCode === 404;\n        this.requestEntityTooLarge = statusCode === 413;\n    }\n    return SubmissionResponse;\n})();\nexports.SubmissionResponse = SubmissionResponse;\nvar ExceptionlessClient = (function () {\n    function ExceptionlessClient(settingsOrApiKey, serverUrl) {\n        if (typeof settingsOrApiKey !== 'object') {\n            this.config = new Configuration(settingsOrApiKey);\n        }\n        else {\n            this.config = new Configuration({ apiKey: settingsOrApiKey, serverUrl: serverUrl });\n        }\n    }\n    ExceptionlessClient.prototype.createException = function (exception) {\n        var pluginContextData = new ContextData();\n        pluginContextData.setException(exception);\n        return this.createEvent(pluginContextData).setType('error');\n    };\n    ExceptionlessClient.prototype.submitException = function (exception, callback) {\n        this.createException(exception).submit(callback);\n    };\n    ExceptionlessClient.prototype.createUnhandledException = function (exception, submissionMethod) {\n        var builder = this.createException(exception);\n        builder.pluginContextData.markAsUnhandledError();\n        builder.pluginContextData.setSubmissionMethod(submissionMethod);\n        return builder;\n    };\n    ExceptionlessClient.prototype.submitUnhandledException = function (exception, submissionMethod, callback) {\n        this.createUnhandledException(exception, submissionMethod).submit(callback);\n    };\n    ExceptionlessClient.prototype.createFeatureUsage = function (feature) {\n        return this.createEvent().setType('usage').setSource(feature);\n    };\n    ExceptionlessClient.prototype.submitFeatureUsage = function (feature, callback) {\n        this.createFeatureUsage(feature).submit(callback);\n    };\n    ExceptionlessClient.prototype.createLog = function (sourceOrMessage, message, level) {\n        var builder = this.createEvent().setType('log');\n        if (message && level) {\n            builder = builder.setSource(sourceOrMessage).setMessage(message).setProperty('@level', level);\n        }\n        else if (message) {\n            builder = builder.setSource(sourceOrMessage).setMessage(message);\n        }\n        else {\n            var caller = arguments.callee.caller;\n            builder = builder.setSource(caller && caller.name).setMessage(sourceOrMessage);\n        }\n        return builder;\n    };\n    ExceptionlessClient.prototype.submitLog = function (sourceOrMessage, message, level, callback) {\n        this.createLog(sourceOrMessage, message, level).submit(callback);\n    };\n    ExceptionlessClient.prototype.createNotFound = function (resource) {\n        return this.createEvent().setType('404').setSource(resource);\n    };\n    ExceptionlessClient.prototype.submitNotFound = function (resource, callback) {\n        this.createNotFound(resource).submit(callback);\n    };\n    ExceptionlessClient.prototype.createSessionStart = function (sessionId) {\n        return this.createEvent().setType('start').setSessionId(sessionId);\n    };\n    ExceptionlessClient.prototype.submitSessionStart = function (sessionId, callback) {\n        this.createSessionStart(sessionId).submit(callback);\n    };\n    ExceptionlessClient.prototype.createSessionEnd = function (sessionId) {\n        return this.createEvent().setType('end').setSessionId(sessionId);\n    };\n    ExceptionlessClient.prototype.submitSessionEnd = function (sessionId, callback) {\n        this.createSessionEnd(sessionId).submit(callback);\n    };\n    ExceptionlessClient.prototype.createEvent = function (pluginContextData) {\n        return new EventBuilder({ date: new Date() }, this, pluginContextData);\n    };\n    ExceptionlessClient.prototype.submitEvent = function (event, pluginContextData, callback) {\n        function cancelled(context) {\n            if (!!context) {\n                context.cancelled = true;\n            }\n            return !!callback && callback(context);\n        }\n        var context = new EventPluginContext(this, event, pluginContextData);\n        if (!event) {\n            return cancelled(context);\n        }\n        if (!this.config.enabled) {\n            this.config.log.info('Event submission is currently disabled.');\n            return cancelled(context);\n        }\n        if (!event.data) {\n            event.data = {};\n        }\n        if (!event.tags || !event.tags.length) {\n            event.tags = [];\n        }\n        EventPluginManager.run(context, function (ctx) {\n            var ev = ctx.event;\n            if (!ctx.cancelled) {\n                if (!ev.type || ev.type.length === 0) {\n                    ev.type = 'log';\n                }\n                if (!ev.date) {\n                    ev.date = new Date();\n                }\n                var config = ctx.client.config;\n                config.queue.enqueue(ev);\n                if (ev.reference_id && ev.reference_id.length > 0) {\n                    ctx.log.info(\"Setting last reference id '\" + ev.reference_id + \"'\");\n                    config.lastReferenceIdManager.setLast(ev.reference_id);\n                }\n            }\n            !!callback && callback(ctx);\n        });\n    };\n    ExceptionlessClient.prototype.updateUserEmailAndDescription = function (referenceId, email, description, callback) {\n        var _this = this;\n        if (!referenceId || !email || !description || !this.config.enabled) {\n            return !!callback && callback(new SubmissionResponse(500, 'cancelled'));\n        }\n        var userDescription = { email_address: email, description: description };\n        this.config.submissionClient.postUserDescription(referenceId, userDescription, this.config, function (response) {\n            if (!response.success) {\n                _this.config.log.error(\"Failed to submit user email and description for event '\" + referenceId + \"': \" + response.statusCode + \" \" + response.message);\n            }\n            !!callback && callback(response);\n        });\n    };\n    ExceptionlessClient.prototype.getLastReferenceId = function () {\n        return this.config.lastReferenceIdManager.getLast();\n    };\n    Object.defineProperty(ExceptionlessClient, \"default\", {\n        get: function () {\n            if (ExceptionlessClient._instance === null) {\n                ExceptionlessClient._instance = new ExceptionlessClient(null);\n            }\n            return ExceptionlessClient._instance;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ExceptionlessClient._instance = null;\n    return ExceptionlessClient;\n})();\nexports.ExceptionlessClient = ExceptionlessClient;\nvar ConfigurationDefaultsPlugin = (function () {\n    function ConfigurationDefaultsPlugin() {\n        this.priority = 10;\n        this.name = 'ConfigurationDefaultsPlugin';\n    }\n    ConfigurationDefaultsPlugin.prototype.run = function (context, next) {\n        var defaultTags = context.client.config.defaultTags || [];\n        for (var index = 0; index < defaultTags.length; index++) {\n            var tag = defaultTags[index];\n            if (!!tag && context.event.tags.indexOf(tag) < 0) {\n                context.event.tags.push(tag);\n            }\n        }\n        var defaultData = context.client.config.defaultData || {};\n        for (var key in defaultData) {\n            if (!!defaultData[key]) {\n                context.event.data[key] = defaultData[key];\n            }\n        }\n        next && next();\n    };\n    return ConfigurationDefaultsPlugin;\n})();\nexports.ConfigurationDefaultsPlugin = ConfigurationDefaultsPlugin;\nvar ErrorPlugin = (function () {\n    function ErrorPlugin() {\n        this.priority = 30;\n        this.name = 'ErrorPlugin';\n        this.ignoredProperties = [\n            'arguments',\n            'column',\n            'columnNumber',\n            'description',\n            'fileName',\n            'message',\n            'name',\n            'number',\n            'line',\n            'lineNumber',\n            'opera#sourceloc',\n            'sourceId',\n            'sourceURL',\n            'stack',\n            'stackArray',\n            'stacktrace'\n        ];\n    }\n    ErrorPlugin.prototype.run = function (context, next) {\n        var ERROR_KEY = '@error';\n        var EXTRA_PROPERTIES_KEY = '@ext';\n        var exception = context.contextData.getException();\n        if (!!exception) {\n            context.event.type = 'error';\n            if (!context.event.data[ERROR_KEY]) {\n                var parser = context.client.config.errorParser;\n                if (!parser) {\n                    throw new Error('No error parser was defined.');\n                }\n                var result = parser.parse(context, exception);\n                if (!!result) {\n                    var additionalData = this.getAdditionalData(exception);\n                    if (!!additionalData) {\n                        if (!result.data) {\n                            result.data = {};\n                        }\n                        result.data[EXTRA_PROPERTIES_KEY] = additionalData;\n                    }\n                    context.event.data[ERROR_KEY] = result;\n                }\n            }\n        }\n        next && next();\n    };\n    ErrorPlugin.prototype.getAdditionalData = function (exception) {\n        var additionalData = {};\n        for (var key in exception) {\n            if (this.ignoredProperties.indexOf(key) >= 0) {\n                continue;\n            }\n            var value = exception[key];\n            if (typeof value !== 'function') {\n                additionalData[key] = value;\n            }\n        }\n        return Object.getOwnPropertyNames(additionalData).length\n            ? additionalData\n            : null;\n    };\n    return ErrorPlugin;\n})();\nexports.ErrorPlugin = ErrorPlugin;\nvar ModuleInfoPlugin = (function () {\n    function ModuleInfoPlugin() {\n        this.priority = 50;\n        this.name = 'ModuleInfoPlugin';\n    }\n    ModuleInfoPlugin.prototype.run = function (context, next) {\n        var ERROR_KEY = '@error';\n        var collector = context.client.config.moduleCollector;\n        if (context.event.data[ERROR_KEY] && !context.event.data['@error'].modules && !!collector) {\n            var modules = collector.getModules(context);\n            if (modules && modules.length > 0) {\n                context.event.data[ERROR_KEY].modules = modules;\n            }\n        }\n        next && next();\n    };\n    return ModuleInfoPlugin;\n})();\nexports.ModuleInfoPlugin = ModuleInfoPlugin;\nvar RequestInfoPlugin = (function () {\n    function RequestInfoPlugin() {\n        this.priority = 70;\n        this.name = 'RequestInfoPlugin';\n    }\n    RequestInfoPlugin.prototype.run = function (context, next) {\n        var REQUEST_KEY = '@request';\n        var collector = context.client.config.requestInfoCollector;\n        if (!context.event.data[REQUEST_KEY] && !!collector) {\n            var requestInfo = collector.getRequestInfo(context);\n            if (!!requestInfo) {\n                context.event.data[REQUEST_KEY] = requestInfo;\n            }\n        }\n        next && next();\n    };\n    return RequestInfoPlugin;\n})();\nexports.RequestInfoPlugin = RequestInfoPlugin;\nvar EnvironmentInfoPlugin = (function () {\n    function EnvironmentInfoPlugin() {\n        this.priority = 80;\n        this.name = 'EnvironmentInfoPlugin';\n    }\n    EnvironmentInfoPlugin.prototype.run = function (context, next) {\n        var ENVIRONMENT_KEY = '@environment';\n        var collector = context.client.config.environmentInfoCollector;\n        if (!context.event.data[ENVIRONMENT_KEY] && collector) {\n            var environmentInfo = collector.getEnvironmentInfo(context);\n            if (!!environmentInfo) {\n                context.event.data[ENVIRONMENT_KEY] = environmentInfo;\n            }\n        }\n        next && next();\n    };\n    return EnvironmentInfoPlugin;\n})();\nexports.EnvironmentInfoPlugin = EnvironmentInfoPlugin;\nvar SubmissionMethodPlugin = (function () {\n    function SubmissionMethodPlugin() {\n        this.priority = 100;\n        this.name = 'SubmissionMethodPlugin';\n    }\n    SubmissionMethodPlugin.prototype.run = function (context, next) {\n        var submissionMethod = context.contextData.getSubmissionMethod();\n        if (!!submissionMethod) {\n            context.event.data['@submission_method'] = submissionMethod;\n        }\n        next && next();\n    };\n    return SubmissionMethodPlugin;\n})();\nexports.SubmissionMethodPlugin = SubmissionMethodPlugin;\nvar ERROR_KEY = '@error';\nvar WINDOW_MILLISECONDS = 2000;\nvar MAX_QUEUE_LENGTH = 10;\nvar DuplicateCheckerPlugin = (function () {\n    function DuplicateCheckerPlugin() {\n        this.priority = 40;\n        this.name = 'DuplicateCheckerPlugin';\n        this.recentlyProcessedErrors = [];\n    }\n    DuplicateCheckerPlugin.prototype.run = function (context, next) {\n        if (context.event.type === 'error') {\n            var error = context.event.data[ERROR_KEY];\n            var isDuplicate = this.checkDuplicate(error, context.log);\n            if (isDuplicate) {\n                context.cancelled = true;\n                return;\n            }\n        }\n        next && next();\n    };\n    DuplicateCheckerPlugin.prototype.getNow = function () {\n        return Date.now();\n    };\n    DuplicateCheckerPlugin.prototype.checkDuplicate = function (error, log) {\n        var now = this.getNow();\n        var repeatWindow = now - WINDOW_MILLISECONDS;\n        var hashCode;\n        while (error) {\n            hashCode = getHashCodeForError(error);\n            if (hashCode && this.recentlyProcessedErrors.some(function (h) {\n                return h.hash === hashCode && h.timestamp >= repeatWindow;\n            })) {\n                log.info(\"Ignoring duplicate error event: hash=\" + hashCode);\n                return true;\n            }\n            this.recentlyProcessedErrors.push({ hash: hashCode, timestamp: now });\n            while (this.recentlyProcessedErrors.length > MAX_QUEUE_LENGTH) {\n                this.recentlyProcessedErrors.shift();\n            }\n            error = error.inner;\n        }\n        return false;\n    };\n    return DuplicateCheckerPlugin;\n})();\nexports.DuplicateCheckerPlugin = DuplicateCheckerPlugin;\nfunction getHashCodeForError(error) {\n    if (!error.stack_trace) {\n        return null;\n    }\n    var stack = JSON.stringify(error.stack_trace);\n    return getHashCode(stack);\n}\nfunction getHashCode(s) {\n    var hash = 0, length = s.length, char;\n    for (var i = 0; i < length; i++) {\n        char = s.charCodeAt(i);\n        hash = ((hash << 5) - hash) + char;\n        hash |= 0;\n    }\n    return hash;\n}\nvar SettingsResponse = (function () {\n    function SettingsResponse(success, settings, settingsVersion, exception, message) {\n        if (settingsVersion === void 0) { settingsVersion = -1; }\n        if (exception === void 0) { exception = null; }\n        if (message === void 0) { message = null; }\n        this.success = false;\n        this.settingsVersion = -1;\n        this.success = success;\n        this.settings = settings;\n        this.settingsVersion = settingsVersion;\n        this.exception = exception;\n        this.message = message;\n    }\n    return SettingsResponse;\n})();\nexports.SettingsResponse = SettingsResponse;\nvar DefaultErrorParser = (function () {\n    function DefaultErrorParser() {\n    }\n    DefaultErrorParser.prototype.parse = function (context, exception) {\n        function getParameters(parameters) {\n            var params = (typeof parameters === 'string' ? [parameters] : parameters) || [];\n            var result = [];\n            for (var index = 0; index < params.length; index++) {\n                result.push({ name: params[index] });\n            }\n            return result;\n        }\n        function getStackFrames(stackFrames) {\n            var ANONYMOUS = '<anonymous>';\n            var frames = [];\n            for (var index = 0; index < stackFrames.length; index++) {\n                var frame = stackFrames[index];\n                frames.push({\n                    name: (frame.func || ANONYMOUS).replace('?', ANONYMOUS),\n                    parameters: getParameters(frame.args),\n                    file_name: frame.url,\n                    line_number: frame.line || 0,\n                    column: frame.column || 0\n                });\n            }\n            return frames;\n        }\n        var TRACEKIT_STACK_TRACE_KEY = '@@_TraceKit.StackTrace';\n        var stackTrace = !!context.contextData[TRACEKIT_STACK_TRACE_KEY]\n            ? context.contextData[TRACEKIT_STACK_TRACE_KEY]\n            : TraceKit.computeStackTrace(exception, 25);\n        if (!stackTrace) {\n            throw new Error('Unable to parse the exceptions stack trace.');\n        }\n        return {\n            type: stackTrace.name,\n            message: stackTrace.message || exception.message,\n            stack_trace: getStackFrames(stackTrace.stack || [])\n        };\n    };\n    return DefaultErrorParser;\n})();\nexports.DefaultErrorParser = DefaultErrorParser;\nvar DefaultModuleCollector = (function () {\n    function DefaultModuleCollector() {\n    }\n    DefaultModuleCollector.prototype.getModules = function (context) {\n        if (document && document.getElementsByTagName) {\n            return null;\n        }\n        var modules = [];\n        var scripts = document.getElementsByTagName('script');\n        if (scripts && scripts.length > 0) {\n            for (var index = 0; index < scripts.length; index++) {\n                if (scripts[index].src) {\n                    modules.push({\n                        module_id: index,\n                        name: scripts[index].src,\n                        version: Utils.parseVersion(scripts[index].src)\n                    });\n                }\n                else if (!!scripts[index].innerHTML) {\n                    modules.push({\n                        module_id: index,\n                        name: 'Script Tag',\n                        version: Utils.getHashCode(scripts[index].innerHTML)\n                    });\n                }\n            }\n        }\n        return modules;\n    };\n    return DefaultModuleCollector;\n})();\nexports.DefaultModuleCollector = DefaultModuleCollector;\nvar DefaultRequestInfoCollector = (function () {\n    function DefaultRequestInfoCollector() {\n    }\n    DefaultRequestInfoCollector.prototype.getRequestInfo = function (context) {\n        if (!document || !navigator || !location) {\n            return null;\n        }\n        var requestInfo = {\n            user_agent: navigator.userAgent,\n            is_secure: location.protocol === 'https:',\n            host: location.hostname,\n            port: location.port && location.port !== '' ? parseInt(location.port, 10) : 80,\n            path: location.pathname,\n            cookies: Utils.getCookies(document.cookie),\n            query_string: Utils.parseQueryString(location.search.substring(1))\n        };\n        if (document.referrer && document.referrer !== '') {\n            requestInfo.referrer = document.referrer;\n        }\n        return requestInfo;\n    };\n    return DefaultRequestInfoCollector;\n})();\nexports.DefaultRequestInfoCollector = DefaultRequestInfoCollector;\nvar DefaultSubmissionAdapter = (function () {\n    function DefaultSubmissionAdapter() {\n    }\n    DefaultSubmissionAdapter.prototype.sendRequest = function (request, callback, isAppExiting) {\n        var TIMEOUT = 'timeout';\n        var LOADED = 'loaded';\n        var WITH_CREDENTIALS = 'withCredentials';\n        var isCompleted = false;\n        var useSetTimeout = false;\n        function complete(mode, xhr) {\n            function parseResponseHeaders(headerStr) {\n                function trim(value) {\n                    return value.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n                }\n                var headers = {};\n                var headerPairs = (headerStr || '').split('\\u000d\\u000a');\n                for (var index = 0; index < headerPairs.length; index++) {\n                    var headerPair = headerPairs[index];\n                    var separator = headerPair.indexOf('\\u003a\\u0020');\n                    if (separator > 0) {\n                        headers[trim(headerPair.substring(0, separator).toLowerCase())] = headerPair.substring(separator + 2);\n                    }\n                }\n                return headers;\n            }\n            if (isCompleted) {\n                return;\n            }\n            isCompleted = true;\n            var message = xhr.statusText;\n            var responseText = xhr.responseText;\n            var status = xhr.status;\n            if (mode === TIMEOUT || status === 0) {\n                message = 'Unable to connect to server.';\n                status = 0;\n            }\n            else if (mode === LOADED && !status) {\n                status = request.method === 'POST' ? 202 : 200;\n            }\n            else if (status < 200 || status > 299) {\n                var responseBody = xhr.responseBody;\n                if (!!responseBody && !!responseBody.message) {\n                    message = responseBody.message;\n                }\n                else if (!!responseText && responseText.indexOf('message') !== -1) {\n                    try {\n                        message = JSON.parse(responseText).message;\n                    }\n                    catch (e) {\n                        message = responseText;\n                    }\n                }\n            }\n            callback(status || 500, message || '', responseText, parseResponseHeaders(xhr.getAllResponseHeaders && xhr.getAllResponseHeaders()));\n        }\n        function createRequest(userAgent, method, url) {\n            var xhr = new XMLHttpRequest();\n            if (WITH_CREDENTIALS in xhr) {\n                xhr.open(method, url, true);\n                xhr.setRequestHeader('X-Exceptionless-Client', userAgent);\n                if (method === 'POST') {\n                    xhr.setRequestHeader('Content-Type', 'application/json');\n                }\n            }\n            else if (typeof XDomainRequest !== 'undefined') {\n                useSetTimeout = true;\n                xhr = new XDomainRequest();\n                xhr.open(method, location.protocol === 'http:' ? url.replace('https:', 'http:') : url);\n            }\n            else {\n                xhr = null;\n            }\n            if (xhr) {\n                xhr.timeout = 10000;\n            }\n            return xhr;\n        }\n        var url = \"\" + request.serverUrl + request.path + \"?access_token=\" + encodeURIComponent(request.apiKey);\n        var xhr = createRequest(request.userAgent, request.method || 'POST', url);\n        if (!xhr) {\n            return callback(503, 'CORS not supported.');\n        }\n        if (WITH_CREDENTIALS in xhr) {\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState !== 4) {\n                    return;\n                }\n                complete(LOADED, xhr);\n            };\n        }\n        xhr.onprogress = function () { };\n        xhr.ontimeout = function () { return complete(TIMEOUT, xhr); };\n        xhr.onerror = function () { return complete('error', xhr); };\n        xhr.onload = function () { return complete(LOADED, xhr); };\n        if (useSetTimeout) {\n            setTimeout(function () { return xhr.send(request.data); }, 500);\n        }\n        else {\n            xhr.send(request.data);\n        }\n    };\n    return DefaultSubmissionAdapter;\n})();\nexports.DefaultSubmissionAdapter = DefaultSubmissionAdapter;\nfunction getDefaultsSettingsFromScriptTag() {\n    if (!document || !document.getElementsByTagName) {\n        return null;\n    }\n    var scripts = document.getElementsByTagName('script');\n    for (var index = 0; index < scripts.length; index++) {\n        if (scripts[index].src && scripts[index].src.indexOf('/exceptionless') > -1) {\n            return Utils.parseQueryString(scripts[index].src.split('?').pop());\n        }\n    }\n    return null;\n}\nfunction processUnhandledException(stackTrace, options) {\n    var builder = ExceptionlessClient.default.createUnhandledException(new Error(stackTrace.message || (options || {}).status || 'Script error'), 'onerror');\n    builder.pluginContextData['@@_TraceKit.StackTrace'] = stackTrace;\n    builder.submit();\n}\nvar defaults = Configuration.defaults;\nvar settings = getDefaultsSettingsFromScriptTag();\nif (settings && (settings.apiKey || settings.serverUrl)) {\n    defaults.apiKey = settings.apiKey;\n    defaults.serverUrl = settings.serverUrl;\n}\ndefaults.errorParser = new DefaultErrorParser();\ndefaults.moduleCollector = new DefaultModuleCollector();\ndefaults.requestInfoCollector = new DefaultRequestInfoCollector();\ndefaults.submissionAdapter = new DefaultSubmissionAdapter();\nTraceKit.report.subscribe(processUnhandledException);\nTraceKit.extendToAsynchronousCallbacks();\nError.stackTraceLimit = Infinity;\n\nreturn exports;\n\n}));\n\n\n"],"sourceRoot":"/source/"}