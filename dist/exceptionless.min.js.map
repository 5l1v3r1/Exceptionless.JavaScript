{"version":3,"sources":["tracekit.js","exceptionless.ts"],"names":["window","undefined","TraceKit","_oldTraceKit","_slice","slice","UNKNOWN_FUNCTION","ERROR_TYPES_RE","noConflict","wrap","func","apply","this","arguments","e","report","_oldOnerrorHandler","_onErrorHandlerInstalled","handlers","lastException","lastExceptionStack","notifyHandlers","stack","isWindowError","error","exception","collectWindowErrors","i","_has","inner","traceKitWindowOnError","message","url","lineNo","columnNo","errorObj","computeStackTrace","augmentStackTraceWithInitialElement","processLastException","name","location","line","column","msg","toString","call","groups","match","guessFunctionName","context","gatherContext","mode","_lastExceptionStack","_lastException","ex","setTimeout","incomplete","subscribe","handler","onerror","push","unsubscribe","length","splice","debug","sourceCache","getSource","source","domain","document","exec","remoteFetching","request","XMLHttpRequest","ActiveXObject","getXHR","open","send","responseText","loadSource","split","m","reFunctionArgNames","reGuessFunction","_isUndefined","linesBefore","Math","floor","linesOfContext","linesAfter","start","max","end","min","escapeRegExp","text","replace","escapeCodeAsRegExpForMatchingInsideHTML","body","findSourceInUrls","re","urls","j","join","substring","index","lastIndexOf","findSourceInLine","fragment","RegExp","findSourceByFunctionBody","parts","result","href","scripts","getElementsByTagName","code","script","src","args","event","computeStackTraceFromStackProp","submatch","element","chrome","gecko","winjs","geckoEval","chromeEval","lines","reference","isNative","indexOf","columnNumber","stackInfo","initial","unshift","partial","computeStackTraceByWalkingCallerChain","depth","item","functionName","funcs","recursion","curr","caller","input","description","sourceURL","fileName","lineNumber","stacktrace","opera10Regex","opera11Regex","exc","computeStackTraceFromStacktraceProp","lineRE1","lineRE2","lineRE3","inlineScriptBlocks","s","relativeLine","pos","innerText","midline","computeStackTraceFromOperaMultiLineMessage","ofCaller","Error","extendToAsynchronousCallbacks","_helper","fnName","originalFn","originalCallback","define","amd","module","exports","object","key","Object","prototype","hasOwnProperty","what","global","extendStatics","__extends","setPrototypeOf","__proto__","Array","d","b","p","__","constructor","create","value","DefaultLastReferenceIdManager","_lastReferenceId","getLast","clearLast","setLast","eventId","ConsoleLog","trace","log","info","warn","level","console","NullLog","HeartbeatPlugin","heartbeatInterval","priority","_interval","run","next","clearInterval","_intervalId","user","data","identity","setInterval","client","submitSessionHeartbeat","ReferenceIdPlugin","reference_id","type","Utils","guid","EventPluginContext","contextData","ContextData","defineProperty","get","config","callback","plugin","cancelled","plugins","wrappedPlugins","EventPluginManager","addDefaultPlugins","addPlugin","ConfigurationDefaultsPlugin","ErrorPlugin","DuplicateCheckerPlugin","EventExclusionPlugin","ModuleInfoPlugin","RequestInfoPlugin","EnvironmentInfoPlugin","SubmissionMethodPlugin","DefaultEventQueue","_handlers","_processingQueue","_config","enqueue","eventWillNotBeQueued","enabled","isValid","areQueuedItemsDiscarded","ensureQueueTimer","timestamp","storage","queue","save","logText","process","isAppExiting","_this","queueNotProcessed","events_1","submissionBatchSize","serverUrl","submissionClient","postEvents","map","response","processSubmissionResponse","eventsPosted","suspendProcessing","durationInMinutes","discardFutureQueuedItems","clearQueue","_suspendProcessingUntil","Date","getTime","_discardQueuedItemsUntil","clear","onEventsPosted","events","_i","handlers_1","_queueTimer","onProcessQueue","isQueueProcessingSuspended","noSubmission","success","removeEvents","serviceUnavailable","paymentRequired","unableToAuthenticate","notFound","badRequest","requestEntityTooLarge","round","remove","InMemoryStorageProvider","maxQueueItems","InMemoryStorage","settings","DefaultSubmissionClient","configurationVersionHeader","JSON","stringify","createRequest","cb","createSubmissionCallback","submissionAdapter","sendRequest","postUserDescription","referenceId","path","encodeURIComponent","getSettings","version","configServerUrl","status","headers","SettingsResponse","parse","isNaN","sendHeartbeat","sessionIdOrUserId","closeSession","heartbeatServerUrl","method","apiKey","userAgent","settingsVersion","parseInt","SettingsManager","checkVersion","SubmissionResponse","target","values","_a","values_1","getHashCode","hash","charCodeAt","getCookies","cookies","exclusions","parts_1","cookie","isMatch","isEmpty","s4","random","merge","defaultValues","parseVersion","matches","query","pairs","pairs_1","decodeURIComponent","patterns","ignoreCase","toLowerCase","trim","some","pattern","startsWithWildcard","endsWithWildcard","endsWith","startsWith","keys","prefix","suffix","maxDepth","stringifyImpl","obj","excludedKeys","cache","flattened","prop","defaultValue","onChanged","applySavedServerSettings","savedSettings","getSavedServerSettings","changed","getVersion","currentVersion","updateSettings","_isUpdatingSettings","unableToUpdateMessage","savedServerSettings","newSettings","handlers_2","statusCode","ExceptionlessClient","settingsOrApiKey","Configuration","updateSettingsTimer","_timeoutId","createException","pluginContextData","setException","createEvent","setType","submitException","submit","createUnhandledException","submissionMethod","builder","markAsUnhandledError","setSubmissionMethod","submitUnhandledException","createFeatureUsage","feature","setSource","submitFeatureUsage","createLog","sourceOrMessage","setMessage","setProperty","submitLog","createNotFound","resource","submitNotFound","createSessionStart","submitSessionStart","submitSessionEnd","EventBuilder","date","submitEvent","eventPluginContext","tags","ctx","ev","lastReferenceIdManager","updateUserEmailAndDescription","email","userDescription","email_address","getLastReferenceId","initialDelay","clearTimeout","updateSettingsWhenIdleInterval","interval","_instance","configurable","enumerable","getException","getSubmissionMethod","configSettings","inject","fn","defaultTags","defaultData","_serverUrl","_configServerUrl","_heartbeatServerUrl","_updateSettingsWhenIdleInterval","_dataExclusions","_userAgentBotPatterns","_plugins","defaults","includePrivateInformation","environmentInfoCollector","errorParser","moduleCollector","requestInfoCollector","_apiKey","set","concat","addDataExclusions","addRange","_includePrivateInformation","val","_includeUserName","_includeMachineName","_includeIpAddress","_includeCookies","_includePostData","_includeQueryString","addUserAgentBotPatterns","userAgentBotPatterns","sort","p1","p2","pluginOrName","pluginAction","pluginExists","plugins_1","removePlugin","setVersion","setUserIdentity","userInfoOrIdentity","userInfo","shouldRemove","useSessions","sendHeartbeats","useReferenceIds","useLocalStorage","useDebugLogger","handlers_3","_defaultSettings","_validIdentifierErrorMessage","setReferenceId","isValidIdentifier","setEventReference","id","setGeo","latitude","longitude","geo","setUserDescription","emailAddress","setManualStackingInfo","signatureData","title","signature_data","setManualStackingKey","manualStackingKey","ManualStackingKey","setValue","addTags","excludedPropertyNames","dataExclusions","markAsCritical","critical","addRequestInfo","defaultTags_1","tag","getCurrentTime","now","_mergedEvents","_processedHashcodes","_getCurrentTime","shift","resubmit","stack_trace","count","now_1","merged","filter","hashCode","incrementCount","updateDate","h","MergedEvent","_context","_count","ENVIRONMENT_KEY","collector","environmentInfo","getEnvironmentInfo","parser","additionalData","getTypeAndSourceSetting","isLog","sourcePrefix","toBoolean","loggerName","getLogLevel","logLevel","minLogLevel","modules","getModules","REQUEST_KEY","requestInfo","getRequestInfo","user_agent","maxItems","items","lastTimestamp","limit","KeyValueStorageBase","single","ensureIndex","getKey","json","write","delete","read","parseDate","safeDelete","forEach","createIndex","readAllKeys","getTimestamp","a","_super","BrowserStorage","namespace","isAvailable","localStorage","x","setItem","removeItem","getItem","substr","DefaultErrorParser","getParameters","parameters","params_1","param","TRACEKIT_STACK_TRACE_KEY","stackTrace","stackFrames","ANONYMOUS","frames","stackFrames_1","frame","file_name","line_number","getStackFrames","module_id","innerHTML","DefaultModuleCollector","DefaultRequestInfoCollector","navigator","is_secure","protocol","host","hostname","port","pathname","includeCookies","includeQueryString","query_string","parseQueryString","search","referrer","BrowserStorageProvider","xhrRequest","isCompleted","statusText","TIMEOUT","LOADED","responseBody","headerStr","headerPairs_1","headerPair","separator","parseResponseHeaders","getAllResponseHeaders","uri","xmlRequest","xhr","WITH_CREDENTIALS","setRequestHeader","XDomainRequest","useSetTimeout","timeout","onreadystatechange","readyState","complete","onprogress","ontimeout","onload","DefaultSubmissionAdapter","pop","getDefaultsSettingsFromScriptTag","options","default"],"mappings":"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","file":"exceptionless.min.js","sourcesContent":["/**\n * https://github.com/csnover/TraceKit\n * @license MIT\n * @namespace TraceKit\n */\n(function(window, undefined) {\nif (!window) {\n    return;\n}\n\nvar TraceKit = {};\nvar _oldTraceKit = window.TraceKit;\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\nvar ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/;\n\n/**\n * A better form of hasOwnProperty<br/>\n * Example: `_has(MainHostObject, property) === true/false`\n *\n * @param {Object} object to check property\n * @param {string} key to check\n * @return {Boolean} true if the object has the key and it is not inherited\n */\nfunction _has(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\n\n/**\n * Returns true if the parameter is undefined<br/>\n * Example: `_isUndefined(val) === true/false`\n *\n * @param {*} what Value to check\n * @return {Boolean} true if undefined and false otherwise\n */\nfunction _isUndefined(what) {\n    return typeof what === 'undefined';\n}\n\n/**\n * Export TraceKit out to another variable<br/>\n * Example: `var TK = TraceKit.noConflict()`\n * @return {Object} The TraceKit object\n * @memberof TraceKit\n */\nTraceKit.noConflict = function noConflict() {\n    window.TraceKit = _oldTraceKit;\n    return TraceKit;\n};\n\n/**\n * Wrap any function in a TraceKit reporter<br/>\n * Example: `func = TraceKit.wrap(func);`\n *\n * @param {Function} func Function to be wrapped\n * @return {Function} The wrapped func\n * @memberof TraceKit\n */\nTraceKit.wrap = function traceKitWrapper(func) {\n    function wrapped() {\n        try {\n            return func.apply(this, arguments);\n        } catch (e) {\n            TraceKit.report(e);\n            throw e;\n        }\n    }\n    return wrapped;\n};\n\n/**\n * Cross-browser processing of unhandled exceptions\n *\n * Syntax:\n * ```js\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n * ```\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *     on top frame; column number is not guaranteed\n *   - Opera: full stack trace with line and column numbers\n *   - Chrome: full stack trace with line and column numbers\n *   - Safari: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *   - IE: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a TraceKit.StackTrace object as described in the\n * TraceKit.computeStackTrace docs.\n *\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.report = (function reportModuleWrapper() {\n    var handlers = [],\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n\n        if (handlers.length === 0) {\n            window.onerror = _oldOnerrorHandler;\n            _onErrorHandlerInstalled = false;\n        }\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {TraceKit.StackTrace} stack\n     * @param {boolean} isWindowError Is this a top-level window error?\n     * @param {Error=} error The error that's being handled (if available, null otherwise)\n     * @memberof TraceKit.report\n     * @throws An exception if an error occurs while calling an handler.\n     */\n    function notifyHandlers(stack, isWindowError, error) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n          return;\n        }\n        for (var i in handlers) {\n            if (_has(handlers, i)) {\n                try {\n                    handlers[i](stack, isWindowError, error);\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error occurred.\n     * @param {(number|string)=} columnNo The column number at which the error occurred.\n     * @param {Error=} errorObj The actual Error object.\n     * @memberof TraceKit.report\n     */\n    function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {\n        var stack = null;\n\n        if (lastExceptionStack) {\n            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n    \t    processLastException();\n        } else if (errorObj) {\n            stack = TraceKit.computeStackTrace(errorObj);\n            notifyHandlers(stack, true, errorObj);\n        } else {\n            var location = {\n              'url': url,\n              'line': lineNo,\n              'column': columnNo\n            };\n\n            var name;\n            var msg = message; // must be new var or will modify original `arguments`\n            if ({}.toString.call(message) === '[object String]') {\n                var groups = message.match(ERROR_TYPES_RE);\n                if (groups) {\n                    name = groups[1];\n                    msg = groups[2];\n                }\n            }\n\n            location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);\n            location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);\n            stack = {\n                'name': name,\n                'message': msg,\n                'mode': 'onerror',\n                'stack': [location]\n            };\n\n            notifyHandlers(stack, true, null);\n        }\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    /**\n     * Install a global onerror handler\n     * @memberof TraceKit.report\n     */\n    function installGlobalHandler() {\n        if (_onErrorHandlerInstalled === true) {\n            return;\n        }\n\n        _oldOnerrorHandler = window.onerror;\n        window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    /**\n     * Process the most recent exception\n     * @memberof TraceKit.report\n     */\n    function processLastException() {\n        var _lastExceptionStack = lastExceptionStack,\n            _lastException = lastException;\n        lastExceptionStack = null;\n        lastException = null;\n        notifyHandlers(_lastExceptionStack, false, _lastException);\n    }\n\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     * @memberof TraceKit.report\n     * @throws An exception if an incomplete stack trace is detected (old IE browsers).\n     */\n    function report(ex) {\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n              processLastException();\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        setTimeout(function () {\n            if (lastException === ex) {\n                processLastException();\n            }\n        }, (stack.incomplete ? 2000 : 0));\n\n        throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    return report;\n}());\n\n/**\n * An object representing a single stack frame.\n * @typedef {Object} StackFrame\n * @property {string} url The JavaScript or HTML file URL.\n * @property {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * @property {string[]?} args The arguments passed to the function, if known.\n * @property {number=} line The line number, if known.\n * @property {number=} column The column number, if known.\n * @property {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n * @memberof TraceKit\n */\n\n/**\n * An object representing a JavaScript stack trace.\n * @typedef {Object} StackTrace\n * @property {string} name The name of the thrown exception.\n * @property {string} message The exception error message.\n * @property {TraceKit.StackFrame[]} stack An array of stack frames.\n * @property {string} mode 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace.\n * @memberof TraceKit\n */\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   ```js\n *   s = TraceKit.computeStackTrace.ofCaller([depth])\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n *   ```\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n * Tracing example:\n *  ```js\n *     function trace(message) {\n *         var stackInfo = TraceKit.computeStackTrace.ofCaller();\n *         var data = message + \"\\n\";\n *         for(var i in stackInfo.stack) {\n *             var item = stackInfo.stack[i];\n *             data += (item.func || '[anonymous]') + \"() in \" + item.url + \":\" + (item.line || '0') + \"\\n\";\n *         }\n *         if (window.console)\n *             console.info(data);\n *         else\n *             alert(data);\n *     }\n * ```\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n    var debug = false,\n        sourceCache = {};\n\n    /**\n     * Attempts to retrieve source code via XMLHttpRequest, which is used\n     * to look up anonymous function names.\n     * @param {string} url URL of source code.\n     * @return {string} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function loadSource(url) {\n        if (!TraceKit.remoteFetching) { //Only attempt request if remoteFetching is on.\n            return '';\n        }\n        try {\n            var getXHR = function() {\n                try {\n                    return new window.XMLHttpRequest();\n                } catch (e) {\n                    // explicitly bubble up the exception if not found\n                    return new window.ActiveXObject('Microsoft.XMLHTTP');\n                }\n            };\n\n            var request = getXHR();\n            request.open('GET', url, false);\n            request.send('');\n            return request.responseText;\n        } catch (e) {\n            return '';\n        }\n    }\n\n    /**\n     * Retrieves source code from the source code cache.\n     * @param {string} url URL of source code.\n     * @return {Array.<string>} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function getSource(url) {\n        if (typeof url !== 'string') {\n            return [];\n        }\n\n        if (!_has(sourceCache, url)) {\n            // URL needs to be able to fetched within the acceptable domain.  Otherwise,\n            // cross-domain errors will be triggered.\n            /*\n                Regex matches:\n                0 - Full Url\n                1 - Protocol\n                2 - Domain\n                3 - Port (Useful for internal applications)\n                4 - Path\n            */\n            var source = '';\n            var domain = '';\n            try { domain = window.document.domain; } catch (e) { }\n            var match = /(.*)\\:\\/\\/([^:\\/]+)([:\\d]*)\\/{0,1}([\\s\\S]*)/.exec(url);\n            if (match && match[2] === domain) {\n                source = loadSource(url);\n            }\n            sourceCache[url] = source ? source.split('\\n') : [];\n        }\n\n        return sourceCache[url];\n    }\n\n    /**\n     * Tries to use an externally loaded copy of source code to determine\n     * the name of a function by looking at the name of the variable it was\n     * assigned to, if any.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} lineNo Line number in source code.\n     * @return {string} The function name, if discoverable.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function guessFunctionName(url, lineNo) {\n        var reFunctionArgNames = /function ([^(]*)\\(([^)]*)\\)/,\n            reGuessFunction = /['\"]?([0-9A-Za-z$_]+)['\"]?\\s*[:=]\\s*(function|eval|new Function)/,\n            line = '',\n            maxLines = 10,\n            source = getSource(url),\n            m;\n\n        if (!source.length) {\n            return UNKNOWN_FUNCTION;\n        }\n\n        // Walk backwards from the first line in the function until we find the line which\n        // matches the pattern above, which is the function definition\n        for (var i = 0; i < maxLines; ++i) {\n            line = source[lineNo - i] + line;\n\n            if (!_isUndefined(line)) {\n                if ((m = reGuessFunction.exec(line))) {\n                    return m[1];\n                } else if ((m = reFunctionArgNames.exec(line))) {\n                    return m[1];\n                }\n            }\n        }\n\n        return UNKNOWN_FUNCTION;\n    }\n\n    /**\n     * Retrieves the surrounding lines from where an exception occurred.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} line Line number in source code to center around for context.\n     * @return {?Array.<string>} Lines of source code.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function gatherContext(url, line) {\n        var source = getSource(url);\n\n        if (!source.length) {\n            return null;\n        }\n\n        var context = [],\n            // linesBefore & linesAfter are inclusive with the offending line.\n            // if linesOfContext is even, there will be one extra line\n            //   *before* the offending line.\n            linesBefore = Math.floor(TraceKit.linesOfContext / 2),\n            // Add one extra line if linesOfContext is odd\n            linesAfter = linesBefore + (TraceKit.linesOfContext % 2),\n            start = Math.max(0, line - linesBefore - 1),\n            end = Math.min(source.length, line + linesAfter - 1);\n\n        line -= 1; // convert to 0-based index\n\n        for (var i = start; i < end; ++i) {\n            if (!_isUndefined(source[i])) {\n                context.push(source[i]);\n            }\n        }\n\n        return context.length > 0 ? context : null;\n    }\n\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    /**\n     * Determines where a code fragment occurs in the source code.\n     * @param {RegExp} re The function definition.\n     * @param {Array.<string>} urls A list of URLs to search.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInUrls(re, urls) {\n        var source, m;\n        for (var i = 0, j = urls.length; i < j; ++i) {\n            if ((source = getSource(urls[i])).length) {\n                source = source.join('\\n');\n                if ((m = re.exec(source))) {\n\n                    return {\n                        'url': urls[i],\n                        'line': source.substring(0, m.index).split('\\n').length,\n                        'column': m.index - source.lastIndexOf('\\n', m.index) - 1\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines at which column a code fragment occurs on a line of the\n     * source code.\n     * @param {string} fragment The code fragment.\n     * @param {string} url The URL to search.\n     * @param {(string|number)} line The line number to examine.\n     * @return {?number} The column number.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInLine(fragment, url, line) {\n        var source = getSource(url),\n            re = new RegExp('\\\\b' + escapeRegExp(fragment) + '\\\\b'),\n            m;\n\n        line -= 1;\n\n        if (source && source.length > line && (m = re.exec(source[line]))) {\n            return m.index;\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines where a function was defined within the source code.\n     * @param {(Function|string)} func A function reference or serialized\n     * function definition.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceByFunctionBody(func) {\n        if (_isUndefined(window && window.document)) {\n            return;\n        }\n\n        var urls = [window.location.href],\n            scripts = window.document.getElementsByTagName('script'),\n            body,\n            code = '' + func,\n            codeRE = /^function(?:\\s+([\\w$]+))?\\s*\\(([\\w\\s,]*)\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            eventRE = /^function on([\\w$]+)\\s*\\(event\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            re,\n            parts,\n            result;\n\n        for (var i = 0; i < scripts.length; ++i) {\n            var script = scripts[i];\n            if (script.src) {\n                urls.push(script.src);\n            }\n        }\n\n        if (!(parts = codeRE.exec(code))) {\n            re = new RegExp(escapeRegExp(code).replace(/\\s+/g, '\\\\s+'));\n        }\n\n        // not sure if this is really necessary, but I don’t have a test\n        // corpus large enough to confirm that and it was in the original.\n        else {\n            var name = parts[1] ? '\\\\s+' + parts[1] : '',\n                args = parts[2].split(',').join('\\\\s*,\\\\s*');\n\n            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\\s+/g, '\\\\s+');\n            re = new RegExp('function' + name + '\\\\s*\\\\(\\\\s*' + args + '\\\\s*\\\\)\\\\s*{\\\\s*' + body + '\\\\s*}');\n        }\n\n        // look for a normal function definition\n        if ((result = findSourceInUrls(re, urls))) {\n            return result;\n        }\n\n        // look for an old-school event handler function\n        if ((parts = eventRE.exec(code))) {\n            var event = parts[1];\n            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);\n\n            // look for a function defined in HTML as an onXXX handler\n            re = new RegExp('on' + event + '=[\\\\\\'\"]\\\\s*' + body + '\\\\s*[\\\\\\'\"]', 'i');\n\n            if ((result = findSourceInUrls(re, urls[0]))) {\n                return result;\n            }\n\n            // look for ???\n            re = new RegExp(body);\n\n            if ((result = findSourceInUrls(re, urls))) {\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (!ex.stack) {\n            return null;\n        }\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\\[native).*?|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n\n            // Used to additionally parse URL/line/column from eval frames\n            isEval,\n            geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i,\n            chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/,\n\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            submatch,\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if ((parts = chrome.exec(lines[i]))) {\n                var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n                isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n                if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n                    // throw out eval line/column and use top-most line/column number\n                    parts[2] = submatch[1]; // url\n                    parts[3] = submatch[2]; // line\n                    parts[4] = submatch[3]; // column\n                }\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ( parts = winjs.exec(lines[i]) ) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = gecko.exec(lines[i]))) {\n                isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n                if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n                    // throw out eval line/column and use top-most line number\n                    parts[3] = submatch[1];\n                    parts[4] = submatch[2];\n                    parts[5] = null; // no column when eval\n                } else if (i === 0 && !parts[5] && !_isUndefined(ex.columnNumber)) {\n                    // FireFox uses this awesome columnNumber property for its top frame\n                    // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n                    // so adding 1\n                    // NOTE: this hack doesn't work if top-most frame is eval\n                    stack[0].column = ex.columnNumber + 1;\n                }\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = guessFunctionName(element.url, element.line);\n            }\n\n            element.context = element.line ? gatherContext(element.url, element.line) : null;\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        if (stack[0] && stack[0].line && !stack[0].column && reference) {\n            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);\n        }\n\n        return {\n            'mode': 'stack',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * Computes stack trace information from the stacktrace property.\n     * Opera 10+ uses this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStacktraceProp(ex) {\n        // Access and store the stacktrace property before doing ANYTHING\n        // else to it because Opera is not very good at providing it\n        // reliably in other circumstances.\n        var stacktrace = ex.stacktrace;\n        if (!stacktrace) {\n            return;\n        }\n\n        var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i,\n            opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i,\n            lines = stacktrace.split('\\n'),\n            stack = [],\n            parts;\n\n        for (var line = 0; line < lines.length; line += 2) {\n            var element = null;\n            if ((parts = opera10Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[2],\n                    'line': +parts[1],\n                    'column': null,\n                    'func': parts[3],\n                    'args':[]\n                };\n            } else if ((parts = opera11Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[6],\n                    'line': +parts[1],\n                    'column': +parts[2],\n                    'func': parts[3] || parts[4],\n                    'args': parts[5] ? parts[5].split(',') : []\n                };\n            }\n\n            if (element) {\n                if (!element.func && element.line) {\n                    element.func = guessFunctionName(element.url, element.line);\n                }\n                if (element.line) {\n                    try {\n                        element.context = gatherContext(element.url, element.line);\n                    } catch (exc) {}\n                }\n\n                if (!element.context) {\n                    element.context = [lines[line + 1]];\n                }\n\n                stack.push(element);\n            }\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        return {\n            'mode': 'stacktrace',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * NOT TESTED.\n     * Computes stack trace information from an error message that includes\n     * the stack trace.\n     * Opera 9 and earlier use this method if the option to show stack\n     * traces is turned on in opera:config.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromOperaMultiLineMessage(ex) {\n        // TODO: Clean this function up\n        // Opera includes a stack trace into the exception message. An example is:\n        //\n        // Statement on line 3: Undefined variable: undefinedFunc\n        // Backtrace:\n        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz\n        //         undefinedFunc(a);\n        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy\n        //           zzz(x, y, z);\n        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx\n        //           yyy(a, a, a);\n        //   Line 1 of function script\n        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }\n        //   ...\n\n        var lines = ex.message.split('\\n');\n        if (lines.length < 4) {\n            return null;\n        }\n\n        var lineRE1 = /^\\s*Line (\\d+) of linked script ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE2 = /^\\s*Line (\\d+) of inline#(\\d+) script in ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE3 = /^\\s*Line (\\d+) of function script\\s*$/i,\n            stack = [],\n            scripts = (window && window.document && window.document.getElementsByTagName('script')),\n            inlineScriptBlocks = [],\n            parts;\n\n        for (var s in scripts) {\n            if (_has(scripts, s) && !scripts[s].src) {\n                inlineScriptBlocks.push(scripts[s]);\n            }\n        }\n\n        for (var line = 2; line < lines.length; line += 2) {\n            var item = null;\n            if ((parts = lineRE1.exec(lines[line]))) {\n                item = {\n                    'url': parts[2],\n                    'func': parts[3],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null\n                };\n            } else if ((parts = lineRE2.exec(lines[line]))) {\n                item = {\n                    'url': parts[3],\n                    'func': parts[4],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.\n                };\n                var relativeLine = (+parts[1]); // relative to the start of the <SCRIPT> block\n                var script = inlineScriptBlocks[parts[2] - 1];\n                if (script) {\n                    var source = getSource(item.url);\n                    if (source) {\n                        source = source.join('\\n');\n                        var pos = source.indexOf(script.innerText);\n                        if (pos >= 0) {\n                            item.line = relativeLine + source.substring(0, pos).split('\\n').length;\n                        }\n                    }\n                }\n            } else if ((parts = lineRE3.exec(lines[line]))) {\n                var url = window.location.href.replace(/#.*$/, '');\n                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));\n                var src = findSourceInUrls(re, [url]);\n                item = {\n                    'url': url,\n                    'func': '',\n                    'args': [],\n                    'line': src ? src.line : parts[1],\n                    'column': null\n                };\n            }\n\n            if (item) {\n                if (!item.func) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n                var context = gatherContext(item.url, item.line);\n                var midline = (context ? context[Math.floor(context.length / 2)] : null);\n                if (context && midline.replace(/^\\s*/, '') === lines[line + 1].replace(/^\\s*/, '')) {\n                    item.context = context;\n                } else {\n                    // if (context) alert(\"Context mismatch. Correct midline:\\n\" + lines[i+1] + \"\\n\\nMidline:\\n\" + midline + \"\\n\\nContext:\\n\" + context.join(\"\\n\") + \"\\n\\nURL:\\n\" + item.url);\n                    item.context = [lines[line + 1]];\n                }\n                stack.push(item);\n            }\n        }\n        if (!stack.length) {\n            return null; // could not parse multiline exception message as Opera stack trace\n        }\n\n        return {\n            'mode': 'multiline',\n            'name': ex.name,\n            'message': lines[0],\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {TraceKit.StackTrace} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = guessFunctionName(initial.url, initial.line);\n            }\n\n            if (!initial.context) {\n                initial.context = gatherContext(initial.url, initial.line);\n            }\n\n            var reference = / '([^']+)' /.exec(message);\n            if (reference) {\n                initial.column = findSourceInLine(reference[1], initial.url, initial.line);\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        stackInfo.stack[0].context = initial.context;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {TraceKit.StackTrace=} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'args': [],\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if ((parts = functionName.exec(curr.toString()))) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n              try {\n                item.func = parts.input.substring(0, parts.input.indexOf('{'));\n              } catch (e) { }\n            }\n\n            if ((source = findSourceByFunctionBody(curr))) {\n                item.url = source.url;\n                item.line = source.line;\n\n                if (item.func === UNKNOWN_FUNCTION) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n\n                var reference = / '([^']+)' /.exec(ex.message || ex.description);\n                if (reference) {\n                    item.column = findSourceInLine(reference[1], source.url, source.line);\n                }\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            }else{\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'mode': 'callers',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = (depth == null ? 0 : +depth);\n\n        try {\n            // This must be tried first because Opera 10 *destroys*\n            // its stacktrace property if you try to access the stack\n            // property first!!\n            stack = computeStackTraceFromStacktraceProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromOperaMultiLineMessage(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        return {\n            'name': ex.name,\n            'message': ex.message,\n            'mode': 'failed'\n        };\n    }\n\n    /**\n     * Logs a stacktrace starting from the previous call and working down.\n     * @param {(number|string)=} depth How many frames deep to trace.\n     * @return {TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceOfCaller(depth) {\n        depth = (depth == null ? 0 : +depth) + 1; // \"+ 1\" because \"ofCaller\" should drop one frame\n        try {\n            throw new Error();\n        } catch (ex) {\n            return computeStackTrace(ex, depth + 1);\n        }\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.computeStackTraceFromStackProp = computeStackTraceFromStackProp;\n    computeStackTrace.guessFunctionName = guessFunctionName;\n    computeStackTrace.gatherContext = gatherContext;\n    computeStackTrace.ofCaller = computeStackTraceOfCaller;\n    computeStackTrace.getSource = getSource;\n\n    return computeStackTrace;\n}());\n\n/**\n * Extends support for global error handling for asynchronous browser\n * functions. Adopted from Closure Library's errorhandler.js\n * @memberof TraceKit\n */\nTraceKit.extendToAsynchronousCallbacks = function () {\n    var _helper = function _helper(fnName) {\n        var originalFn = window[fnName];\n        window[fnName] = function traceKitAsyncExtension() {\n            // Make a copy of the arguments\n            var args = _slice.call(arguments);\n            var originalCallback = args[0];\n            if (typeof (originalCallback) === 'function') {\n                args[0] = TraceKit.wrap(originalCallback);\n            }\n            // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n            // also only supports 2 argument and doesn't care what \"this\" is, so we\n            // can just call the original function directly.\n            if (originalFn.apply) {\n                return originalFn.apply(this, args);\n            } else {\n                return originalFn(args[0], args[1]);\n            }\n        };\n    };\n\n    _helper('setTimeout');\n    _helper('setInterval');\n};\n\n//Default options:\nif (!TraceKit.remoteFetching) {\n    TraceKit.remoteFetching = true;\n}\nif (!TraceKit.collectWindowErrors) {\n    TraceKit.collectWindowErrors = true;\n}\nif (!TraceKit.linesOfContext || TraceKit.linesOfContext < 1) {\n    // 5 lines before, the offending line, 5 lines after\n    TraceKit.linesOfContext = 11;\n}\n\n// UMD export\nif (typeof define === 'function' && define.amd) {\n    define('TraceKit', [], TraceKit);\n} else if (typeof module !== 'undefined' && module.exports && window.module !== module) {\n    module.exports = TraceKit;\n} else {\n    window.TraceKit = TraceKit;\n}\n\n}(typeof window !== 'undefined' ? window : global));\n","import * as TraceKit from 'TraceKit';\nexport interface ILastReferenceIdManager {\n  getLast(): string;\n  clearLast(): void;\n  setLast(eventId: string): void;\n}\n\nexport interface ILog {\n  trace(message: string): void;\n  info(message: string): void;\n  warn(message: string): void;\n  error(message: string): void;\n}\n\n                                                                    \n\nexport class DefaultLastReferenceIdManager implements ILastReferenceIdManager {\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @type {string}\n   * @private\n   */\n  private _lastReferenceId: string = null;\n\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @returns {string}\n   */\n  public getLast(): string {\n    return this._lastReferenceId;\n  }\n\n  /**\n   * Clears the last event's reference id.\n   */\n  public clearLast(): void {\n    this._lastReferenceId = null;\n  }\n\n  /**\n   * Sets the last event's reference id.\n   * @param eventId\n   */\n  public setLast(eventId: string): void {\n    this._lastReferenceId = eventId;\n  }\n}\n\n                              \n\nexport class ConsoleLog implements ILog {\n  public trace(message: string): void {\n    this.log('debug', message);\n  }\n\n  public info(message: string): void {\n    this.log('info', message);\n  }\n\n  public warn(message: string): void {\n    this.log('warn', message);\n  }\n\n  public error(message: string): void {\n    this.log('error', message);\n  }\n\n  private log(level: string, message: string) {\n    if (console) {\n      const msg = `[${level}] Exceptionless: ${message}`;\n\n      if (console[level]) {\n        console[level](msg);\n      } else if (console.log) {\n        console[`log`](msg);\n      }\n    }\n  }\n}\n\n                              \n\nexport class NullLog implements ILog {\n  public trace(message: string): void { }\n  public info(message: string): void { }\n  public warn(message: string): void { }\n  public error(message: string): void { }\n}\n\nexport interface IUserInfo {\n  identity?: string;\n  name?: string;\n  data?: any;\n}\n\n                                                                                                                                                               \n\nexport class HeartbeatPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = 'HeartbeatPlugin';\n\n  private _interval: number;\n  private _intervalId: any;\n\n  constructor(heartbeatInterval: number = 30000) {\n    this._interval = heartbeatInterval >= 30000 ? heartbeatInterval : 60000;\n  }\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    clearInterval(this._intervalId);\n\n    const user: IUserInfo = context.event.data['@user'];\n    if (user && user.identity) {\n      this._intervalId = setInterval(() => context.client.submitSessionHeartbeat(user.identity), this._interval);\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                \n\nexport class ReferenceIdPlugin implements IEventPlugin {\n  public priority: number = 20;\n  public name: string = 'ReferenceIdPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    if ((!context.event.reference_id || context.event.reference_id.length === 0) && context.event.type === 'error') {\n      context.event.reference_id = Utils.guid().replace('-', '').substring(0, 10);\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                             \n\nexport class EventPluginContext {\n  public cancelled: boolean;\n  public client: ExceptionlessClient;\n  public event: IEvent;\n  public contextData: ContextData;\n\n  constructor(client: ExceptionlessClient, event: IEvent, contextData?: ContextData) {\n    this.client = client;\n    this.event = event;\n    this.contextData = contextData ? contextData : new ContextData();\n  }\n\n  public get log(): ILog {\n    return this.client.config.log;\n  }\n}\n\nn\nexport class EventPluginManager {\n  public static run(context: EventPluginContext, callback: (context?: EventPluginContext) => void): void {\n    const wrap = (plugin: IEventPlugin, next?: () => void): () => void => {\n      return () => {\n        try {\n          if (!context.cancelled) {\n            plugin.run(context, next);\n          }\n        } catch (ex) {\n          context.cancelled = true;\n          context.log.error(`Error running plugin '${plugin.name}': ${ex.message}. Discarding Event.`);\n        }\n\n        if (context.cancelled && !!callback) {\n          callback(context);\n        }\n      };\n    };\n\n    const plugins: IEventPlugin[] = context.client.config.plugins; // optimization for minifier.\n    const wrappedPlugins: Array<() => void> = [];\n    if (!!callback) {\n      wrappedPlugins[plugins.length] = wrap({ name: 'cb', priority: 9007199254740992, run: callback }, null);\n    }\n\n    for (let index = plugins.length - 1; index > -1; index--) {\n      wrappedPlugins[index] = wrap(plugins[index], !!callback || (index < plugins.length - 1) ? wrappedPlugins[index + 1] : null);\n    }\n\n    wrappedPlugins[0]();\n  }\n\n  public static addDefaultPlugins(config: Configuration): void {\n    config.addPlugin(new ConfigurationDefaultsPlugin());\n    config.addPlugin(new ErrorPlugin());\n    config.addPlugin(new DuplicateCheckerPlugin());\n    config.addPlugin(new EventExclusionPlugin());\n    config.addPlugin(new ModuleInfoPlugin());\n    config.addPlugin(new RequestInfoPlugin());\n    config.addPlugin(new EnvironmentInfoPlugin());\n    config.addPlugin(new SubmissionMethodPlugin());\n  }\n}\n\n                                                                                                         \n\nexport interface IEventPlugin {\n  priority?: number;\n  name?: string;\n  run(context: EventPluginContext, next?: () => void): void;\n}\n\n                                                                                                                                                                                                                                                                                                                                     \n\nexport class DefaultEventQueue implements IEventQueue {\n  /**\n   * The configuration object.\n   * @type {Configuration}\n   * @private\n   */\n  private _config: Configuration;\n\n  /**\n   * A list of handlers that will be fired when events are submitted.\n   * @type {Array}\n   * @private\n   */\n  private _handlers: Array<(events: IEvent[], response: SubmissionResponse) => void> = [];\n\n  /**\n   * Suspends processing until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _suspendProcessingUntil: Date;\n\n  /**\n   * Discards queued items until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _discardQueuedItemsUntil: Date;\n\n  /**\n   * Returns true if the queue is processing.\n   * @type {boolean}\n   * @private\n   */\n  private _processingQueue: boolean = false;\n\n  /**\n   * Processes the queue every xx seconds.\n   * @type {Timer}\n   * @private\n   */\n  private _queueTimer: any;\n\n  constructor(config: Configuration) {\n    this._config = config;\n  }\n\n  public enqueue(event: IEvent): void {\n    const eventWillNotBeQueued: string = 'The event will not be queued.'; // optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    if (this.areQueuedItemsDiscarded()) {\n      log.info(`Queue items are currently being discarded. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    this.ensureQueueTimer();\n\n    const timestamp = config.storage.queue.save(event);\n    const logText = `type=${event.type} ${!!event.reference_id ? 'refid=' + event.reference_id : ''}`;\n    if (timestamp) {\n      log.info(`Enqueuing event: ${timestamp} ${logText}`);\n    } else {\n      log.error(`Could not enqueue event ${logText}`);\n    }\n  }\n\n  public process(isAppExiting?: boolean): void {\n    const queueNotProcessed: string = 'The queue will not be processed.'; // optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (this._processingQueue) {\n      return;\n    }\n\n    log.info('Processing queue...');\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${queueNotProcessed}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${queueNotProcessed}`);\n      return;\n    }\n\n    this._processingQueue = true;\n    this.ensureQueueTimer();\n\n    try {\n      const events = config.storage.queue.get(config.submissionBatchSize);\n      if (!events || events.length === 0) {\n        this._processingQueue = false;\n        return;\n      }\n\n      log.info(`Sending ${events.length} events to ${config.serverUrl}.`);\n      config.submissionClient.postEvents(events.map((e) => e.value), config, (response: SubmissionResponse) => {\n        this.processSubmissionResponse(response, events);\n        this.eventsPosted(events.map((e) => e.value), response);\n        log.info('Finished processing queue.');\n        this._processingQueue = false;\n      }, isAppExiting);\n    } catch (ex) {\n      log.error(`Error processing queue: ${ex}`);\n      this.suspendProcessing();\n      this._processingQueue = false;\n    }\n  }\n\n  public suspendProcessing(durationInMinutes?: number, discardFutureQueuedItems?: boolean, clearQueue?: boolean): void {\n    const config: Configuration = this._config; // Optimization for minifier.\n\n    if (!durationInMinutes || durationInMinutes <= 0) {\n      durationInMinutes = 5;\n    }\n\n    config.log.info(`Suspending processing for ${durationInMinutes} minutes.`);\n    this._suspendProcessingUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\n\n    if (discardFutureQueuedItems) {\n      this._discardQueuedItemsUntil = this._suspendProcessingUntil;\n    }\n\n    if (clearQueue) {\n      // Account is over the limit and we want to ensure that the sample size being sent in will contain newer errors.\n      config.storage.queue.clear();\n    }\n  }\n\n  public onEventsPosted(handler: (events: IEvent[], response: SubmissionResponse) => void): void {\n    !!handler && this._handlers.push(handler);\n  }\n\n  private eventsPosted(events: IEvent[], response: SubmissionResponse) {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(events, response);\n      } catch (ex) {\n        this._config.log.error(`Error calling onEventsPosted handler: ${ex}`);\n      }\n    }\n  }\n\n  private areQueuedItemsDiscarded(): boolean {\n    return this._discardQueuedItemsUntil && this._discardQueuedItemsUntil > new Date();\n  }\n\n  private ensureQueueTimer(): void {\n    if (!this._queueTimer) {\n      this._queueTimer = setInterval(() => this.onProcessQueue(), 10000);\n    }\n  }\n\n  private isQueueProcessingSuspended(): boolean {\n    return this._suspendProcessingUntil && this._suspendProcessingUntil > new Date();\n  }\n\n  private onProcessQueue(): void {\n    if (!this.isQueueProcessingSuspended() && !this._processingQueue) {\n      this.process();\n    }\n  }\n\n  private processSubmissionResponse(response: SubmissionResponse, events: IStorageItem[]): void {\n    const noSubmission: string = 'The event will not be submitted.'; // Optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (response.success) {\n      log.info(`Sent ${events.length} events.`);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.serviceUnavailable) {\n      // You are currently over your rate limit or the servers are under stress.\n      log.error('Server returned service unavailable.');\n      this.suspendProcessing();\n      return;\n    }\n\n    if (response.paymentRequired) {\n      // If the organization over the rate limit then discard the event.\n      log.info('Too many events have been submitted, please upgrade your plan.');\n      this.suspendProcessing(null, true, true);\n      return;\n    }\n\n    if (response.unableToAuthenticate) {\n      // The api key was suspended or could not be authorized.\n      log.info(`Unable to authenticate, please check your configuration. ${noSubmission}`);\n      this.suspendProcessing(15);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.notFound || response.badRequest) {\n      // The service end point could not be found.\n      log.error(`Error while trying to submit data: ${response.message}`);\n      this.suspendProcessing(60 * 4);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.requestEntityTooLarge) {\n      const message = 'Event submission discarded for being too large.';\n      if (config.submissionBatchSize > 1) {\n        log.error(`${message} Retrying with smaller batch size.`);\n        config.submissionBatchSize = Math.max(1, Math.round(config.submissionBatchSize / 1.5));\n      } else {\n        log.error(`${message} ${noSubmission}`);\n        this.removeEvents(events);\n      }\n\n      return;\n    }\n\n    if (!response.success) {\n      log.error(`Error submitting events: ${response.message || 'Please check the network tab for more info.'}`);\n      this.suspendProcessing();\n    }\n  }\n\n  private removeEvents(events: IStorageItem[]) {\n    for (let index = 0; index < (events || []).length; index++) {\n      this._config.storage.queue.remove(events[index].timestamp);\n    }\n  }\n}\n\n                                                                                                                 \n\nexport interface IEventQueue {\n  enqueue(event: IEvent): void;\n  process(isAppExiting?: boolean): void;\n  suspendProcessing(durationInMinutes?: number, discardFutureQueuedItems?: boolean, clearQueue?: boolean): void;\n  onEventsPosted(handler: (events: IEvent[], response: SubmissionResponse) => void): void;\n}\n\n                                                                                                                                  \n\nexport interface IEnvironmentInfoCollector {\n  getEnvironmentInfo(context: EventPluginContext): IEnvironmentInfo;\n}\n\n                                                                                                              \n\nexport interface IErrorParser {\n  parse(context: EventPluginContext, exception: Error): IError;\n}\n\n                                                                                                                \n\nexport interface IModuleCollector {\n  getModules(context: EventPluginContext): IModule[];\n}\n\n                                                                                                                          \n\nexport interface IRequestInfoCollector {\n  getRequestInfo(context: EventPluginContext): IRequestInfo;\n}\n\n                                                                                                                                                  \n\nexport class InMemoryStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(maxQueueItems: number = 250) {\n    this.queue = new InMemoryStorage(maxQueueItems);\n    this.settings = new InMemoryStorage(1);\n  }\n\n}\n\n                                      \n\nexport interface IStorageProvider {\n  queue: IStorage;\n  settings: IStorage;\n}\n\nn\n// tslint:disable-next-line:prefer-const\ndeclare var XDomainRequest: { new(); create(); };\n\nexport class DefaultSubmissionClient implements ISubmissionClient {\n  public configurationVersionHeader: string = 'x-exceptionless-configversion';\n\n  public postEvents(events: IEvent[], config: Configuration, callback: (response: SubmissionResponse) => void, isAppExiting?: boolean): void {\n    const data = JSON.stringify(events);\n    const request = this.createRequest(config, 'POST', `${config.serverUrl}/api/v2/events`, data);\n    const cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb, isAppExiting);\n  }\n\n  public postUserDescription(referenceId: string, description: IUserDescription, config: Configuration, callback: (response: SubmissionResponse) => void): void {\n    const path = `${config.serverUrl}/api/v2/events/by-ref/${encodeURIComponent(referenceId)}/user-description`;\n    const data = JSON.stringify(description);\n    const request = this.createRequest(config, 'POST', path, data);\n    const cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public getSettings(config: Configuration, version: number, callback: (response: SettingsResponse) => void): void {\n    const request = this.createRequest(config, 'GET', `${config.configServerUrl}/api/v2/projects/config?v=${version}`);\n    const cb = (status, message, data?, headers?) => {\n      if (status !== 200) {\n        return callback(new SettingsResponse(false, null, -1, null, message));\n      }\n\n      let settings: IClientConfiguration;\n      try {\n        settings = JSON.parse(data);\n      } catch (e) {\n        config.log.error(`Unable to parse settings: '${data}'`);\n      }\n\n      if (!settings || isNaN(settings.version)) {\n        return callback(new SettingsResponse(false, null, -1, null, 'Invalid configuration settings.'));\n      }\n\n      callback(new SettingsResponse(true, settings.settings || {}, settings.version));\n    };\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public sendHeartbeat(sessionIdOrUserId: string, closeSession: boolean, config: Configuration): void {\n    const request = this.createRequest(config, 'GET', `${config.heartbeatServerUrl}/api/v2/events/session/heartbeat?id=${sessionIdOrUserId}&close=${closeSession}`);\n    config.submissionAdapter.sendRequest(request);\n  }\n\n  private createRequest(config: Configuration, method: string, url: string, data: string = null): SubmissionRequest {\n    return {\n      method,\n      url,\n      data,\n      apiKey: config.apiKey,\n      userAgent: config.userAgent\n    };\n  }\n\n  private createSubmissionCallback(config: Configuration, callback: (response: SubmissionResponse) => void) {\n    return (status, message, data?, headers?) => {\n      const settingsVersion: number = headers && parseInt(headers[this.configurationVersionHeader], 10);\n      if (!isNaN(settingsVersion)) {\n        SettingsManager.checkVersion(settingsVersion, config);\n      } else {\n        config.log.error('No config version header was returned.');\n      }\n\n      callback(new SubmissionResponse(status, message));\n    };\n  }\n}\n\n                                                                                                                   \n\nexport interface ISubmissionAdapter {\n  sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean): void;\n}\n\n                                                                                                                                                                                                                                                                                           \n\nexport interface ISubmissionClient {\n  postEvents(events: IEvent[], config: Configuration, callback: (response: SubmissionResponse) => void, isAppExiting?: boolean): void;\n  postUserDescription(referenceId: string, description: IUserDescription, config: Configuration, callback: (response: SubmissionResponse) => void): void;\n  getSettings(config: Configuration, version: number, callback: (response: SettingsResponse) => void): void;\n  sendHeartbeat(sessionIdOrUserId: string, closeSession: boolean, config: Configuration): void;\n}\n\nexport class Utils {\n  public static addRange<T>(target: T[], ...values: T[]) {\n    if (!target) {\n      target = [];\n    }\n\n    if (!values || values.length === 0) {\n      return target;\n    }\n\n    for (const value of values) {\n      if (value && target.indexOf(value) < 0) {\n        target.push(value);\n      }\n    }\n\n    return target;\n  }\n\n  public static getHashCode(source: string): number {\n    if (!source || source.length === 0) {\n      return 0;\n    }\n\n    let hash: number = 0;\n    for (let index = 0; index < source.length; index++) {\n      const character = source.charCodeAt(index);\n      hash = ((hash << 5) - hash) + character;\n      hash |= 0;\n    }\n\n    return hash;\n  }\n\n  public static getCookies(cookies: string, exclusions?: string[]): object {\n    const result: object = {};\n\n    const parts: string[] = (cookies || '').split('; ');\n    for (const part of parts) {\n      const cookie: string[] = part.split('=');\n      if (!Utils.isMatch(cookie[0], exclusions)) {\n        result[cookie[0]] = cookie[1];\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static guid(): string {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    }\n\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n  }\n\n  // tslint:disable-next-line:ban-types\n  public static merge(defaultValues: Object, values: Object) {\n    const result: object = {};\n\n    for (const key in defaultValues || {}) {\n      if (defaultValues[key] !== undefined && defaultValues[key] !== null) {\n        result[key] = defaultValues[key];\n      }\n    }\n\n    for (const key in values || {}) {\n      if (values[key] !== undefined && values[key] !== null) {\n        result[key] = values[key];\n      }\n    }\n\n    return result;\n  }\n\n  public static parseVersion(source: string): string {\n    if (!source) {\n      return null;\n    }\n\n    const versionRegex = /(v?((\\d+)\\.(\\d+)(\\.(\\d+))?)(?:-([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?(?:\\+([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?)/;\n    const matches = versionRegex.exec(source);\n    if (matches && matches.length > 0) {\n      return matches[0];\n    }\n\n    return null;\n  }\n\n  public static parseQueryString(query: string, exclusions?: string[]) {\n    if (!query || query.length === 0) {\n      return null;\n    }\n\n    const pairs: string[] = query.split('&');\n    if (pairs.length === 0) {\n      return null;\n    }\n\n    const result: object = {};\n    for (const pair of pairs) {\n      const parts = pair.split('=');\n      if (!Utils.isMatch(parts[0], exclusions)) {\n        result[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static randomNumber(): number {\n    return Math.floor(Math.random() * 9007199254740992);\n  }\n\n  /**\n   * Checks to see if a value matches a pattern.\n   * @param input the value to check against the @pattern.\n   * @param pattern The pattern to check, supports wild cards (*).\n   */\n  public static isMatch(input: string, patterns: string[], ignoreCase: boolean = true): boolean {\n    if (!input || typeof input !== 'string') {\n      return false;\n    }\n\n    const trim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n    input = (ignoreCase ? input.toLowerCase() : input).replace(trim, '');\n\n    return (patterns || []).some((pattern) => {\n      if (typeof pattern !== 'string') {\n        return false;\n      }\n\n      pattern = (ignoreCase ? pattern.toLowerCase() : pattern).replace(trim, '');\n      if (pattern.length <= 0) {\n        return false;\n      }\n\n      const startsWithWildcard: boolean = pattern[0] === '*';\n      if (startsWithWildcard) {\n        pattern = pattern.slice(1);\n      }\n\n      const endsWithWildcard: boolean = pattern[pattern.length - 1] === '*';\n      if (endsWithWildcard) {\n        pattern = pattern.substring(0, pattern.length - 1);\n      }\n\n      if (startsWithWildcard && endsWithWildcard) {\n        return pattern.length <= input.length && input.indexOf(pattern, 0) !== -1;\n      }\n\n      if (startsWithWildcard) {\n        return Utils.endsWith(input, pattern);\n      }\n\n      if (endsWithWildcard) {\n        return Utils.startsWith(input, pattern);\n      }\n\n      return input === pattern;\n    });\n  }\n\n  public static isEmpty(input: object) {\n    return input === null || (typeof (input) === 'object' && Object.keys(input).length === 0);\n  }\n\n  public static startsWith(input: string, prefix: string): boolean {\n    return input.substring(0, prefix.length) === prefix;\n  }\n\n  public static endsWith(input: string, suffix: string): boolean {\n    return input.indexOf(suffix, input.length - suffix.length) !== -1;\n  }\n\n  /**\n   * Stringifys an object with optional exclusions and max depth.\n   * @param data The data object to add.\n   * @param exclusions Any property names that should be excluded.\n   * @param maxDepth The max depth of the object to include.\n   */\n  public static stringify(data: any, exclusions?: string[], maxDepth?: number): string {\n    function stringifyImpl(obj: any, excludedKeys: string[]): string {\n      const cache: string[] = [];\n      return JSON.stringify(obj, (key: string, value: any) => {\n        if (Utils.isMatch(key, excludedKeys)) {\n          return;\n        }\n\n        if (typeof value === 'object' && !!value) {\n          if (cache.indexOf(value) !== -1) {\n            // Circular reference found, discard key\n            return;\n          }\n\n          cache.push(value);\n        }\n\n        return value;\n      });\n    }\n\n    if (({}).toString.call(data) === '[object Object]') {\n      const flattened = {};\n      /* tslint:disable:forin */\n      for (const prop in data) {\n        const value = data[prop];\n        if (value === data) {\n          continue;\n        }\n        flattened[prop] = data[prop];\n      }\n      /* tslint:enable:forin */\n\n      return stringifyImpl(flattened, exclusions);\n    }\n\n    if (({}).toString.call(data) === '[object Array]') {\n      const result = [];\n      for (let index = 0; index < data.length; index++) {\n        result[index] = JSON.parse(stringifyImpl(data[index], exclusions));\n      }\n\n      return JSON.stringify(result);\n    }\n\n    return stringifyImpl(data, exclusions);\n  }\n\n  public static toBoolean(input, defaultValue: boolean = false): boolean {\n    if (typeof input === 'boolean') {\n      return input;\n    }\n\n    if (input === null || typeof input !== 'number' && typeof input !== 'string') {\n      return defaultValue;\n    }\n\n    switch ((input + '').toLowerCase().trim()) {\n      case 'true': case 'yes': case '1': return true;\n      case 'false': case 'no': case '0': case null: return false;\n    }\n\n    return defaultValue;\n  }\n}\n\nn\nexport interface IConfigurationSettings {\n  apiKey?: string;\n  serverUrl?: string;\n  configServerUrl?: string;\n  heartbeatServerUrl?: string;\n  updateSettingsWhenIdleInterval?: number;\n  includePrivateInformation?: boolean;\n  environmentInfoCollector?: IEnvironmentInfoCollector;\n  errorParser?: IErrorParser;\n  lastReferenceIdManager?: ILastReferenceIdManager;\n  log?: ILog;\n  moduleCollector?: IModuleCollector;\n  requestInfoCollector?: IRequestInfoCollector;\n  submissionBatchSize?: number;\n  submissionClient?: ISubmissionClient;\n  submissionAdapter?: ISubmissionAdapter;\n  storage?: IStorageProvider;\n  queue?: IEventQueue;\n}\n\n                                                                                                                                                     \n\ninterface ISettingsWithVersion {\n  version: number;\n  settings: { [key: string]: string };\n}\n\nexport class SettingsManager {\n  private static _isUpdatingSettings: boolean = false;\n\n  /**\n   * A list of handlers that will be fired when the settings change.\n   * @type {Array}\n   * @private\n   */\n  private static _handlers: Array<(config: Configuration) => void> = [];\n\n  public static onChanged(handler: (config: Configuration) => void) {\n    !!handler && this._handlers.push(handler);\n  }\n\n  public static applySavedServerSettings(config: Configuration): void {\n    if (!config || !config.isValid) {\n      return;\n    }\n\n    const savedSettings = this.getSavedServerSettings(config);\n    config.log.info(`Applying saved settings: v${savedSettings.version}`);\n    config.settings = Utils.merge(config.settings, savedSettings.settings);\n    this.changed(config);\n  }\n\n  public static getVersion(config: Configuration): number {\n    if (!config || !config.isValid) {\n      return 0;\n    }\n\n    const savedSettings = this.getSavedServerSettings(config);\n    return savedSettings.version || 0;\n  }\n\n  public static checkVersion(version: number, config: Configuration): void {\n    const currentVersion: number = this.getVersion(config);\n    if (version <= currentVersion) {\n      return;\n    }\n\n    config.log.info(`Updating settings from v${currentVersion} to v${version}`);\n    this.updateSettings(config, currentVersion);\n  }\n\n  public static updateSettings(config: Configuration, version?: number): void {\n    if (!config || !config.enabled || this._isUpdatingSettings) {\n      return;\n    }\n\n    const unableToUpdateMessage = 'Unable to update settings';\n    if (!config.isValid) {\n      config.log.error(`${unableToUpdateMessage}: ApiKey is not set.`);\n      return;\n    }\n\n    if (!version || version < 0) {\n      version = this.getVersion(config);\n    }\n\n    config.log.info(`Checking for updated settings from: v${version}.`);\n    this._isUpdatingSettings = true;\n    config.submissionClient.getSettings(config, version, (response: SettingsResponse) => {\n      try {\n        if (!config || !response || !response.success || !response.settings) {\n          config.log.warn(`${unableToUpdateMessage}: ${response.message}`);\n          return;\n        }\n\n        config.settings = Utils.merge(config.settings, response.settings);\n\n        // TODO: Store snapshot of settings after reading from config and attributes and use that to revert to defaults.\n        // Remove any existing server settings that are not in the new server settings.\n        const savedServerSettings = SettingsManager.getSavedServerSettings(config);\n        for (const key in savedServerSettings) {\n          if (response.settings[key]) {\n            continue;\n          }\n\n          delete config.settings[key];\n        }\n\n        const newSettings: ISettingsWithVersion = {\n          version: response.settingsVersion,\n          settings: response.settings\n        };\n\n        config.storage.settings.save(newSettings);\n\n        config.log.info(`Updated settings: v${newSettings.version}`);\n        this.changed(config);\n      } finally {\n        this._isUpdatingSettings = false;\n      }\n    });\n  }\n\n  private static changed(config: Configuration) {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(config);\n      } catch (ex) {\n        config.log.error(`Error calling onChanged handler: ${ex}`);\n      }\n    }\n  }\n\n  private static getSavedServerSettings(config: Configuration): ISettingsWithVersion {\n    const item = config.storage.settings.get()[0];\n    if (item && item.value && item.value.version && item.value.settings) {\n      return item.value;\n    }\n\n    return { version: 0, settings: {} };\n  }\n}\n\nexport interface IEvent {\n  type?: string;\n  source?: string;\n  date?: Date;\n  tags?: string[];\n  message?: string;\n  geo?: string;\n  value?: number;\n  data?: any;\n  reference_id?: string;\n  count?: number;\n}\n\nexport class SubmissionResponse {\n  public success: boolean = false;\n  public badRequest: boolean = false;\n  public serviceUnavailable: boolean = false;\n  public paymentRequired: boolean = false;\n  public unableToAuthenticate: boolean = false;\n  public notFound: boolean = false;\n  public requestEntityTooLarge: boolean = false;\n  public statusCode: number;\n  public message: string;\n\n  constructor(statusCode: number, message?: string) {\n    this.statusCode = statusCode;\n    this.message = message;\n\n    this.success = statusCode >= 200 && statusCode <= 299;\n    this.badRequest = statusCode === 400;\n    this.serviceUnavailable = statusCode === 503;\n    this.paymentRequired = statusCode === 402;\n    this.unableToAuthenticate = statusCode === 401 || statusCode === 403;\n    this.notFound = statusCode === 404;\n    this.requestEntityTooLarge = statusCode === 413;\n  }\n}\n\nn\nexport class ExceptionlessClient {\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   * @private\n   */\n  private static _instance: ExceptionlessClient = null;\n\n  public config: Configuration;\n\n  private _intervalId: any;\n  private _timeoutId: any;\n\n  constructor();\n  constructor(settings: IConfigurationSettings);\n  constructor(apiKey: string, serverUrl?: string);\n  constructor(settingsOrApiKey?: IConfigurationSettings | string, serverUrl?: string) {\n    this.config = typeof settingsOrApiKey === 'object'\n      ? new Configuration(settingsOrApiKey)\n      : new Configuration({ apiKey: settingsOrApiKey as string, serverUrl });\n\n    this.updateSettingsTimer(5000);\n    this.config.onChanged((config) => this.updateSettingsTimer(this._timeoutId > 0 ? 5000 : 0));\n    this.config.queue.onEventsPosted((events, response) => this.updateSettingsTimer());\n  }\n\n  public createException(exception: Error): EventBuilder {\n    const pluginContextData = new ContextData();\n    pluginContextData.setException(exception);\n    return this.createEvent(pluginContextData).setType('error');\n  }\n\n  public submitException(exception: Error, callback?: (context: EventPluginContext) => void): void {\n    this.createException(exception).submit(callback);\n  }\n\n  public createUnhandledException(exception: Error, submissionMethod?: string): EventBuilder {\n    const builder = this.createException(exception);\n    builder.pluginContextData.markAsUnhandledError();\n    builder.pluginContextData.setSubmissionMethod(submissionMethod);\n\n    return builder;\n  }\n\n  public submitUnhandledException(exception: Error, submissionMethod?: string, callback?: (context: EventPluginContext) => void) {\n    this.createUnhandledException(exception, submissionMethod).submit(callback);\n  }\n\n  public createFeatureUsage(feature: string): EventBuilder {\n    return this.createEvent().setType('usage').setSource(feature);\n  }\n\n  public submitFeatureUsage(feature: string, callback?: (context: EventPluginContext) => void): void {\n    this.createFeatureUsage(feature).submit(callback);\n  }\n\n  public createLog(message: string): EventBuilder;\n  public createLog(source: string, message: string): EventBuilder;\n  public createLog(source: string, message: string, level: string): EventBuilder;\n  public createLog(sourceOrMessage: string, message?: string, level?: string): EventBuilder {\n    let builder = this.createEvent().setType('log');\n\n    if (level) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message).setProperty('@level', level);\n    } else if (message) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message);\n    } else {\n      builder = builder.setMessage(sourceOrMessage);\n\n      try {\n        // TODO: Look into using https: //www.stevefenton.co.uk/Content/Blog/Date/201304/Blog/Obtaining-A-Class-Name-At-Runtime-In-TypeScript/\n        const caller: any = this.createLog.caller;\n        builder = builder.setSource(caller && caller.caller && caller.caller.name);\n      } catch (e) {\n        this.config.log.trace('Unable to resolve log source: ' + e.message);\n      }\n    }\n\n    return builder;\n  }\n\n  public submitLog(message: string): void;\n  public submitLog(source: string, message: string): void;\n  public submitLog(source: string, message: string, level: string, callback?: (context: EventPluginContext) => void): void;\n  public submitLog(sourceOrMessage: string, message?: string, level?: string, callback?: (context: EventPluginContext) => void): void {\n    this.createLog(sourceOrMessage, message, level).submit(callback);\n  }\n\n  public createNotFound(resource: string): EventBuilder {\n    return this.createEvent().setType('404').setSource(resource);\n  }\n\n  public submitNotFound(resource: string, callback?: (context: EventPluginContext) => void): void {\n    this.createNotFound(resource).submit(callback);\n  }\n\n  public createSessionStart(): EventBuilder {\n    return this.createEvent().setType('session');\n  }\n\n  public submitSessionStart(callback?: (context: EventPluginContext) => void): void {\n    this.createSessionStart().submit(callback);\n  }\n\n  public submitSessionEnd(sessionIdOrUserId: string): void {\n    if (sessionIdOrUserId) {\n      this.config.log.info(`Submitting session end: ${sessionIdOrUserId}`);\n      this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, true, this.config);\n    }\n  }\n\n  public submitSessionHeartbeat(sessionIdOrUserId: string): void {\n    if (sessionIdOrUserId) {\n      this.config.log.info(`Submitting session heartbeat: ${sessionIdOrUserId}`);\n      this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, false, this.config);\n    }\n  }\n\n  public createEvent(pluginContextData?: ContextData): EventBuilder {\n    return new EventBuilder({ date: new Date() }, this, pluginContextData);\n  }\n\n  /**\n   * Submits the event to be sent to the server.\n   * @param event The event data.\n   * @param pluginContextData Any contextual data objects to be used by Exceptionless plugins to gather default information for inclusion in the report information.\n   * @param callback\n   */\n  public submitEvent(event: IEvent, pluginContextData?: ContextData, callback?: (context: EventPluginContext) => void): void {\n    function cancelled(eventPluginContext: EventPluginContext) {\n      if (!!eventPluginContext) {\n        eventPluginContext.cancelled = true;\n      }\n\n      return !!callback && callback(eventPluginContext);\n    }\n\n    const context = new EventPluginContext(this, event, pluginContextData);\n    if (!event) {\n      return cancelled(context);\n    }\n\n    if (!this.config.enabled) {\n      this.config.log.info('Event submission is currently disabled.');\n      return cancelled(context);\n    }\n\n    if (!event.data) {\n      event.data = {};\n    }\n\n    if (!event.tags || !event.tags.length) {\n      event.tags = [];\n    }\n\n    EventPluginManager.run(context, (ctx: EventPluginContext) => {\n      const config = ctx.client.config;\n      const ev = ctx.event;\n\n      if (!ctx.cancelled) {\n        // ensure all required data\n        if (!ev.type || ev.type.length === 0) {\n          ev.type = 'log';\n        }\n\n        if (!ev.date) {\n          ev.date = new Date();\n        }\n\n        config.queue.enqueue(ev);\n\n        if (ev.reference_id && ev.reference_id.length > 0) {\n          ctx.log.info(`Setting last reference id '${ev.reference_id}'`);\n          config.lastReferenceIdManager.setLast(ev.reference_id);\n        }\n      }\n\n      !!callback && callback(ctx);\n    });\n  }\n\n  /**\n   * Updates the user's email address and description of an event for the specified reference id.\n   * @param referenceId The reference id of the event to update.\n   * @param email The user's email address to set on the event.\n   * @param description The user's description of the event.\n   * @param callback The submission response.\n   */\n  public updateUserEmailAndDescription(referenceId: string, email: string, description: string, callback?: (response: SubmissionResponse) => void) {\n    if (!referenceId || !email || !description || !this.config.enabled) {\n      return !!callback && callback(new SubmissionResponse(500, 'cancelled'));\n    }\n\n    const userDescription: IUserDescription = { email_address: email, description };\n    this.config.submissionClient.postUserDescription(referenceId, userDescription, this.config, (response: SubmissionResponse) => {\n      if (!response.success) {\n        this.config.log.error(`Failed to submit user email and description for event '${referenceId}': ${response.statusCode} ${response.message}`);\n      }\n\n      !!callback && callback(response);\n    });\n  }\n\n  /**\n   * Gets the last event client id that was submitted to the server.\n   * @returns {string} The event client id.\n   */\n  public getLastReferenceId(): string {\n    return this.config.lastReferenceIdManager.getLast();\n  }\n\n  private updateSettingsTimer(initialDelay?: number) {\n    this.config.log.info(`Updating settings timer with delay: ${initialDelay}`);\n\n    this._timeoutId = clearTimeout(this._timeoutId);\n    this._timeoutId = clearInterval(this._intervalId);\n\n    const interval = this.config.updateSettingsWhenIdleInterval;\n    if (interval > 0) {\n      const updateSettings = () => SettingsManager.updateSettings(this.config);\n      if (initialDelay > 0) {\n        this._timeoutId = setTimeout(updateSettings, initialDelay);\n      }\n\n      this._intervalId = setInterval(updateSettings, interval);\n    }\n  }\n\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   */\n  public static get default() {\n    if (ExceptionlessClient._instance === null) {\n      ExceptionlessClient._instance = new ExceptionlessClient(null);\n    }\n\n    return ExceptionlessClient._instance;\n  }\n}\n\nexport class ContextData {\n  public setException(exception: Error): void {\n    if (exception) {\n      this['@@_Exception'] = exception;\n    }\n  }\n\n  public get hasException(): boolean {\n    return !!this['@@_Exception'];\n  }\n\n  public getException(): Error {\n    return this['@@_Exception'] || null;\n  }\n\n  public markAsUnhandledError(): void {\n    this['@@_IsUnhandledError'] = true;\n  }\n\n  public get isUnhandledError(): boolean {\n    return !!this['@@_IsUnhandledError'];\n  }\n\n  public setSubmissionMethod(method: string): void {\n    if (method) {\n      this['@@_SubmissionMethod'] = method;\n    }\n  }\n\n  public getSubmissionMethod(): string {\n    return this['@@_SubmissionMethod'] || null;\n  }\n}\n\nexport interface IEnvironmentInfo {\n  processor_count?: number;\n  total_physical_memory?: number;\n  available_physical_memory?: number;\n  command_line?: string;\n  process_name?: string;\n  process_id?: string;\n  process_memory_size?: number;\n  thread_id?: string;\n  architecture?: string;\n  o_s_name?: string;\n  o_s_version?: string;\n  ip_address?: string;\n  machine_name?: string;\n  install_id?: string;\n  runtime_version?: string;\n  data?: any;\n}\n\nexport interface IParameter {\n  data?: any;\n  generic_arguments?: string[];\n\n  name?: string;\n  type?: string;\n  type_namespace?: string;\n}\n\n                                          \n\nexport interface IMethod {\n  data?: any;\n  generic_arguments?: string[];\n  parameters?: IParameter[];\n\n  is_signature_target?: boolean;\n  declaring_namespace?: string;\n  declaring_type?: string;\n  name?: string;\n  module_id?: number;\n}\n\n                                    \n\nexport interface IStackFrame extends IMethod {\n  file_name?: string;\n  line_number?: number;\n  column?: number;\n}\n\n                                                                                 \n\nexport interface IInnerError {\n  message?: string;\n  type?: string;\n  code?: string;\n  data?: any;\n  inner?: IInnerError;\n  stack_trace?: IStackFrame[];\n  target_method?: IMethod;\n}\n\nexport interface IModule {\n  data?: any;\n\n  module_id?: number;\n  name?: string;\n  version?: string;\n  is_entry?: boolean;\n  created_date?: Date;\n  modified_date?: Date;\n}\n\n                                                                                 \n\nexport interface IError extends IInnerError {\n  modules?: IModule[];\n}\n\nexport interface IRequestInfo {\n  user_agent?: string;\n  http_method?: string;\n  is_secure?: boolean;\n  host?: string;\n  port?: number;\n  path?: string;\n  referrer?: string;\n  client_ip_address?: string;\n  cookies?: any;\n  post_data?: any;\n  query_string?: any;\n  data?: any;\n}\n\nexport interface IStorageItem {\n  timestamp: number;\n  value: any;\n}\n\n                                              \n\nexport interface IStorage {\n  save(value: any): number;\n  get(limit?: number): IStorageItem[];\n  remove(timestamp: number): void;\n  clear(): void;\n}\n\nexport type SubmissionCallback = (status: number, message: string, data?: string, headers?: object) => void;\n\nexport interface SubmissionRequest {\n  apiKey: string;\n  userAgent: string;\n  method: string;\n  url: string;\n  data: string;\n}\n\nn\nexport class Configuration implements IConfigurationSettings {\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @type {IConfigurationSettings}\n   * @private\n   */\n  private static _defaultSettings: IConfigurationSettings = null;\n\n  /**\n   * A default list of tags that will automatically be added to every\n   * report submitted to the server.\n   *\n   * @type {Array}\n   */\n  public defaultTags: string[] = [];\n\n  /**\n   * A default list of of extended data objects that will automatically\n   * be added to every report submitted to the server.\n   *\n   * @type {{}}\n   */\n  public defaultData: object = {};\n\n  /**\n   * Whether the client is currently enabled or not. If it is disabled,\n   * submitted errors will be discarded and no data will be sent to the server.\n   *\n   * @returns {boolean}\n   */\n  public enabled: boolean = true;\n\n  public environmentInfoCollector: IEnvironmentInfoCollector;\n  public errorParser: IErrorParser;\n  public lastReferenceIdManager: ILastReferenceIdManager = new DefaultLastReferenceIdManager();\n  public log: ILog;\n  public moduleCollector: IModuleCollector;\n  public requestInfoCollector: IRequestInfoCollector;\n\n  /**\n   * Maximum number of events that should be sent to the server together in a batch. (Defaults to 50)\n   */\n  public submissionBatchSize: number;\n  public submissionAdapter: ISubmissionAdapter;\n  public submissionClient: ISubmissionClient;\n\n  /**\n   * Contains a dictionary of custom settings that can be used to control\n   * the client and will be automatically updated from the server.\n   */\n  public settings: object = {};\n\n  public storage: IStorageProvider;\n\n  public queue: IEventQueue;\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @type {string}\n   * @private\n   */\n  private _apiKey: string;\n\n  /**\n   * The server url that all events will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _serverUrl: string = 'https://collector.exceptionless.io';\n\n  /**\n   * The config server url that all configuration will be retrieved from.\n   * @type {string}\n   * @private\n   */\n  private _configServerUrl: string = 'https://config.exceptionless.io';\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _heartbeatServerUrl: string = 'https://heartbeat.exceptionless.io';\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @type {number}\n   * @private\n   */\n  private _updateSettingsWhenIdleInterval: number = 120000;\n\n  /**\n   * A list of exclusion patterns.\n   * @type {Array}\n   * @private\n   */\n  private _dataExclusions: string[] = [];\n\n  private _includePrivateInformation: boolean;\n  private _includeUserName: boolean;\n  private _includeMachineName: boolean;\n  private _includeIpAddress: boolean;\n  private _includeCookies: boolean;\n  private _includePostData: boolean;\n  private _includeQueryString: boolean;\n\n  /**\n   * A list of user agent patterns.\n   * @type {Array}\n   * @private\n   */\n  private _userAgentBotPatterns: string[] = [];\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @type {Array}\n   * @private\n   */\n  private _plugins: IEventPlugin[] = [];\n\n  /**\n   * A list of handlers that will be fired when configuration changes.\n   * @type {Array}\n   * @private\n   */\n  private _handlers: Array<(config: Configuration) => void> = [];\n\n  constructor(configSettings?: IConfigurationSettings) {\n    function inject(fn: any) {\n      return typeof fn === 'function' ? fn(this) : fn;\n    }\n\n    configSettings = Utils.merge(Configuration.defaults, configSettings);\n\n    this.log = inject(configSettings.log) || new NullLog();\n    this.apiKey = configSettings.apiKey;\n    this.serverUrl = configSettings.serverUrl;\n    this.configServerUrl = configSettings.configServerUrl;\n    this.heartbeatServerUrl = configSettings.heartbeatServerUrl;\n    this.updateSettingsWhenIdleInterval = configSettings.updateSettingsWhenIdleInterval;\n    this.includePrivateInformation = configSettings.includePrivateInformation;\n\n    this.environmentInfoCollector = inject(configSettings.environmentInfoCollector);\n    this.errorParser = inject(configSettings.errorParser);\n    this.lastReferenceIdManager = inject(configSettings.lastReferenceIdManager) || new DefaultLastReferenceIdManager();\n    this.moduleCollector = inject(configSettings.moduleCollector);\n    this.requestInfoCollector = inject(configSettings.requestInfoCollector);\n    this.submissionBatchSize = inject(configSettings.submissionBatchSize) || 50;\n    this.submissionAdapter = inject(configSettings.submissionAdapter);\n    this.submissionClient = inject(configSettings.submissionClient) || new DefaultSubmissionClient();\n    this.storage = inject(configSettings.storage) || new InMemoryStorageProvider();\n    this.queue = inject(configSettings.queue) || new DefaultEventQueue(this);\n\n    SettingsManager.applySavedServerSettings(this);\n    EventPluginManager.addDefaultPlugins(this);\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @returns {string}\n   */\n  public get apiKey(): string {\n    return this._apiKey;\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @param value\n   */\n  public set apiKey(value: string) {\n    this._apiKey = value || null;\n    this.log.info(`apiKey: ${this._apiKey}`);\n    this.changed();\n  }\n\n  /**\n   * Returns true if the apiKey is valid.\n   * @returns {boolean}\n   */\n  public get isValid(): boolean {\n    return !!this.apiKey && this.apiKey.length >= 10;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @returns {string}\n   */\n  public get serverUrl(): string {\n    return this._serverUrl;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @param value\n   */\n  public set serverUrl(value: string) {\n    if (!!value) {\n      this._serverUrl = value;\n      this._configServerUrl = value;\n      this._heartbeatServerUrl = value;\n      this.log.info(`serverUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * The config server url that all configuration will be retrieved from.\n   * @returns {string}\n   */\n  public get configServerUrl(): string {\n    return this._configServerUrl;\n  }\n\n  /**\n   * The config server url that all configuration will be retrieved from.\n   * @param value\n   */\n  public set configServerUrl(value: string) {\n    if (!!value) {\n      this._configServerUrl = value;\n      this.log.info(`configServerUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @returns {string}\n   */\n  public get heartbeatServerUrl(): string {\n    return this._heartbeatServerUrl;\n  }\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @param value\n   */\n  public set heartbeatServerUrl(value: string) {\n    if (!!value) {\n      this._heartbeatServerUrl = value;\n      this.log.info(`heartbeatServerUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @returns {number}\n   */\n  public get updateSettingsWhenIdleInterval(): number {\n    return this._updateSettingsWhenIdleInterval;\n  }\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @param value\n   */\n  public set updateSettingsWhenIdleInterval(value: number) {\n    if (typeof value !== 'number') {\n      return;\n    }\n\n    if (value <= 0) {\n      value = -1;\n    } else if (value > 0 && value < 120000) {\n      value = 120000;\n    }\n\n    this._updateSettingsWhenIdleInterval = value;\n    this.log.info(`updateSettingsWhenIdleInterval: ${value}`);\n    this.changed();\n  }\n\n  /**\n   *  A list of exclusion patterns that will automatically remove any data that\n   *  matches them from any data submitted to the server.\n   *\n   *  For example, entering CreditCard will remove any extended data properties,\n   *  form fields, cookies and query parameters from the report.\n   *\n   * @returns {string[]}\n   */\n  public get dataExclusions(): string[] {\n    const exclusions: string = this.settings['@@DataExclusions'];\n    return this._dataExclusions.concat(exclusions && exclusions.split(',') || []);\n  }\n\n  /**\n   * Add items to the list of exclusion patterns that will automatically remove any\n   * data that matches them from any data submitted to the server.\n   *\n   * For example, entering CreditCard will remove any extended data properties, form\n   * fields, cookies and query parameters from the report.\n   *\n   * @param exclusions\n   */\n  public addDataExclusions(...exclusions: string[]) {\n    this._dataExclusions = Utils.addRange<string>(this._dataExclusions, ...exclusions);\n  }\n\n  /**\n   * Gets a value indicating whether to include private information about the local machine.\n   * @returns {boolean}\n   */\n  public get includePrivateInformation(): boolean {\n    return this._includePrivateInformation;\n  }\n\n  /**\n   * Sets a value indicating whether to include private information about the local machine\n   * @param value\n   */\n  public set includePrivateInformation(value: boolean) {\n    const val = value || false;\n    this._includePrivateInformation = val;\n    this._includeUserName = val;\n    this._includeMachineName = val;\n    this._includeIpAddress = val;\n    this._includeCookies = val;\n    this._includePostData = val;\n    this._includeQueryString = val;\n    this.log.info(`includePrivateInformation: ${val}`);\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include User Name.\n   * @returns {boolean}\n   */\n  public get includeUserName(): boolean {\n    return this._includeUserName;\n  }\n\n  /**\n   * Sets a value indicating whether to include User Name.\n   * @param value\n   */\n  public set includeUserName(value: boolean) {\n    this._includeUserName = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include MachineName in MachineInfo.\n   * @returns {boolean}\n   */\n  public get includeMachineName(): boolean {\n    return this._includeMachineName;\n  }\n\n  /**\n   * Sets a value indicating whether to include MachineName in MachineInfo.\n   * @param value\n   */\n  public set includeMachineName(value: boolean) {\n    this._includeMachineName = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include Ip Addresses in MachineInfo and RequestInfo.\n   * @returns {boolean}\n   */\n  public get includeIpAddress(): boolean {\n    return this._includeIpAddress;\n  }\n\n  /**\n   * Sets a value indicating whether to include Ip Addresses in MachineInfo and RequestInfo.\n   * @param value\n   */\n  public set includeIpAddress(value: boolean) {\n    this._includeIpAddress = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include Cookies.\n   * NOTE: DataExclusions are applied to all Cookie keys when enabled.\n   * @returns {boolean}\n   */\n  public get includeCookies(): boolean {\n    return this._includeCookies;\n  }\n\n  /**\n   * Sets a value indicating whether to include Cookies.\n   * NOTE: DataExclusions are applied to all Cookie keys when enabled.\n   * @param value\n   */\n  public set includeCookies(value: boolean) {\n    this._includeCookies = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include Form/POST Data.\n   * NOTE: DataExclusions are only applied to Form data keys when enabled.\n   * @returns {boolean}\n   */\n  public get includePostData(): boolean {\n    return this._includePostData;\n  }\n\n  /**\n   * Sets a value indicating whether to include Form/POST Data.\n   * NOTE: DataExclusions are only applied to Form data keys when enabled.\n   * @param value\n   */\n  public set includePostData(value: boolean) {\n    this._includePostData = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include query string information.\n   * NOTE: DataExclusions are applied to all Query String keys when enabled.\n   * @returns {boolean}\n   */\n  public get includeQueryString(): boolean {\n    return this._includeQueryString;\n  }\n\n  /**\n   * Sets a value indicating whether to include query string information.\n   * NOTE: DataExclusions are applied to all Query String keys when enabled.\n   * @param value\n   */\n  public set includeQueryString(value: boolean) {\n    this._includeQueryString = value || false;\n    this.changed();\n  }\n\n  /**\n   * A list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @returns {string[]}\n   */\n  public get userAgentBotPatterns(): string[] {\n    const patterns: string = this.settings['@@UserAgentBotPatterns'];\n    return this._userAgentBotPatterns.concat(patterns && patterns.split(',') || []);\n  }\n\n  /**\n   * Add items to the list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @param userAgentBotPatterns\n   */\n  public addUserAgentBotPatterns(...userAgentBotPatterns: string[]) {\n    this._userAgentBotPatterns = Utils.addRange<string>(this._userAgentBotPatterns, ...userAgentBotPatterns);\n  }\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @returns {IEventPlugin[]}\n   */\n  public get plugins(): IEventPlugin[] {\n    return this._plugins.sort((p1: IEventPlugin, p2: IEventPlugin) => {\n      return (p1.priority < p2.priority) ? -1 : (p1.priority > p2.priority) ? 1 : 0;\n    });\n  }\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param plugin\n   */\n  public addPlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param name The name used to identify the plugin.\n   * @param priority Used to determine plugins priority.\n   * @param pluginAction A function that is run.\n   */\n  public addPlugin(name: string, priority: number, pluginAction: (context: EventPluginContext, next?: () => void) => void): void;\n  public addPlugin(pluginOrName: IEventPlugin | string, priority?: number, pluginAction?: (context: EventPluginContext, next?: () => void) => void): void {\n    const plugin: IEventPlugin = !!pluginAction ? { name: pluginOrName as string, priority, run: pluginAction } : pluginOrName as IEventPlugin;\n    if (!plugin || !plugin.run) {\n      this.log.error('Add plugin failed: Run method not defined');\n      return;\n    }\n\n    if (!plugin.name) {\n      plugin.name = Utils.guid();\n    }\n\n    if (!plugin.priority) {\n      plugin.priority = 0;\n    }\n\n    let pluginExists: boolean = false;\n    const plugins = this._plugins; // optimization for minifier.\n    for (const p of plugins) {\n      if (p.name === plugin.name) {\n        pluginExists = true;\n        break;\n      }\n    }\n\n    if (!pluginExists) {\n      plugins.push(plugin);\n    }\n  }\n\n  /**\n   * Remove the plugin from this configuration.\n   * @param plugin\n   */\n  public removePlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Remove an plugin by key from this configuration.\n   * @param name\n   */\n  public removePlugin(pluginOrName: IEventPlugin | string): void {\n    const name: string = typeof pluginOrName === 'string' ? pluginOrName : pluginOrName.name;\n    if (!name) {\n      this.log.error('Remove plugin failed: Plugin name not defined');\n      return;\n    }\n\n    const plugins = this._plugins; // optimization for minifier.\n    for (let index = 0; index < plugins.length; index++) {\n      if (plugins[index].name === name) {\n        plugins.splice(index, 1);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Automatically set the application version for events.\n   * @param version\n   */\n  public setVersion(version: string): void {\n    if (!!version) {\n      this.defaultData['@version'] = version;\n    }\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): void;\n  public setUserIdentity(identity: string): void;\n  public setUserIdentity(identity: string, name: string): void;\n  public setUserIdentity(userInfoOrIdentity: IUserInfo | string, name?: string): void {\n    const USER_KEY: string = '@user'; // optimization for minifier.\n    const userInfo: IUserInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name };\n\n    const shouldRemove: boolean = !userInfo || (!userInfo.identity && !userInfo.name);\n    if (shouldRemove) {\n      delete this.defaultData[USER_KEY];\n    } else {\n      this.defaultData[USER_KEY] = userInfo;\n    }\n\n    this.log.info(`user identity: ${shouldRemove ? 'null' : userInfo.identity}`);\n  }\n\n  /**\n   * Used to identify the client that sent the events to the server.\n   * @returns {string}\n   */\n  public get userAgent(): string {\n    return 'exceptionless-js/1.0.0.0';\n  }\n\n  /**\n   * Automatically send a heartbeat to keep the session alive.\n   */\n  public useSessions(sendHeartbeats: boolean = true, heartbeatInterval: number = 30000): void {\n    if (sendHeartbeats) {\n      this.addPlugin(new HeartbeatPlugin(heartbeatInterval));\n    }\n  }\n\n  /**\n   * Automatically set a reference id for error events.\n   */\n  public useReferenceIds(): void {\n    this.addPlugin(new ReferenceIdPlugin());\n  }\n\n  public useLocalStorage(): void {\n    // This method will be injected via the prototype.\n  }\n\n  // TODO: Support a min log level.\n  public useDebugLogger(): void {\n    this.log = new ConsoleLog();\n  }\n\n  public onChanged(handler: (config: Configuration) => void) {\n    !!handler && this._handlers.push(handler);\n  }\n\n  private changed() {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(this);\n      } catch (ex) {\n        this.log.error(`Error calling onChanged handler: ${ex}`);\n      }\n    }\n  }\n\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @returns {IConfigurationSettings}\n   */\n  public static get defaults() {\n    if (Configuration._defaultSettings === null) {\n      Configuration._defaultSettings = { includePrivateInformation: true };\n    }\n\n    return Configuration._defaultSettings;\n  }\n}\n\nexport interface IUserDescription {\n  email_address?: string;\n  description?: string;\n  data?: any;\n}\n\nexport class SettingsResponse {\n  public success: boolean = false;\n  public settings: any;\n  public settingsVersion: number = -1;\n  public message: string;\n  public exception: any;\n\n  constructor(success: boolean, settings: any, settingsVersion: number = -1, exception: any = null, message: string = null) {\n    this.success = success;\n    this.settings = settings;\n    this.settingsVersion = settingsVersion;\n    this.exception = exception;\n    this.message = message;\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                   \n\nexport class EventBuilder {\n  public target: IEvent;\n  public client: ExceptionlessClient;\n  public pluginContextData: ContextData;\n\n  private _validIdentifierErrorMessage: string = 'must contain between 8 and 100 alphanumeric or \\'-\\' characters.'; // optimization for minifier.\n\n  constructor(event: IEvent, client: ExceptionlessClient, pluginContextData?: ContextData) {\n    this.target = event;\n    this.client = client;\n    this.pluginContextData = pluginContextData || new ContextData();\n  }\n\n  public setType(type: string): EventBuilder {\n    if (!!type) {\n      this.target.type = type;\n    }\n\n    return this;\n  }\n\n  public setSource(source: string): EventBuilder {\n    if (!!source) {\n      this.target.source = source;\n    }\n\n    return this;\n  }\n\n  public setReferenceId(referenceId: string): EventBuilder {\n    if (!this.isValidIdentifier(referenceId)) {\n      throw new Error(`ReferenceId ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.target.reference_id = referenceId;\n    return this;\n  }\n\n  /**\n   * Allows you to reference a parent event by its ReferenceId property. This allows you to have parent and child relationships.\n   * @param name Reference name\n   * @param id The reference id that points to a specific event\n   * @returns {EventBuilder}\n   */\n  public setEventReference(name: string, id: string): EventBuilder {\n    if (!name) {\n      throw new Error('Invalid name');\n    }\n\n    if (!id || !this.isValidIdentifier(id)) {\n      throw new Error(`Id ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.setProperty('@ref:' + name, id);\n    return this;\n  }\n\n  public setMessage(message: string): EventBuilder {\n    if (!!message) {\n      this.target.message = message;\n    }\n\n    return this;\n  }\n\n  public setGeo(latitude: number, longitude: number): EventBuilder {\n    if (latitude < -90.0 || latitude > 90.0) {\n      throw new Error('Must be a valid latitude value between -90.0 and 90.0.');\n    }\n\n    if (longitude < -180.0 || longitude > 180.0) {\n      throw new Error('Must be a valid longitude value between -180.0 and 180.0.');\n    }\n\n    this.target.geo = `${latitude},${longitude}`;\n    return this;\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): EventBuilder;\n  public setUserIdentity(identity: string): EventBuilder;\n  public setUserIdentity(identity: string, name: string): EventBuilder;\n  public setUserIdentity(userInfoOrIdentity: IUserInfo | string, name?: string): EventBuilder {\n    const userInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name };\n    if (!userInfo || (!userInfo.identity && !userInfo.name)) {\n      return this;\n    }\n\n    this.setProperty('@user', userInfo);\n    return this;\n  }\n\n  /**\n   * Sets the user's description of the event.\n   *\n   * @param emailAddress The email address\n   * @param description The user's description of the event.\n   * @returns {EventBuilder}\n   */\n  public setUserDescription(emailAddress: string, description: string): EventBuilder {\n    if (emailAddress && description) {\n      this.setProperty('@user_description', { email_address: emailAddress, description });\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting manual\n   * stacking information.\n   * @param signatureData A dictionary of strings to use for stacking.\n   * @param title An optional title for the stacking information.\n   * @returns {EventBuilder}\n   */\n  public setManualStackingInfo(signatureData: any, title?: string) {\n    if (signatureData) {\n      const stack: IManualStackingInfo = { signature_data: signatureData };\n      if (title) {\n        stack.title = title;\n      }\n\n      this.setProperty('@stack', stack);\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting the stacking key.\n   * @param manualStackingKey The manual stacking key.\n   * @param title An optional title for the stacking information.\n   * @returns {EventBuilder}\n   */\n  public setManualStackingKey(manualStackingKey: string, title?: string): EventBuilder {\n    if (manualStackingKey) {\n      const data = { ManualStackingKey: manualStackingKey };\n      this.setManualStackingInfo(data, title);\n    }\n\n    return this;\n  }\n\n  public setValue(value: number): EventBuilder {\n    if (!!value) {\n      this.target.value = value;\n    }\n\n    return this;\n  }\n\n  public addTags(...tags: string[]): EventBuilder {\n    this.target.tags = Utils.addRange<string>(this.target.tags, ...tags);\n    return this;\n  }\n\n  /**\n   * Adds the object to extended data. Uses @excludedPropertyNames\n   * to exclude data from being included in the event.\n   * @param name The data object to add.\n   * @param value The name of the object to add.\n   * @param maxDepth The max depth of the object to include.\n   * @param excludedPropertyNames Any property names that should be excluded.\n   */\n  public setProperty(name: string, value: any, maxDepth?: number, excludedPropertyNames?: string[]): EventBuilder {\n    if (!name || (value === undefined || value == null)) {\n      return this;\n    }\n\n    if (!this.target.data) {\n      this.target.data = {};\n    }\n\n    const result = JSON.parse(Utils.stringify(value, this.client.config.dataExclusions.concat(excludedPropertyNames || []), maxDepth));\n    if (!Utils.isEmpty(result)) {\n      this.target.data[name] = result;\n    }\n\n    return this;\n  }\n\n  public markAsCritical(critical: boolean): EventBuilder {\n    if (critical) {\n      this.addTags('Critical');\n    }\n\n    return this;\n  }\n\n  public addRequestInfo(request: object): EventBuilder {\n    if (!!request) {\n      this.pluginContextData['@request'] = request;\n    }\n\n    return this;\n  }\n\n  public submit(callback?: (context: EventPluginContext) => void): void {\n    this.client.submitEvent(this.target, this.pluginContextData, callback);\n  }\n\n  private isValidIdentifier(value: string): boolean {\n    if (!value) {\n      return true;\n    }\n\n    if (value.length < 8 || value.length > 100) {\n      return false;\n    }\n\n    for (let index = 0; index < value.length; index++) {\n      const code = value.charCodeAt(index);\n      const isDigit = (code >= 48) && (code <= 57);\n      const isLetter = ((code >= 65) && (code <= 90)) || ((code >= 97) && (code <= 122));\n      const isMinus = code === 45;\n\n      if (!(isDigit || isLetter) && !isMinus) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nexport interface IManualStackingInfo {\n  title?: string;\n  signature_data?: any;\n}\n\n                                                                                                                                                \n\nexport class ConfigurationDefaultsPlugin implements IEventPlugin {\n  public priority: number = 10;\n  public name: string = 'ConfigurationDefaultsPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const config = context.client.config;\n    const defaultTags: string[] = config.defaultTags || [];\n    for (const tag of defaultTags) {\n      if (!!tag && context.event.tags.indexOf(tag) < 0) {\n        context.event.tags.push(tag);\n      }\n    }\n\n    // tslint:disable-next-line:ban-types\n    const defaultData: Object = config.defaultData || {};\n    for (const key in defaultData) {\n      if (!!defaultData[key]) {\n        const result = JSON.parse(Utils.stringify(defaultData[key], config.dataExclusions));\n        if (!Utils.isEmpty(result)) {\n          context.event.data[key] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                        \n\nexport class DuplicateCheckerPlugin implements IEventPlugin {\n  public priority: number = 1010;\n  public name: string = 'DuplicateCheckerPlugin';\n\n  private _mergedEvents: MergedEvent[] = [];\n  private _processedHashcodes: TimestampedHash[] = [];\n  private _getCurrentTime: () => number;\n  private _interval: number;\n\n  constructor(getCurrentTime: () => number = () => Date.now(), interval: number = 30000) {\n    this._getCurrentTime = getCurrentTime;\n    this._interval = interval;\n\n    setInterval(() => {\n      while (this._mergedEvents.length > 0) {\n        this._mergedEvents.shift().resubmit();\n      }\n    }, interval);\n  }\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    function getHashCode(e: IInnerError): number {\n      let hash = 0;\n      while (e) {\n        if (e.message && e.message.length) {\n          hash += (hash * 397) ^ Utils.getHashCode(e.message);\n        }\n        if (e.stack_trace && e.stack_trace.length) {\n          hash += (hash * 397) ^ Utils.getHashCode(JSON.stringify(e.stack_trace));\n        }\n        e = e.inner;\n      }\n\n      return hash;\n    }\n\n    const error = context.event.data['@error'];\n    const hashCode = getHashCode(error);\n    if (hashCode) {\n      const count = context.event.count || 1;\n      const now = this._getCurrentTime();\n\n      const merged = this._mergedEvents.filter((s) => s.hashCode === hashCode)[0];\n      if (merged) {\n        merged.incrementCount(count);\n        merged.updateDate(context.event.date);\n        context.log.info('Ignoring duplicate event with hash: ' + hashCode);\n        context.cancelled = true;\n      }\n\n      if (!context.cancelled && this._processedHashcodes.some((h) => h.hash === hashCode && h.timestamp >= (now - this._interval))) {\n        context.log.trace('Adding event with hash: ' + hashCode);\n        this._mergedEvents.push(new MergedEvent(hashCode, context, count));\n        context.cancelled = true;\n      }\n\n      if (!context.cancelled) {\n        context.log.trace('Enqueueing event with hash: ' + hashCode + 'to cache.');\n        this._processedHashcodes.push({ hash: hashCode, timestamp: now });\n\n        // Only keep the last 50 recent errors.\n        while (this._processedHashcodes.length > 50) {\n          this._processedHashcodes.shift();\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\ninterface TimestampedHash {\n  hash: number;\n  timestamp: number;\n}\n\nclass MergedEvent {\n  public hashCode: number;\n  private _count: number;\n  private _context: EventPluginContext;\n\n  constructor(hashCode: number, context: EventPluginContext, count: number) {\n    this.hashCode = hashCode;\n    this._context = context;\n    this._count = count;\n  }\n\n  public incrementCount(count: number) {\n    this._count += count;\n  }\n\n  public resubmit() {\n    this._context.event.count = this._count;\n    this._context.client.config.queue.enqueue(this._context.event);\n  }\n\n  public updateDate(date) {\n    if (date > this._context.event.date) {\n      this._context.event.date = date;\n    }\n  }\n}\n\n                                                                                                                                                                             \n\nexport class EnvironmentInfoPlugin implements IEventPlugin {\n  public priority: number = 80;\n  public name: string = 'EnvironmentInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ENVIRONMENT_KEY: string = '@environment'; // optimization for minifier.\n\n    const collector = context.client.config.environmentInfoCollector;\n    if (!context.event.data[ENVIRONMENT_KEY] && collector) {\n      const environmentInfo: IEnvironmentInfo = collector.getEnvironmentInfo(context);\n      if (!!environmentInfo) {\n        context.event.data[ENVIRONMENT_KEY] = environmentInfo;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                \n\nexport class ErrorPlugin implements IEventPlugin {\n  public priority: number = 30;\n  public name: string = 'ErrorPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\n    const ignoredProperties: string[] = [\n      'arguments',\n      'column',\n      'columnNumber',\n      'description',\n      'fileName',\n      'message',\n      'name',\n      'number',\n      'line',\n      'lineNumber',\n      'opera#sourceloc',\n      'sourceId',\n      'sourceURL',\n      'stack',\n      'stackArray',\n      'stacktrace'\n    ];\n\n    const exception = context.contextData.getException();\n    if (!!exception) {\n      context.event.type = 'error';\n\n      if (!context.event.data[ERROR_KEY]) {\n        const config = context.client.config;\n        const parser = config.errorParser;\n        if (!parser) {\n          throw new Error('No error parser was defined.');\n        }\n\n        const result = parser.parse(context, exception);\n        if (!!result) {\n          const additionalData = JSON.parse(Utils.stringify(exception, config.dataExclusions.concat(ignoredProperties)));\n          if (!Utils.isEmpty(additionalData)) {\n            if (!result.data) {\n              result.data = {};\n            }\n            result.data['@ext'] = additionalData;\n          }\n\n          context.event.data[ERROR_KEY] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                        \n\nexport class EventExclusionPlugin implements IEventPlugin {\n  public priority: number = 45;\n  public name: string = 'EventExclusionPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    function getLogLevel(level: string): number {\n      switch ((level || '').toLowerCase().trim()) {\n        case 'trace':\n        case 'true':\n        case '1':\n        case 'yes':\n          return 0;\n        case 'debug':\n          return 1;\n        case 'info':\n          return 2;\n        case 'warn':\n          return 3;\n        case 'error':\n          return 4;\n        case 'fatal':\n          return 5;\n        case 'off':\n        case 'false':\n        case '0':\n        case 'no':\n          return 6;\n        default:\n          return -1;\n      }\n    }\n\n    function getMinLogLevel(configSettings: object, loggerName: string = '*'): number {\n      return getLogLevel(getTypeAndSourceSetting(configSettings, 'log', loggerName, 'Trace') + '');\n    }\n\n    // tslint:disable-next-line:ban-types\n    function getTypeAndSourceSetting(configSettings: Object = {}, type: string, source: string, defaultValue?: string | boolean): string | boolean {\n      if (!type) {\n        return defaultValue;\n      }\n\n      const isLog = type === 'log';\n      const sourcePrefix = `@@${type}:`;\n\n      const value = configSettings[sourcePrefix + source];\n      if (value) {\n        return !isLog ? Utils.toBoolean(value) : value;\n      }\n\n      // check for wildcard match\n      for (const key in configSettings) {\n        if (Utils.startsWith(key.toLowerCase(), sourcePrefix.toLowerCase()) && Utils.isMatch(source, [key.substring(sourcePrefix.length)])) {\n          return !isLog ? Utils.toBoolean(configSettings[key]) : configSettings[key];\n        }\n      }\n\n      return defaultValue;\n    }\n\n    const ev = context.event;\n    const log = context.log;\n    const settings = context.client.config.settings;\n\n    if (ev.type === 'log') {\n      const minLogLevel = getMinLogLevel(settings, ev.source);\n      const logLevel = getLogLevel(ev.data['@level']);\n\n      if (logLevel >= 0 && (logLevel > 5 || logLevel < minLogLevel)) {\n        log.info('Cancelling log event due to minimum log level.');\n        context.cancelled = true;\n      }\n    } else if (ev.type === 'error') {\n      let error: IInnerError = ev.data['@error'];\n      while (!context.cancelled && error) {\n        if (getTypeAndSourceSetting(settings, ev.type, error.type, true) === false) {\n          log.info(`Cancelling error from excluded exception type: ${error.type}`);\n          context.cancelled = true;\n        }\n\n        error = error.inner;\n      }\n    } else if (getTypeAndSourceSetting(settings, ev.type, ev.source, true) === false) {\n      log.info(`Cancelling event from excluded type: ${ev.type} and source: ${ev.source}`);\n      context.cancelled = true;\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                           \n\nexport class ModuleInfoPlugin implements IEventPlugin {\n  public priority: number = 50;\n  public name: string = 'ModuleInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\n\n    const collector = context.client.config.moduleCollector;\n    if (context.event.data[ERROR_KEY] && !context.event.data['@error'].modules && !!collector) {\n      const modules: IModule[] = collector.getModules(context);\n      if (modules && modules.length > 0) {\n        context.event.data[ERROR_KEY].modules = modules;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                          \n\nexport class RequestInfoPlugin implements IEventPlugin {\n  public priority: number = 70;\n  public name: string = 'RequestInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const REQUEST_KEY: string = '@request'; // optimization for minifier.\n\n    const config = context.client.config;\n    const collector = config.requestInfoCollector;\n    if (!context.event.data[REQUEST_KEY] && !!collector) {\n      const requestInfo: IRequestInfo = collector.getRequestInfo(context);\n      if (!!requestInfo) {\n        if (Utils.isMatch(requestInfo.user_agent, config.userAgentBotPatterns)) {\n          context.log.info('Cancelling event as the request user agent matches a known bot pattern');\n          context.cancelled = true;\n        } else {\n          context.event.data[REQUEST_KEY] = requestInfo;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                           \n\nexport class SubmissionMethodPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = 'SubmissionMethodPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const submissionMethod: string = context.contextData.getSubmissionMethod();\n    if (!!submissionMethod) {\n      context.event.data['@submission_method'] = submissionMethod;\n    }\n\n    next && next();\n  }\n}\n\n                                                                                     \n\nexport class InMemoryStorage implements IStorage {\n  private maxItems: number;\n  private items: IStorageItem[] = [];\n  private lastTimestamp: number = 0;\n\n  constructor(maxItems: number) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any): number {\n    if (!value) {\n      return null;\n    }\n\n    const items = this.items;\n    const timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    const item = { timestamp, value };\n\n    if (items.push(item) > this.maxItems) {\n      items.shift();\n    }\n\n    this.lastTimestamp = timestamp;\n    return item.timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    return this.items.slice(0, limit);\n  }\n\n  public remove(timestamp: number): void {\n    const items = this.items;\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].timestamp === timestamp) {\n        items.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  public clear(): void {\n    this.items = [];\n  }\n}\n\nexport interface IClientConfiguration {\n  settings: object;\n  version: number;\n}\n\n                                                                                     \n\nexport abstract class KeyValueStorageBase implements IStorage {\n  private maxItems: number;\n  private items: number[];\n  private lastTimestamp: number = 0;\n\n  constructor(maxItems) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any, single?: boolean): number {\n    if (!value) {\n      return null;\n    }\n\n    this.ensureIndex();\n\n    const items = this.items;\n    const timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    const key = this.getKey(timestamp);\n    const json = JSON.stringify(value);\n\n    try {\n      this.write(key, json);\n      this.lastTimestamp = timestamp;\n      if (items.push(timestamp) > this.maxItems) {\n        this.delete(this.getKey(items.shift()));\n      }\n    } catch (e) {\n      return null;\n    }\n\n    return timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    this.ensureIndex();\n\n    return this.items.slice(0, limit)\n      .map((timestamp) => {\n        // Read and parse item for this timestamp\n        const key = this.getKey(timestamp);\n        try {\n          const json = this.read(key);\n          const value = JSON.parse(json, parseDate);\n          return { timestamp, value };\n        } catch (error) {\n          // Something went wrong - try to delete the cause.\n          this.safeDelete(key);\n          return null;\n        }\n      })\n      .filter((item) => item != null);\n  }\n\n  public remove(timestamp: number): void {\n    this.ensureIndex();\n\n    const items = this.items;\n    const index = items.indexOf(timestamp);\n    if (index >= 0) {\n      const key = this.getKey(timestamp);\n      this.safeDelete(key);\n      items.splice(index, 1);\n    }\n  }\n\n  public clear(): void {\n    this.items.forEach((item) => this.safeDelete(this.getKey(item)));\n    this.items = [];\n  }\n\n  protected abstract write(key: string, value: string): void;\n  protected abstract read(key: string): string;\n  protected abstract readAllKeys(): string[];\n  protected abstract delete(key: string);\n  protected abstract getKey(timestamp: number): string;\n  protected abstract getTimestamp(key: string): number;\n\n  private ensureIndex() {\n    if (!this.items) {\n      this.items = this.createIndex();\n      this.lastTimestamp = Math.max(0, ...this.items) + 1;\n    }\n  }\n\n  private safeDelete(key: string): void {\n    try {\n      this.delete(key);\n    } catch (error) {\n    }\n  }\n\n  private createIndex() {\n    try {\n      const keys = this.readAllKeys();\n      return keys.map((key) => {\n        try {\n          const timestamp = this.getTimestamp(key);\n          if (!timestamp) {\n            this.safeDelete(key);\n            return null;\n          }\n          return timestamp;\n        } catch (error) {\n          this.safeDelete(key);\n          return null;\n        }\n      }).filter((timestamp) => timestamp != null)\n        .sort((a, b) => a - b);\n    } catch (error) {\n      return [];\n    }\n  }\n}\n\nfunction parseDate(key, value) {\n  const dateRegx = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/g;\n  if (typeof value === 'string') {\n    const a = dateRegx.exec(value);\n    if (a) {\n      return new Date(value);\n    }\n  }\n  return value;\n}\n\n                                                            \n\nexport class BrowserStorage extends KeyValueStorageBase {\n  private prefix: string;\n\n  public static isAvailable(): boolean {\n    try {\n      const storage = window.localStorage;\n      const x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  constructor(namespace: string, prefix: string = 'com.exceptionless.', maxItems: number = 20) {\n    super(maxItems);\n\n    this.prefix = prefix + namespace + '-';\n  }\n\n  public write(key: string, value: string) {\n    window.localStorage.setItem(key, value);\n  }\n\n  public read(key: string) {\n    return window.localStorage.getItem(key);\n  }\n\n  public readAllKeys() {\n    return Object.keys(window.localStorage)\n      .filter((key) => key.indexOf(this.prefix) === 0);\n  }\n\n  public delete(key: string) {\n    window.localStorage.removeItem(key);\n  }\n\n  public getKey(timestamp) {\n    return this.prefix + timestamp;\n  }\n\n  public getTimestamp(key) {\n    return parseInt(key.substr(this.prefix.length), 10);\n  }\n}\n\n                                                                                                                                                                                                                                                                                                           \n\nexport class DefaultErrorParser implements IErrorParser {\n  public parse(context: EventPluginContext, exception: Error): IError {\n    function getParameters(parameters: string | string[]): IParameter[] {\n      const params: string[] = (typeof parameters === 'string' ? [parameters] : parameters) || [];\n\n      const result: IParameter[] = [];\n      for (const param of params) {\n        result.push({ name: param });\n      }\n\n      return result;\n    }\n\n    function getStackFrames(stackFrames: TraceKit.StackFrame[]): IStackFrame[] {\n      const ANONYMOUS: string = '<anonymous>';\n      const frames: IStackFrame[] = [];\n\n      for (const frame of stackFrames) {\n        frames.push({\n          name: (frame.func || ANONYMOUS).replace('?', ANONYMOUS),\n          parameters: getParameters(frame.args),\n          file_name: frame.url,\n          line_number: frame.line || 0,\n          column: frame.column || 0\n        });\n      }\n\n      return frames;\n    }\n\n    const TRACEKIT_STACK_TRACE_KEY: string = '@@_TraceKit.StackTrace'; // optimization for minifier.\n\n    const stackTrace: TraceKit.StackTrace = !!context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      ? context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      : TraceKit.computeStackTrace(exception, 25);\n\n    if (!stackTrace) {\n      throw new Error('Unable to parse the exceptions stack trace.');\n    }\n\n    const message = typeof (exception) === 'string' ? exception as any : undefined;\n    return {\n      type: stackTrace.name || 'Error',\n      message: stackTrace.message || exception.message || message,\n      stack_trace: getStackFrames(stackTrace.stack || [])\n    };\n  }\n}\n\n                                                                                                                                                                                                         \n\nexport class DefaultModuleCollector implements IModuleCollector {\n  public getModules(context: EventPluginContext): IModule[] {\n    if (!document || !document.getElementsByTagName) {\n      return null;\n    }\n\n    const modules: IModule[] = [];\n    const scripts: NodeListOf<HTMLScriptElement> = document.getElementsByTagName('script');\n    if (scripts && scripts.length > 0) {\n      for (let index = 0; index < scripts.length; index++) {\n        if (scripts[index].src) {\n          modules.push({\n            module_id: index,\n            name: scripts[index].src.split('?')[0],\n            version: Utils.parseVersion(scripts[index].src)\n          });\n        } else if (!!scripts[index].innerHTML) {\n          modules.push({\n            module_id: index,\n            name: 'Script Tag',\n            version: Utils.getHashCode(scripts[index].innerHTML).toString()\n          });\n        }\n      }\n    }\n\n    return modules;\n  }\n}\n\n                                                                                                                                                                                                                             \n\nexport class DefaultRequestInfoCollector implements IRequestInfoCollector {\n  public getRequestInfo(context: EventPluginContext): IRequestInfo {\n    if (!document || !navigator || !location) {\n      return null;\n    }\n\n    const config = context.client.config;\n    const exclusions = config.dataExclusions;\n    const requestInfo: IRequestInfo = {\n      user_agent: navigator.userAgent,\n      is_secure: location.protocol === 'https:',\n      host: location.hostname,\n      port: location.port && location.port !== '' ? parseInt(location.port, 10) : 80,\n      path: location.pathname\n      // client_ip_address: 'TODO'\n    };\n\n    if (config.includeCookies) {\n      requestInfo.cookies = Utils.getCookies(document.cookie, exclusions);\n    }\n\n    if (config.includeQueryString) {\n      requestInfo.query_string = Utils.parseQueryString(location.search.substring(1), exclusions);\n    }\n\n    if (document.referrer && document.referrer !== '') {\n      requestInfo.referrer = document.referrer;\n    }\n\n    return requestInfo;\n  }\n}\n\n                                                                                                                                                \n\nexport class BrowserStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(prefix?: string, maxQueueItems: number = 250) {\n    this.queue = new BrowserStorage('q', prefix, maxQueueItems);\n    this.settings = new BrowserStorage('settings', prefix, 1);\n  }\n\n}\n\n                                                                                                                                                                              \n\n// tslint:disable-next-line:prefer-const\ndeclare var XDomainRequest: { new(); create(); };\n\nexport class DefaultSubmissionAdapter implements ISubmissionAdapter {\n  public sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean) {\n    // TODO: Handle sending events when app is exiting with send beacon.\n    const TIMEOUT: string = 'timeout';  // optimization for minifier.\n    const LOADED: string = 'loaded';  // optimization for minifier.\n    const WITH_CREDENTIALS: string = 'withCredentials';  // optimization for minifier.\n\n    let isCompleted: boolean = false;\n    let useSetTimeout: boolean = false;\n    function complete(mode: string, xhrRequest: XMLHttpRequest) {\n      function parseResponseHeaders(headerStr) {\n        function trim(value) {\n          return value.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n        }\n\n        const headers = {};\n        const headerPairs = (headerStr || '').split('\\u000d\\u000a');\n        for (const headerPair of headerPairs) {\n          // Can't use split() here because it does the wrong thing\n          // if the header value has the string \": \" in it.\n          const separator = headerPair.indexOf('\\u003a\\u0020');\n          if (separator > 0) {\n            headers[trim(headerPair.substring(0, separator).toLowerCase())] = headerPair.substring(separator + 2);\n          }\n        }\n\n        return headers;\n      }\n\n      if (isCompleted) {\n        return;\n      }\n\n      isCompleted = true;\n\n      let message: string = xhrRequest.statusText;\n      const responseText: string = xhrRequest.responseText;\n      let status: number = xhrRequest.status;\n\n      if (mode === TIMEOUT || status === 0) {\n        message = 'Unable to connect to server.';\n        status = 0;\n      } else if (mode === LOADED && !status) {\n        status = request.method === 'POST' ? 202 : 200;\n      } else if (status < 200 || status > 299) {\n        const responseBody: any = (xhrRequest as any).responseBody;\n        if (!!responseBody && !!responseBody.message) {\n          message = responseBody.message;\n        } else if (!!responseText && responseText.indexOf('message') !== -1) {\n          try {\n            message = JSON.parse(responseText).message;\n          } catch (e) {\n            message = responseText;\n          }\n        }\n      }\n\n      callback && callback(status || 500, message || '', responseText, parseResponseHeaders(xhrRequest.getAllResponseHeaders && xhrRequest.getAllResponseHeaders()));\n    }\n\n    function createRequest(userAgent: string, method: string, uri: string): XMLHttpRequest {\n      let xmlRequest: any = new XMLHttpRequest();\n      if (WITH_CREDENTIALS in xmlRequest) {\n        xmlRequest.open(method, uri, true);\n\n        xmlRequest.setRequestHeader('X-Exceptionless-Client', userAgent);\n        if (method === 'POST') {\n          xmlRequest.setRequestHeader('Content-Type', 'application/json');\n        }\n      } else if (typeof XDomainRequest !== 'undefined') {\n        useSetTimeout = true;\n        xmlRequest = new XDomainRequest();\n        xmlRequest.open(method, location.protocol === 'http:' ? uri.replace('https:', 'http:') : uri);\n      } else {\n        xmlRequest = null;\n      }\n\n      if (xmlRequest) {\n        xmlRequest.timeout = 10000;\n      }\n\n      return xmlRequest;\n    }\n\n    const url = `${request.url}${(request.url.indexOf('?') === -1 ? '?' : '&')}access_token=${encodeURIComponent(request.apiKey)}`;\n    const xhr = createRequest(request.userAgent, request.method || 'POST', url);\n    if (!xhr) {\n      return (callback && callback(503, 'CORS not supported.'));\n    }\n\n    if (WITH_CREDENTIALS in xhr) {\n      xhr.onreadystatechange = () => {\n        // xhr not ready.\n        if (xhr.readyState !== 4) {\n          return;\n        }\n\n        complete(LOADED, xhr);\n      };\n    }\n\n    xhr.onprogress = () => { };\n    xhr.ontimeout = () => complete(TIMEOUT, xhr);\n    xhr.onerror = () => complete('error', xhr);\n    xhr.onload = () => complete(LOADED, xhr);\n\n    if (useSetTimeout) {\n      setTimeout(() => xhr.send(request.data), 500);\n    } else {\n      xhr.send(request.data);\n    }\n  }\n}\n\nn\n(function init() {\n  function getDefaultsSettingsFromScriptTag(): IConfigurationSettings {\n    if (!document || !document.getElementsByTagName) {\n      return null;\n    }\n\n    const scripts = document.getElementsByTagName('script');\n    // tslint:disable-next-line:prefer-for-of\n    for (let index = 0; index < scripts.length; index++) {\n      if (scripts[index].src && scripts[index].src.indexOf('/exceptionless') > -1) {\n        return Utils.parseQueryString(scripts[index].src.split('?').pop());\n      }\n    }\n    return null;\n  }\n\n  function processUnhandledException(stackTrace: TraceKit.StackTrace, options?: any): void {\n    const builder = ExceptionlessClient.default.createUnhandledException(new Error(stackTrace.message || (options || {}).status || 'Script error'), 'onerror');\n    builder.pluginContextData['@@_TraceKit.StackTrace'] = stackTrace;\n    builder.submit();\n  }\n\n  if (typeof document === 'undefined') {\n    return;\n  }\n\n  /*\n   TODO: We currently are unable to parse string exceptions.\n   function processJQueryAjaxError(event, xhr, settings, error:string): void {\n   let client = ExceptionlessClient.default;\n   if (xhr.status === 404) {\n   client.submitNotFound(settings.url);\n   } else if (xhr.status !== 401) {\n   client.createUnhandledException(error, 'JQuery.ajaxError')\n   .setSource(settings.url)\n   .setProperty('status', xhr.status)\n   .setProperty('request', settings.data)\n   .setProperty('response', xhr.responseText && xhr.responseText.slice && xhr.responseText.slice(0, 1024))\n   .submit();\n   }\n   }\n   */\n\n  Configuration.prototype.useLocalStorage = function() {\n    if (BrowserStorage.isAvailable()) {\n      this.storage = new BrowserStorageProvider();\n      SettingsManager.applySavedServerSettings(this);\n      this.changed();\n    }\n  };\n\n  const defaults = Configuration.defaults;\n  const settings = getDefaultsSettingsFromScriptTag();\n  if (settings) {\n    if (settings.apiKey) {\n      defaults.apiKey = settings.apiKey;\n    }\n\n    if (settings.serverUrl) {\n      defaults.serverUrl = settings.serverUrl;\n    }\n\n    if (typeof settings.includePrivateInformation === 'string') {\n      defaults.includePrivateInformation = settings.includePrivateInformation === 'false' ? false : true;\n    }\n  }\n\n  defaults.errorParser = new DefaultErrorParser();\n  defaults.moduleCollector = new DefaultModuleCollector();\n  defaults.requestInfoCollector = new DefaultRequestInfoCollector();\n  defaults.submissionAdapter = new DefaultSubmissionAdapter();\n\n  TraceKit.report.subscribe(processUnhandledException);\n  TraceKit.extendToAsynchronousCallbacks();\n\n  // window && window.addEventListener && window.addEventListener('beforeunload', function () {\n  //   ExceptionlessClient.default.config.queue.process(true);\n  // });\n\n  // if (typeof $ !== 'undefined' && $(document)) {\n  //   $(document).ajaxError(processJQueryAjaxError);\n  // }\n\n  (Error as any).stackTraceLimit = Infinity;\n})();\n\n// tslint:disable-next-line:prefer-const\ndeclare var $;\n\n"]}