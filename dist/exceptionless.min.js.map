{"version":3,"sources":["tracekit.js","exceptionless.ts"],"names":["window","undefined","_has","object","key","Object","prototype","hasOwnProperty","call","_isUndefined","what","TraceKit","_oldTraceKit","_slice","slice","UNKNOWN_FUNCTION","noConflict","wrap","func","apply","this","arguments","e","report","notifyHandlers","stack","isWindowError","exception","collectWindowErrors","i","handlers","concat","inner","traceKitWindowOnError","message","url","lineNo","columnNo","errorObj","lastExceptionStack","computeStackTrace","augmentStackTraceWithInitialElement","processLastException","location","line","column","guessFunctionName","context","gatherContext","mode","_oldOnerrorHandler","installGlobalHandler","_onErrorHandlerInstalled","onerror","_lastExceptionStack","_lastArgs","lastArgs","lastException","ex","setTimeout","incomplete","subscribe","handler","push","unsubscribe","length","splice","loadSource","remoteFetching","request","XMLHttpRequest","ActiveXObject","open","send","responseText","getSource","sourceCache","source","domain","document","match","exec","split","m","reFunctionArgNames","reGuessFunction","linesBefore","Math","floor","linesOfContext","linesAfter","start","max","end","min","escapeRegExp","text","replace","escapeCodeAsRegExpForMatchingInsideHTML","body","findSourceInUrls","re","urls","j","join","substring","index","lastIndexOf","findSourceInLine","fragment","RegExp","findSourceByFunctionBody","parts","result","href","scripts","getElementsByTagName","code","codeRE","eventRE","script","src","name","args","event","computeStackTraceFromStackProp","element","chrome","gecko","winjs","lines","reference","isNative","indexOf","columnNumber","computeStackTraceFromStacktraceProp","stacktrace","opera10Regex","opera11Regex","exc","computeStackTraceFromOperaMultiLineMessage","lineRE1","lineRE2","lineRE3","inlineScriptBlocks","s","item","relativeLine","pos","innerText","midline","stackInfo","initial","unshift","partial","computeStackTraceByWalkingCallerChain","depth","functionName","funcs","recursion","curr","caller","toString","input","description","sourceURL","fileName","lineNumber","debug","ofCaller","Error","extendToAsynchronousCallbacks","_helper","fnName","originalFn","originalCallback","module","exports","define","amd","global","parseDate","value","dateRegx","Date","browserInit","Configuration","useLocalStorage","BrowserStorage","isAvailable","storage","BrowserStorageProvider","SettingsManager","applySavedServerSettings","changed","defaults","settings","Utils","parseQueryString","pop","apiKey","serverUrl","stackTrace","options","builder","ExceptionlessClient","default","createUnhandledException","status","pluginContextData","submit","__extends","extendStatics","setPrototypeOf","__proto__","Array","d","b","p","__","constructor","create","require","DefaultLastReferenceIdManager","_lastReferenceId","getLast","clearLast","setLast","eventId","ConsoleLog","trace","log","info","warn","error","level","console","msg","NullLog","HeartbeatPlugin","heartbeatInterval","priority","_interval","run","next","clearInterval","_intervalId","user","data","identity","setInterval","client","submitSessionHeartbeat","ReferenceIdPlugin","reference_id","type","guid","EventPluginContext","contextData","ContextData","defineProperty","get","config","callback","plugin","cancelled","plugins","wrappedPlugins","EventPluginManager","addDefaultPlugins","addPlugin","ConfigurationDefaultsPlugin","ErrorPlugin","DuplicateCheckerPlugin","EventExclusionPlugin","ModuleInfoPlugin","RequestInfoPlugin","EnvironmentInfoPlugin","SubmissionMethodPlugin","DefaultEventQueue","_handlers","_processingQueue","_config","enqueue","enabled","isValid","areQueuedItemsDiscarded","ensureQueueTimer","timestamp","queue","save","logText","process","isAppExiting","_this","events_1","submissionBatchSize","submissionClient","postEvents","map","response","processSubmissionResponse","eventsPosted","suspendProcessing","durationInMinutes","discardFutureQueuedItems","clearQueue","_suspendProcessingUntil","getTime","_discardQueuedItemsUntil","clear","onEventsPosted","events","_i","handlers_1","_queueTimer","onProcessQueue","isQueueProcessingSuspended","success","removeEvents","serviceUnavailable","paymentRequired","unableToAuthenticate","notFound","badRequest","requestEntityTooLarge","round","remove","InMemoryStorageProvider","maxQueueItems","InMemoryStorage","DefaultSubmissionClient","configurationVersionHeader","JSON","stringify","createRequest","cb","createSubmissionCallback","submissionAdapter","sendRequest","postUserDescription","referenceId","path","encodeURIComponent","getSettings","version","headers","SettingsResponse","parse","isNaN","sendHeartbeat","sessionIdOrUserId","closeSession","heartbeatServerUrl","method","userAgent","settingsVersion","parseInt","checkVersion","target","values","_a","values_1","getHashCode","hash","charCodeAt","getCookies","cookies","exclusions","parts_1","cookie","isMatch","isEmpty","s4","random","merge","defaultValues","matches","query","pairs","pairs_1","decodeURIComponent","patterns","ignoreCase","trim","toLowerCase","some","pattern","startsWithWildcard","endsWithWildcard","endsWith","startsWith","keys","prefix","suffix","maxDepth","stringifyImpl","obj","excludedKeys","cache","flattened","prop","defaultValue","onChanged","savedSettings","getSavedServerSettings","getVersion","currentVersion","updateSettings","savedServerSettings","newSettings","unableToUpdateMessage","handlers_2","statusCode","SubmissionResponse","settingsOrApiKey","updateSettingsTimer","_timeoutId","createException","setException","createEvent","setType","submitException","submissionMethod","markAsUnhandledError","setSubmissionMethod","submitUnhandledException","createFeatureUsage","feature","setSource","submitFeatureUsage","createLog","sourceOrMessage","setMessage","setProperty","submitLog","createNotFound","resource","submitNotFound","createSessionStart","submitSessionStart","submitSessionEnd","EventBuilder","date","submitEvent","tags","ctx","ev","lastReferenceIdManager","updateUserEmailAndDescription","email","userDescription","email_address","getLastReferenceId","initialDelay","clearTimeout","interval","updateSettingsWhenIdleInterval","_instance","enumerable","configurable","getException","getSubmissionMethod","configSettings","inject","fn","defaultTags","defaultData","_serverUrl","_heartbeatServerUrl","_updateSettingsWhenIdleInterval","_dataExclusions","_userAgentBotPatterns","_plugins","environmentInfoCollector","errorParser","moduleCollector","requestInfoCollector","_apiKey","set","addRange","userAgentBotPatterns","sort","p1","p2","pluginOrName","pluginAction","pluginExists","plugins_1","removePlugin","setVersion","setUserIdentity","userInfoOrIdentity","userInfo","shouldRemove","useSessions","sendHeartbeats","useReferenceIds","useDebugLogger","handlers_3","_defaultSettings","_validIdentifierErrorMessage","setReferenceId","isValidIdentifier","setEventReference","id","setGeo","latitude","longitude","geo","setUserDescription","emailAddress","setManualStackingInfo","signatureData","title","signature_data","setManualStackingKey","manualStackingKey","ManualStackingKey","setValue","addTags","excludedPropertyNames","dataExclusions","markAsCritical","critical","addRequestInfo","isDigit","isLetter","isMinus","defaultTags_1","tag","getCurrentTime","now","_mergedEvents","_processedHashcodes","shift","resubmit","hashCode","stack_trace","count","now_1","_getCurrentTime","merged","filter","incrementCount","updateDate","h","MergedEvent","_context","_count","collector","environmentInfo","getEnvironmentInfo","ignoredProperties","parser","additionalData","getLogLevel","isLog","sourcePrefix","toBoolean","minLogLevel","loggerName","getTypeAndSourceSetting","logLevel","modules","getModules","requestInfo","getRequestInfo","user_agent","maxItems","items","lastTimestamp","limit","KeyValueStorageBase","single","ensureIndex","getKey","json","write","delete","read","safeDelete","forEach","createIndex","readAllKeys","getTimestamp","a","_super","namespace","localStorage","x","setItem","removeItem","getItem","substr","DefaultErrorParser","getParameters","parameters","params_1","param","stackFrames","frames","stackFrames_1","frame","file_name","line_number","module_id","parseVersion","innerHTML","DefaultModuleCollector","DefaultRequestInfoCollector","navigator","is_secure","protocol","host","hostname","port","pathname","query_string","search","referrer","complete","xhr","isCompleted","statusText","TIMEOUT","LOADED","responseBody","headerStr","headerPairs_1","headerPair","separator","getAllResponseHeaders","WITH_CREDENTIALS","setRequestHeader","XDomainRequest","useSetTimeout","timeout","onreadystatechange","readyState","onprogress","ontimeout","onload","DefaultSubmissionAdapter","isBrowser"],"mappings":"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","file":"exceptionless.min.js","sourcesContent":["/**\n * https://github.com/csnover/TraceKit\n * @license MIT\n * @namespace TraceKit\n */\n(function(window, undefined) {\nif (!window) {\n    return;\n}\n\nvar TraceKit = {};\nvar _oldTraceKit = window.TraceKit;\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n/**\n * A better form of hasOwnProperty<br/>\n * Example: `_has(MainHostObject, property) === true/false`\n *\n * @param {Object} object to check property\n * @param {string} key to check\n * @return {Boolean} true if the object has the key and it is not inherited\n */\nfunction _has(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\n\n/**\n * Returns true if the parameter is undefined<br/>\n * Example: `_isUndefined(val) === true/false`\n *\n * @param {*} what Value to check\n * @return {Boolean} true if undefined and false otherwise\n */\nfunction _isUndefined(what) {\n    return typeof what === 'undefined';\n}\n\n/**\n * Export TraceKit out to another variable<br/>\n * Example: `var TK = TraceKit.noConflict()`\n * @return {Object} The TraceKit object\n * @memberof TraceKit\n */\nTraceKit.noConflict = function noConflict() {\n    window.TraceKit = _oldTraceKit;\n    return TraceKit;\n};\n\n/**\n * Wrap any function in a TraceKit reporter<br/>\n * Example: `func = TraceKit.wrap(func);`\n *\n * @param {Function} func Function to be wrapped\n * @return {Function} The wrapped func\n * @memberof TraceKit\n */\nTraceKit.wrap = function traceKitWrapper(func) {\n    function wrapped() {\n        try {\n            return func.apply(this, arguments);\n        } catch (e) {\n            TraceKit.report(e);\n            throw e;\n        }\n    }\n    return wrapped;\n};\n\n/**\n * Cross-browser processing of unhandled exceptions\n *\n * Syntax:\n * ```js\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n * ```\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *     on top frame; column number is not guaranteed\n *   - Opera: full stack trace with line and column numbers\n *   - Chrome: full stack trace with line and column numbers\n *   - Safari: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *   - IE: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a TraceKit.StackTrace object as described in the\n * TraceKit.computeStackTrace docs.\n *\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.report = (function reportModuleWrapper() {\n    var handlers = [],\n        lastArgs = null,\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {TraceKit.StackTrace} stack\n     * @param {boolean} isWindowError Is this a top-level window error?\n     * @memberof TraceKit.report\n     * @throws An exception if an error occurs while calling an handler.\n     */\n    function notifyHandlers(stack, isWindowError) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n          return;\n        }\n        for (var i in handlers) {\n            if (_has(handlers, i)) {\n                try {\n                    handlers[i].apply(null, [stack].concat(_slice.call(arguments, 2)));\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error occurred.\n     * @param {(number|string)=} columnNo The column number at which the error occurred.\n     * @param {Error=} errorObj The actual Error object.\n     * @memberof TraceKit.report\n     */\n    function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {\n        var stack = null;\n\n        if (lastExceptionStack) {\n            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n    \t    processLastException();\n\t    } else if (errorObj) {\n            stack = TraceKit.computeStackTrace(errorObj);\n            notifyHandlers(stack, true);\n        } else {\n            var location = {\n              'url': url,\n              'line': lineNo,\n              'column': columnNo\n            };\n            location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);\n            location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);\n            stack = {\n              'mode': 'onerror',\n              'message': message,\n              'stack': [location]\n            };\n\n            notifyHandlers(stack, true);\n        }\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    /**\n     * Install a global onerror handler\n     * @memberof TraceKit.report\n     */\n    function installGlobalHandler () {\n        if (_onErrorHandlerInstalled === true) {\n            return;\n        }\n        _oldOnerrorHandler = window.onerror;\n        window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    /**\n     * Process the most recent exception\n     * @memberof TraceKit.report\n     */\n    function processLastException() {\n        var _lastExceptionStack = lastExceptionStack,\n            _lastArgs = lastArgs;\n        lastArgs = null;\n        lastExceptionStack = null;\n        lastException = null;\n        notifyHandlers.apply(null, [_lastExceptionStack, false].concat(_lastArgs));\n    }\n\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     * @memberof TraceKit.report\n     * @throws An exception if an incomplete stack trace is detected (old IE browsers).\n     */\n    function report(ex) {\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n              processLastException();\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n        lastArgs = _slice.call(arguments, 1);\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        window.setTimeout(function () {\n            if (lastException === ex) {\n                processLastException();\n            }\n        }, (stack.incomplete ? 2000 : 0));\n\n        throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    return report;\n}());\n\n/**\n * An object representing a single stack frame.\n * @typedef {Object} StackFrame\n * @property {string} url The JavaScript or HTML file URL.\n * @property {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * @property {string[]?} args The arguments passed to the function, if known.\n * @property {number=} line The line number, if known.\n * @property {number=} column The column number, if known.\n * @property {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n * @memberof TraceKit\n */\n\n/**\n * An object representing a JavaScript stack trace.\n * @typedef {Object} StackTrace\n * @property {string} name The name of the thrown exception.\n * @property {string} message The exception error message.\n * @property {TraceKit.StackFrame[]} stack An array of stack frames.\n * @property {string} mode 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace.\n * @memberof TraceKit\n */\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   ```js\n *   s = TraceKit.computeStackTrace.ofCaller([depth])\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n *   ```\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n * Tracing example:\n *  ```js\n *     function trace(message) {\n *         var stackInfo = TraceKit.computeStackTrace.ofCaller();\n *         var data = message + \"\\n\";\n *         for(var i in stackInfo.stack) {\n *             var item = stackInfo.stack[i];\n *             data += (item.func || '[anonymous]') + \"() in \" + item.url + \":\" + (item.line || '0') + \"\\n\";\n *         }\n *         if (window.console)\n *             console.info(data);\n *         else\n *             alert(data);\n *     }\n * ```\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n    var debug = false,\n        sourceCache = {};\n\n    /**\n     * Attempts to retrieve source code via XMLHttpRequest, which is used\n     * to look up anonymous function names.\n     * @param {string} url URL of source code.\n     * @return {string} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function loadSource(url) {\n        if (!TraceKit.remoteFetching) { //Only attempt request if remoteFetching is on.\n            return '';\n        }\n        try {\n            var getXHR = function() {\n                try {\n                    return new window.XMLHttpRequest();\n                } catch (e) {\n                    // explicitly bubble up the exception if not found\n                    return new window.ActiveXObject('Microsoft.XMLHTTP');\n                }\n            };\n\n            var request = getXHR();\n            request.open('GET', url, false);\n            request.send('');\n            return request.responseText;\n        } catch (e) {\n            return '';\n        }\n    }\n\n    /**\n     * Retrieves source code from the source code cache.\n     * @param {string} url URL of source code.\n     * @return {Array.<string>} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function getSource(url) {\n        if (typeof url !== 'string') {\n            return [];\n        }\n\n        if (!_has(sourceCache, url)) {\n            // URL needs to be able to fetched within the acceptable domain.  Otherwise,\n            // cross-domain errors will be triggered.\n            /*\n                Regex matches:\n                0 - Full Url\n                1 - Protocol\n                2 - Domain\n                3 - Port (Useful for internal applications)\n                4 - Path\n            */\n            var source = '';\n            var domain = '';\n            try { domain = window.document.domain; } catch (e) { }\n            var match = /(.*)\\:\\/\\/([^:\\/]+)([:\\d]*)\\/{0,1}([\\s\\S]*)/.exec(url);\n            if (match && match[2] === domain) {\n                source = loadSource(url);\n            }\n            sourceCache[url] = source ? source.split('\\n') : [];\n        }\n\n        return sourceCache[url];\n    }\n\n    /**\n     * Tries to use an externally loaded copy of source code to determine\n     * the name of a function by looking at the name of the variable it was\n     * assigned to, if any.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} lineNo Line number in source code.\n     * @return {string} The function name, if discoverable.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function guessFunctionName(url, lineNo) {\n        var reFunctionArgNames = /function ([^(]*)\\(([^)]*)\\)/,\n            reGuessFunction = /['\"]?([0-9A-Za-z$_]+)['\"]?\\s*[:=]\\s*(function|eval|new Function)/,\n            line = '',\n            maxLines = 10,\n            source = getSource(url),\n            m;\n\n        if (!source.length) {\n            return UNKNOWN_FUNCTION;\n        }\n\n        // Walk backwards from the first line in the function until we find the line which\n        // matches the pattern above, which is the function definition\n        for (var i = 0; i < maxLines; ++i) {\n            line = source[lineNo - i] + line;\n\n            if (!_isUndefined(line)) {\n                if ((m = reGuessFunction.exec(line))) {\n                    return m[1];\n                } else if ((m = reFunctionArgNames.exec(line))) {\n                    return m[1];\n                }\n            }\n        }\n\n        return UNKNOWN_FUNCTION;\n    }\n\n    /**\n     * Retrieves the surrounding lines from where an exception occurred.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} line Line number in source code to centre\n     * around for context.\n     * @return {?Array.<string>} Lines of source code.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function gatherContext(url, line) {\n        var source = getSource(url);\n\n        if (!source.length) {\n            return null;\n        }\n\n        var context = [],\n            // linesBefore & linesAfter are inclusive with the offending line.\n            // if linesOfContext is even, there will be one extra line\n            //   *before* the offending line.\n            linesBefore = Math.floor(TraceKit.linesOfContext / 2),\n            // Add one extra line if linesOfContext is odd\n            linesAfter = linesBefore + (TraceKit.linesOfContext % 2),\n            start = Math.max(0, line - linesBefore - 1),\n            end = Math.min(source.length, line + linesAfter - 1);\n\n        line -= 1; // convert to 0-based index\n\n        for (var i = start; i < end; ++i) {\n            if (!_isUndefined(source[i])) {\n                context.push(source[i]);\n            }\n        }\n\n        return context.length > 0 ? context : null;\n    }\n\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    /**\n     * Determines where a code fragment occurs in the source code.\n     * @param {RegExp} re The function definition.\n     * @param {Array.<string>} urls A list of URLs to search.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInUrls(re, urls) {\n        var source, m;\n        for (var i = 0, j = urls.length; i < j; ++i) {\n            // console.log('searching', urls[i]);\n            if ((source = getSource(urls[i])).length) {\n                source = source.join('\\n');\n                if ((m = re.exec(source))) {\n                    // console.log('Found function in ' + urls[i]);\n\n                    return {\n                        'url': urls[i],\n                        'line': source.substring(0, m.index).split('\\n').length,\n                        'column': m.index - source.lastIndexOf('\\n', m.index) - 1\n                    };\n                }\n            }\n        }\n\n        // console.log('no match');\n\n        return null;\n    }\n\n    /**\n     * Determines at which column a code fragment occurs on a line of the\n     * source code.\n     * @param {string} fragment The code fragment.\n     * @param {string} url The URL to search.\n     * @param {(string|number)} line The line number to examine.\n     * @return {?number} The column number.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInLine(fragment, url, line) {\n        var source = getSource(url),\n            re = new RegExp('\\\\b' + escapeRegExp(fragment) + '\\\\b'),\n            m;\n\n        line -= 1;\n\n        if (source && source.length > line && (m = re.exec(source[line]))) {\n            return m.index;\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines where a function was defined within the source code.\n     * @param {(Function|string)} func A function reference or serialized\n     * function definition.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceByFunctionBody(func) {\n        if (_isUndefined(window && window.document)) {\n            return;\n        }\n\n        var urls = [window.location.href],\n            scripts = window.document.getElementsByTagName('script'),\n            body,\n            code = '' + func,\n            codeRE = /^function(?:\\s+([\\w$]+))?\\s*\\(([\\w\\s,]*)\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            eventRE = /^function on([\\w$]+)\\s*\\(event\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            re,\n            parts,\n            result;\n\n        for (var i = 0; i < scripts.length; ++i) {\n            var script = scripts[i];\n            if (script.src) {\n                urls.push(script.src);\n            }\n        }\n\n        if (!(parts = codeRE.exec(code))) {\n            re = new RegExp(escapeRegExp(code).replace(/\\s+/g, '\\\\s+'));\n        }\n\n        // not sure if this is really necessary, but I don’t have a test\n        // corpus large enough to confirm that and it was in the original.\n        else {\n            var name = parts[1] ? '\\\\s+' + parts[1] : '',\n                args = parts[2].split(',').join('\\\\s*,\\\\s*');\n\n            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\\s+/g, '\\\\s+');\n            re = new RegExp('function' + name + '\\\\s*\\\\(\\\\s*' + args + '\\\\s*\\\\)\\\\s*{\\\\s*' + body + '\\\\s*}');\n        }\n\n        // look for a normal function definition\n        if ((result = findSourceInUrls(re, urls))) {\n            return result;\n        }\n\n        // look for an old-school event handler function\n        if ((parts = eventRE.exec(code))) {\n            var event = parts[1];\n            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);\n\n            // look for a function defined in HTML as an onXXX handler\n            re = new RegExp('on' + event + '=[\\\\\\'\"]\\\\s*' + body + '\\\\s*[\\\\\\'\"]', 'i');\n\n            if ((result = findSourceInUrls(re, urls[0]))) {\n                return result;\n            }\n\n            // look for ???\n            re = new RegExp(body);\n\n            if ((result = findSourceInUrls(re, urls))) {\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (!ex.stack) {\n            return null;\n        }\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|webpack|eval).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|\\[native).*?)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if ((parts = chrome.exec(lines[i]))) {\n                var isNative = parts[2] && parts[2].indexOf('native') !== -1;\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ( parts = winjs.exec(lines[i]) ) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = gecko.exec(lines[i]))) {\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = guessFunctionName(element.url, element.line);\n            }\n\n            if (element.line) {\n                element.context = gatherContext(element.url, element.line);\n            }\n\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        if (stack[0] && stack[0].line && !stack[0].column && reference) {\n            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);\n        } else if (!stack[0].column && !_isUndefined(ex.columnNumber)) {\n            // FireFox uses this awesome columnNumber property for its top frame\n            // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n            // so adding 1\n            stack[0].column = ex.columnNumber + 1;\n        }\n\n        return {\n            'mode': 'stack',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * Computes stack trace information from the stacktrace property.\n     * Opera 10+ uses this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStacktraceProp(ex) {\n        // Access and store the stacktrace property before doing ANYTHING\n        // else to it because Opera is not very good at providing it\n        // reliably in other circumstances.\n        var stacktrace = ex.stacktrace;\n        if (!stacktrace) {\n            return;\n        }\n\n        var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i,\n            opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i,\n            lines = stacktrace.split('\\n'),\n            stack = [],\n            parts;\n\n        for (var line = 0; line < lines.length; line += 2) {\n            var element = null;\n            if ((parts = opera10Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[2],\n                    'line': +parts[1],\n                    'column': null,\n                    'func': parts[3],\n                    'args':[]\n                };\n            } else if ((parts = opera11Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[6],\n                    'line': +parts[1],\n                    'column': +parts[2],\n                    'func': parts[3] || parts[4],\n                    'args': parts[5] ? parts[5].split(',') : []\n                };\n            }\n\n            if (element) {\n                if (!element.func && element.line) {\n                    element.func = guessFunctionName(element.url, element.line);\n                }\n                if (element.line) {\n                    try {\n                        element.context = gatherContext(element.url, element.line);\n                    } catch (exc) {}\n                }\n\n                if (!element.context) {\n                    element.context = [lines[line + 1]];\n                }\n\n                stack.push(element);\n            }\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        return {\n            'mode': 'stacktrace',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * NOT TESTED.\n     * Computes stack trace information from an error message that includes\n     * the stack trace.\n     * Opera 9 and earlier use this method if the option to show stack\n     * traces is turned on in opera:config.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromOperaMultiLineMessage(ex) {\n        // TODO: Clean this function up\n        // Opera includes a stack trace into the exception message. An example is:\n        //\n        // Statement on line 3: Undefined variable: undefinedFunc\n        // Backtrace:\n        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz\n        //         undefinedFunc(a);\n        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy\n        //           zzz(x, y, z);\n        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx\n        //           yyy(a, a, a);\n        //   Line 1 of function script\n        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }\n        //   ...\n\n        var lines = ex.message.split('\\n');\n        if (lines.length < 4) {\n            return null;\n        }\n\n        var lineRE1 = /^\\s*Line (\\d+) of linked script ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE2 = /^\\s*Line (\\d+) of inline#(\\d+) script in ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE3 = /^\\s*Line (\\d+) of function script\\s*$/i,\n            stack = [],\n            scripts = (window && window.document && window.document.getElementsByTagName('script')),\n            inlineScriptBlocks = [],\n            parts;\n\n        for (var s in scripts) {\n            if (_has(scripts, s) && !scripts[s].src) {\n                inlineScriptBlocks.push(scripts[s]);\n            }\n        }\n\n        for (var line = 2; line < lines.length; line += 2) {\n            var item = null;\n            if ((parts = lineRE1.exec(lines[line]))) {\n                item = {\n                    'url': parts[2],\n                    'func': parts[3],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null\n                };\n            } else if ((parts = lineRE2.exec(lines[line]))) {\n                item = {\n                    'url': parts[3],\n                    'func': parts[4],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.\n                };\n                var relativeLine = (+parts[1]); // relative to the start of the <SCRIPT> block\n                var script = inlineScriptBlocks[parts[2] - 1];\n                if (script) {\n                    var source = getSource(item.url);\n                    if (source) {\n                        source = source.join('\\n');\n                        var pos = source.indexOf(script.innerText);\n                        if (pos >= 0) {\n                            item.line = relativeLine + source.substring(0, pos).split('\\n').length;\n                        }\n                    }\n                }\n            } else if ((parts = lineRE3.exec(lines[line]))) {\n                var url = window.location.href.replace(/#.*$/, '');\n                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));\n                var src = findSourceInUrls(re, [url]);\n                item = {\n                    'url': url,\n                    'func': '',\n                    'args': [],\n                    'line': src ? src.line : parts[1],\n                    'column': null\n                };\n            }\n\n            if (item) {\n                if (!item.func) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n                var context = gatherContext(item.url, item.line);\n                var midline = (context ? context[Math.floor(context.length / 2)] : null);\n                if (context && midline.replace(/^\\s*/, '') === lines[line + 1].replace(/^\\s*/, '')) {\n                    item.context = context;\n                } else {\n                    // if (context) alert(\"Context mismatch. Correct midline:\\n\" + lines[i+1] + \"\\n\\nMidline:\\n\" + midline + \"\\n\\nContext:\\n\" + context.join(\"\\n\") + \"\\n\\nURL:\\n\" + item.url);\n                    item.context = [lines[line + 1]];\n                }\n                stack.push(item);\n            }\n        }\n        if (!stack.length) {\n            return null; // could not parse multiline exception message as Opera stack trace\n        }\n\n        return {\n            'mode': 'multiline',\n            'name': ex.name,\n            'message': lines[0],\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {TraceKit.StackTrace} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = guessFunctionName(initial.url, initial.line);\n            }\n\n            if (!initial.context) {\n                initial.context = gatherContext(initial.url, initial.line);\n            }\n\n            var reference = / '([^']+)' /.exec(message);\n            if (reference) {\n                initial.column = findSourceInLine(reference[1], initial.url, initial.line);\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        stackInfo.stack[0].context = initial.context;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {TraceKit.StackTrace=} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                // console.log('skipping internal function');\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'args': [],\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if ((parts = functionName.exec(curr.toString()))) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n              try {\n                item.func = parts.input.substring(0, parts.input.indexOf('{'));\n              } catch (e) { }\n            }\n\n            if ((source = findSourceByFunctionBody(curr))) {\n                item.url = source.url;\n                item.line = source.line;\n\n                if (item.func === UNKNOWN_FUNCTION) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n\n                var reference = / '([^']+)' /.exec(ex.message || ex.description);\n                if (reference) {\n                    item.column = findSourceInLine(reference[1], source.url, source.line);\n                }\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            }else{\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            // console.log('depth is ' + depth);\n            // console.log('stack is ' + stack.length);\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'mode': 'callers',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = (depth == null ? 0 : +depth);\n\n        try {\n            // This must be tried first because Opera 10 *destroys*\n            // its stacktrace property if you try to access the stack\n            // property first!!\n            stack = computeStackTraceFromStacktraceProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromOperaMultiLineMessage(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        return {\n            'mode': 'failed'\n        };\n    }\n\n    /**\n     * Logs a stacktrace starting from the previous call and working down.\n     * @param {(number|string)=} depth How many frames deep to trace.\n     * @return {TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceOfCaller(depth) {\n        depth = (depth == null ? 0 : +depth) + 1; // \"+ 1\" because \"ofCaller\" should drop one frame\n        try {\n            throw new Error();\n        } catch (ex) {\n            return computeStackTrace(ex, depth + 1);\n        }\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.guessFunctionName = guessFunctionName;\n    computeStackTrace.gatherContext = gatherContext;\n    computeStackTrace.ofCaller = computeStackTraceOfCaller;\n    computeStackTrace.getSource = getSource;\n\n    return computeStackTrace;\n}());\n\n/**\n * Extends support for global error handling for asynchronous browser\n * functions. Adopted from Closure Library's errorhandler.js\n * @memberof TraceKit\n */\nTraceKit.extendToAsynchronousCallbacks = function () {\n    var _helper = function _helper(fnName) {\n        var originalFn = window[fnName];\n        window[fnName] = function traceKitAsyncExtension() {\n            // Make a copy of the arguments\n            var args = _slice.call(arguments);\n            var originalCallback = args[0];\n            if (typeof (originalCallback) === 'function') {\n                args[0] = TraceKit.wrap(originalCallback);\n            }\n            // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n            // also only supports 2 argument and doesn't care what \"this\" is, so we\n            // can just call the original function directly.\n            if (originalFn.apply) {\n                return originalFn.apply(this, args);\n            } else {\n                return originalFn(args[0], args[1]);\n            }\n        };\n    };\n\n    _helper('setTimeout');\n    _helper('setInterval');\n};\n\n//Default options:\nif (!TraceKit.remoteFetching) {\n    TraceKit.remoteFetching = true;\n}\nif (!TraceKit.collectWindowErrors) {\n    TraceKit.collectWindowErrors = true;\n}\nif (!TraceKit.linesOfContext || TraceKit.linesOfContext < 1) {\n    // 5 lines before, the offending line, 5 lines after\n    TraceKit.linesOfContext = 11;\n}\n\n// UMD export\nif (typeof module !== 'undefined' && module.exports && window.module !== module) {\n    module.exports = TraceKit;\n} else if (typeof define === 'function' && define.amd) {\n    define('TraceKit', [], TraceKit);\n} else {\n    window.TraceKit = TraceKit;\n}\n\n}(typeof window !== 'undefined' ? window : global));\n","import * as TraceKit from 'TraceKit';\nexport interface ILastReferenceIdManager {\n  getLast(): string;\n  clearLast(): void;\n  setLast(eventId: string): void;\n}\n\nexport interface ILog {\n  trace(message: string): void;\n  info(message: string): void;\n  warn(message: string): void;\n  error(message: string): void;\n}\n\n                                                                    \n\nexport class DefaultLastReferenceIdManager implements ILastReferenceIdManager {\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @type {string}\n   * @private\n   */\n  private _lastReferenceId: string = null;\n\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @returns {string}\n   */\n  public getLast(): string {\n    return this._lastReferenceId;\n  }\n\n  /**\n   * Clears the last event's reference id.\n   */\n  public clearLast(): void {\n    this._lastReferenceId = null;\n  }\n\n  /**\n   * Sets the last event's reference id.\n   * @param eventId\n   */\n  public setLast(eventId: string): void {\n    this._lastReferenceId = eventId;\n  }\n}\n\n                              \n\nexport class ConsoleLog implements ILog {\n  public trace(message: string): void {\n    this.log('debug', message);\n  }\n\n  public info(message: string): void {\n    this.log('info', message);\n  }\n\n  public warn(message: string): void {\n    this.log('warn', message);\n  }\n\n  public error(message: string): void {\n    this.log('error', message);\n  }\n\n  private log(level: string, message: string) {\n    if (console) {\n      const msg = `[${level}] Exceptionless: ${message}`;\n\n      if (console[level]) {\n        console[level](msg);\n      } else if (console.log) {\n        console[`log`](msg);\n      }\n    }\n  }\n}\n\n                              \n\nexport class NullLog implements ILog {\n  public trace(message: string): void { }\n  public info(message: string): void { }\n  public warn(message: string): void { }\n  public error(message: string): void { }\n}\n\nexport interface IUserInfo {\n  identity?: string;\n  name?: string;\n  data?: any;\n}\n\n                                                                                                                                                               \n\nexport class HeartbeatPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = 'HeartbeatPlugin';\n\n  private _interval: number;\n  private _intervalId: any;\n\n  constructor(heartbeatInterval: number = 30000) {\n    this._interval = heartbeatInterval;\n  }\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    clearInterval(this._intervalId);\n\n    const user: IUserInfo = context.event.data['@user'];\n    if (user && user.identity) {\n      this._intervalId = setInterval(() => context.client.submitSessionHeartbeat(user.identity), this._interval);\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                \n\nexport class ReferenceIdPlugin implements IEventPlugin {\n  public priority: number = 20;\n  public name: string = 'ReferenceIdPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    if ((!context.event.reference_id || context.event.reference_id.length === 0) && context.event.type === 'error') {\n      context.event.reference_id = Utils.guid().replace('-', '').substring(0, 10);\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                             \n\nexport class EventPluginContext {\n  public cancelled: boolean;\n  public client: ExceptionlessClient;\n  public event: IEvent;\n  public contextData: ContextData;\n\n  constructor(client: ExceptionlessClient, event: IEvent, contextData?: ContextData) {\n    this.client = client;\n    this.event = event;\n    this.contextData = contextData ? contextData : new ContextData();\n  }\n\n  public get log(): ILog {\n    return this.client.config.log;\n  }\n}\n\nn\nexport class EventPluginManager {\n  public static run(context: EventPluginContext, callback: (context?: EventPluginContext) => void): void {\n    const wrap = (plugin: IEventPlugin, next?: () => void): () => void => {\n      return () => {\n        try {\n          if (!context.cancelled) {\n            plugin.run(context, next);\n          }\n        } catch (ex) {\n          context.cancelled = true;\n          context.log.error(`Error running plugin '${plugin.name}': ${ex.message}. Discarding Event.`);\n        }\n\n        if (context.cancelled && !!callback) {\n          callback(context);\n        }\n      };\n    };\n\n    const plugins: IEventPlugin[] = context.client.config.plugins; // optimization for minifier.\n    const wrappedPlugins: Array<() => void> = [];\n    if (!!callback) {\n      wrappedPlugins[plugins.length] = wrap({ name: 'cb', priority: 9007199254740992, run: callback }, null);\n    }\n\n    for (let index = plugins.length - 1; index > -1; index--) {\n      wrappedPlugins[index] = wrap(plugins[index], !!callback || (index < plugins.length - 1) ? wrappedPlugins[index + 1] : null);\n    }\n\n    wrappedPlugins[0]();\n  }\n\n  public static addDefaultPlugins(config: Configuration): void {\n    config.addPlugin(new ConfigurationDefaultsPlugin());\n    config.addPlugin(new ErrorPlugin());\n    config.addPlugin(new DuplicateCheckerPlugin());\n    config.addPlugin(new EventExclusionPlugin());\n    config.addPlugin(new ModuleInfoPlugin());\n    config.addPlugin(new RequestInfoPlugin());\n    config.addPlugin(new EnvironmentInfoPlugin());\n    config.addPlugin(new SubmissionMethodPlugin());\n  }\n}\n\n                                                                                                         \n\nexport interface IEventPlugin {\n  priority?: number;\n  name?: string;\n  run(context: EventPluginContext, next?: () => void): void;\n}\n\n                                                                                                                                                                                                                                                                                                                                     \n\nexport class DefaultEventQueue implements IEventQueue {\n  /**\n   * The configuration object.\n   * @type {Configuration}\n   * @private\n   */\n  private _config: Configuration;\n\n  /**\n   * A list of handlers that will be fired when events are submitted.\n   * @type {Array}\n   * @private\n   */\n  private _handlers: Array<(events: IEvent[], response: SubmissionResponse) => void> = [];\n\n  /**\n   * Suspends processing until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _suspendProcessingUntil: Date;\n\n  /**\n   * Discards queued items until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _discardQueuedItemsUntil: Date;\n\n  /**\n   * Returns true if the queue is processing.\n   * @type {boolean}\n   * @private\n   */\n  private _processingQueue: boolean = false;\n\n  /**\n   * Processes the queue every xx seconds.\n   * @type {Timer}\n   * @private\n   */\n  private _queueTimer: any;\n\n  constructor(config: Configuration) {\n    this._config = config;\n  }\n\n  public enqueue(event: IEvent): void {\n    const eventWillNotBeQueued: string = 'The event will not be queued.'; // optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    if (this.areQueuedItemsDiscarded()) {\n      log.info(`Queue items are currently being discarded. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    this.ensureQueueTimer();\n\n    const timestamp = config.storage.queue.save(event);\n    const logText = `type=${event.type} ${!!event.reference_id ? 'refid=' + event.reference_id : ''}`;\n    if (timestamp) {\n      log.info(`Enqueuing event: ${timestamp} ${logText}`);\n    } else {\n      log.error(`Could not enqueue event ${logText}`);\n    }\n  }\n\n  public process(isAppExiting?: boolean): void {\n    const queueNotProcessed: string = 'The queue will not be processed.'; // optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (this._processingQueue) {\n      return;\n    }\n\n    log.info('Processing queue...');\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${queueNotProcessed}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${queueNotProcessed}`);\n      return;\n    }\n\n    this._processingQueue = true;\n    this.ensureQueueTimer();\n\n    try {\n      const events = config.storage.queue.get(config.submissionBatchSize);\n      if (!events || events.length === 0) {\n        this._processingQueue = false;\n        return;\n      }\n\n      log.info(`Sending ${events.length} events to ${config.serverUrl}.`);\n      config.submissionClient.postEvents(events.map((e) => e.value), config, (response: SubmissionResponse) => {\n        this.processSubmissionResponse(response, events);\n        this.eventsPosted(events.map((e) => e.value), response);\n        log.info('Finished processing queue.');\n        this._processingQueue = false;\n      }, isAppExiting);\n    } catch (ex) {\n      log.error(`Error processing queue: ${ex}`);\n      this.suspendProcessing();\n      this._processingQueue = false;\n    }\n  }\n\n  public suspendProcessing(durationInMinutes?: number, discardFutureQueuedItems?: boolean, clearQueue?: boolean): void {\n    const config: Configuration = this._config; // Optimization for minifier.\n\n    if (!durationInMinutes || durationInMinutes <= 0) {\n      durationInMinutes = 5;\n    }\n\n    config.log.info(`Suspending processing for ${durationInMinutes} minutes.`);\n    this._suspendProcessingUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\n\n    if (discardFutureQueuedItems) {\n      this._discardQueuedItemsUntil = this._suspendProcessingUntil;\n    }\n\n    if (clearQueue) {\n      // Account is over the limit and we want to ensure that the sample size being sent in will contain newer errors.\n      config.storage.queue.clear();\n    }\n  }\n\n  public onEventsPosted(handler: (events: IEvent[], response: SubmissionResponse) => void): void {\n    !!handler && this._handlers.push(handler);\n  }\n\n  private eventsPosted(events: IEvent[], response: SubmissionResponse) {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(events, response);\n      } catch (ex) {\n        this._config.log.error(`Error calling onEventsPosted handler: ${ex}`);\n      }\n    }\n  }\n\n  private areQueuedItemsDiscarded(): boolean {\n    return this._discardQueuedItemsUntil && this._discardQueuedItemsUntil > new Date();\n  }\n\n  private ensureQueueTimer(): void {\n    if (!this._queueTimer) {\n      this._queueTimer = setInterval(() => this.onProcessQueue(), 10000);\n    }\n  }\n\n  private isQueueProcessingSuspended(): boolean {\n    return this._suspendProcessingUntil && this._suspendProcessingUntil > new Date();\n  }\n\n  private onProcessQueue(): void {\n    if (!this.isQueueProcessingSuspended() && !this._processingQueue) {\n      this.process();\n    }\n  }\n\n  private processSubmissionResponse(response: SubmissionResponse, events: IStorageItem[]): void {\n    const noSubmission: string = 'The event will not be submitted.'; // Optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (response.success) {\n      log.info(`Sent ${events.length} events.`);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.serviceUnavailable) {\n      // You are currently over your rate limit or the servers are under stress.\n      log.error('Server returned service unavailable.');\n      this.suspendProcessing();\n      return;\n    }\n\n    if (response.paymentRequired) {\n      // If the organization over the rate limit then discard the event.\n      log.info('Too many events have been submitted, please upgrade your plan.');\n      this.suspendProcessing(null, true, true);\n      return;\n    }\n\n    if (response.unableToAuthenticate) {\n      // The api key was suspended or could not be authorized.\n      log.info(`Unable to authenticate, please check your configuration. ${noSubmission}`);\n      this.suspendProcessing(15);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.notFound || response.badRequest) {\n      // The service end point could not be found.\n      log.error(`Error while trying to submit data: ${response.message}`);\n      this.suspendProcessing(60 * 4);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.requestEntityTooLarge) {\n      const message = 'Event submission discarded for being too large.';\n      if (config.submissionBatchSize > 1) {\n        log.error(`${message} Retrying with smaller batch size.`);\n        config.submissionBatchSize = Math.max(1, Math.round(config.submissionBatchSize / 1.5));\n      } else {\n        log.error(`${message} ${noSubmission}`);\n        this.removeEvents(events);\n      }\n\n      return;\n    }\n\n    if (!response.success) {\n      log.error(`Error submitting events: ${response.message || 'Please check the network tab for more info.'}`);\n      this.suspendProcessing();\n    }\n  }\n\n  private removeEvents(events: IStorageItem[]) {\n    for (let index = 0; index < (events || []).length; index++) {\n      this._config.storage.queue.remove(events[index].timestamp);\n    }\n  }\n}\n\n                                                                                                                 \n\nexport interface IEventQueue {\n  enqueue(event: IEvent): void;\n  process(isAppExiting?: boolean): void;\n  suspendProcessing(durationInMinutes?: number, discardFutureQueuedItems?: boolean, clearQueue?: boolean): void;\n  onEventsPosted(handler: (events: IEvent[], response: SubmissionResponse) => void): void;\n}\n\n                                                                                                                                  \n\nexport interface IEnvironmentInfoCollector {\n  getEnvironmentInfo(context: EventPluginContext): IEnvironmentInfo;\n}\n\n                                                                                                              \n\nexport interface IErrorParser {\n  parse(context: EventPluginContext, exception: Error): IError;\n}\n\n                                                                                                                \n\nexport interface IModuleCollector {\n  getModules(context: EventPluginContext): IModule[];\n}\n\n                                                                                                                          \n\nexport interface IRequestInfoCollector {\n  getRequestInfo(context: EventPluginContext): IRequestInfo;\n}\n\n                                                                                                                                                  \n\nexport class InMemoryStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(maxQueueItems: number = 250) {\n    this.queue = new InMemoryStorage(maxQueueItems);\n    this.settings = new InMemoryStorage(1);\n  }\n\n}\n\n                                      \n\nexport interface IStorageProvider {\n  queue: IStorage;\n  settings: IStorage;\n}\n\nn\n// tslint:disable-next-line:prefer-const\ndeclare var XDomainRequest: { new (); create(); };\n\nexport class DefaultSubmissionClient implements ISubmissionClient {\n  public configurationVersionHeader: string = 'x-exceptionless-configversion';\n\n  public postEvents(events: IEvent[], config: Configuration, callback: (response: SubmissionResponse) => void, isAppExiting?: boolean): void {\n    const data = JSON.stringify(events);\n    const request = this.createRequest(config, 'POST',  `${config.serverUrl}/api/v2/events`, data);\n    const cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb, isAppExiting);\n  }\n\n  public postUserDescription(referenceId: string, description: IUserDescription, config: Configuration, callback: (response: SubmissionResponse) => void): void {\n    const path = `${config.serverUrl}/api/v2/events/by-ref/${encodeURIComponent(referenceId)}/user-description`;\n    const data = JSON.stringify(description);\n    const request = this.createRequest(config, 'POST', path, data);\n    const cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public getSettings(config: Configuration, version: number, callback: (response: SettingsResponse) => void): void {\n    const request = this.createRequest(config, 'GET', `${config.serverUrl}/api/v2/projects/config?v=${version}`);\n    const cb = (status, message, data?, headers?) => {\n      if (status !== 200) {\n        return callback(new SettingsResponse(false, null, -1, null, message));\n      }\n\n      let settings: IClientConfiguration;\n      try {\n        settings = JSON.parse(data);\n      } catch (e) {\n        config.log.error(`Unable to parse settings: '${data}'`);\n      }\n\n      if (!settings || isNaN(settings.version)) {\n        return callback(new SettingsResponse(false, null, -1, null, 'Invalid configuration settings.'));\n      }\n\n      callback(new SettingsResponse(true, settings.settings || {}, settings.version));\n    };\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public sendHeartbeat(sessionIdOrUserId: string, closeSession: boolean, config: Configuration): void {\n    const request = this.createRequest(config, 'GET', `${config.heartbeatServerUrl}/api/v2/events/session/heartbeat?id=${sessionIdOrUserId}&close=${closeSession}`);\n    config.submissionAdapter.sendRequest(request);\n  }\n\n  private createRequest(config: Configuration, method: string, url: string, data: string = null): SubmissionRequest {\n    return {\n      method,\n      url,\n      data,\n      apiKey: config.apiKey,\n      userAgent: config.userAgent\n    };\n  }\n\n  private createSubmissionCallback(config: Configuration, callback: (response: SubmissionResponse) => void) {\n    return (status, message, data?, headers?) => {\n      const settingsVersion: number = headers && parseInt(headers[this.configurationVersionHeader], 10);\n      SettingsManager.checkVersion(settingsVersion, config);\n\n      callback(new SubmissionResponse(status, message));\n    };\n  }\n}\n\n                                                                                                                   \n\nexport interface ISubmissionAdapter {\n  sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean): void;\n}\n\n                                                                                                                                                                                                                                                                                           \n\nexport interface ISubmissionClient {\n  postEvents(events: IEvent[], config: Configuration, callback: (response: SubmissionResponse) => void, isAppExiting?: boolean): void;\n  postUserDescription(referenceId: string, description: IUserDescription, config: Configuration, callback: (response: SubmissionResponse) => void): void;\n  getSettings(config: Configuration, version: number, callback: (response: SettingsResponse) => void): void;\n  sendHeartbeat(sessionIdOrUserId: string, closeSession: boolean, config: Configuration): void;\n}\n\nexport class Utils {\n  public static addRange<T>(target: T[], ...values: T[]) {\n    if (!target) {\n      target = [];\n    }\n\n    if (!values || values.length === 0) {\n      return target;\n    }\n\n    for (const value of values) {\n      if (value && target.indexOf(value) < 0) {\n        target.push(value);\n      }\n    }\n\n    return target;\n  }\n\n  public static getHashCode(source: string): number {\n    if (!source || source.length === 0) {\n      return 0;\n    }\n\n    let hash: number = 0;\n    for (let index = 0; index < source.length; index++) {\n      const character = source.charCodeAt(index);\n      hash = ((hash << 5) - hash) + character;\n      hash |= 0;\n    }\n\n    return hash;\n  }\n\n  public static getCookies(cookies: string, exclusions?: string[]): object {\n    const result: object = {};\n\n    const parts: string[] = (cookies || '').split('; ');\n    for (const part of parts) {\n      const cookie: string[] = part.split('=');\n      if (!Utils.isMatch(cookie[0], exclusions)) {\n        result[cookie[0]] = cookie[1];\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static guid(): string {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    }\n\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n  }\n\n  // tslint:disable-next-line:ban-types\n  public static merge(defaultValues: Object, values: Object) {\n    const result: object = {};\n\n    for (const key in defaultValues || {}) {\n      if (!!defaultValues[key]) {\n        result[key] = defaultValues[key];\n      }\n    }\n\n    for (const key in values || {}) {\n      if (!!values[key]) {\n        result[key] = values[key];\n      }\n    }\n\n    return result;\n  }\n\n  public static parseVersion(source: string): string {\n    if (!source) {\n      return null;\n    }\n\n    const versionRegex = /(v?((\\d+)\\.(\\d+)(\\.(\\d+))?)(?:-([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?(?:\\+([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?)/;\n    const matches = versionRegex.exec(source);\n    if (matches && matches.length > 0) {\n      return matches[0];\n    }\n\n    return null;\n  }\n\n  public static parseQueryString(query: string, exclusions?: string[]) {\n    if (!query || query.length === 0) {\n      return null;\n    }\n\n    const pairs: string[] = query.split('&');\n    if (pairs.length === 0) {\n      return null;\n    }\n\n    const result: object = {};\n    for (const pair of pairs) {\n      const parts = pair.split('=');\n      if (!Utils.isMatch(parts[0], exclusions)) {\n        result[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static randomNumber(): number {\n    return Math.floor(Math.random() * 9007199254740992);\n  }\n\n  /**\n   * Checks to see if a value matches a pattern.\n   * @param input the value to check against the @pattern.\n   * @param pattern The pattern to check, supports wild cards (*).\n   */\n  public static isMatch(input: string, patterns: string[], ignoreCase: boolean = true): boolean {\n    if (!input || typeof input !== 'string') {\n      return false;\n    }\n\n    const trim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n    input = (ignoreCase ? input.toLowerCase() : input).replace(trim, '');\n\n    return (patterns || []).some((pattern) => {\n      if (typeof pattern !== 'string') {\n        return false;\n      }\n\n      pattern = (ignoreCase ? pattern.toLowerCase() : pattern).replace(trim, '');\n      if (pattern.length <= 0) {\n        return false;\n      }\n\n      const startsWithWildcard: boolean = pattern[0] === '*';\n      if (startsWithWildcard) {\n        pattern = pattern.slice(1);\n      }\n\n      const endsWithWildcard: boolean = pattern[pattern.length - 1] === '*';\n      if (endsWithWildcard) {\n        pattern = pattern.substring(0, pattern.length - 1);\n      }\n\n      if (startsWithWildcard && endsWithWildcard) {\n        return pattern.length <= input.length && input.indexOf(pattern, 0) !== -1;\n      }\n\n      if (startsWithWildcard) {\n        return Utils.endsWith(input, pattern);\n      }\n\n      if (endsWithWildcard) {\n        return Utils.startsWith(input, pattern);\n      }\n\n      return input === pattern;\n    });\n  }\n\n  public static isEmpty(input: object) {\n    return input === null || (typeof (input) === 'object' && Object.keys(input).length === 0);\n  }\n\n  public static startsWith(input: string, prefix: string): boolean {\n    return input.substring(0, prefix.length) === prefix;\n  }\n\n  public static endsWith(input: string, suffix: string): boolean {\n    return input.indexOf(suffix, input.length - suffix.length) !== -1;\n  }\n\n  /**\n   * Stringifys an object with optional exclusions and max depth.\n   * @param data The data object to add.\n   * @param exclusions Any property names that should be excluded.\n   * @param maxDepth The max depth of the object to include.\n   */\n  public static stringify(data: any, exclusions?: string[], maxDepth?: number): string {\n    function stringifyImpl(obj: any, excludedKeys: string[]): string {\n      const cache: string[] = [];\n      return JSON.stringify(obj, (key: string, value: any) => {\n        if (Utils.isMatch(key, excludedKeys)) {\n          return;\n        }\n\n        if (typeof value === 'object' && !!value) {\n          if (cache.indexOf(value) !== -1) {\n            // Circular reference found, discard key\n            return;\n          }\n\n          cache.push(value);\n        }\n\n        return value;\n      });\n    }\n\n    if (({}).toString.call(data) === '[object Object]') {\n      const flattened = {};\n      /* tslint:disable:forin */\n      for (const prop in data) {\n        const value = data[prop];\n        if (value === data) {\n          continue;\n        }\n        flattened[prop] = data[prop];\n      }\n      /* tslint:enable:forin */\n\n      return stringifyImpl(flattened, exclusions);\n    }\n\n    if (({}).toString.call(data) === '[object Array]') {\n      const result = [];\n      for (let index = 0; index < data.length; index++) {\n        result[index] = JSON.parse(stringifyImpl(data[index], exclusions));\n      }\n\n      return JSON.stringify(result);\n    }\n\n    return stringifyImpl(data, exclusions);\n  }\n\n  public static toBoolean(input, defaultValue: boolean = false): boolean {\n    if (typeof input === 'boolean') {\n      return input;\n    }\n\n    if (input === null || typeof input !== 'number' && typeof input !== 'string') {\n      return defaultValue;\n    }\n\n    switch ((input + '').toLowerCase().trim()) {\n      case 'true': case 'yes': case '1': return true;\n      case 'false': case 'no': case '0': case null: return false;\n    }\n\n    return defaultValue;\n  }\n}\n\nn\nexport interface IConfigurationSettings {\n  apiKey?: string;\n  serverUrl?: string;\n  heartbeatServerUrl?: string;\n  updateSettingsWhenIdleInterval?: number;\n  environmentInfoCollector?: IEnvironmentInfoCollector;\n  errorParser?: IErrorParser;\n  lastReferenceIdManager?: ILastReferenceIdManager;\n  log?: ILog;\n  moduleCollector?: IModuleCollector;\n  requestInfoCollector?: IRequestInfoCollector;\n  submissionBatchSize?: number;\n  submissionClient?: ISubmissionClient;\n  submissionAdapter?: ISubmissionAdapter;\n  storage?: IStorageProvider;\n  queue?: IEventQueue;\n}\n\n                                                                                                                                                     \n\ninterface ISettingsWithVersion {\n  version: number;\n  settings: { [key: string]: string };\n}\n\nexport class SettingsManager {\n  /**\n   * A list of handlers that will be fired when the settings change.\n   * @type {Array}\n   * @private\n   */\n  private static _handlers: Array<(config: Configuration) => void> = [];\n\n  public static onChanged(handler: (config: Configuration) => void) {\n    !!handler && this._handlers.push(handler);\n  }\n\n  public static applySavedServerSettings(config: Configuration): void {\n    if (!config || !config.isValid) {\n      return;\n    }\n\n    const savedSettings = this.getSavedServerSettings(config);\n    config.log.info(`Applying saved settings: v${savedSettings.version}`);\n    config.settings = Utils.merge(config.settings, savedSettings.settings);\n    this.changed(config);\n  }\n\n  public static getVersion(config: Configuration): number {\n    if (!config || !config.isValid) {\n      return 0;\n    }\n\n    const savedSettings = this.getSavedServerSettings(config);\n    return savedSettings.version || 0;\n  }\n\n  public static checkVersion(version: number, config: Configuration): void {\n    const currentVersion: number = this.getVersion(config);\n    if (version <= currentVersion) {\n      return;\n    }\n\n    config.log.info(`Updating settings from v${currentVersion} to v${version}`);\n    this.updateSettings(config, currentVersion);\n  }\n\n  public static updateSettings(config: Configuration, version?: number): void {\n    if (!config || !config.enabled) {\n      return;\n    }\n\n    const unableToUpdateMessage = 'Unable to update settings';\n    if (!config.isValid) {\n      config.log.error(`${unableToUpdateMessage}: ApiKey is not set.`);\n      return;\n    }\n\n    if (!version || version < 0) {\n      version = this.getVersion(config);\n    }\n\n    config.log.info(`Checking for updated settings from: v${version}.`);\n    config.submissionClient.getSettings(config, version, (response: SettingsResponse) => {\n      if (!config || !response || !response.success || !response.settings) {\n        config.log.warn(`${unableToUpdateMessage}: ${response.message}`);\n        return;\n      }\n\n      config.settings = Utils.merge(config.settings, response.settings);\n\n      // TODO: Store snapshot of settings after reading from config and attributes and use that to revert to defaults.\n      // Remove any existing server settings that are not in the new server settings.\n      const savedServerSettings = SettingsManager.getSavedServerSettings(config);\n      for (const key in savedServerSettings) {\n        if (response.settings[key]) {\n          continue;\n        }\n\n        delete config.settings[key];\n      }\n\n      const newSettings: ISettingsWithVersion = {\n        version: response.settingsVersion,\n        settings: response.settings\n      };\n\n      config.storage.settings.save(newSettings);\n\n      config.log.info(`Updated settings: v${newSettings.version}`);\n      this.changed(config);\n    });\n  }\n\n  private static changed(config: Configuration) {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(config);\n      } catch (ex) {\n        config.log.error(`Error calling onChanged handler: ${ex}`);\n      }\n    }\n  }\n\n  private static getSavedServerSettings(config: Configuration): ISettingsWithVersion {\n    const item = config.storage.settings.get()[0];\n    if (item && item.value && item.value.version && item.value.settings) {\n      return item.value;\n    }\n\n    return { version: 0, settings: {} };\n  }\n}\n\nexport interface IEvent {\n  type?: string;\n  source?: string;\n  date?: Date;\n  tags?: string[];\n  message?: string;\n  geo?: string;\n  value?: number;\n  data?: any;\n  reference_id?: string;\n  count?: number;\n}\n\nexport class SubmissionResponse {\n  public success: boolean = false;\n  public badRequest: boolean = false;\n  public serviceUnavailable: boolean = false;\n  public paymentRequired: boolean = false;\n  public unableToAuthenticate: boolean = false;\n  public notFound: boolean = false;\n  public requestEntityTooLarge: boolean = false;\n  public statusCode: number;\n  public message: string;\n\n  constructor(statusCode: number, message?: string) {\n    this.statusCode = statusCode;\n    this.message = message;\n\n    this.success = statusCode >= 200 && statusCode <= 299;\n    this.badRequest = statusCode === 400;\n    this.serviceUnavailable = statusCode === 503;\n    this.paymentRequired = statusCode === 402;\n    this.unableToAuthenticate = statusCode === 401 || statusCode === 403;\n    this.notFound = statusCode === 404;\n    this.requestEntityTooLarge = statusCode === 413;\n  }\n}\n\nn\nexport class ExceptionlessClient {\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   * @private\n   */\n  private static _instance: ExceptionlessClient = null;\n\n  public config: Configuration;\n\n  private _intervalId: any;\n  private _timeoutId: any;\n\n  constructor();\n  constructor(settings: IConfigurationSettings);\n  constructor(apiKey: string, serverUrl?: string);\n  constructor(settingsOrApiKey?: IConfigurationSettings | string, serverUrl?: string) {\n    this.config = typeof settingsOrApiKey === 'object'\n      ? new Configuration(settingsOrApiKey)\n      : new Configuration({ apiKey:  settingsOrApiKey as string, serverUrl });\n\n    this.updateSettingsTimer(5000);\n    this.config.onChanged((config) => this.updateSettingsTimer(this._timeoutId > 0 ? 5000 : 0));\n    this.config.queue.onEventsPosted((events, response) =>  this.updateSettingsTimer());\n  }\n\n  public createException(exception: Error): EventBuilder {\n    const pluginContextData = new ContextData();\n    pluginContextData.setException(exception);\n    return this.createEvent(pluginContextData).setType('error');\n  }\n\n  public submitException(exception: Error, callback?: (context: EventPluginContext) => void): void {\n    this.createException(exception).submit(callback);\n  }\n\n  public createUnhandledException(exception: Error, submissionMethod?: string): EventBuilder {\n    const builder = this.createException(exception);\n    builder.pluginContextData.markAsUnhandledError();\n    builder.pluginContextData.setSubmissionMethod(submissionMethod);\n\n    return builder;\n  }\n\n  public submitUnhandledException(exception: Error, submissionMethod?: string, callback?: (context: EventPluginContext) => void) {\n    this.createUnhandledException(exception, submissionMethod).submit(callback);\n  }\n\n  public createFeatureUsage(feature: string): EventBuilder {\n    return this.createEvent().setType('usage').setSource(feature);\n  }\n\n  public submitFeatureUsage(feature: string, callback?: (context: EventPluginContext) => void): void {\n    this.createFeatureUsage(feature).submit(callback);\n  }\n\n  public createLog(message: string): EventBuilder;\n  public createLog(source: string, message: string): EventBuilder;\n  public createLog(source: string, message: string, level: string): EventBuilder;\n  public createLog(sourceOrMessage: string, message?: string, level?: string): EventBuilder {\n    let builder = this.createEvent().setType('log');\n\n    if (message && level) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message).setProperty('@level', level);\n    } else if (message) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message);\n    } else {\n      builder = builder.setMessage(sourceOrMessage);\n\n      try {\n        // TODO: Look into using https: //www.stevefenton.co.uk/Content/Blog/Date/201304/Blog/Obtaining-A-Class-Name-At-Runtime-In-TypeScript/\n        const caller: any = this.createLog.caller;\n        builder = builder.setSource(caller && caller.caller && caller.caller.name);\n      } catch (e) {\n        this.config.log.trace('Unable to resolve log source: ' + e.message);\n      }\n    }\n\n    return builder;\n  }\n\n  public submitLog(message: string): void;\n  public submitLog(source: string, message: string): void;\n  public submitLog(source: string, message: string, level: string, callback?: (context: EventPluginContext) => void): void;\n  public submitLog(sourceOrMessage: string, message?: string, level?: string, callback?: (context: EventPluginContext) => void): void {\n    this.createLog(sourceOrMessage, message, level).submit(callback);\n  }\n\n  public createNotFound(resource: string): EventBuilder {\n    return this.createEvent().setType('404').setSource(resource);\n  }\n\n  public submitNotFound(resource: string, callback?: (context: EventPluginContext) => void): void {\n    this.createNotFound(resource).submit(callback);\n  }\n\n  public createSessionStart(): EventBuilder {\n    return this.createEvent().setType('session');\n  }\n\n  public submitSessionStart(callback?: (context: EventPluginContext) => void): void {\n    this.createSessionStart().submit(callback);\n  }\n\n  public submitSessionEnd(sessionIdOrUserId: string): void {\n    if (sessionIdOrUserId) {\n      this.config.log.info(`Submitting session end: ${sessionIdOrUserId}`);\n      this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, true, this.config);\n    }\n  }\n\n  public submitSessionHeartbeat(sessionIdOrUserId: string): void {\n    if (sessionIdOrUserId) {\n      this.config.log.info(`Submitting session heartbeat: ${sessionIdOrUserId}`);\n      this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, false, this.config);\n    }\n  }\n\n  public createEvent(pluginContextData?: ContextData): EventBuilder {\n    return new EventBuilder({ date: new Date() }, this, pluginContextData);\n  }\n\n  /**\n   * Submits the event to be sent to the server.\n   * @param event The event data.\n   * @param pluginContextData Any contextual data objects to be used by Exceptionless plugins to gather default information for inclusion in the report information.\n   * @param callback\n   */\n  public submitEvent(event: IEvent, pluginContextData?: ContextData, callback?: (context: EventPluginContext) => void): void {\n    function cancelled(context: EventPluginContext) {\n      if (!!context) {\n        context.cancelled = true;\n      }\n\n      return !!callback && callback(context);\n    }\n\n    const context = new EventPluginContext(this, event, pluginContextData);\n    if (!event) {\n      return cancelled(context);\n    }\n\n    if (!this.config.enabled) {\n      this.config.log.info('Event submission is currently disabled.');\n      return cancelled(context);\n    }\n\n    if (!event.data) {\n      event.data = {};\n    }\n\n    if (!event.tags || !event.tags.length) {\n      event.tags = [];\n    }\n\n    EventPluginManager.run(context, (ctx: EventPluginContext) => {\n      const config = ctx.client.config;\n      const ev = ctx.event;\n\n      if (!ctx.cancelled) {\n        // ensure all required data\n        if (!ev.type || ev.type.length === 0) {\n          ev.type = 'log';\n        }\n\n        if (!ev.date) {\n          ev.date = new Date();\n        }\n\n        config.queue.enqueue(ev);\n\n        if (ev.reference_id && ev.reference_id.length > 0) {\n          ctx.log.info(`Setting last reference id '${ev.reference_id}'`);\n          config.lastReferenceIdManager.setLast(ev.reference_id);\n        }\n      }\n\n      !!callback && callback(ctx);\n    });\n  }\n\n  /**\n   * Updates the user's email address and description of an event for the specified reference id.\n   * @param referenceId The reference id of the event to update.\n   * @param email The user's email address to set on the event.\n   * @param description The user's description of the event.\n   * @param callback The submission response.\n   */\n  public updateUserEmailAndDescription(referenceId: string, email: string, description: string, callback?: (response: SubmissionResponse) => void) {\n    if (!referenceId || !email || !description || !this.config.enabled) {\n      return !!callback && callback(new SubmissionResponse(500, 'cancelled'));\n    }\n\n    const userDescription: IUserDescription = { email_address: email, description };\n    this.config.submissionClient.postUserDescription(referenceId, userDescription, this.config, (response: SubmissionResponse) => {\n      if (!response.success) {\n        this.config.log.error(`Failed to submit user email and description for event '${referenceId}': ${response.statusCode} ${response.message}`);\n      }\n\n      !!callback && callback(response);\n    });\n  }\n\n  /**\n   * Gets the last event client id that was submitted to the server.\n   * @returns {string} The event client id.\n   */\n  public getLastReferenceId(): string {\n    return this.config.lastReferenceIdManager.getLast();\n  }\n\n  private updateSettingsTimer(initialDelay?: number) {\n    this.config.log.info(`Updating settings timer with delay: ${initialDelay}`);\n\n    this._timeoutId = clearTimeout(this._timeoutId);\n    this._timeoutId = clearInterval(this._intervalId);\n\n    const interval = this.config.updateSettingsWhenIdleInterval;\n    if (interval > 0) {\n      const updateSettings = () => SettingsManager.updateSettings(this.config);\n      if (initialDelay > 0) {\n        this._timeoutId = setTimeout(updateSettings, initialDelay);\n      }\n\n      this._intervalId = setInterval(updateSettings, interval);\n    }\n  }\n\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   */\n  public static get default() {\n    if (ExceptionlessClient._instance === null) {\n      ExceptionlessClient._instance = new ExceptionlessClient(null);\n    }\n\n    return ExceptionlessClient._instance;\n  }\n}\n\nexport class ContextData {\n  public setException(exception: Error): void {\n    if (exception) {\n      this['@@_Exception'] = exception;\n    }\n  }\n\n  public get hasException(): boolean {\n    return !!this['@@_Exception'];\n  }\n\n  public getException(): Error {\n    return this['@@_Exception'] || null;\n  }\n\n  public markAsUnhandledError(): void {\n    this['@@_IsUnhandledError'] = true;\n  }\n\n  public get isUnhandledError(): boolean {\n    return !!this['@@_IsUnhandledError'];\n  }\n\n  public setSubmissionMethod(method: string): void {\n    if (method) {\n      this['@@_SubmissionMethod'] = method;\n    }\n  }\n\n  public getSubmissionMethod(): string {\n    return this['@@_SubmissionMethod'] || null;\n  }\n}\n\nexport interface IEnvironmentInfo {\n  processor_count?: number;\n  total_physical_memory?: number;\n  available_physical_memory?: number;\n  command_line?: string;\n  process_name?: string;\n  process_id?: string;\n  process_memory_size?: number;\n  thread_id?: string;\n  architecture?: string;\n  o_s_name?: string;\n  o_s_version?: string;\n  ip_address?: string;\n  machine_name?: string;\n  install_id?: string;\n  runtime_version?: string;\n  data?: any;\n}\n\nexport interface IParameter {\n  data?: any;\n  generic_arguments?: string[];\n\n  name?: string;\n  type?: string;\n  type_namespace?: string;\n}\n\n                                          \n\nexport interface IMethod {\n  data?: any;\n  generic_arguments?: string[];\n  parameters?: IParameter[];\n\n  is_signature_target?: boolean;\n  declaring_namespace?: string;\n  declaring_type?: string;\n  name?: string;\n  module_id?: number;\n}\n\n                                    \n\nexport interface IStackFrame extends IMethod {\n  file_name?: string;\n  line_number?: number;\n  column?: number;\n}\n\n                                                                                 \n\nexport interface IInnerError {\n  message?: string;\n  type?: string;\n  code?: string;\n  data?: any;\n  inner?: IInnerError;\n  stack_trace?: IStackFrame[];\n  target_method?: IMethod;\n}\n\nexport interface IModule {\n  data?: any;\n\n  module_id?: number;\n  name?: string;\n  version?: string;\n  is_entry?: boolean;\n  created_date?: Date;\n  modified_date?: Date;\n}\n\n                                                                                 \n\nexport interface IError extends IInnerError {\n  modules?: IModule[];\n}\n\nexport interface IRequestInfo {\n  user_agent?: string;\n  http_method?: string;\n  is_secure?: boolean;\n  host?: string;\n  port?: number;\n  path?: string;\n  referrer?: string;\n  client_ip_address?: string;\n  cookies?: any;\n  post_data?: any;\n  query_string?: any;\n  data?: any;\n}\n\nexport interface IStorageItem {\n  timestamp: number;\n  value: any;\n}\n\n                                              \n\nexport interface IStorage {\n  save(value: any): number;\n  get(limit?: number): IStorageItem[];\n  remove(timestamp: number): void;\n  clear(): void;\n}\n\nexport type SubmissionCallback = (status: number, message: string, data?: string, headers?: object) => void;\n\nexport interface SubmissionRequest {\n  apiKey: string;\n  userAgent: string;\n  method: string;\n  url: string;\n  data: string;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n\nexport class Configuration implements IConfigurationSettings {\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @type {IConfigurationSettings}\n   * @private\n   */\n  private static _defaultSettings: IConfigurationSettings = null;\n\n  /**\n   * A default list of tags that will automatically be added to every\n   * report submitted to the server.\n   *\n   * @type {Array}\n   */\n  public defaultTags: string[] = [];\n\n  /**\n   * A default list of of extended data objects that will automatically\n   * be added to every report submitted to the server.\n   *\n   * @type {{}}\n   */\n  public defaultData: object = {};\n\n  /**\n   * Whether the client is currently enabled or not. If it is disabled,\n   * submitted errors will be discarded and no data will be sent to the server.\n   *\n   * @returns {boolean}\n   */\n  public enabled: boolean = true;\n\n  public environmentInfoCollector: IEnvironmentInfoCollector;\n  public errorParser: IErrorParser;\n  public lastReferenceIdManager: ILastReferenceIdManager = new DefaultLastReferenceIdManager();\n  public log: ILog;\n  public moduleCollector: IModuleCollector;\n  public requestInfoCollector: IRequestInfoCollector;\n\n  /**\n   * Maximum number of events that should be sent to the server together in a batch. (Defaults to 50)\n   */\n  public submissionBatchSize: number;\n  public submissionAdapter: ISubmissionAdapter;\n  public submissionClient: ISubmissionClient;\n\n  /**\n   * Contains a dictionary of custom settings that can be used to control\n   * the client and will be automatically updated from the server.\n   */\n  public settings: object = {};\n\n  public storage: IStorageProvider;\n\n  public queue: IEventQueue;\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @type {string}\n   * @private\n   */\n  private _apiKey: string;\n\n  /**\n   * The server url that all events will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _serverUrl: string = 'https://collector.exceptionless.io';\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _heartbeatServerUrl: string = 'https://heartbeat.exceptionless.io';\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @type {number}\n   * @private\n   */\n  private _updateSettingsWhenIdleInterval: number = 120000;\n\n  /**\n   * A list of exclusion patterns.\n   * @type {Array}\n   * @private\n   */\n  private _dataExclusions: string[] = [];\n\n  /**\n   * A list of user agent patterns.\n   * @type {Array}\n   * @private\n   */\n  private _userAgentBotPatterns: string[] = [];\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @type {Array}\n   * @private\n   */\n  private _plugins: IEventPlugin[] = [];\n\n  /**\n   * A list of handlers that will be fired when configuration changes.\n   * @type {Array}\n   * @private\n   */\n  private _handlers: Array<(config: Configuration) => void> = [];\n\n  constructor(configSettings?: IConfigurationSettings) {\n    function inject(fn: any) {\n      return typeof fn === 'function' ? fn(this) : fn;\n    }\n\n    configSettings = Utils.merge(Configuration.defaults, configSettings);\n\n    this.log = inject(configSettings.log) || new NullLog();\n    this.apiKey = configSettings.apiKey;\n    this.serverUrl = configSettings.serverUrl;\n    this.heartbeatServerUrl = configSettings.heartbeatServerUrl;\n    this.updateSettingsWhenIdleInterval = configSettings.updateSettingsWhenIdleInterval;\n\n    this.environmentInfoCollector = inject(configSettings.environmentInfoCollector);\n    this.errorParser = inject(configSettings.errorParser);\n    this.lastReferenceIdManager = inject(configSettings.lastReferenceIdManager) || new DefaultLastReferenceIdManager();\n    this.moduleCollector = inject(configSettings.moduleCollector);\n    this.requestInfoCollector = inject(configSettings.requestInfoCollector);\n    this.submissionBatchSize = inject(configSettings.submissionBatchSize) || 50;\n    this.submissionAdapter = inject(configSettings.submissionAdapter);\n    this.submissionClient = inject(configSettings.submissionClient) || new DefaultSubmissionClient();\n    this.storage = inject(configSettings.storage) || new InMemoryStorageProvider();\n    this.queue = inject(configSettings.queue) || new DefaultEventQueue(this);\n\n    SettingsManager.applySavedServerSettings(this);\n    EventPluginManager.addDefaultPlugins(this);\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @returns {string}\n   */\n  public get apiKey(): string {\n    return this._apiKey;\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @param value\n   */\n  public set apiKey(value: string) {\n    this._apiKey = value || null;\n    this.log.info(`apiKey: ${this._apiKey}`);\n    this.changed();\n  }\n\n  /**\n   * Returns true if the apiKey is valid.\n   * @returns {boolean}\n   */\n  public get isValid(): boolean {\n    return !!this.apiKey && this.apiKey.length >= 10;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @returns {string}\n   */\n  public get serverUrl(): string {\n    return this._serverUrl;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @param value\n   */\n  public set serverUrl(value: string) {\n    if (!!value) {\n      this._serverUrl = value;\n      this._heartbeatServerUrl = value;\n      this.log.info(`serverUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @returns {string}\n   */\n  public get heartbeatServerUrl(): string {\n    return this._heartbeatServerUrl;\n  }\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @param value\n   */\n  public set heartbeatServerUrl(value: string) {\n    if (!!value) {\n      this._heartbeatServerUrl = value;\n      this.log.info(`heartbeatServerUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @returns {number}\n   */\n  public get updateSettingsWhenIdleInterval(): number {\n    return this._updateSettingsWhenIdleInterval;\n  }\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @param value\n   */\n  public set updateSettingsWhenIdleInterval(value: number) {\n    if (typeof value !== 'number') {\n      return;\n    }\n\n    if (value <= 0) {\n      value = -1;\n    } else if (value > 0 && value < 15000) {\n      value = 15000;\n    }\n\n    this._updateSettingsWhenIdleInterval = value;\n    this.log.info(`updateSettingsWhenIdleInterval: ${value}`);\n    this.changed();\n  }\n\n  /**\n   *  A list of exclusion patterns that will automatically remove any data that\n   *  matches them from any data submitted to the server.\n   *\n   *  For example, entering CreditCard will remove any extended data properties,\n   *  form fields, cookies and query parameters from the report.\n   *\n   * @returns {string[]}\n   */\n  public get dataExclusions(): string[] {\n    const exclusions: string = this.settings['@@DataExclusions'];\n    return this._dataExclusions.concat(exclusions && exclusions.split(',') || []);\n  }\n\n  /**\n   * Add items to the list of exclusion patterns that will automatically remove any\n   * data that matches them from any data submitted to the server.\n   *\n   * For example, entering CreditCard will remove any extended data properties, form\n   * fields, cookies and query parameters from the report.\n   *\n   * @param exclusions\n   */\n  public addDataExclusions(...exclusions: string[]) {\n    this._dataExclusions = Utils.addRange<string>(this._dataExclusions, ...exclusions);\n  }\n\n  /**\n   * A list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @returns {string[]}\n   */\n  public get userAgentBotPatterns(): string[] {\n    const patterns: string = this.settings['@@UserAgentBotPatterns'];\n    return this._userAgentBotPatterns.concat(patterns && patterns.split(',') || []);\n  }\n\n  /**\n   * Add items to the list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @param userAgentBotPatterns\n   */\n  public addUserAgentBotPatterns(...userAgentBotPatterns: string[]) {\n    this._userAgentBotPatterns = Utils.addRange<string>(this._userAgentBotPatterns, ...userAgentBotPatterns);\n  }\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @returns {IEventPlugin[]}\n   */\n  public get plugins(): IEventPlugin[] {\n    return this._plugins.sort((p1: IEventPlugin, p2: IEventPlugin) => {\n      return (p1.priority < p2.priority) ? -1 : (p1.priority > p2.priority) ? 1 : 0;\n    });\n  }\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param plugin\n   */\n  public addPlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param name The name used to identify the plugin.\n   * @param priority Used to determine plugins priority.\n   * @param pluginAction A function that is run.\n   */\n  public addPlugin(name: string, priority: number, pluginAction: (context: EventPluginContext, next?: () => void) => void): void;\n  public addPlugin(pluginOrName: IEventPlugin | string, priority?: number, pluginAction?: (context: EventPluginContext, next?: () => void) => void): void {\n    const plugin: IEventPlugin = !!pluginAction ? { name: pluginOrName as string, priority, run: pluginAction } :  pluginOrName as IEventPlugin;\n    if (!plugin || !plugin.run) {\n      this.log.error('Add plugin failed: Run method not defined');\n      return;\n    }\n\n    if (!plugin.name) {\n      plugin.name = Utils.guid();\n    }\n\n    if (!plugin.priority) {\n      plugin.priority = 0;\n    }\n\n    let pluginExists: boolean = false;\n    const plugins = this._plugins; // optimization for minifier.\n    for (const p of plugins) {\n      if (p.name === plugin.name) {\n        pluginExists = true;\n        break;\n      }\n    }\n\n    if (!pluginExists) {\n      plugins.push(plugin);\n    }\n  }\n\n  /**\n   * Remove the plugin from this configuration.\n   * @param plugin\n   */\n  public removePlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Remove an plugin by key from this configuration.\n   * @param name\n   */\n  public removePlugin(pluginOrName: IEventPlugin | string): void {\n    const name: string = typeof pluginOrName === 'string' ? pluginOrName : pluginOrName.name;\n    if (!name) {\n      this.log.error('Remove plugin failed: Plugin name not defined');\n      return;\n    }\n\n    const plugins = this._plugins; // optimization for minifier.\n    for (let index = 0; index < plugins.length; index++) {\n      if (plugins[index].name === name) {\n        plugins.splice(index, 1);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Automatically set the application version for events.\n   * @param version\n   */\n  public setVersion(version: string): void {\n    if (!!version) {\n      this.defaultData['@version'] = version;\n    }\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): void;\n  public setUserIdentity(identity: string): void;\n  public setUserIdentity(identity: string, name: string): void;\n  public setUserIdentity(userInfoOrIdentity: IUserInfo | string, name?: string): void {\n    const USER_KEY: string = '@user'; // optimization for minifier.\n    const userInfo: IUserInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name };\n\n    const shouldRemove: boolean = !userInfo || (!userInfo.identity && !userInfo.name);\n    if (shouldRemove) {\n      delete this.defaultData[USER_KEY];\n    } else {\n      this.defaultData[USER_KEY] = userInfo;\n    }\n\n    this.log.info(`user identity: ${shouldRemove ? 'null' : userInfo.identity}`);\n  }\n\n  /**\n   * Used to identify the client that sent the events to the server.\n   * @returns {string}\n   */\n  public get userAgent(): string {\n    return 'exceptionless-js/1.0.0.0';\n  }\n\n  /**\n   * Automatically send a heartbeat to keep the session alive.\n   */\n  public useSessions(sendHeartbeats: boolean = true, heartbeatInterval: number = 30000): void {\n    if (sendHeartbeats) {\n      this.addPlugin(new HeartbeatPlugin(heartbeatInterval));\n    }\n  }\n\n  /**\n   * Automatically set a reference id for error events.\n   */\n  public useReferenceIds(): void {\n    this.addPlugin(new ReferenceIdPlugin());\n  }\n\n  public useLocalStorage(): void {\n    // This method will be injected via the prototype.\n  }\n\n  // TODO: Support a min log level.\n  public useDebugLogger(): void {\n    this.log = new ConsoleLog();\n  }\n\n  public onChanged(handler: (config: Configuration) => void) {\n    !!handler && this._handlers.push(handler);\n  }\n\n  private changed() {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(this);\n      } catch (ex) {\n        this.log.error(`Error calling onChanged handler: ${ex}`);\n      }\n    }\n  }\n\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @returns {IConfigurationSettings}\n   */\n  public static get defaults() {\n    if (Configuration._defaultSettings === null) {\n      Configuration._defaultSettings = {};\n    }\n\n    return Configuration._defaultSettings;\n  }\n}\n\nexport interface IUserDescription {\n  email_address?: string;\n  description?: string;\n  data?: any;\n}\n\nexport class SettingsResponse {\n  public success: boolean = false;\n  public settings: any;\n  public settingsVersion: number = -1;\n  public message: string;\n  public exception: any;\n\n  constructor(success: boolean, settings: any, settingsVersion: number = -1, exception: any = null, message: string = null) {\n    this.success = success;\n    this.settings = settings;\n    this.settingsVersion = settingsVersion;\n    this.exception = exception;\n    this.message = message;\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                   \n\nexport class EventBuilder {\n  public target: IEvent;\n  public client: ExceptionlessClient;\n  public pluginContextData: ContextData;\n\n  private _validIdentifierErrorMessage: string = 'must contain between 8 and 100 alphanumeric or \\'-\\' characters.'; // optimization for minifier.\n\n  constructor(event: IEvent, client: ExceptionlessClient, pluginContextData?: ContextData) {\n    this.target = event;\n    this.client = client;\n    this.pluginContextData = pluginContextData || new ContextData();\n  }\n\n  public setType(type: string): EventBuilder {\n    if (!!type) {\n      this.target.type = type;\n    }\n\n    return this;\n  }\n\n  public setSource(source: string): EventBuilder {\n    if (!!source) {\n      this.target.source = source;\n    }\n\n    return this;\n  }\n\n  public setReferenceId(referenceId: string): EventBuilder {\n    if (!this.isValidIdentifier(referenceId)) {\n      throw new Error(`ReferenceId ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.target.reference_id = referenceId;\n    return this;\n  }\n\n  /**\n   * Allows you to reference a parent event by its ReferenceId property. This allows you to have parent and child relationships.\n   * @param name Reference name\n   * @param id The reference id that points to a specific event\n   * @returns {EventBuilder}\n   */\n  public setEventReference(name: string, id: string): EventBuilder {\n    if (!name) {\n      throw new Error('Invalid name');\n    }\n\n    if (!id || !this.isValidIdentifier(id)) {\n      throw new Error(`Id ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.setProperty('@ref:' + name, id);\n    return this;\n  }\n\n  public setMessage(message: string): EventBuilder {\n    if (!!message) {\n      this.target.message = message;\n    }\n\n    return this;\n  }\n\n  public setGeo(latitude: number, longitude: number): EventBuilder {\n    if (latitude < -90.0 || latitude > 90.0) {\n      throw new Error('Must be a valid latitude value between -90.0 and 90.0.');\n    }\n\n    if (longitude < -180.0 || longitude > 180.0) {\n      throw new Error('Must be a valid longitude value between -180.0 and 180.0.');\n    }\n\n    this.target.geo = `${latitude},${longitude}`;\n    return this;\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): EventBuilder;\n  public setUserIdentity(identity: string): EventBuilder;\n  public setUserIdentity(identity: string, name: string): EventBuilder;\n  public setUserIdentity(userInfoOrIdentity: IUserInfo | string, name?: string): EventBuilder {\n    const userInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name };\n    if (!userInfo || (!userInfo.identity && !userInfo.name)) {\n      return this;\n    }\n\n    this.setProperty('@user', userInfo);\n    return this;\n  }\n\n  /**\n   * Sets the user's description of the event.\n   *\n   * @param emailAddress The email address\n   * @param description The user's description of the event.\n   * @returns {EventBuilder}\n   */\n  public setUserDescription(emailAddress: string, description: string): EventBuilder {\n    if (emailAddress && description) {\n      this.setProperty('@user_description', { email_address: emailAddress, description });\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting manual\n   * stacking information.\n   * @param signatureData A dictionary of strings to use for stacking.\n   * @param title An optional title for the stacking information.\n   * @returns {EventBuilder}\n   */\n  public setManualStackingInfo(signatureData: any, title?: string) {\n    if (signatureData) {\n      const stack: IManualStackingInfo = { signature_data: signatureData };\n      if (title) {\n        stack.title = title;\n      }\n\n      this.setProperty('@stack', stack);\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting the stacking key.\n   * @param manualStackingKey The manual stacking key.\n   * @param title An optional title for the stacking information.\n   * @returns {EventBuilder}\n   */\n  public setManualStackingKey(manualStackingKey: string, title?: string): EventBuilder {\n    if (manualStackingKey) {\n      const data = { ManualStackingKey: manualStackingKey };\n      this.setManualStackingInfo(data, title);\n    }\n\n    return this;\n  }\n\n  public setValue(value: number): EventBuilder {\n    if (!!value) {\n      this.target.value = value;\n    }\n\n    return this;\n  }\n\n  public addTags(...tags: string[]): EventBuilder {\n    this.target.tags = Utils.addRange<string>(this.target.tags, ...tags);\n    return this;\n  }\n\n  /**\n   * Adds the object to extended data. Uses @excludedPropertyNames\n   * to exclude data from being included in the event.\n   * @param name The data object to add.\n   * @param value The name of the object to add.\n   * @param maxDepth The max depth of the object to include.\n   * @param excludedPropertyNames Any property names that should be excluded.\n   */\n  public setProperty(name: string, value: any, maxDepth?: number, excludedPropertyNames?: string[]): EventBuilder {\n    if (!name || (value === undefined || value == null)) {\n      return this;\n    }\n\n    if (!this.target.data) {\n      this.target.data = {};\n    }\n\n    const result = JSON.parse(Utils.stringify(value, this.client.config.dataExclusions.concat(excludedPropertyNames || []), maxDepth));\n    if (!Utils.isEmpty(result)) {\n      this.target.data[name] = result;\n    }\n\n    return this;\n  }\n\n  public markAsCritical(critical: boolean): EventBuilder {\n    if (critical) {\n      this.addTags('Critical');\n    }\n\n    return this;\n  }\n\n  public addRequestInfo(request: object): EventBuilder {\n    if (!!request) {\n      this.pluginContextData['@request'] = request;\n    }\n\n    return this;\n  }\n\n  public submit(callback?: (context: EventPluginContext) => void): void {\n    this.client.submitEvent(this.target, this.pluginContextData, callback);\n  }\n\n  private isValidIdentifier(value: string): boolean {\n    if (!value) {\n      return true;\n    }\n\n    if (value.length < 8 || value.length > 100) {\n      return false;\n    }\n\n    for (let index = 0; index < value.length; index++) {\n      const code = value.charCodeAt(index);\n      const isDigit = (code >= 48) && (code <= 57);\n      const isLetter = ((code >= 65) && (code <= 90)) || ((code >= 97) && (code <= 122));\n      const isMinus = code === 45;\n\n      if (!(isDigit || isLetter) && !isMinus) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nexport interface IManualStackingInfo {\n  title?: string;\n  signature_data?: any;\n}\n\n                                                                                                                                                \n\nexport class ConfigurationDefaultsPlugin implements IEventPlugin {\n  public priority: number = 10;\n  public name: string = 'ConfigurationDefaultsPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const config = context.client.config;\n    const defaultTags: string[] = config.defaultTags || [];\n    for (const tag of defaultTags) {\n      if (!!tag && context.event.tags.indexOf(tag) < 0) {\n        context.event.tags.push(tag);\n      }\n    }\n\n    // tslint:disable-next-line:ban-types\n    const defaultData: Object = config.defaultData || {};\n    for (const key in defaultData) {\n      if (!!defaultData[key]) {\n        const result = JSON.parse(Utils.stringify(defaultData[key], config.dataExclusions));\n        if (!Utils.isEmpty(result)) {\n          context.event.data[key] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                        \n\nexport class DuplicateCheckerPlugin implements IEventPlugin {\n  public priority: number = 1010;\n  public name: string = 'DuplicateCheckerPlugin';\n\n  private _mergedEvents: MergedEvent[] = [];\n  private _processedHashcodes: TimestampedHash[] = [];\n  private _getCurrentTime: () => number;\n  private _interval: number;\n\n  constructor(getCurrentTime: () => number = () => Date.now(), interval: number = 30000) {\n    this._getCurrentTime = getCurrentTime;\n    this._interval = interval;\n\n    setInterval(() => {\n      while (this._mergedEvents.length > 0) {\n        this._mergedEvents.shift().resubmit();\n      }\n    }, interval);\n  }\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    function getHashCode(error: IInnerError): number {\n      let hashCode = 0;\n      while (error) {\n        if (error.message && error.message.length) {\n          hashCode += (hashCode * 397) ^ Utils.getHashCode(error.message);\n        }\n        if (error.stack_trace && error.stack_trace.length) {\n          hashCode += (hashCode * 397) ^ Utils.getHashCode(JSON.stringify(error.stack_trace));\n        }\n        error = error.inner;\n      }\n\n      return hashCode;\n    }\n\n    const error = context.event.data['@error'];\n    const hashCode = getHashCode(error);\n    if (hashCode) {\n      const count = context.event.count || 1;\n      const now = this._getCurrentTime();\n\n      const merged = this._mergedEvents.filter((s) => s.hashCode === hashCode)[0];\n      if (merged) {\n        merged.incrementCount(count);\n        merged.updateDate(context.event.date);\n        context.log.info('Ignoring duplicate event with hash: ' + hashCode);\n        context.cancelled = true;\n      }\n\n      if (!context.cancelled && this._processedHashcodes.some((h) => h.hash === hashCode && h.timestamp >= (now - this._interval))) {\n        context.log.trace('Adding event with hash: ' + hashCode);\n        this._mergedEvents.push(new MergedEvent(hashCode, context, count));\n        context.cancelled = true;\n      }\n\n      if (!context.cancelled) {\n        context.log.trace('Enqueueing event with hash: ' + hashCode + 'to cache.');\n        this._processedHashcodes.push({ hash: hashCode, timestamp: now });\n\n        // Only keep the last 50 recent errors.\n        while (this._processedHashcodes.length > 50) {\n          this._processedHashcodes.shift();\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\ninterface TimestampedHash {\n  hash: number;\n  timestamp: number;\n}\n\nclass MergedEvent {\n  public hashCode: number;\n  private _count: number;\n  private _context: EventPluginContext;\n\n  constructor(hashCode: number, context: EventPluginContext, count: number) {\n    this.hashCode = hashCode;\n    this._context = context;\n    this._count = count;\n  }\n\n  public incrementCount(count: number) {\n    this._count += count;\n  }\n\n  public resubmit() {\n    this._context.event.count = this._count;\n    this._context.client.config.queue.enqueue(this._context.event);\n  }\n\n  public updateDate(date) {\n    if (date > this._context.event.date) {\n      this._context.event.date = date;\n    }\n  }\n}\n\n                                                                                                                                                                             \n\nexport class EnvironmentInfoPlugin implements IEventPlugin {\n  public priority: number = 80;\n  public name: string = 'EnvironmentInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ENVIRONMENT_KEY: string = '@environment'; // optimization for minifier.\n\n    const collector = context.client.config.environmentInfoCollector;\n    if (!context.event.data[ENVIRONMENT_KEY] && collector) {\n      const environmentInfo: IEnvironmentInfo = collector.getEnvironmentInfo(context);\n      if (!!environmentInfo) {\n        context.event.data[ENVIRONMENT_KEY] = environmentInfo;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                \n\nexport class ErrorPlugin implements IEventPlugin {\n  public priority: number = 30;\n  public name: string = 'ErrorPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\n    const ignoredProperties: string[] = [\n      'arguments',\n      'column',\n      'columnNumber',\n      'description',\n      'fileName',\n      'message',\n      'name',\n      'number',\n      'line',\n      'lineNumber',\n      'opera#sourceloc',\n      'sourceId',\n      'sourceURL',\n      'stack',\n      'stackArray',\n      'stacktrace'\n    ];\n\n    const exception = context.contextData.getException();\n    if (!!exception) {\n      context.event.type = 'error';\n\n      if (!context.event.data[ERROR_KEY]) {\n        const config = context.client.config;\n        const parser = config.errorParser;\n        if (!parser) {\n          throw new Error('No error parser was defined.');\n        }\n\n        const result = parser.parse(context, exception);\n        if (!!result) {\n          const additionalData = JSON.parse(Utils.stringify(exception, config.dataExclusions.concat(ignoredProperties)));\n          if (!Utils.isEmpty(additionalData)) {\n            if (!result.data) {\n              result.data = {};\n            }\n            result.data['@ext'] = additionalData;\n          }\n\n          context.event.data[ERROR_KEY] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                        \n\nexport class EventExclusionPlugin implements IEventPlugin {\n  public priority: number = 45;\n  public name: string = 'EventExclusionPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    function getLogLevel(level: string): number {\n      switch ((level || '').toLowerCase().trim()) {\n        case 'trace':\n        case 'true':\n        case '1':\n        case 'yes':\n          return 0;\n        case 'debug':\n          return 1;\n        case 'info':\n          return 2;\n        case 'warn':\n          return 3;\n        case 'error':\n          return 4;\n        case 'fatal':\n          return 5;\n        case 'off':\n        case 'false':\n        case '0':\n        case 'no':\n          return 6;\n        default:\n          return -1;\n      }\n    }\n\n    function getMinLogLevel(settings: object, loggerName: string = '*'): number {\n      return getLogLevel(getTypeAndSourceSetting(settings, 'log', loggerName, 'Trace') + '');\n    }\n\n    // tslint:disable-next-line:ban-types\n    function getTypeAndSourceSetting(settings: Object = {}, type: string, source: string, defaultValue?: string|boolean): string|boolean {\n      if (!type) {\n        return defaultValue;\n      }\n\n      const isLog = type === 'log';\n      const sourcePrefix =  `@@${type}:`;\n\n      const value = settings[sourcePrefix + source];\n      if (value) {\n        return !isLog ? Utils.toBoolean(value) : value;\n      }\n\n      // check for wildcard match\n      for (const key in settings) {\n        if (Utils.startsWith(key.toLowerCase(), sourcePrefix.toLowerCase()) && Utils.isMatch(source, [key.substring(sourcePrefix.length)])) {\n          return !isLog ? Utils.toBoolean(settings[key]) : settings[key];\n        }\n      }\n\n      return defaultValue;\n    }\n\n    const ev = context.event;\n    const log = context.log;\n    const settings = context.client.config.settings;\n\n    if (ev.type === 'log') {\n      const minLogLevel = getMinLogLevel(settings, ev.source);\n      const logLevel = getLogLevel(ev.data['@level']);\n\n      if (logLevel >= 0 && (logLevel > 5 || logLevel < minLogLevel)) {\n        log.info('Cancelling log event due to minimum log level.');\n        context.cancelled = true;\n      }\n    } else if (ev.type === 'error') {\n      let error: IInnerError = ev.data['@error'];\n      while (!context.cancelled && error) {\n        if (getTypeAndSourceSetting(settings, ev.type, error.type, true) === false) {\n          log.info(`Cancelling error from excluded exception type: ${error.type}`);\n          context.cancelled = true;\n        }\n\n        error = error.inner;\n      }\n    } else if (getTypeAndSourceSetting(settings, ev.type, ev.source, true) === false) {\n      log.info(`Cancelling event from excluded type: ${ev.type} and source: ${ev.source}`);\n      context.cancelled = true;\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                           \n\nexport class ModuleInfoPlugin implements IEventPlugin {\n  public priority: number = 50;\n  public name: string = 'ModuleInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\n\n    const collector = context.client.config.moduleCollector;\n    if (context.event.data[ERROR_KEY] && !context.event.data['@error'].modules && !!collector) {\n      const modules: IModule[] = collector.getModules(context);\n      if (modules && modules.length > 0) {\n        context.event.data[ERROR_KEY].modules = modules;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                          \n\nexport class RequestInfoPlugin implements IEventPlugin {\n  public priority: number = 70;\n  public name: string = 'RequestInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const REQUEST_KEY: string = '@request'; // optimization for minifier.\n\n    const config = context.client.config;\n    const collector = config.requestInfoCollector;\n    if (!context.event.data[REQUEST_KEY] && !!collector) {\n      const requestInfo: IRequestInfo = collector.getRequestInfo(context);\n      if (!!requestInfo) {\n        if (Utils.isMatch(requestInfo.user_agent, config.userAgentBotPatterns)) {\n          context.log.info('Cancelling event as the request user agent matches a known bot pattern');\n          context.cancelled = true;\n        } else {\n          context.event.data[REQUEST_KEY] = requestInfo;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                           \n\nexport class SubmissionMethodPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = 'SubmissionMethodPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const submissionMethod: string = context.contextData.getSubmissionMethod();\n    if (!!submissionMethod) {\n      context.event.data['@submission_method'] = submissionMethod;\n    }\n\n    next && next();\n  }\n}\n\n                                                                                     \n\nexport class InMemoryStorage implements IStorage {\n  private maxItems: number;\n  private items: IStorageItem[] = [];\n  private lastTimestamp: number = 0;\n\n  constructor(maxItems: number) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any): number {\n    if (!value) {\n      return null;\n    }\n\n    const items = this.items;\n    const timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    const item = { timestamp, value };\n\n    if (items.push(item) > this.maxItems) {\n      items.shift();\n    }\n\n    this.lastTimestamp = timestamp;\n    return item.timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    return this.items.slice(0, limit);\n  }\n\n  public remove(timestamp: number): void {\n    const items = this.items;\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].timestamp === timestamp) {\n        items.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  public clear(): void {\n    this.items = [];\n  }\n}\n\nexport interface IClientConfiguration {\n  settings: object;\n  version: number;\n}\n\n                                                                                     \n\nexport abstract class KeyValueStorageBase implements IStorage {\n  private maxItems: number;\n  private items: number[];\n  private lastTimestamp: number = 0;\n\n  constructor(maxItems) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any, single?: boolean): number {\n    if (!value) {\n      return null;\n    }\n\n    this.ensureIndex();\n\n    const items = this.items;\n    const timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    const key = this.getKey(timestamp);\n    const json = JSON.stringify(value);\n\n    try {\n      this.write(key, json);\n      this.lastTimestamp = timestamp;\n      if (items.push(timestamp) > this.maxItems) {\n        this.delete(this.getKey(items.shift()));\n      }\n    } catch (e) {\n      return null;\n    }\n\n    return timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    this.ensureIndex();\n\n    return this.items.slice(0, limit)\n      .map((timestamp) => {\n        // Read and parse item for this timestamp\n        const key = this.getKey(timestamp);\n        try {\n          const json = this.read(key);\n          const value = JSON.parse(json, parseDate);\n          return { timestamp, value };\n        } catch (error) {\n          // Something went wrong - try to delete the cause.\n          this.safeDelete(key);\n          return null;\n        }\n      })\n      .filter((item) => item != null);\n  }\n\n  public remove(timestamp: number): void {\n    this.ensureIndex();\n\n    const items = this.items;\n    const index = items.indexOf(timestamp);\n    if (index >= 0) {\n      const key = this.getKey(timestamp);\n      this.safeDelete(key);\n      items.splice(index, 1);\n    }\n  }\n\n  public clear(): void {\n    this.items.forEach((item) => this.safeDelete(this.getKey(item)));\n    this.items = [];\n  }\n\n  protected abstract write(key: string, value: string): void;\n  protected abstract read(key: string): string;\n  protected abstract readAllKeys(): string[];\n  protected abstract delete(key: string);\n  protected abstract getKey(timestamp: number): string;\n  protected abstract getTimestamp(key: string): number;\n\n  private ensureIndex() {\n    if (!this.items) {\n      this.items = this.createIndex();\n      this.lastTimestamp = Math.max(0, ...this.items) + 1;\n    }\n  }\n\n  private safeDelete(key: string): void {\n    try {\n      this.delete(key);\n    } catch (error) {\n    }\n  }\n\n  private createIndex() {\n    try {\n      const keys = this.readAllKeys();\n      return keys.map((key) => {\n        try {\n          const timestamp = this.getTimestamp(key);\n          if (!timestamp) {\n            this.safeDelete(key);\n            return null;\n          }\n          return timestamp;\n        } catch (error) {\n          this.safeDelete(key);\n          return null;\n        }\n      }).filter((timestamp) => timestamp != null)\n        .sort((a, b) => a - b);\n    } catch (error) {\n      return [];\n    }\n  }\n}\n\nfunction parseDate(key, value) {\n  const dateRegx = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/g;\n  if (typeof value === 'string') {\n    const a = dateRegx.exec(value);\n    if (a) {\n      return new Date(value);\n    }\n  }\n  return value;\n}\n\n                                                            \n\nexport class BrowserStorage extends KeyValueStorageBase {\n  private prefix: string;\n\n  public static isAvailable(): boolean {\n    try {\n      const storage = window.localStorage;\n      const x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  constructor(namespace: string, prefix: string = 'com.exceptionless.', maxItems: number = 20) {\n    super(maxItems);\n\n    this.prefix = prefix + namespace + '-';\n  }\n\n  public write(key: string, value: string) {\n    window.localStorage.setItem(key, value);\n  }\n\n  public read(key: string) {\n    return window.localStorage.getItem(key);\n  }\n\n  public readAllKeys() {\n    return Object.keys(window.localStorage)\n      .filter((key) => key.indexOf(this.prefix) === 0);\n  }\n\n  public delete(key: string) {\n    window.localStorage.removeItem(key);\n  }\n\n  public getKey(timestamp) {\n    return this.prefix + timestamp;\n  }\n\n  public getTimestamp(key) {\n    return parseInt(key.substr(this.prefix.length), 10);\n  }\n}\n\n                                                                                                                                                                                                                                                                                                           \n\nexport class DefaultErrorParser implements IErrorParser {\n  public parse(context: EventPluginContext, exception: Error): IError {\n    function getParameters(parameters: string | string[]): IParameter[] {\n      const params: string[] = (typeof parameters === 'string' ? [parameters] : parameters) || [];\n\n      const result: IParameter[] = [];\n      for (const param of params) {\n        result.push({ name: param });\n      }\n\n      return result;\n    }\n\n    function getStackFrames(stackFrames: TraceKit.StackFrame[]): IStackFrame[] {\n      const ANONYMOUS: string = '<anonymous>';\n      const frames: IStackFrame[] = [];\n\n      for (const frame of stackFrames) {\n        frames.push({\n          name: (frame.func || ANONYMOUS).replace('?', ANONYMOUS),\n          parameters: getParameters(frame.args),\n          file_name: frame.url,\n          line_number: frame.line || 0,\n          column: frame.column || 0\n        });\n      }\n\n      return frames;\n    }\n\n    const TRACEKIT_STACK_TRACE_KEY: string = '@@_TraceKit.StackTrace'; // optimization for minifier.\n\n    const stackTrace: TraceKit.StackTrace = !!context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      ? context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      : TraceKit.computeStackTrace(exception, 25);\n\n    if (!stackTrace) {\n      throw new Error('Unable to parse the exceptions stack trace.');\n    }\n\n    const message = typeof(exception) === 'string' ? exception as any : undefined;\n    return {\n      type: stackTrace.name,\n      message: stackTrace.message || exception.message || message,\n      stack_trace: getStackFrames(stackTrace.stack || [])\n    };\n  }\n}\n\n                                                                                                                                                                                                         \n\nexport class DefaultModuleCollector implements IModuleCollector {\n  public getModules(context: EventPluginContext): IModule[] {\n    if (document && document.getElementsByTagName) {\n      return null;\n    }\n\n    const modules: IModule[] = [];\n    const scripts: NodeListOf<HTMLScriptElement> = document.getElementsByTagName('script');\n    if (scripts && scripts.length > 0) {\n      for (let index = 0; index < scripts.length; index++) {\n        if (scripts[index].src) {\n          modules.push({\n            module_id: index,\n            name: scripts[index].src,\n            version: Utils.parseVersion(scripts[index].src)\n          });\n        } else if (!!scripts[index].innerHTML) {\n          modules.push({\n            module_id: index,\n            name: 'Script Tag',\n            version: Utils.getHashCode(scripts[index].innerHTML).toString()\n          });\n        }\n      }\n    }\n\n    return modules;\n  }\n}\n\n                                                                                                                                                                                                                             \n\nexport class DefaultRequestInfoCollector implements IRequestInfoCollector {\n  public getRequestInfo(context: EventPluginContext): IRequestInfo {\n    if (!document || !navigator || !location) {\n      return null;\n    }\n\n    const exclusions = context.client.config.dataExclusions;\n    const requestInfo: IRequestInfo = {\n      user_agent: navigator.userAgent,\n      is_secure: location.protocol === 'https:',\n      host: location.hostname,\n      port: location.port && location.port !== '' ? parseInt(location.port, 10) : 80,\n      path: location.pathname,\n      // client_ip_address: 'TODO',\n      cookies: Utils.getCookies(document.cookie, exclusions),\n      query_string: Utils.parseQueryString(location.search.substring(1), exclusions)\n    };\n\n    if (document.referrer && document.referrer !== '') {\n      requestInfo.referrer = document.referrer;\n    }\n\n    return requestInfo;\n  }\n}\n\n                                                                                                                                                \n\nexport class BrowserStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(prefix?: string, maxQueueItems: number = 250) {\n    this.queue = new BrowserStorage('q', prefix, maxQueueItems);\n    this.settings = new BrowserStorage('settings', prefix, 1);\n  }\n\n}\n\n                                                                                                                                                                              \n\n// tslint:disable-next-line:prefer-const\ndeclare var XDomainRequest: { new (); create(); };\n\nexport class DefaultSubmissionAdapter implements ISubmissionAdapter {\n  public sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean) {\n    // TODO: Handle sending events when app is exiting with send beacon.\n    const TIMEOUT: string = 'timeout';  // optimization for minifier.\n    const LOADED: string = 'loaded';  // optimization for minifier.\n    const WITH_CREDENTIALS: string = 'withCredentials';  // optimization for minifier.\n\n    let isCompleted: boolean = false;\n    let useSetTimeout: boolean = false;\n    function complete(mode: string, xhr: XMLHttpRequest) {\n      function parseResponseHeaders(headerStr) {\n        function trim(value) {\n          return value.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n        }\n\n        const headers = {};\n        const headerPairs = (headerStr || '').split('\\u000d\\u000a');\n        for (const headerPair of headerPairs) {\n          // Can't use split() here because it does the wrong thing\n          // if the header value has the string \": \" in it.\n          const separator = headerPair.indexOf('\\u003a\\u0020');\n          if (separator > 0) {\n            headers[trim(headerPair.substring(0, separator).toLowerCase())] = headerPair.substring(separator + 2);\n          }\n        }\n\n        return headers;\n      }\n\n      if (isCompleted) {\n        return;\n      }\n\n      isCompleted = true;\n\n      let message: string = xhr.statusText;\n      const responseText: string = xhr.responseText;\n      let status: number = xhr.status;\n\n      if (mode === TIMEOUT || status === 0) {\n        message = 'Unable to connect to server.';\n        status = 0;\n      } else if (mode === LOADED && !status) {\n        status = request.method === 'POST' ? 202 : 200;\n      } else if (status < 200 || status > 299) {\n        const responseBody: any = (xhr as any).responseBody;\n        if (!!responseBody && !!responseBody.message) {\n          message = responseBody.message;\n        } else if (!!responseText && responseText.indexOf('message') !== -1) {\n          try {\n            message = JSON.parse(responseText).message;\n          } catch (e) {\n            message = responseText;\n          }\n        }\n      }\n\n      callback && callback(status || 500, message || '', responseText, parseResponseHeaders(xhr.getAllResponseHeaders && xhr.getAllResponseHeaders()));\n    }\n\n    function createRequest(userAgent: string, method: string, url: string): XMLHttpRequest {\n      let xhr: any = new XMLHttpRequest();\n      if (WITH_CREDENTIALS in xhr) {\n        xhr.open(method, url, true);\n\n        xhr.setRequestHeader('X-Exceptionless-Client', userAgent);\n        if (method === 'POST') {\n          xhr.setRequestHeader('Content-Type', 'application/json');\n        }\n      } else if (typeof XDomainRequest !== 'undefined') {\n        useSetTimeout = true;\n        xhr = new XDomainRequest();\n        xhr.open(method, location.protocol === 'http:' ? url.replace('https:', 'http:') : url);\n      } else {\n        xhr = null;\n      }\n\n      if (xhr) {\n        xhr.timeout = 10000;\n      }\n\n      return xhr;\n    }\n\n    const url = `${request.url}${(request.url.indexOf('?') === -1 ? '?' : '&')}access_token=${encodeURIComponent(request.apiKey)}`;\n    const xhr = createRequest(request.userAgent, request.method || 'POST', url);\n    if (!xhr) {\n      return (callback && callback(503, 'CORS not supported.'));\n    }\n\n    if (WITH_CREDENTIALS in xhr) {\n      xhr.onreadystatechange = () => {\n        // xhr not ready.\n        if (xhr.readyState !== 4) {\n          return;\n        }\n\n        complete(LOADED, xhr);\n      };\n    }\n\n    xhr.onprogress = () => { };\n    xhr.ontimeout = () => complete(TIMEOUT, xhr);\n    xhr.onerror = () => complete('error', xhr);\n    xhr.onload = () => complete(LOADED, xhr);\n\n    if (useSetTimeout) {\n      setTimeout(() => xhr.send(request.data), 500);\n    } else {\n      xhr.send(request.data);\n    }\n  }\n}\n\nn\nexport function isBrowser(): boolean {\n  return typeof document !== 'undefined';\n}\n\nexport function browserInit() {\n  function getDefaultsSettingsFromScriptTag(): IConfigurationSettings {\n    if (!document || !document.getElementsByTagName) {\n      return null;\n    }\n\n    const scripts = document.getElementsByTagName('script');\n    // tslint:disable-next-line:prefer-for-of\n    for (let index = 0; index < scripts.length; index++) {\n      if (scripts[index].src && scripts[index].src.indexOf('/exceptionless') > -1) {\n        return Utils.parseQueryString(scripts[index].src.split('?').pop());\n      }\n    }\n    return null;\n  }\n\n  function processUnhandledException(stackTrace: TraceKit.StackTrace, options?: any): void {\n    const builder = ExceptionlessClient.default.createUnhandledException(new Error(stackTrace.message || (options || {}).status || 'Script error'), 'onerror');\n    builder.pluginContextData['@@_TraceKit.StackTrace'] = stackTrace;\n    builder.submit();\n  }\n\n  /*\n   TODO: We currently are unable to parse string exceptions.\n   function processJQueryAjaxError(event, xhr, settings, error:string): void {\n   let client = ExceptionlessClient.default;\n   if (xhr.status === 404) {\n   client.submitNotFound(settings.url);\n   } else if (xhr.status !== 401) {\n   client.createUnhandledException(error, 'JQuery.ajaxError')\n   .setSource(settings.url)\n   .setProperty('status', xhr.status)\n   .setProperty('request', settings.data)\n   .setProperty('response', xhr.responseText && xhr.responseText.slice && xhr.responseText.slice(0, 1024))\n   .submit();\n   }\n   }\n   */\n\n  Configuration.prototype.useLocalStorage = function() {\n    if (BrowserStorage.isAvailable()) {\n      this.storage = new BrowserStorageProvider();\n      SettingsManager.applySavedServerSettings(this);\n      this.changed();\n    }\n  };\n\n  const defaults = Configuration.defaults;\n  const settings = getDefaultsSettingsFromScriptTag();\n  if (settings && (settings.apiKey || settings.serverUrl)) {\n    defaults.apiKey = settings.apiKey;\n    defaults.serverUrl = settings.serverUrl;\n  }\n\n  defaults.errorParser = new DefaultErrorParser();\n  defaults.moduleCollector = new DefaultModuleCollector();\n  defaults.requestInfoCollector = new DefaultRequestInfoCollector();\n  defaults.submissionAdapter = new DefaultSubmissionAdapter();\n\n  TraceKit.report.subscribe(processUnhandledException);\n  TraceKit.extendToAsynchronousCallbacks();\n\n  // window && window.addEventListener && window.addEventListener('beforeunload', function () {\n  //   ExceptionlessClient.default.config.queue.process(true);\n  // });\n\n  // if (typeof $ !== 'undefined' && $(document)) {\n  //   $(document).ajaxError(processJQueryAjaxError);\n  // }\n\n  (Error as any).stackTraceLimit = Infinity;\n}\n\nif (isBrowser()) {\n  browserInit();\n}\n\n// tslint:disable-next-line:prefer-const\ndeclare var $;\n\n"]}