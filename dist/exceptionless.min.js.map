{"version":3,"sources":["tracekit.js","exceptionless.min.js","/source/exceptionless.ts"],"names":["window","undefined","_has","object","key","Object","prototype","hasOwnProperty","call","_isUndefined","what","TraceKit","_oldTraceKit","_slice","slice","UNKNOWN_FUNCTION","noConflict","wrap","func","wrapped","apply","this","arguments","e","report","subscribe","handler","installGlobalHandler","handlers","push","unsubscribe","i","length","splice","notifyHandlers","stack","isWindowError","exception","collectWindowErrors","concat","inner","traceKitWindowOnError","message","url","lineNo","columnNo","errorObj","lastExceptionStack","computeStackTrace","augmentStackTraceWithInitialElement","processLastException","location","line","column","guessFunctionName","context","gatherContext","mode","_oldOnerrorHandler","_onErrorHandlerInstalled","onerror","_lastExceptionStack","_lastArgs","lastArgs","lastException","ex","setTimeout","incomplete","loadSource","remoteFetching","getXHR","XMLHttpRequest","ActiveXObject","request","open","send","responseText","getSource","sourceCache","source","domain","document","match","exec","split","m","reFunctionArgNames","reGuessFunction","maxLines","linesBefore","Math","floor","linesOfContext","linesAfter","start","max","end","min","escapeRegExp","text","replace","escapeCodeAsRegExpForMatchingInsideHTML","body","findSourceInUrls","re","urls","j","join","substring","index","lastIndexOf","findSourceInLine","fragment","RegExp","findSourceByFunctionBody","parts","result","href","scripts","getElementsByTagName","code","codeRE","eventRE","script","src","name","args","event","computeStackTraceFromStackProp","element","chrome","gecko","winjs","lines","reference","isNative","indexOf","columnNumber","computeStackTraceFromStacktraceProp","stacktrace","opera10Regex","opera11Regex","exc","computeStackTraceFromOperaMultiLineMessage","lineRE1","lineRE2","lineRE3","inlineScriptBlocks","s","item","relativeLine","pos","innerText","midline","stackInfo","initial","unshift","partial","computeStackTraceByWalkingCallerChain","depth","functionName","funcs","recursion","curr","caller","toString","input","description","sourceURL","fileName","lineNumber","debug","computeStackTraceOfCaller","Error","ofCaller","extendToAsynchronousCallbacks","_helper","fnName","originalFn","originalCallback","module","exports","define","amd","global","root","factory","require","exceptionless","parseDate","value","dateRegx","a","Date","getDefaultsSettingsFromScriptTag","Utils","parseQueryString","pop","processUnhandledException","stackTrace","options","builder","ExceptionlessClient","createUnhandledException","status","pluginContextData","submit","__extends","d","b","__","constructor","p","create","SettingsManager","onChanged","_handlers","applySavedServerSettings","config","savedSettings","getSavedServerSettings","log","info","settings","merge","changed","checkVersion","version","savedVersion","updateSettings","_this","isValid","submissionClient","getSettings","response","success","savedServerSettings","newSettings","settingsVersion","storage","save","error","get","DefaultLastReferenceIdManager","_lastReferenceId","getLast","clearLast","setLast","eventId","ConsoleLog","warn","level","console","NullLog","EventPluginContext","client","contextData","ContextData","defineProperty","enumerable","configurable","EventPluginManager","run","callback","plugin","next","cancelled","plugins","wrappedPlugins","priority","addDefaultPlugins","addPlugin","ConfigurationDefaultsPlugin","ErrorPlugin","DuplicateCheckerPlugin","EventExclusionPlugin","ModuleInfoPlugin","RequestInfoPlugin","EnvironmentInfoPlugin","SubmissionMethodPlugin","HeartbeatPlugin","heartbeatInterval","_heartbeatInterval","clearHeartbeatInterval","_heartbeatIntervalId","clearInterval","user","data","identity","setInterval","submitSessionHeartbeat","ReferenceIdPlugin","reference_id","type","guid","DefaultEventQueue","_processingQueue","_config","enqueue","ensureQueueTimer","areQueuedItemsDiscarded","timestamp","queue","logText","process","isAppExiting","queueNotProcessed","enabled","events_1","submissionBatchSize","serverUrl","postEvents","map","processSubmissionResponse","suspendProcessing","durationInMinutes","discardFutureQueuedItems","clearQueue","_suspendProcessingUntil","getTime","_discardQueuedItemsUntil","clear","_queueTimer","onProcessQueue","isQueueProcessingSuspended","events","noSubmission","removeEvents","serviceUnavailable","paymentRequired","unableToAuthenticate","notFound","badRequest","requestEntityTooLarge","round","remove","InMemoryStorageProvider","maxQueueItems","InMemoryStorage","DefaultSubmissionClient","configurationVersionHeader","JSON","stringify","createRequest","cb","createSubmissionCallback","submissionAdapter","sendRequest","postUserDescription","referenceId","path","encodeURIComponent","headers","SettingsResponse","parse","isNaN","sendHeartbeat","sessionIdOrUserId","closeSession","heartbeatServerUrl","method","apiKey","userAgent","parseInt","SubmissionResponse","addRange","target","values","_i","getHashCode","hash","character","charCodeAt","getCookies","cookies","exclusions","cookie","isMatch","isEmpty","s4","random","defaultValues","parseVersion","versionRegex","matches","query","pairs","pair","decodeURIComponent","randomNumber","patterns","ignoreCase","trim","toLowerCase","some","pattern","startsWithWildcard","endsWithWildcard","endsWith","startsWith","keys","prefix","suffix","maxDepth","stringifyImpl","obj","excludedKeys","cache","flattened","prop","Configuration","configSettings","inject","fn","defaultTags","defaultData","lastReferenceIdManager","_plugins","_serverUrl","_heartbeatServerUrl","_dataExclusions","_userAgentBotPatterns","defaults","environmentInfoCollector","errorParser","moduleCollector","requestInfoCollector","_apiKey","set","addDataExclusions","addUserAgentBotPatterns","userAgentBotPatterns","sort","p1","p2","pluginOrName","pluginAction","pluginExists","removePlugin","setVersion","setUserIdentity","userInfoOrIdentity","USER_KEY","userInfo","shouldRemove","useSessions","sendHeartbeats","useReferenceIds","useLocalStorage","useDebugLogger","_defaultSettings","EventBuilder","_validIdentifierErrorMessage","setType","setSource","setReferenceId","isValidIdentifier","setEventReference","id","setProperty","setMessage","setGeo","latitude","longitude","geo","setUserDescription","emailAddress","email_address","setManualStackingInfo","signatureData","title","signature_data","setManualStackingKey","manualStackingKey","ManualStackingKey","setValue","addTags","tags","excludedPropertyNames","dataExclusions","markAsCritical","critical","addRequestInfo","submitEvent","isDigit","isLetter","isMinus","setException","getException","markAsUnhandledError","setSubmissionMethod","getSubmissionMethod","statusCode","settingsOrApiKey","createException","createEvent","submitException","submissionMethod","submitUnhandledException","createFeatureUsage","feature","submitFeatureUsage","createLog","sourceOrMessage","callee","submitLog","createNotFound","resource","submitNotFound","createSessionStart","submitSessionStart","submitSessionEnd","date","ctx","ev","updateUserEmailAndDescription","email","userDescription","getLastReferenceId","_instance","tag","ERROR_KEY","ignoredProperties","parser","additionalData","collector","modules","getModules","REQUEST_KEY","requestInfo","getRequestInfo","user_agent","ENVIRONMENT_KEY","environmentInfo","getEnvironmentInfo","getCurrentTime","now","_processedHashcodes","_getCurrentTime","isDuplicate","processedHashcodes","_loop_1","hashCode","stack_trace","h","shift","state_1","getLogLevel","getMinLogLevel","loggerName","getTypeAndSourceSetting","defaultValue","sourcePrefix","minLogLevel","logLevel","maxItems","items","lastTimestamp","limit","KeyValueStorageBase","single","ensureIndex","getKey","json","write","read","safeDelete","filter","forEach","createIndex","readAllKeys","getTimestamp","BrowserStorage","_super","namespace","isAvailable","localStorage","x","setItem","removeItem","getItem","substr","DefaultErrorParser","getParameters","parameters","params","getStackFrames","stackFrames","ANONYMOUS","frames","frame","file_name","line_number","TRACEKIT_STACK_TRACE_KEY","DefaultModuleCollector","module_id","innerHTML","DefaultRequestInfoCollector","navigator","is_secure","protocol","host","hostname","port","pathname","query_string","search","referrer","DefaultSubmissionAdapter","complete","xhr","parseResponseHeaders","headerStr","headerPairs","headerPair","separator","isCompleted","statusText","TIMEOUT","LOADED","responseBody","getAllResponseHeaders","WITH_CREDENTIALS","setRequestHeader","XDomainRequest","useSetTimeout","timeout","onreadystatechange","readyState","onprogress","ontimeout","onload","BrowserStorageProvider","stackTraceLimit","Infinity"],"mappings":"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","file":"exceptionless.min.js","sourcesContent":["/**\n * https://github.com/csnover/TraceKit\n * @license MIT\n * @namespace TraceKit\n */\n(function(window, undefined) {\nif (!window) {\n    return;\n}\n\nvar TraceKit = {};\nvar _oldTraceKit = window.TraceKit;\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n/**\n * A better form of hasOwnProperty<br/>\n * Example: `_has(MainHostObject, property) === true/false`\n *\n * @param {Object} object to check property\n * @param {string} key to check\n * @return {Boolean} true if the object has the key and it is not inherited\n */\nfunction _has(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\n\n/**\n * Returns true if the parameter is undefined<br/>\n * Example: `_isUndefined(val) === true/false`\n *\n * @param {*} what Value to check\n * @return {Boolean} true if undefined and false otherwise\n */\nfunction _isUndefined(what) {\n    return typeof what === 'undefined';\n}\n\n/**\n * Export TraceKit out to another variable<br/>\n * Example: `var TK = TraceKit.noConflict()`\n * @return {Object} The TraceKit object\n * @memberof TraceKit\n */\nTraceKit.noConflict = function noConflict() {\n    window.TraceKit = _oldTraceKit;\n    return TraceKit;\n};\n\n/**\n * Wrap any function in a TraceKit reporter<br/>\n * Example: `func = TraceKit.wrap(func);`\n *\n * @param {Function} func Function to be wrapped\n * @return {Function} The wrapped func\n * @memberof TraceKit\n */\nTraceKit.wrap = function traceKitWrapper(func) {\n    function wrapped() {\n        try {\n            return func.apply(this, arguments);\n        } catch (e) {\n            TraceKit.report(e);\n            throw e;\n        }\n    }\n    return wrapped;\n};\n\n/**\n * Cross-browser processing of unhandled exceptions\n *\n * Syntax:\n * ```js\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n * ```\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *     on top frame; column number is not guaranteed\n *   - Opera: full stack trace with line and column numbers\n *   - Chrome: full stack trace with line and column numbers\n *   - Safari: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *   - IE: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a TraceKit.StackTrace object as described in the\n * TraceKit.computeStackTrace docs.\n *\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.report = (function reportModuleWrapper() {\n    var handlers = [],\n        lastArgs = null,\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {TraceKit.StackTrace} stack\n     * @param {boolean} isWindowError Is this a top-level window error?\n     * @memberof TraceKit.report\n     * @throws An exception if an error occurs while calling an handler.\n     */\n    function notifyHandlers(stack, isWindowError) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n          return;\n        }\n        for (var i in handlers) {\n            if (_has(handlers, i)) {\n                try {\n                    handlers[i].apply(null, [stack].concat(_slice.call(arguments, 2)));\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error occurred.\n     * @param {(number|string)=} columnNo The column number at which the error occurred.\n     * @param {Error=} errorObj The actual Error object.\n     * @memberof TraceKit.report\n     */\n    function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {\n        var stack = null;\n\n        if (lastExceptionStack) {\n            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n    \t    processLastException();\n\t    } else if (errorObj) {\n            stack = TraceKit.computeStackTrace(errorObj);\n            notifyHandlers(stack, true);\n        } else {\n            var location = {\n              'url': url,\n              'line': lineNo,\n              'column': columnNo\n            };\n            location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);\n            location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);\n            stack = {\n              'mode': 'onerror',\n              'message': message,\n              'stack': [location]\n            };\n\n            notifyHandlers(stack, true);\n        }\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    /**\n     * Install a global onerror handler\n     * @memberof TraceKit.report\n     */\n    function installGlobalHandler () {\n        if (_onErrorHandlerInstalled === true) {\n            return;\n        }\n        _oldOnerrorHandler = window.onerror;\n        window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    /**\n     * Process the most recent exception\n     * @memberof TraceKit.report\n     */\n    function processLastException() {\n        var _lastExceptionStack = lastExceptionStack,\n            _lastArgs = lastArgs;\n        lastArgs = null;\n        lastExceptionStack = null;\n        lastException = null;\n        notifyHandlers.apply(null, [_lastExceptionStack, false].concat(_lastArgs));\n    }\n\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     * @memberof TraceKit.report\n     * @throws An exception if an incomplete stack trace is detected (old IE browsers).\n     */\n    function report(ex) {\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n              processLastException();\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n        lastArgs = _slice.call(arguments, 1);\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        window.setTimeout(function () {\n            if (lastException === ex) {\n                processLastException();\n            }\n        }, (stack.incomplete ? 2000 : 0));\n\n        throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    return report;\n}());\n\n/**\n * An object representing a single stack frame.\n * @typedef {Object} StackFrame\n * @property {string} url The JavaScript or HTML file URL.\n * @property {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * @property {string[]?} args The arguments passed to the function, if known.\n * @property {number=} line The line number, if known.\n * @property {number=} column The column number, if known.\n * @property {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n * @memberof TraceKit\n */\n\n/**\n * An object representing a JavaScript stack trace.\n * @typedef {Object} StackTrace\n * @property {string} name The name of the thrown exception.\n * @property {string} message The exception error message.\n * @property {TraceKit.StackFrame[]} stack An array of stack frames.\n * @property {string} mode 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace.\n * @memberof TraceKit\n */\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   ```js\n *   s = TraceKit.computeStackTrace.ofCaller([depth])\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n *   ```\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n * Tracing example:\n *  ```js\n *     function trace(message) {\n *         var stackInfo = TraceKit.computeStackTrace.ofCaller();\n *         var data = message + \"\\n\";\n *         for(var i in stackInfo.stack) {\n *             var item = stackInfo.stack[i];\n *             data += (item.func || '[anonymous]') + \"() in \" + item.url + \":\" + (item.line || '0') + \"\\n\";\n *         }\n *         if (window.console)\n *             console.info(data);\n *         else\n *             alert(data);\n *     }\n * ```\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n    var debug = false,\n        sourceCache = {};\n\n    /**\n     * Attempts to retrieve source code via XMLHttpRequest, which is used\n     * to look up anonymous function names.\n     * @param {string} url URL of source code.\n     * @return {string} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function loadSource(url) {\n        if (!TraceKit.remoteFetching) { //Only attempt request if remoteFetching is on.\n            return '';\n        }\n        try {\n            var getXHR = function() {\n                try {\n                    return new window.XMLHttpRequest();\n                } catch (e) {\n                    // explicitly bubble up the exception if not found\n                    return new window.ActiveXObject('Microsoft.XMLHTTP');\n                }\n            };\n\n            var request = getXHR();\n            request.open('GET', url, false);\n            request.send('');\n            return request.responseText;\n        } catch (e) {\n            return '';\n        }\n    }\n\n    /**\n     * Retrieves source code from the source code cache.\n     * @param {string} url URL of source code.\n     * @return {Array.<string>} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function getSource(url) {\n        if (typeof url !== 'string') {\n            return [];\n        }\n\n        if (!_has(sourceCache, url)) {\n            // URL needs to be able to fetched within the acceptable domain.  Otherwise,\n            // cross-domain errors will be triggered.\n            /*\n                Regex matches:\n                0 - Full Url\n                1 - Protocol\n                2 - Domain\n                3 - Port (Useful for internal applications)\n                4 - Path\n            */\n            var source = '';\n            var domain = '';\n            try { domain = window.document.domain; } catch (e) { }\n            var match = /(.*)\\:\\/\\/([^:\\/]+)([:\\d]*)\\/{0,1}([\\s\\S]*)/.exec(url);\n            if (match && match[2] === domain) {\n                source = loadSource(url);\n            }\n            sourceCache[url] = source ? source.split('\\n') : [];\n        }\n\n        return sourceCache[url];\n    }\n\n    /**\n     * Tries to use an externally loaded copy of source code to determine\n     * the name of a function by looking at the name of the variable it was\n     * assigned to, if any.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} lineNo Line number in source code.\n     * @return {string} The function name, if discoverable.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function guessFunctionName(url, lineNo) {\n        var reFunctionArgNames = /function ([^(]*)\\(([^)]*)\\)/,\n            reGuessFunction = /['\"]?([0-9A-Za-z$_]+)['\"]?\\s*[:=]\\s*(function|eval|new Function)/,\n            line = '',\n            maxLines = 10,\n            source = getSource(url),\n            m;\n\n        if (!source.length) {\n            return UNKNOWN_FUNCTION;\n        }\n\n        // Walk backwards from the first line in the function until we find the line which\n        // matches the pattern above, which is the function definition\n        for (var i = 0; i < maxLines; ++i) {\n            line = source[lineNo - i] + line;\n\n            if (!_isUndefined(line)) {\n                if ((m = reGuessFunction.exec(line))) {\n                    return m[1];\n                } else if ((m = reFunctionArgNames.exec(line))) {\n                    return m[1];\n                }\n            }\n        }\n\n        return UNKNOWN_FUNCTION;\n    }\n\n    /**\n     * Retrieves the surrounding lines from where an exception occurred.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} line Line number in source code to centre\n     * around for context.\n     * @return {?Array.<string>} Lines of source code.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function gatherContext(url, line) {\n        var source = getSource(url);\n\n        if (!source.length) {\n            return null;\n        }\n\n        var context = [],\n            // linesBefore & linesAfter are inclusive with the offending line.\n            // if linesOfContext is even, there will be one extra line\n            //   *before* the offending line.\n            linesBefore = Math.floor(TraceKit.linesOfContext / 2),\n            // Add one extra line if linesOfContext is odd\n            linesAfter = linesBefore + (TraceKit.linesOfContext % 2),\n            start = Math.max(0, line - linesBefore - 1),\n            end = Math.min(source.length, line + linesAfter - 1);\n\n        line -= 1; // convert to 0-based index\n\n        for (var i = start; i < end; ++i) {\n            if (!_isUndefined(source[i])) {\n                context.push(source[i]);\n            }\n        }\n\n        return context.length > 0 ? context : null;\n    }\n\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    /**\n     * Determines where a code fragment occurs in the source code.\n     * @param {RegExp} re The function definition.\n     * @param {Array.<string>} urls A list of URLs to search.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInUrls(re, urls) {\n        var source, m;\n        for (var i = 0, j = urls.length; i < j; ++i) {\n            // console.log('searching', urls[i]);\n            if ((source = getSource(urls[i])).length) {\n                source = source.join('\\n');\n                if ((m = re.exec(source))) {\n                    // console.log('Found function in ' + urls[i]);\n\n                    return {\n                        'url': urls[i],\n                        'line': source.substring(0, m.index).split('\\n').length,\n                        'column': m.index - source.lastIndexOf('\\n', m.index) - 1\n                    };\n                }\n            }\n        }\n\n        // console.log('no match');\n\n        return null;\n    }\n\n    /**\n     * Determines at which column a code fragment occurs on a line of the\n     * source code.\n     * @param {string} fragment The code fragment.\n     * @param {string} url The URL to search.\n     * @param {(string|number)} line The line number to examine.\n     * @return {?number} The column number.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInLine(fragment, url, line) {\n        var source = getSource(url),\n            re = new RegExp('\\\\b' + escapeRegExp(fragment) + '\\\\b'),\n            m;\n\n        line -= 1;\n\n        if (source && source.length > line && (m = re.exec(source[line]))) {\n            return m.index;\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines where a function was defined within the source code.\n     * @param {(Function|string)} func A function reference or serialized\n     * function definition.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceByFunctionBody(func) {\n        if (_isUndefined(window && window.document)) {\n            return;\n        }\n\n        var urls = [window.location.href],\n            scripts = window.document.getElementsByTagName('script'),\n            body,\n            code = '' + func,\n            codeRE = /^function(?:\\s+([\\w$]+))?\\s*\\(([\\w\\s,]*)\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            eventRE = /^function on([\\w$]+)\\s*\\(event\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            re,\n            parts,\n            result;\n\n        for (var i = 0; i < scripts.length; ++i) {\n            var script = scripts[i];\n            if (script.src) {\n                urls.push(script.src);\n            }\n        }\n\n        if (!(parts = codeRE.exec(code))) {\n            re = new RegExp(escapeRegExp(code).replace(/\\s+/g, '\\\\s+'));\n        }\n\n        // not sure if this is really necessary, but I don’t have a test\n        // corpus large enough to confirm that and it was in the original.\n        else {\n            var name = parts[1] ? '\\\\s+' + parts[1] : '',\n                args = parts[2].split(',').join('\\\\s*,\\\\s*');\n\n            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\\s+/g, '\\\\s+');\n            re = new RegExp('function' + name + '\\\\s*\\\\(\\\\s*' + args + '\\\\s*\\\\)\\\\s*{\\\\s*' + body + '\\\\s*}');\n        }\n\n        // look for a normal function definition\n        if ((result = findSourceInUrls(re, urls))) {\n            return result;\n        }\n\n        // look for an old-school event handler function\n        if ((parts = eventRE.exec(code))) {\n            var event = parts[1];\n            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);\n\n            // look for a function defined in HTML as an onXXX handler\n            re = new RegExp('on' + event + '=[\\\\\\'\"]\\\\s*' + body + '\\\\s*[\\\\\\'\"]', 'i');\n\n            if ((result = findSourceInUrls(re, urls[0]))) {\n                return result;\n            }\n\n            // look for ???\n            re = new RegExp(body);\n\n            if ((result = findSourceInUrls(re, urls))) {\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (!ex.stack) {\n            return null;\n        }\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|\\[native).*?)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:ms-appx|https?|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if ((parts = chrome.exec(lines[i]))) {\n                var isNative = parts[2] && parts[2].indexOf('native') !== -1;\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ( parts = winjs.exec(lines[i]) ) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = gecko.exec(lines[i]))) {\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = guessFunctionName(element.url, element.line);\n            }\n\n            if (element.line) {\n                element.context = gatherContext(element.url, element.line);\n            }\n\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        if (stack[0] && stack[0].line && !stack[0].column && reference) {\n            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);\n        } else if (!stack[0].column && !_isUndefined(ex.columnNumber)) {\n            // FireFox uses this awesome columnNumber property for its top frame\n            // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n            // so adding 1\n            stack[0].column = ex.columnNumber + 1;\n        }\n\n        return {\n            'mode': 'stack',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * Computes stack trace information from the stacktrace property.\n     * Opera 10+ uses this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStacktraceProp(ex) {\n        // Access and store the stacktrace property before doing ANYTHING\n        // else to it because Opera is not very good at providing it\n        // reliably in other circumstances.\n        var stacktrace = ex.stacktrace;\n        if (!stacktrace) {\n            return;\n        }\n\n        var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i,\n            opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i,\n            lines = stacktrace.split('\\n'),\n            stack = [],\n            parts;\n\n        for (var line = 0; line < lines.length; line += 2) {\n            var element = null;\n            if ((parts = opera10Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[2],\n                    'line': +parts[1],\n                    'column': null,\n                    'func': parts[3],\n                    'args':[]\n                };\n            } else if ((parts = opera11Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[6],\n                    'line': +parts[1],\n                    'column': +parts[2],\n                    'func': parts[3] || parts[4],\n                    'args': parts[5] ? parts[5].split(',') : []\n                };\n            }\n\n            if (element) {\n                if (!element.func && element.line) {\n                    element.func = guessFunctionName(element.url, element.line);\n                }\n                if (element.line) {\n                    try {\n                        element.context = gatherContext(element.url, element.line);\n                    } catch (exc) {}\n                }\n\n                if (!element.context) {\n                    element.context = [lines[line + 1]];\n                }\n\n                stack.push(element);\n            }\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        return {\n            'mode': 'stacktrace',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * NOT TESTED.\n     * Computes stack trace information from an error message that includes\n     * the stack trace.\n     * Opera 9 and earlier use this method if the option to show stack\n     * traces is turned on in opera:config.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromOperaMultiLineMessage(ex) {\n        // TODO: Clean this function up\n        // Opera includes a stack trace into the exception message. An example is:\n        //\n        // Statement on line 3: Undefined variable: undefinedFunc\n        // Backtrace:\n        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz\n        //         undefinedFunc(a);\n        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy\n        //           zzz(x, y, z);\n        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx\n        //           yyy(a, a, a);\n        //   Line 1 of function script\n        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }\n        //   ...\n\n        var lines = ex.message.split('\\n');\n        if (lines.length < 4) {\n            return null;\n        }\n\n        var lineRE1 = /^\\s*Line (\\d+) of linked script ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE2 = /^\\s*Line (\\d+) of inline#(\\d+) script in ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE3 = /^\\s*Line (\\d+) of function script\\s*$/i,\n            stack = [],\n            scripts = (window && window.document && window.document.getElementsByTagName('script')),\n            inlineScriptBlocks = [],\n            parts;\n\n        for (var s in scripts) {\n            if (_has(scripts, s) && !scripts[s].src) {\n                inlineScriptBlocks.push(scripts[s]);\n            }\n        }\n\n        for (var line = 2; line < lines.length; line += 2) {\n            var item = null;\n            if ((parts = lineRE1.exec(lines[line]))) {\n                item = {\n                    'url': parts[2],\n                    'func': parts[3],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null\n                };\n            } else if ((parts = lineRE2.exec(lines[line]))) {\n                item = {\n                    'url': parts[3],\n                    'func': parts[4],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.\n                };\n                var relativeLine = (+parts[1]); // relative to the start of the <SCRIPT> block\n                var script = inlineScriptBlocks[parts[2] - 1];\n                if (script) {\n                    var source = getSource(item.url);\n                    if (source) {\n                        source = source.join('\\n');\n                        var pos = source.indexOf(script.innerText);\n                        if (pos >= 0) {\n                            item.line = relativeLine + source.substring(0, pos).split('\\n').length;\n                        }\n                    }\n                }\n            } else if ((parts = lineRE3.exec(lines[line]))) {\n                var url = window.location.href.replace(/#.*$/, '');\n                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));\n                var src = findSourceInUrls(re, [url]);\n                item = {\n                    'url': url,\n                    'func': '',\n                    'args': [],\n                    'line': src ? src.line : parts[1],\n                    'column': null\n                };\n            }\n\n            if (item) {\n                if (!item.func) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n                var context = gatherContext(item.url, item.line);\n                var midline = (context ? context[Math.floor(context.length / 2)] : null);\n                if (context && midline.replace(/^\\s*/, '') === lines[line + 1].replace(/^\\s*/, '')) {\n                    item.context = context;\n                } else {\n                    // if (context) alert(\"Context mismatch. Correct midline:\\n\" + lines[i+1] + \"\\n\\nMidline:\\n\" + midline + \"\\n\\nContext:\\n\" + context.join(\"\\n\") + \"\\n\\nURL:\\n\" + item.url);\n                    item.context = [lines[line + 1]];\n                }\n                stack.push(item);\n            }\n        }\n        if (!stack.length) {\n            return null; // could not parse multiline exception message as Opera stack trace\n        }\n\n        return {\n            'mode': 'multiline',\n            'name': ex.name,\n            'message': lines[0],\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {TraceKit.StackTrace} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = guessFunctionName(initial.url, initial.line);\n            }\n\n            if (!initial.context) {\n                initial.context = gatherContext(initial.url, initial.line);\n            }\n\n            var reference = / '([^']+)' /.exec(message);\n            if (reference) {\n                initial.column = findSourceInLine(reference[1], initial.url, initial.line);\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        stackInfo.stack[0].context = initial.context;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {TraceKit.StackTrace=} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                // console.log('skipping internal function');\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'args': [],\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if ((parts = functionName.exec(curr.toString()))) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n              try {\n                item.func = parts.input.substring(0, parts.input.indexOf('{'));\n              } catch (e) { }\n            }\n\n            if ((source = findSourceByFunctionBody(curr))) {\n                item.url = source.url;\n                item.line = source.line;\n\n                if (item.func === UNKNOWN_FUNCTION) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n\n                var reference = / '([^']+)' /.exec(ex.message || ex.description);\n                if (reference) {\n                    item.column = findSourceInLine(reference[1], source.url, source.line);\n                }\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            }else{\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            // console.log('depth is ' + depth);\n            // console.log('stack is ' + stack.length);\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'mode': 'callers',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = (depth == null ? 0 : +depth);\n\n        try {\n            // This must be tried first because Opera 10 *destroys*\n            // its stacktrace property if you try to access the stack\n            // property first!!\n            stack = computeStackTraceFromStacktraceProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromOperaMultiLineMessage(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        return {\n            'mode': 'failed'\n        };\n    }\n\n    /**\n     * Logs a stacktrace starting from the previous call and working down.\n     * @param {(number|string)=} depth How many frames deep to trace.\n     * @return {TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceOfCaller(depth) {\n        depth = (depth == null ? 0 : +depth) + 1; // \"+ 1\" because \"ofCaller\" should drop one frame\n        try {\n            throw new Error();\n        } catch (ex) {\n            return computeStackTrace(ex, depth + 1);\n        }\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.guessFunctionName = guessFunctionName;\n    computeStackTrace.gatherContext = gatherContext;\n    computeStackTrace.ofCaller = computeStackTraceOfCaller;\n    computeStackTrace.getSource = getSource;\n\n    return computeStackTrace;\n}());\n\n/**\n * Extends support for global error handling for asynchronous browser\n * functions. Adopted from Closure Library's errorhandler.js\n * @memberof TraceKit\n */\nTraceKit.extendToAsynchronousCallbacks = function () {\n    var _helper = function _helper(fnName) {\n        var originalFn = window[fnName];\n        window[fnName] = function traceKitAsyncExtension() {\n            // Make a copy of the arguments\n            var args = _slice.call(arguments);\n            var originalCallback = args[0];\n            if (typeof (originalCallback) === 'function') {\n                args[0] = TraceKit.wrap(originalCallback);\n            }\n            // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n            // also only supports 2 argument and doesn't care what \"this\" is, so we\n            // can just call the original function directly.\n            if (originalFn.apply) {\n                return originalFn.apply(this, args);\n            } else {\n                return originalFn(args[0], args[1]);\n            }\n        };\n    };\n\n    _helper('setTimeout');\n    _helper('setInterval');\n};\n\n//Default options:\nif (!TraceKit.remoteFetching) {\n    TraceKit.remoteFetching = true;\n}\nif (!TraceKit.collectWindowErrors) {\n    TraceKit.collectWindowErrors = true;\n}\nif (!TraceKit.linesOfContext || TraceKit.linesOfContext < 1) {\n    // 5 lines before, the offending line, 5 lines after\n    TraceKit.linesOfContext = 11;\n}\n\n// UMD export\nif (typeof module !== 'undefined' && module.exports && this.module !== module) {\n    module.exports = TraceKit;\n} else if (typeof define === 'function' && define.amd) {\n    define('TraceKit', [], TraceKit);\n} else {\n    window.TraceKit = TraceKit;\n}\n\n}(typeof window !== 'undefined' ? window : global));\n","/**\n * https://github.com/csnover/TraceKit\n * @license MIT\n * @namespace TraceKit\n */\n(function(window, undefined) {\nif (!window) {\n    return;\n}\n\nvar TraceKit = {};\nvar _oldTraceKit = window.TraceKit;\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n/**\n * A better form of hasOwnProperty<br/>\n * Example: `_has(MainHostObject, property) === true/false`\n *\n * @param {Object} object to check property\n * @param {string} key to check\n * @return {Boolean} true if the object has the key and it is not inherited\n */\nfunction _has(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\n\n/**\n * Returns true if the parameter is undefined<br/>\n * Example: `_isUndefined(val) === true/false`\n *\n * @param {*} what Value to check\n * @return {Boolean} true if undefined and false otherwise\n */\nfunction _isUndefined(what) {\n    return typeof what === 'undefined';\n}\n\n/**\n * Export TraceKit out to another variable<br/>\n * Example: `var TK = TraceKit.noConflict()`\n * @return {Object} The TraceKit object\n * @memberof TraceKit\n */\nTraceKit.noConflict = function noConflict() {\n    window.TraceKit = _oldTraceKit;\n    return TraceKit;\n};\n\n/**\n * Wrap any function in a TraceKit reporter<br/>\n * Example: `func = TraceKit.wrap(func);`\n *\n * @param {Function} func Function to be wrapped\n * @return {Function} The wrapped func\n * @memberof TraceKit\n */\nTraceKit.wrap = function traceKitWrapper(func) {\n    function wrapped() {\n        try {\n            return func.apply(this, arguments);\n        } catch (e) {\n            TraceKit.report(e);\n            throw e;\n        }\n    }\n    return wrapped;\n};\n\n/**\n * Cross-browser processing of unhandled exceptions\n *\n * Syntax:\n * ```js\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n * ```\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *     on top frame; column number is not guaranteed\n *   - Opera: full stack trace with line and column numbers\n *   - Chrome: full stack trace with line and column numbers\n *   - Safari: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *   - IE: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a TraceKit.StackTrace object as described in the\n * TraceKit.computeStackTrace docs.\n *\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.report = (function reportModuleWrapper() {\n    var handlers = [],\n        lastArgs = null,\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {TraceKit.StackTrace} stack\n     * @param {boolean} isWindowError Is this a top-level window error?\n     * @memberof TraceKit.report\n     * @throws An exception if an error occurs while calling an handler.\n     */\n    function notifyHandlers(stack, isWindowError) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n          return;\n        }\n        for (var i in handlers) {\n            if (_has(handlers, i)) {\n                try {\n                    handlers[i].apply(null, [stack].concat(_slice.call(arguments, 2)));\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error occurred.\n     * @param {(number|string)=} columnNo The column number at which the error occurred.\n     * @param {Error=} errorObj The actual Error object.\n     * @memberof TraceKit.report\n     */\n    function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {\n        var stack = null;\n\n        if (lastExceptionStack) {\n            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n    \t    processLastException();\n\t    } else if (errorObj) {\n            stack = TraceKit.computeStackTrace(errorObj);\n            notifyHandlers(stack, true);\n        } else {\n            var location = {\n              'url': url,\n              'line': lineNo,\n              'column': columnNo\n            };\n            location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);\n            location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);\n            stack = {\n              'mode': 'onerror',\n              'message': message,\n              'stack': [location]\n            };\n\n            notifyHandlers(stack, true);\n        }\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    /**\n     * Install a global onerror handler\n     * @memberof TraceKit.report\n     */\n    function installGlobalHandler () {\n        if (_onErrorHandlerInstalled === true) {\n            return;\n        }\n        _oldOnerrorHandler = window.onerror;\n        window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    /**\n     * Process the most recent exception\n     * @memberof TraceKit.report\n     */\n    function processLastException() {\n        var _lastExceptionStack = lastExceptionStack,\n            _lastArgs = lastArgs;\n        lastArgs = null;\n        lastExceptionStack = null;\n        lastException = null;\n        notifyHandlers.apply(null, [_lastExceptionStack, false].concat(_lastArgs));\n    }\n\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     * @memberof TraceKit.report\n     * @throws An exception if an incomplete stack trace is detected (old IE browsers).\n     */\n    function report(ex) {\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n              processLastException();\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n        lastArgs = _slice.call(arguments, 1);\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        window.setTimeout(function () {\n            if (lastException === ex) {\n                processLastException();\n            }\n        }, (stack.incomplete ? 2000 : 0));\n\n        throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    return report;\n}());\n\n/**\n * An object representing a single stack frame.\n * @typedef {Object} StackFrame\n * @property {string} url The JavaScript or HTML file URL.\n * @property {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * @property {string[]?} args The arguments passed to the function, if known.\n * @property {number=} line The line number, if known.\n * @property {number=} column The column number, if known.\n * @property {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n * @memberof TraceKit\n */\n\n/**\n * An object representing a JavaScript stack trace.\n * @typedef {Object} StackTrace\n * @property {string} name The name of the thrown exception.\n * @property {string} message The exception error message.\n * @property {TraceKit.StackFrame[]} stack An array of stack frames.\n * @property {string} mode 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace.\n * @memberof TraceKit\n */\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   ```js\n *   s = TraceKit.computeStackTrace.ofCaller([depth])\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n *   ```\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n * Tracing example:\n *  ```js\n *     function trace(message) {\n *         var stackInfo = TraceKit.computeStackTrace.ofCaller();\n *         var data = message + \"\\n\";\n *         for(var i in stackInfo.stack) {\n *             var item = stackInfo.stack[i];\n *             data += (item.func || '[anonymous]') + \"() in \" + item.url + \":\" + (item.line || '0') + \"\\n\";\n *         }\n *         if (window.console)\n *             console.info(data);\n *         else\n *             alert(data);\n *     }\n * ```\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n    var debug = false,\n        sourceCache = {};\n\n    /**\n     * Attempts to retrieve source code via XMLHttpRequest, which is used\n     * to look up anonymous function names.\n     * @param {string} url URL of source code.\n     * @return {string} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function loadSource(url) {\n        if (!TraceKit.remoteFetching) { //Only attempt request if remoteFetching is on.\n            return '';\n        }\n        try {\n            var getXHR = function() {\n                try {\n                    return new window.XMLHttpRequest();\n                } catch (e) {\n                    // explicitly bubble up the exception if not found\n                    return new window.ActiveXObject('Microsoft.XMLHTTP');\n                }\n            };\n\n            var request = getXHR();\n            request.open('GET', url, false);\n            request.send('');\n            return request.responseText;\n        } catch (e) {\n            return '';\n        }\n    }\n\n    /**\n     * Retrieves source code from the source code cache.\n     * @param {string} url URL of source code.\n     * @return {Array.<string>} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function getSource(url) {\n        if (typeof url !== 'string') {\n            return [];\n        }\n\n        if (!_has(sourceCache, url)) {\n            // URL needs to be able to fetched within the acceptable domain.  Otherwise,\n            // cross-domain errors will be triggered.\n            /*\n                Regex matches:\n                0 - Full Url\n                1 - Protocol\n                2 - Domain\n                3 - Port (Useful for internal applications)\n                4 - Path\n            */\n            var source = '';\n            var domain = '';\n            try { domain = window.document.domain; } catch (e) { }\n            var match = /(.*)\\:\\/\\/([^:\\/]+)([:\\d]*)\\/{0,1}([\\s\\S]*)/.exec(url);\n            if (match && match[2] === domain) {\n                source = loadSource(url);\n            }\n            sourceCache[url] = source ? source.split('\\n') : [];\n        }\n\n        return sourceCache[url];\n    }\n\n    /**\n     * Tries to use an externally loaded copy of source code to determine\n     * the name of a function by looking at the name of the variable it was\n     * assigned to, if any.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} lineNo Line number in source code.\n     * @return {string} The function name, if discoverable.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function guessFunctionName(url, lineNo) {\n        var reFunctionArgNames = /function ([^(]*)\\(([^)]*)\\)/,\n            reGuessFunction = /['\"]?([0-9A-Za-z$_]+)['\"]?\\s*[:=]\\s*(function|eval|new Function)/,\n            line = '',\n            maxLines = 10,\n            source = getSource(url),\n            m;\n\n        if (!source.length) {\n            return UNKNOWN_FUNCTION;\n        }\n\n        // Walk backwards from the first line in the function until we find the line which\n        // matches the pattern above, which is the function definition\n        for (var i = 0; i < maxLines; ++i) {\n            line = source[lineNo - i] + line;\n\n            if (!_isUndefined(line)) {\n                if ((m = reGuessFunction.exec(line))) {\n                    return m[1];\n                } else if ((m = reFunctionArgNames.exec(line))) {\n                    return m[1];\n                }\n            }\n        }\n\n        return UNKNOWN_FUNCTION;\n    }\n\n    /**\n     * Retrieves the surrounding lines from where an exception occurred.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} line Line number in source code to centre\n     * around for context.\n     * @return {?Array.<string>} Lines of source code.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function gatherContext(url, line) {\n        var source = getSource(url);\n\n        if (!source.length) {\n            return null;\n        }\n\n        var context = [],\n            // linesBefore & linesAfter are inclusive with the offending line.\n            // if linesOfContext is even, there will be one extra line\n            //   *before* the offending line.\n            linesBefore = Math.floor(TraceKit.linesOfContext / 2),\n            // Add one extra line if linesOfContext is odd\n            linesAfter = linesBefore + (TraceKit.linesOfContext % 2),\n            start = Math.max(0, line - linesBefore - 1),\n            end = Math.min(source.length, line + linesAfter - 1);\n\n        line -= 1; // convert to 0-based index\n\n        for (var i = start; i < end; ++i) {\n            if (!_isUndefined(source[i])) {\n                context.push(source[i]);\n            }\n        }\n\n        return context.length > 0 ? context : null;\n    }\n\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    /**\n     * Determines where a code fragment occurs in the source code.\n     * @param {RegExp} re The function definition.\n     * @param {Array.<string>} urls A list of URLs to search.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInUrls(re, urls) {\n        var source, m;\n        for (var i = 0, j = urls.length; i < j; ++i) {\n            // console.log('searching', urls[i]);\n            if ((source = getSource(urls[i])).length) {\n                source = source.join('\\n');\n                if ((m = re.exec(source))) {\n                    // console.log('Found function in ' + urls[i]);\n\n                    return {\n                        'url': urls[i],\n                        'line': source.substring(0, m.index).split('\\n').length,\n                        'column': m.index - source.lastIndexOf('\\n', m.index) - 1\n                    };\n                }\n            }\n        }\n\n        // console.log('no match');\n\n        return null;\n    }\n\n    /**\n     * Determines at which column a code fragment occurs on a line of the\n     * source code.\n     * @param {string} fragment The code fragment.\n     * @param {string} url The URL to search.\n     * @param {(string|number)} line The line number to examine.\n     * @return {?number} The column number.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInLine(fragment, url, line) {\n        var source = getSource(url),\n            re = new RegExp('\\\\b' + escapeRegExp(fragment) + '\\\\b'),\n            m;\n\n        line -= 1;\n\n        if (source && source.length > line && (m = re.exec(source[line]))) {\n            return m.index;\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines where a function was defined within the source code.\n     * @param {(Function|string)} func A function reference or serialized\n     * function definition.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceByFunctionBody(func) {\n        if (_isUndefined(window && window.document)) {\n            return;\n        }\n\n        var urls = [window.location.href],\n            scripts = window.document.getElementsByTagName('script'),\n            body,\n            code = '' + func,\n            codeRE = /^function(?:\\s+([\\w$]+))?\\s*\\(([\\w\\s,]*)\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            eventRE = /^function on([\\w$]+)\\s*\\(event\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            re,\n            parts,\n            result;\n\n        for (var i = 0; i < scripts.length; ++i) {\n            var script = scripts[i];\n            if (script.src) {\n                urls.push(script.src);\n            }\n        }\n\n        if (!(parts = codeRE.exec(code))) {\n            re = new RegExp(escapeRegExp(code).replace(/\\s+/g, '\\\\s+'));\n        }\n\n        // not sure if this is really necessary, but I don’t have a test\n        // corpus large enough to confirm that and it was in the original.\n        else {\n            var name = parts[1] ? '\\\\s+' + parts[1] : '',\n                args = parts[2].split(',').join('\\\\s*,\\\\s*');\n\n            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\\s+/g, '\\\\s+');\n            re = new RegExp('function' + name + '\\\\s*\\\\(\\\\s*' + args + '\\\\s*\\\\)\\\\s*{\\\\s*' + body + '\\\\s*}');\n        }\n\n        // look for a normal function definition\n        if ((result = findSourceInUrls(re, urls))) {\n            return result;\n        }\n\n        // look for an old-school event handler function\n        if ((parts = eventRE.exec(code))) {\n            var event = parts[1];\n            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);\n\n            // look for a function defined in HTML as an onXXX handler\n            re = new RegExp('on' + event + '=[\\\\\\'\"]\\\\s*' + body + '\\\\s*[\\\\\\'\"]', 'i');\n\n            if ((result = findSourceInUrls(re, urls[0]))) {\n                return result;\n            }\n\n            // look for ???\n            re = new RegExp(body);\n\n            if ((result = findSourceInUrls(re, urls))) {\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (!ex.stack) {\n            return null;\n        }\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|\\[native).*?)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:ms-appx|https?|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if ((parts = chrome.exec(lines[i]))) {\n                var isNative = parts[2] && parts[2].indexOf('native') !== -1;\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ( parts = winjs.exec(lines[i]) ) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = gecko.exec(lines[i]))) {\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = guessFunctionName(element.url, element.line);\n            }\n\n            if (element.line) {\n                element.context = gatherContext(element.url, element.line);\n            }\n\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        if (stack[0] && stack[0].line && !stack[0].column && reference) {\n            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);\n        } else if (!stack[0].column && !_isUndefined(ex.columnNumber)) {\n            // FireFox uses this awesome columnNumber property for its top frame\n            // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n            // so adding 1\n            stack[0].column = ex.columnNumber + 1;\n        }\n\n        return {\n            'mode': 'stack',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * Computes stack trace information from the stacktrace property.\n     * Opera 10+ uses this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStacktraceProp(ex) {\n        // Access and store the stacktrace property before doing ANYTHING\n        // else to it because Opera is not very good at providing it\n        // reliably in other circumstances.\n        var stacktrace = ex.stacktrace;\n        if (!stacktrace) {\n            return;\n        }\n\n        var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i,\n            opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i,\n            lines = stacktrace.split('\\n'),\n            stack = [],\n            parts;\n\n        for (var line = 0; line < lines.length; line += 2) {\n            var element = null;\n            if ((parts = opera10Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[2],\n                    'line': +parts[1],\n                    'column': null,\n                    'func': parts[3],\n                    'args':[]\n                };\n            } else if ((parts = opera11Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[6],\n                    'line': +parts[1],\n                    'column': +parts[2],\n                    'func': parts[3] || parts[4],\n                    'args': parts[5] ? parts[5].split(',') : []\n                };\n            }\n\n            if (element) {\n                if (!element.func && element.line) {\n                    element.func = guessFunctionName(element.url, element.line);\n                }\n                if (element.line) {\n                    try {\n                        element.context = gatherContext(element.url, element.line);\n                    } catch (exc) {}\n                }\n\n                if (!element.context) {\n                    element.context = [lines[line + 1]];\n                }\n\n                stack.push(element);\n            }\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        return {\n            'mode': 'stacktrace',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * NOT TESTED.\n     * Computes stack trace information from an error message that includes\n     * the stack trace.\n     * Opera 9 and earlier use this method if the option to show stack\n     * traces is turned on in opera:config.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromOperaMultiLineMessage(ex) {\n        // TODO: Clean this function up\n        // Opera includes a stack trace into the exception message. An example is:\n        //\n        // Statement on line 3: Undefined variable: undefinedFunc\n        // Backtrace:\n        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz\n        //         undefinedFunc(a);\n        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy\n        //           zzz(x, y, z);\n        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx\n        //           yyy(a, a, a);\n        //   Line 1 of function script\n        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }\n        //   ...\n\n        var lines = ex.message.split('\\n');\n        if (lines.length < 4) {\n            return null;\n        }\n\n        var lineRE1 = /^\\s*Line (\\d+) of linked script ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE2 = /^\\s*Line (\\d+) of inline#(\\d+) script in ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE3 = /^\\s*Line (\\d+) of function script\\s*$/i,\n            stack = [],\n            scripts = (window && window.document && window.document.getElementsByTagName('script')),\n            inlineScriptBlocks = [],\n            parts;\n\n        for (var s in scripts) {\n            if (_has(scripts, s) && !scripts[s].src) {\n                inlineScriptBlocks.push(scripts[s]);\n            }\n        }\n\n        for (var line = 2; line < lines.length; line += 2) {\n            var item = null;\n            if ((parts = lineRE1.exec(lines[line]))) {\n                item = {\n                    'url': parts[2],\n                    'func': parts[3],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null\n                };\n            } else if ((parts = lineRE2.exec(lines[line]))) {\n                item = {\n                    'url': parts[3],\n                    'func': parts[4],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.\n                };\n                var relativeLine = (+parts[1]); // relative to the start of the <SCRIPT> block\n                var script = inlineScriptBlocks[parts[2] - 1];\n                if (script) {\n                    var source = getSource(item.url);\n                    if (source) {\n                        source = source.join('\\n');\n                        var pos = source.indexOf(script.innerText);\n                        if (pos >= 0) {\n                            item.line = relativeLine + source.substring(0, pos).split('\\n').length;\n                        }\n                    }\n                }\n            } else if ((parts = lineRE3.exec(lines[line]))) {\n                var url = window.location.href.replace(/#.*$/, '');\n                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));\n                var src = findSourceInUrls(re, [url]);\n                item = {\n                    'url': url,\n                    'func': '',\n                    'args': [],\n                    'line': src ? src.line : parts[1],\n                    'column': null\n                };\n            }\n\n            if (item) {\n                if (!item.func) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n                var context = gatherContext(item.url, item.line);\n                var midline = (context ? context[Math.floor(context.length / 2)] : null);\n                if (context && midline.replace(/^\\s*/, '') === lines[line + 1].replace(/^\\s*/, '')) {\n                    item.context = context;\n                } else {\n                    // if (context) alert(\"Context mismatch. Correct midline:\\n\" + lines[i+1] + \"\\n\\nMidline:\\n\" + midline + \"\\n\\nContext:\\n\" + context.join(\"\\n\") + \"\\n\\nURL:\\n\" + item.url);\n                    item.context = [lines[line + 1]];\n                }\n                stack.push(item);\n            }\n        }\n        if (!stack.length) {\n            return null; // could not parse multiline exception message as Opera stack trace\n        }\n\n        return {\n            'mode': 'multiline',\n            'name': ex.name,\n            'message': lines[0],\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {TraceKit.StackTrace} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = guessFunctionName(initial.url, initial.line);\n            }\n\n            if (!initial.context) {\n                initial.context = gatherContext(initial.url, initial.line);\n            }\n\n            var reference = / '([^']+)' /.exec(message);\n            if (reference) {\n                initial.column = findSourceInLine(reference[1], initial.url, initial.line);\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        stackInfo.stack[0].context = initial.context;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {TraceKit.StackTrace=} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                // console.log('skipping internal function');\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'args': [],\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if ((parts = functionName.exec(curr.toString()))) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n              try {\n                item.func = parts.input.substring(0, parts.input.indexOf('{'));\n              } catch (e) { }\n            }\n\n            if ((source = findSourceByFunctionBody(curr))) {\n                item.url = source.url;\n                item.line = source.line;\n\n                if (item.func === UNKNOWN_FUNCTION) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n\n                var reference = / '([^']+)' /.exec(ex.message || ex.description);\n                if (reference) {\n                    item.column = findSourceInLine(reference[1], source.url, source.line);\n                }\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            }else{\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            // console.log('depth is ' + depth);\n            // console.log('stack is ' + stack.length);\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'mode': 'callers',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = (depth == null ? 0 : +depth);\n\n        try {\n            // This must be tried first because Opera 10 *destroys*\n            // its stacktrace property if you try to access the stack\n            // property first!!\n            stack = computeStackTraceFromStacktraceProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromOperaMultiLineMessage(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        return {\n            'mode': 'failed'\n        };\n    }\n\n    /**\n     * Logs a stacktrace starting from the previous call and working down.\n     * @param {(number|string)=} depth How many frames deep to trace.\n     * @return {TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceOfCaller(depth) {\n        depth = (depth == null ? 0 : +depth) + 1; // \"+ 1\" because \"ofCaller\" should drop one frame\n        try {\n            throw new Error();\n        } catch (ex) {\n            return computeStackTrace(ex, depth + 1);\n        }\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.guessFunctionName = guessFunctionName;\n    computeStackTrace.gatherContext = gatherContext;\n    computeStackTrace.ofCaller = computeStackTraceOfCaller;\n    computeStackTrace.getSource = getSource;\n\n    return computeStackTrace;\n}());\n\n/**\n * Extends support for global error handling for asynchronous browser\n * functions. Adopted from Closure Library's errorhandler.js\n * @memberof TraceKit\n */\nTraceKit.extendToAsynchronousCallbacks = function () {\n    var _helper = function _helper(fnName) {\n        var originalFn = window[fnName];\n        window[fnName] = function traceKitAsyncExtension() {\n            // Make a copy of the arguments\n            var args = _slice.call(arguments);\n            var originalCallback = args[0];\n            if (typeof (originalCallback) === 'function') {\n                args[0] = TraceKit.wrap(originalCallback);\n            }\n            // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n            // also only supports 2 argument and doesn't care what \"this\" is, so we\n            // can just call the original function directly.\n            if (originalFn.apply) {\n                return originalFn.apply(this, args);\n            } else {\n                return originalFn(args[0], args[1]);\n            }\n        };\n    };\n\n    _helper('setTimeout');\n    _helper('setInterval');\n};\n\n//Default options:\nif (!TraceKit.remoteFetching) {\n    TraceKit.remoteFetching = true;\n}\nif (!TraceKit.collectWindowErrors) {\n    TraceKit.collectWindowErrors = true;\n}\nif (!TraceKit.linesOfContext || TraceKit.linesOfContext < 1) {\n    // 5 lines before, the offending line, 5 lines after\n    TraceKit.linesOfContext = 11;\n}\n\n// UMD export\nif (typeof module !== 'undefined' && module.exports && this.module !== module) {\n    module.exports = TraceKit;\n} else if (typeof define === 'function' && define.amd) {\n    define('TraceKit', [], TraceKit);\n} else {\n    window.TraceKit = TraceKit;\n}\n\n}(typeof window !== 'undefined' ? window : global));\n\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define('exceptionless', factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory(require, exports, module);\n  } else {\n    root.exceptionless = factory();\n  }\n}(this, function(require, exports, module) {\nif (!require) {\n\trequire = function(name) {\n\t\treturn (typeof window !== \"undefined\" ? window : global)[name];\n\t}\n}\nif (!exports) {\n\tvar exports = {};\n}\n\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar TraceKit = require('TraceKit');\nvar SettingsManager = (function () {\n    function SettingsManager() {\n    }\n    SettingsManager.onChanged = function (handler) {\n        !!handler && this._handlers.push(handler);\n    };\n    SettingsManager.applySavedServerSettings = function (config) {\n        var savedSettings = this.getSavedServerSettings(config);\n        config.log.info('Applying saved settings.');\n        config.settings = Utils.merge(config.settings, savedSettings.settings);\n        this.changed(config);\n    };\n    SettingsManager.checkVersion = function (version, config) {\n        if (version) {\n            var savedSettings = this.getSavedServerSettings(config);\n            var savedVersion = savedSettings.version;\n            if (version > savedVersion) {\n                config.log.info(\"Updating settings from v\" + savedVersion + \" to v\" + version);\n                this.updateSettings(config);\n            }\n        }\n    };\n    SettingsManager.updateSettings = function (config) {\n        var _this = this;\n        if (!config.isValid) {\n            config.log.error('Unable to update settings: ApiKey is not set.');\n            return;\n        }\n        config.submissionClient.getSettings(config, function (response) {\n            if (!response || !response.success || !response.settings) {\n                return;\n            }\n            config.settings = Utils.merge(config.settings, response.settings);\n            var savedServerSettings = SettingsManager.getSavedServerSettings(config);\n            for (var key in savedServerSettings) {\n                if (response.settings[key]) {\n                    continue;\n                }\n                delete config.settings[key];\n            }\n            var newSettings = {\n                version: response.settingsVersion,\n                settings: response.settings\n            };\n            config.storage.settings.save(newSettings);\n            config.log.info('Updated settings');\n            _this.changed(config);\n        });\n    };\n    SettingsManager.changed = function (config) {\n        var handlers = this._handlers;\n        for (var index = 0; index < handlers.length; index++) {\n            handlers[index](config);\n        }\n    };\n    SettingsManager.getSavedServerSettings = function (config) {\n        var item = config.storage.settings.get()[0];\n        if (item && item.value && item.value.version && item.value.settings) {\n            return item.value;\n        }\n        return { version: 0, settings: {} };\n    };\n    SettingsManager._handlers = [];\n    return SettingsManager;\n}());\nexports.SettingsManager = SettingsManager;\nvar DefaultLastReferenceIdManager = (function () {\n    function DefaultLastReferenceIdManager() {\n        this._lastReferenceId = null;\n    }\n    DefaultLastReferenceIdManager.prototype.getLast = function () {\n        return this._lastReferenceId;\n    };\n    DefaultLastReferenceIdManager.prototype.clearLast = function () {\n        this._lastReferenceId = null;\n    };\n    DefaultLastReferenceIdManager.prototype.setLast = function (eventId) {\n        this._lastReferenceId = eventId;\n    };\n    return DefaultLastReferenceIdManager;\n}());\nexports.DefaultLastReferenceIdManager = DefaultLastReferenceIdManager;\nvar ConsoleLog = (function () {\n    function ConsoleLog() {\n    }\n    ConsoleLog.prototype.info = function (message) {\n        this.log('info', message);\n    };\n    ConsoleLog.prototype.warn = function (message) {\n        this.log('warn', message);\n    };\n    ConsoleLog.prototype.error = function (message) {\n        this.log('error', message);\n    };\n    ConsoleLog.prototype.log = function (level, message) {\n        if (console && console[level]) {\n            console[level](\"[\" + level + \"] Exceptionless: \" + message);\n        }\n    };\n    return ConsoleLog;\n}());\nexports.ConsoleLog = ConsoleLog;\nvar NullLog = (function () {\n    function NullLog() {\n    }\n    NullLog.prototype.info = function (message) { };\n    NullLog.prototype.warn = function (message) { };\n    NullLog.prototype.error = function (message) { };\n    return NullLog;\n}());\nexports.NullLog = NullLog;\nvar EventPluginContext = (function () {\n    function EventPluginContext(client, event, contextData) {\n        this.client = client;\n        this.event = event;\n        this.contextData = contextData ? contextData : new ContextData();\n    }\n    Object.defineProperty(EventPluginContext.prototype, \"log\", {\n        get: function () {\n            return this.client.config.log;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return EventPluginContext;\n}());\nexports.EventPluginContext = EventPluginContext;\nvar EventPluginManager = (function () {\n    function EventPluginManager() {\n    }\n    EventPluginManager.run = function (context, callback) {\n        var wrap = function (plugin, next) {\n            return function () {\n                try {\n                    if (!context.cancelled) {\n                        plugin.run(context, next);\n                    }\n                }\n                catch (ex) {\n                    context.cancelled = true;\n                    context.log.error(\"Error running plugin '\" + plugin.name + \"': \" + ex.message + \". Discarding Event.\");\n                }\n                if (context.cancelled && !!callback) {\n                    callback(context);\n                }\n            };\n        };\n        var plugins = context.client.config.plugins;\n        var wrappedPlugins = [];\n        if (!!callback) {\n            wrappedPlugins[plugins.length] = wrap({ name: 'cb', priority: 9007199254740992, run: callback }, null);\n        }\n        for (var index = plugins.length - 1; index > -1; index--) {\n            wrappedPlugins[index] = wrap(plugins[index], !!callback || (index < plugins.length - 1) ? wrappedPlugins[index + 1] : null);\n        }\n        wrappedPlugins[0]();\n    };\n    EventPluginManager.addDefaultPlugins = function (config) {\n        config.addPlugin(new ConfigurationDefaultsPlugin());\n        config.addPlugin(new ErrorPlugin());\n        config.addPlugin(new DuplicateCheckerPlugin());\n        config.addPlugin(new EventExclusionPlugin());\n        config.addPlugin(new ModuleInfoPlugin());\n        config.addPlugin(new RequestInfoPlugin());\n        config.addPlugin(new EnvironmentInfoPlugin());\n        config.addPlugin(new SubmissionMethodPlugin());\n    };\n    return EventPluginManager;\n}());\nexports.EventPluginManager = EventPluginManager;\nvar HeartbeatPlugin = (function () {\n    function HeartbeatPlugin(heartbeatInterval) {\n        if (heartbeatInterval === void 0) { heartbeatInterval = 30000; }\n        this.priority = 100;\n        this.name = 'HeartbeatPlugin';\n        this._heartbeatInterval = heartbeatInterval;\n    }\n    HeartbeatPlugin.prototype.run = function (context, next) {\n        var _this = this;\n        var clearHeartbeatInterval = function () {\n            if (_this._heartbeatIntervalId) {\n                clearInterval(_this._heartbeatIntervalId);\n                _this._heartbeatIntervalId = 0;\n            }\n        };\n        if (this._heartbeatIntervalId) {\n            clearHeartbeatInterval();\n        }\n        var user = context.event.data['@user'];\n        if (user && user.identity) {\n            this._heartbeatIntervalId = setInterval(function () { return context.client.submitSessionHeartbeat(user.identity); }, this._heartbeatInterval);\n        }\n        next && next();\n    };\n    return HeartbeatPlugin;\n}());\nexports.HeartbeatPlugin = HeartbeatPlugin;\nvar ReferenceIdPlugin = (function () {\n    function ReferenceIdPlugin() {\n        this.priority = 20;\n        this.name = 'ReferenceIdPlugin';\n    }\n    ReferenceIdPlugin.prototype.run = function (context, next) {\n        if ((!context.event.reference_id || context.event.reference_id.length === 0) && context.event.type === 'error') {\n            context.event.reference_id = Utils.guid().replace('-', '').substring(0, 10);\n        }\n        next && next();\n    };\n    return ReferenceIdPlugin;\n}());\nexports.ReferenceIdPlugin = ReferenceIdPlugin;\nvar DefaultEventQueue = (function () {\n    function DefaultEventQueue(config) {\n        this._processingQueue = false;\n        this._config = config;\n    }\n    DefaultEventQueue.prototype.enqueue = function (event) {\n        var config = this._config;\n        this.ensureQueueTimer();\n        if (this.areQueuedItemsDiscarded()) {\n            config.log.info('Queue items are currently being discarded. The event will not be queued.');\n            return;\n        }\n        var timestamp = config.storage.queue.save(event);\n        var logText = \"type=\" + event.type + \" \" + (!!event.reference_id ? 'refid=' + event.reference_id : '');\n        if (timestamp) {\n            config.log.info(\"Enqueuing event: \" + timestamp + \" \" + logText);\n        }\n        else {\n            config.log.error(\"Could not enqueue event \" + logText);\n        }\n    };\n    DefaultEventQueue.prototype.process = function (isAppExiting) {\n        var _this = this;\n        var queueNotProcessed = 'The queue will not be processed.';\n        var config = this._config;\n        var log = config.log;\n        this.ensureQueueTimer();\n        if (this._processingQueue) {\n            return;\n        }\n        log.info('Processing queue...');\n        if (!config.enabled) {\n            log.info(\"Configuration is disabled. \" + queueNotProcessed);\n            return;\n        }\n        if (!config.isValid) {\n            log.info(\"Invalid Api Key. \" + queueNotProcessed);\n            return;\n        }\n        this._processingQueue = true;\n        try {\n            var events_1 = config.storage.queue.get(config.submissionBatchSize);\n            if (!events_1 || events_1.length === 0) {\n                this._processingQueue = false;\n                return;\n            }\n            log.info(\"Sending \" + events_1.length + \" events to \" + config.serverUrl + \".\");\n            config.submissionClient.postEvents(events_1.map(function (e) { return e.value; }), config, function (response) {\n                _this.processSubmissionResponse(response, events_1);\n                log.info('Finished processing queue.');\n                _this._processingQueue = false;\n            }, isAppExiting);\n        }\n        catch (ex) {\n            log.error(\"Error processing queue: \" + ex);\n            this.suspendProcessing();\n            this._processingQueue = false;\n        }\n    };\n    DefaultEventQueue.prototype.suspendProcessing = function (durationInMinutes, discardFutureQueuedItems, clearQueue) {\n        var config = this._config;\n        if (!durationInMinutes || durationInMinutes <= 0) {\n            durationInMinutes = 5;\n        }\n        config.log.info(\"Suspending processing for \" + durationInMinutes + \" minutes.\");\n        this._suspendProcessingUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\n        if (discardFutureQueuedItems) {\n            this._discardQueuedItemsUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\n        }\n        if (clearQueue) {\n            config.storage.queue.clear();\n        }\n    };\n    DefaultEventQueue.prototype.areQueuedItemsDiscarded = function () {\n        return this._discardQueuedItemsUntil && this._discardQueuedItemsUntil > new Date();\n    };\n    DefaultEventQueue.prototype.ensureQueueTimer = function () {\n        var _this = this;\n        if (!this._queueTimer) {\n            this._queueTimer = setInterval(function () { return _this.onProcessQueue(); }, 10000);\n        }\n    };\n    DefaultEventQueue.prototype.isQueueProcessingSuspended = function () {\n        return this._suspendProcessingUntil && this._suspendProcessingUntil > new Date();\n    };\n    DefaultEventQueue.prototype.onProcessQueue = function () {\n        if (!this.isQueueProcessingSuspended() && !this._processingQueue) {\n            this.process();\n        }\n    };\n    DefaultEventQueue.prototype.processSubmissionResponse = function (response, events) {\n        var noSubmission = 'The event will not be submitted.';\n        var config = this._config;\n        var log = config.log;\n        if (response.success) {\n            log.info(\"Sent \" + events.length + \" events.\");\n            this.removeEvents(events);\n            return;\n        }\n        if (response.serviceUnavailable) {\n            log.error('Server returned service unavailable.');\n            this.suspendProcessing();\n            return;\n        }\n        if (response.paymentRequired) {\n            log.info('Too many events have been submitted, please upgrade your plan.');\n            this.suspendProcessing(null, true, true);\n            return;\n        }\n        if (response.unableToAuthenticate) {\n            log.info(\"Unable to authenticate, please check your configuration. \" + noSubmission);\n            this.suspendProcessing(15);\n            this.removeEvents(events);\n            return;\n        }\n        if (response.notFound || response.badRequest) {\n            log.error(\"Error while trying to submit data: \" + response.message);\n            this.suspendProcessing(60 * 4);\n            this.removeEvents(events);\n            return;\n        }\n        if (response.requestEntityTooLarge) {\n            var message = 'Event submission discarded for being too large.';\n            if (config.submissionBatchSize > 1) {\n                log.error(message + \" Retrying with smaller batch size.\");\n                config.submissionBatchSize = Math.max(1, Math.round(config.submissionBatchSize / 1.5));\n            }\n            else {\n                log.error(message + \" \" + noSubmission);\n                this.removeEvents(events);\n            }\n            return;\n        }\n        if (!response.success) {\n            log.error(\"Error submitting events: \" + (response.message || 'Please check the network tab for more info.'));\n            this.suspendProcessing();\n        }\n    };\n    DefaultEventQueue.prototype.removeEvents = function (events) {\n        for (var index = 0; index < (events || []).length; index++) {\n            this._config.storage.queue.remove(events[index].timestamp);\n        }\n    };\n    return DefaultEventQueue;\n}());\nexports.DefaultEventQueue = DefaultEventQueue;\nvar InMemoryStorageProvider = (function () {\n    function InMemoryStorageProvider(maxQueueItems) {\n        if (maxQueueItems === void 0) { maxQueueItems = 250; }\n        this.queue = new InMemoryStorage(maxQueueItems);\n        this.settings = new InMemoryStorage(1);\n    }\n    return InMemoryStorageProvider;\n}());\nexports.InMemoryStorageProvider = InMemoryStorageProvider;\nvar DefaultSubmissionClient = (function () {\n    function DefaultSubmissionClient() {\n        this.configurationVersionHeader = 'x-exceptionless-configversion';\n    }\n    DefaultSubmissionClient.prototype.postEvents = function (events, config, callback, isAppExiting) {\n        var data = JSON.stringify(events);\n        var request = this.createRequest(config, 'POST', config.serverUrl + \"/api/v2/events\", data);\n        var cb = this.createSubmissionCallback(config, callback);\n        return config.submissionAdapter.sendRequest(request, cb, isAppExiting);\n    };\n    DefaultSubmissionClient.prototype.postUserDescription = function (referenceId, description, config, callback) {\n        var path = config.serverUrl + \"/api/v2/events/by-ref/\" + encodeURIComponent(referenceId) + \"/user-description\";\n        var data = JSON.stringify(description);\n        var request = this.createRequest(config, 'POST', path, data);\n        var cb = this.createSubmissionCallback(config, callback);\n        return config.submissionAdapter.sendRequest(request, cb);\n    };\n    DefaultSubmissionClient.prototype.getSettings = function (config, callback) {\n        var request = this.createRequest(config, 'GET', config.serverUrl + \"/api/v2/projects/config\");\n        var cb = function (status, message, data, headers) {\n            if (status !== 200) {\n                return callback(new SettingsResponse(false, null, -1, null, message));\n            }\n            var settings;\n            try {\n                settings = JSON.parse(data);\n            }\n            catch (e) {\n                config.log.error(\"Unable to parse settings: '\" + data + \"'\");\n            }\n            if (!settings || isNaN(settings.version)) {\n                return callback(new SettingsResponse(false, null, -1, null, 'Invalid configuration settings.'));\n            }\n            callback(new SettingsResponse(true, settings.settings || {}, settings.version));\n        };\n        return config.submissionAdapter.sendRequest(request, cb);\n    };\n    DefaultSubmissionClient.prototype.sendHeartbeat = function (sessionIdOrUserId, closeSession, config) {\n        var request = this.createRequest(config, 'GET', config.heartbeatServerUrl + \"/api/v2/events/session/heartbeat?id=\" + sessionIdOrUserId + \"&close=\" + closeSession);\n        config.submissionAdapter.sendRequest(request);\n    };\n    DefaultSubmissionClient.prototype.createRequest = function (config, method, url, data) {\n        if (data === void 0) { data = null; }\n        return {\n            method: method,\n            url: url,\n            data: data,\n            apiKey: config.apiKey,\n            userAgent: config.userAgent\n        };\n    };\n    DefaultSubmissionClient.prototype.createSubmissionCallback = function (config, callback) {\n        var _this = this;\n        return function (status, message, data, headers) {\n            var settingsVersion = headers && parseInt(headers[_this.configurationVersionHeader], 10);\n            SettingsManager.checkVersion(settingsVersion, config);\n            callback(new SubmissionResponse(status, message));\n        };\n    };\n    return DefaultSubmissionClient;\n}());\nexports.DefaultSubmissionClient = DefaultSubmissionClient;\nvar Utils = (function () {\n    function Utils() {\n    }\n    Utils.addRange = function (target) {\n        var values = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n        }\n        if (!target) {\n            target = [];\n        }\n        if (!values || values.length === 0) {\n            return target;\n        }\n        for (var index = 0; index < values.length; index++) {\n            if (values[index] && target.indexOf(values[index]) < 0) {\n                target.push(values[index]);\n            }\n        }\n        return target;\n    };\n    Utils.getHashCode = function (source) {\n        if (!source || source.length === 0) {\n            return 0;\n        }\n        var hash = 0;\n        for (var index = 0; index < source.length; index++) {\n            var character = source.charCodeAt(index);\n            hash = ((hash << 5) - hash) + character;\n            hash |= 0;\n        }\n        return hash;\n    };\n    Utils.getCookies = function (cookies, exclusions) {\n        var result = {};\n        var parts = (cookies || '').split('; ');\n        for (var index = 0; index < parts.length; index++) {\n            var cookie = parts[index].split('=');\n            if (!Utils.isMatch(cookie[0], exclusions)) {\n                result[cookie[0]] = cookie[1];\n            }\n        }\n        return !Utils.isEmpty(result) ? result : null;\n    };\n    Utils.guid = function () {\n        function s4() {\n            return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n        }\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n    };\n    Utils.merge = function (defaultValues, values) {\n        var result = {};\n        for (var key in defaultValues || {}) {\n            if (!!defaultValues[key]) {\n                result[key] = defaultValues[key];\n            }\n        }\n        for (var key in values || {}) {\n            if (!!values[key]) {\n                result[key] = values[key];\n            }\n        }\n        return result;\n    };\n    Utils.parseVersion = function (source) {\n        if (!source) {\n            return null;\n        }\n        var versionRegex = /(v?((\\d+)\\.(\\d+)(\\.(\\d+))?)(?:-([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?(?:\\+([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?)/;\n        var matches = versionRegex.exec(source);\n        if (matches && matches.length > 0) {\n            return matches[0];\n        }\n        return null;\n    };\n    Utils.parseQueryString = function (query, exclusions) {\n        if (!query || query.length === 0) {\n            return null;\n        }\n        var pairs = query.split('&');\n        if (pairs.length === 0) {\n            return null;\n        }\n        var result = {};\n        for (var index = 0; index < pairs.length; index++) {\n            var pair = pairs[index].split('=');\n            if (!Utils.isMatch(pair[0], exclusions)) {\n                result[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n            }\n        }\n        return !Utils.isEmpty(result) ? result : null;\n    };\n    Utils.randomNumber = function () {\n        return Math.floor(Math.random() * 9007199254740992);\n    };\n    Utils.isMatch = function (input, patterns, ignoreCase) {\n        if (ignoreCase === void 0) { ignoreCase = true; }\n        if (!input || typeof input !== 'string') {\n            return false;\n        }\n        var trim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n        input = (ignoreCase ? input.toLowerCase() : input).replace(trim, '');\n        return (patterns || []).some(function (pattern) {\n            if (typeof pattern !== 'string') {\n                return false;\n            }\n            pattern = (ignoreCase ? pattern.toLowerCase() : pattern).replace(trim, '');\n            if (pattern.length <= 0) {\n                return false;\n            }\n            var startsWithWildcard = pattern[0] === '*';\n            if (startsWithWildcard) {\n                pattern = pattern.slice(1);\n            }\n            var endsWithWildcard = pattern[pattern.length - 1] === '*';\n            if (endsWithWildcard) {\n                pattern = pattern.substring(0, pattern.length - 1);\n            }\n            if (startsWithWildcard && endsWithWildcard) {\n                return pattern.length <= input.length && input.indexOf(pattern, 0) !== -1;\n            }\n            if (startsWithWildcard) {\n                return Utils.endsWith(input, pattern);\n            }\n            if (endsWithWildcard) {\n                return Utils.startsWith(input, pattern);\n            }\n            return input === pattern;\n        });\n    };\n    Utils.isEmpty = function (input) {\n        return input === null || (typeof (input) === 'object' && Object.keys(input).length === 0);\n    };\n    Utils.startsWith = function (input, prefix) {\n        return input.substring(0, prefix.length) === prefix;\n    };\n    Utils.endsWith = function (input, suffix) {\n        return input.indexOf(suffix, input.length - suffix.length) !== -1;\n    };\n    Utils.stringify = function (data, exclusions, maxDepth) {\n        function stringifyImpl(obj, excludedKeys) {\n            var cache = [];\n            return JSON.stringify(obj, function (key, value) {\n                if (Utils.isMatch(key, excludedKeys)) {\n                    return;\n                }\n                if (typeof value === 'object' && !!value) {\n                    if (cache.indexOf(value) !== -1) {\n                        return;\n                    }\n                    cache.push(value);\n                }\n                return value;\n            });\n        }\n        if (({}).toString.call(data) === '[object Object]') {\n            var flattened = {};\n            for (var prop in data) {\n                var value = data[prop];\n                if (value === data) {\n                    continue;\n                }\n                flattened[prop] = data[prop];\n            }\n            return stringifyImpl(flattened, exclusions);\n        }\n        if (({}).toString.call(data) === '[object Array]') {\n            var result = [];\n            for (var index = 0; index < data.length; index++) {\n                result[index] = JSON.parse(stringifyImpl(data[index], exclusions));\n            }\n            return JSON.stringify(result);\n        }\n        return stringifyImpl(data, exclusions);\n    };\n    return Utils;\n}());\nexports.Utils = Utils;\nvar Configuration = (function () {\n    function Configuration(configSettings) {\n        this.defaultTags = [];\n        this.defaultData = {};\n        this.enabled = true;\n        this.lastReferenceIdManager = new DefaultLastReferenceIdManager();\n        this.settings = {};\n        this._plugins = [];\n        this._serverUrl = 'https://collector.exceptionless.io';\n        this._heartbeatServerUrl = 'https://heartbeat.exceptionless.io';\n        this._dataExclusions = [];\n        this._userAgentBotPatterns = [];\n        function inject(fn) {\n            return typeof fn === 'function' ? fn(this) : fn;\n        }\n        configSettings = Utils.merge(Configuration.defaults, configSettings);\n        this.log = inject(configSettings.log) || new NullLog();\n        this.apiKey = configSettings.apiKey;\n        this.serverUrl = configSettings.serverUrl;\n        this.heartbeatServerUrl = configSettings.heartbeatServerUrl;\n        this.environmentInfoCollector = inject(configSettings.environmentInfoCollector);\n        this.errorParser = inject(configSettings.errorParser);\n        this.lastReferenceIdManager = inject(configSettings.lastReferenceIdManager) || new DefaultLastReferenceIdManager();\n        this.moduleCollector = inject(configSettings.moduleCollector);\n        this.requestInfoCollector = inject(configSettings.requestInfoCollector);\n        this.submissionBatchSize = inject(configSettings.submissionBatchSize) || 50;\n        this.submissionAdapter = inject(configSettings.submissionAdapter);\n        this.submissionClient = inject(configSettings.submissionClient) || new DefaultSubmissionClient();\n        this.storage = inject(configSettings.storage) || new InMemoryStorageProvider();\n        this.queue = inject(configSettings.queue) || new DefaultEventQueue(this);\n        SettingsManager.applySavedServerSettings(this);\n        EventPluginManager.addDefaultPlugins(this);\n    }\n    Object.defineProperty(Configuration.prototype, \"apiKey\", {\n        get: function () {\n            return this._apiKey;\n        },\n        set: function (value) {\n            this._apiKey = value || null;\n            this.log.info(\"apiKey: \" + this._apiKey);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Configuration.prototype, \"isValid\", {\n        get: function () {\n            return !!this.apiKey && this.apiKey.length >= 10;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Configuration.prototype, \"serverUrl\", {\n        get: function () {\n            return this._serverUrl;\n        },\n        set: function (value) {\n            if (!!value) {\n                this._serverUrl = value;\n                this._heartbeatServerUrl = value;\n                this.log.info(\"serverUrl: \" + this._serverUrl);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Configuration.prototype, \"heartbeatServerUrl\", {\n        get: function () {\n            return this._heartbeatServerUrl;\n        },\n        set: function (value) {\n            if (!!value) {\n                this._heartbeatServerUrl = value;\n                this.log.info(\"heartbeatServerUrl: \" + this._heartbeatServerUrl);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Configuration.prototype, \"dataExclusions\", {\n        get: function () {\n            var exclusions = this.settings['@@DataExclusions'];\n            return this._dataExclusions.concat(exclusions && exclusions.split(',') || []);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Configuration.prototype.addDataExclusions = function () {\n        var exclusions = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            exclusions[_i - 0] = arguments[_i];\n        }\n        this._dataExclusions = Utils.addRange.apply(Utils, [this._dataExclusions].concat(exclusions));\n    };\n    Object.defineProperty(Configuration.prototype, \"userAgentBotPatterns\", {\n        get: function () {\n            var patterns = this.settings['@@UserAgentBotPatterns'];\n            return this._userAgentBotPatterns.concat(patterns && patterns.split(',') || []);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Configuration.prototype.addUserAgentBotPatterns = function () {\n        var userAgentBotPatterns = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            userAgentBotPatterns[_i - 0] = arguments[_i];\n        }\n        this._userAgentBotPatterns = Utils.addRange.apply(Utils, [this._userAgentBotPatterns].concat(userAgentBotPatterns));\n    };\n    Object.defineProperty(Configuration.prototype, \"plugins\", {\n        get: function () {\n            return this._plugins.sort(function (p1, p2) {\n                return (p1.priority < p2.priority) ? -1 : (p1.priority > p2.priority) ? 1 : 0;\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Configuration.prototype.addPlugin = function (pluginOrName, priority, pluginAction) {\n        var plugin = !!pluginAction ? { name: pluginOrName, priority: priority, run: pluginAction } : pluginOrName;\n        if (!plugin || !plugin.run) {\n            this.log.error('Add plugin failed: Run method not defined');\n            return;\n        }\n        if (!plugin.name) {\n            plugin.name = Utils.guid();\n        }\n        if (!plugin.priority) {\n            plugin.priority = 0;\n        }\n        var pluginExists = false;\n        var plugins = this._plugins;\n        for (var index = 0; index < plugins.length; index++) {\n            if (plugins[index].name === plugin.name) {\n                pluginExists = true;\n                break;\n            }\n        }\n        if (!pluginExists) {\n            plugins.push(plugin);\n        }\n    };\n    Configuration.prototype.removePlugin = function (pluginOrName) {\n        var name = typeof pluginOrName === 'string' ? pluginOrName : pluginOrName.name;\n        if (!name) {\n            this.log.error('Remove plugin failed: Plugin name not defined');\n            return;\n        }\n        var plugins = this._plugins;\n        for (var index = 0; index < plugins.length; index++) {\n            if (plugins[index].name === name) {\n                plugins.splice(index, 1);\n                break;\n            }\n        }\n    };\n    Configuration.prototype.setVersion = function (version) {\n        if (!!version) {\n            this.defaultData['@version'] = version;\n        }\n    };\n    Configuration.prototype.setUserIdentity = function (userInfoOrIdentity, name) {\n        var USER_KEY = '@user';\n        var userInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name: name };\n        var shouldRemove = !userInfo || (!userInfo.identity && !userInfo.name);\n        if (shouldRemove) {\n            delete this.defaultData[USER_KEY];\n        }\n        else {\n            this.defaultData[USER_KEY] = userInfo;\n        }\n        this.log.info(\"user identity: \" + (shouldRemove ? 'null' : userInfo.identity));\n    };\n    Object.defineProperty(Configuration.prototype, \"userAgent\", {\n        get: function () {\n            return 'exceptionless-js/1.4.0';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Configuration.prototype.useSessions = function (sendHeartbeats, heartbeatInterval) {\n        if (sendHeartbeats === void 0) { sendHeartbeats = true; }\n        if (heartbeatInterval === void 0) { heartbeatInterval = 30000; }\n        if (sendHeartbeats) {\n            this.addPlugin(new HeartbeatPlugin(heartbeatInterval));\n        }\n    };\n    Configuration.prototype.useReferenceIds = function () {\n        this.addPlugin(new ReferenceIdPlugin());\n    };\n    Configuration.prototype.useLocalStorage = function () {\n    };\n    Configuration.prototype.useDebugLogger = function () {\n        this.log = new ConsoleLog();\n    };\n    Object.defineProperty(Configuration, \"defaults\", {\n        get: function () {\n            if (Configuration._defaultSettings === null) {\n                Configuration._defaultSettings = {};\n            }\n            return Configuration._defaultSettings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Configuration._defaultSettings = null;\n    return Configuration;\n}());\nexports.Configuration = Configuration;\nvar EventBuilder = (function () {\n    function EventBuilder(event, client, pluginContextData) {\n        this._validIdentifierErrorMessage = 'must contain between 8 and 100 alphanumeric or \\'-\\' characters.';\n        this.target = event;\n        this.client = client;\n        this.pluginContextData = pluginContextData || new ContextData();\n    }\n    EventBuilder.prototype.setType = function (type) {\n        if (!!type) {\n            this.target.type = type;\n        }\n        return this;\n    };\n    EventBuilder.prototype.setSource = function (source) {\n        if (!!source) {\n            this.target.source = source;\n        }\n        return this;\n    };\n    EventBuilder.prototype.setReferenceId = function (referenceId) {\n        if (!this.isValidIdentifier(referenceId)) {\n            throw new Error(\"ReferenceId \" + this._validIdentifierErrorMessage);\n        }\n        this.target.reference_id = referenceId;\n        return this;\n    };\n    EventBuilder.prototype.setEventReference = function (name, id) {\n        if (!name) {\n            throw new Error('Invalid name');\n        }\n        if (!id || !this.isValidIdentifier(id)) {\n            throw new Error(\"Id \" + this._validIdentifierErrorMessage);\n        }\n        this.setProperty('@ref:' + name, id);\n        return this;\n    };\n    EventBuilder.prototype.setMessage = function (message) {\n        if (!!message) {\n            this.target.message = message;\n        }\n        return this;\n    };\n    EventBuilder.prototype.setGeo = function (latitude, longitude) {\n        if (latitude < -90.0 || latitude > 90.0) {\n            throw new Error('Must be a valid latitude value between -90.0 and 90.0.');\n        }\n        if (longitude < -180.0 || longitude > 180.0) {\n            throw new Error('Must be a valid longitude value between -180.0 and 180.0.');\n        }\n        this.target.geo = latitude + \",\" + longitude;\n        return this;\n    };\n    EventBuilder.prototype.setUserIdentity = function (userInfoOrIdentity, name) {\n        var userInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name: name };\n        if (!userInfo || (!userInfo.identity && !userInfo.name)) {\n            return this;\n        }\n        this.setProperty('@user', userInfo);\n        return this;\n    };\n    EventBuilder.prototype.setUserDescription = function (emailAddress, description) {\n        if (emailAddress && description) {\n            this.setProperty('@user_description', { email_address: emailAddress, description: description });\n        }\n        return this;\n    };\n    EventBuilder.prototype.setManualStackingInfo = function (signatureData, title) {\n        if (signatureData) {\n            var stack = {\n                signature_data: signatureData\n            };\n            if (title) {\n                stack.title = title;\n            }\n            this.setProperty('@stack', stack);\n        }\n        return this;\n    };\n    EventBuilder.prototype.setManualStackingKey = function (manualStackingKey, title) {\n        if (manualStackingKey) {\n            var data = {\n                'ManualStackingKey': manualStackingKey\n            };\n            this.setManualStackingInfo(data, title);\n        }\n        return this;\n    };\n    EventBuilder.prototype.setValue = function (value) {\n        if (!!value) {\n            this.target.value = value;\n        }\n        return this;\n    };\n    EventBuilder.prototype.addTags = function () {\n        var tags = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            tags[_i - 0] = arguments[_i];\n        }\n        this.target.tags = Utils.addRange.apply(Utils, [this.target.tags].concat(tags));\n        return this;\n    };\n    EventBuilder.prototype.setProperty = function (name, value, maxDepth, excludedPropertyNames) {\n        if (!name || (value === undefined || value == null)) {\n            return this;\n        }\n        if (!this.target.data) {\n            this.target.data = {};\n        }\n        var result = JSON.parse(Utils.stringify(value, this.client.config.dataExclusions.concat(excludedPropertyNames || []), maxDepth));\n        if (!Utils.isEmpty(result)) {\n            this.target.data[name] = result;\n        }\n        return this;\n    };\n    EventBuilder.prototype.markAsCritical = function (critical) {\n        if (critical) {\n            this.addTags('Critical');\n        }\n        return this;\n    };\n    EventBuilder.prototype.addRequestInfo = function (request) {\n        if (!!request) {\n            this.pluginContextData['@request'] = request;\n        }\n        return this;\n    };\n    EventBuilder.prototype.submit = function (callback) {\n        this.client.submitEvent(this.target, this.pluginContextData, callback);\n    };\n    EventBuilder.prototype.isValidIdentifier = function (value) {\n        if (!value) {\n            return true;\n        }\n        if (value.length < 8 || value.length > 100) {\n            return false;\n        }\n        for (var index = 0; index < value.length; index++) {\n            var code = value.charCodeAt(index);\n            var isDigit = (code >= 48) && (code <= 57);\n            var isLetter = ((code >= 65) && (code <= 90)) || ((code >= 97) && (code <= 122));\n            var isMinus = code === 45;\n            if (!(isDigit || isLetter) && !isMinus) {\n                return false;\n            }\n        }\n        return true;\n    };\n    return EventBuilder;\n}());\nexports.EventBuilder = EventBuilder;\nvar ContextData = (function () {\n    function ContextData() {\n    }\n    ContextData.prototype.setException = function (exception) {\n        if (exception) {\n            this['@@_Exception'] = exception;\n        }\n    };\n    Object.defineProperty(ContextData.prototype, \"hasException\", {\n        get: function () {\n            return !!this['@@_Exception'];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ContextData.prototype.getException = function () {\n        return this['@@_Exception'] || null;\n    };\n    ContextData.prototype.markAsUnhandledError = function () {\n        this['@@_IsUnhandledError'] = true;\n    };\n    Object.defineProperty(ContextData.prototype, \"isUnhandledError\", {\n        get: function () {\n            return !!this['@@_IsUnhandledError'];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ContextData.prototype.setSubmissionMethod = function (method) {\n        if (method) {\n            this['@@_SubmissionMethod'] = method;\n        }\n    };\n    ContextData.prototype.getSubmissionMethod = function () {\n        return this['@@_SubmissionMethod'] || null;\n    };\n    return ContextData;\n}());\nexports.ContextData = ContextData;\nvar SubmissionResponse = (function () {\n    function SubmissionResponse(statusCode, message) {\n        this.success = false;\n        this.badRequest = false;\n        this.serviceUnavailable = false;\n        this.paymentRequired = false;\n        this.unableToAuthenticate = false;\n        this.notFound = false;\n        this.requestEntityTooLarge = false;\n        this.statusCode = statusCode;\n        this.message = message;\n        this.success = statusCode >= 200 && statusCode <= 299;\n        this.badRequest = statusCode === 400;\n        this.serviceUnavailable = statusCode === 503;\n        this.paymentRequired = statusCode === 402;\n        this.unableToAuthenticate = statusCode === 401 || statusCode === 403;\n        this.notFound = statusCode === 404;\n        this.requestEntityTooLarge = statusCode === 413;\n    }\n    return SubmissionResponse;\n}());\nexports.SubmissionResponse = SubmissionResponse;\nvar ExceptionlessClient = (function () {\n    function ExceptionlessClient(settingsOrApiKey, serverUrl) {\n        if (typeof settingsOrApiKey === 'object') {\n            this.config = new Configuration(settingsOrApiKey);\n        }\n        else {\n            this.config = new Configuration({ apiKey: settingsOrApiKey, serverUrl: serverUrl });\n        }\n    }\n    ExceptionlessClient.prototype.createException = function (exception) {\n        var pluginContextData = new ContextData();\n        pluginContextData.setException(exception);\n        return this.createEvent(pluginContextData).setType('error');\n    };\n    ExceptionlessClient.prototype.submitException = function (exception, callback) {\n        this.createException(exception).submit(callback);\n    };\n    ExceptionlessClient.prototype.createUnhandledException = function (exception, submissionMethod) {\n        var builder = this.createException(exception);\n        builder.pluginContextData.markAsUnhandledError();\n        builder.pluginContextData.setSubmissionMethod(submissionMethod);\n        return builder;\n    };\n    ExceptionlessClient.prototype.submitUnhandledException = function (exception, submissionMethod, callback) {\n        this.createUnhandledException(exception, submissionMethod).submit(callback);\n    };\n    ExceptionlessClient.prototype.createFeatureUsage = function (feature) {\n        return this.createEvent().setType('usage').setSource(feature);\n    };\n    ExceptionlessClient.prototype.submitFeatureUsage = function (feature, callback) {\n        this.createFeatureUsage(feature).submit(callback);\n    };\n    ExceptionlessClient.prototype.createLog = function (sourceOrMessage, message, level) {\n        var builder = this.createEvent().setType('log');\n        if (message && level) {\n            builder = builder.setSource(sourceOrMessage).setMessage(message).setProperty('@level', level);\n        }\n        else if (message) {\n            builder = builder.setSource(sourceOrMessage).setMessage(message);\n        }\n        else {\n            var caller = arguments.callee.caller;\n            builder = builder.setSource(caller && caller.name).setMessage(sourceOrMessage);\n        }\n        return builder;\n    };\n    ExceptionlessClient.prototype.submitLog = function (sourceOrMessage, message, level, callback) {\n        this.createLog(sourceOrMessage, message, level).submit(callback);\n    };\n    ExceptionlessClient.prototype.createNotFound = function (resource) {\n        return this.createEvent().setType('404').setSource(resource);\n    };\n    ExceptionlessClient.prototype.submitNotFound = function (resource, callback) {\n        this.createNotFound(resource).submit(callback);\n    };\n    ExceptionlessClient.prototype.createSessionStart = function () {\n        return this.createEvent().setType('session');\n    };\n    ExceptionlessClient.prototype.submitSessionStart = function (callback) {\n        this.createSessionStart().submit(callback);\n    };\n    ExceptionlessClient.prototype.submitSessionEnd = function (sessionIdOrUserId) {\n        if (sessionIdOrUserId) {\n            this.config.log.info(\"Submitting session end: \" + sessionIdOrUserId);\n            this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, true, this.config);\n        }\n    };\n    ExceptionlessClient.prototype.submitSessionHeartbeat = function (sessionIdOrUserId) {\n        if (sessionIdOrUserId) {\n            this.config.log.info(\"Submitting session heartbeat: \" + sessionIdOrUserId);\n            this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, false, this.config);\n        }\n    };\n    ExceptionlessClient.prototype.createEvent = function (pluginContextData) {\n        return new EventBuilder({ date: new Date() }, this, pluginContextData);\n    };\n    ExceptionlessClient.prototype.submitEvent = function (event, pluginContextData, callback) {\n        function cancelled(context) {\n            if (!!context) {\n                context.cancelled = true;\n            }\n            return !!callback && callback(context);\n        }\n        var context = new EventPluginContext(this, event, pluginContextData);\n        if (!event) {\n            return cancelled(context);\n        }\n        if (!this.config.enabled) {\n            this.config.log.info('Event submission is currently disabled.');\n            return cancelled(context);\n        }\n        if (!event.data) {\n            event.data = {};\n        }\n        if (!event.tags || !event.tags.length) {\n            event.tags = [];\n        }\n        EventPluginManager.run(context, function (ctx) {\n            var ev = ctx.event;\n            if (!ctx.cancelled) {\n                if (!ev.type || ev.type.length === 0) {\n                    ev.type = 'log';\n                }\n                if (!ev.date) {\n                    ev.date = new Date();\n                }\n                var config = ctx.client.config;\n                config.queue.enqueue(ev);\n                if (ev.reference_id && ev.reference_id.length > 0) {\n                    ctx.log.info(\"Setting last reference id '\" + ev.reference_id + \"'\");\n                    config.lastReferenceIdManager.setLast(ev.reference_id);\n                }\n            }\n            !!callback && callback(ctx);\n        });\n    };\n    ExceptionlessClient.prototype.updateUserEmailAndDescription = function (referenceId, email, description, callback) {\n        var _this = this;\n        if (!referenceId || !email || !description || !this.config.enabled) {\n            return !!callback && callback(new SubmissionResponse(500, 'cancelled'));\n        }\n        var userDescription = { email_address: email, description: description };\n        this.config.submissionClient.postUserDescription(referenceId, userDescription, this.config, function (response) {\n            if (!response.success) {\n                _this.config.log.error(\"Failed to submit user email and description for event '\" + referenceId + \"': \" + response.statusCode + \" \" + response.message);\n            }\n            !!callback && callback(response);\n        });\n    };\n    ExceptionlessClient.prototype.getLastReferenceId = function () {\n        return this.config.lastReferenceIdManager.getLast();\n    };\n    Object.defineProperty(ExceptionlessClient, \"default\", {\n        get: function () {\n            if (ExceptionlessClient._instance === null) {\n                ExceptionlessClient._instance = new ExceptionlessClient(null);\n            }\n            return ExceptionlessClient._instance;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ExceptionlessClient._instance = null;\n    return ExceptionlessClient;\n}());\nexports.ExceptionlessClient = ExceptionlessClient;\nvar ConfigurationDefaultsPlugin = (function () {\n    function ConfigurationDefaultsPlugin() {\n        this.priority = 10;\n        this.name = 'ConfigurationDefaultsPlugin';\n    }\n    ConfigurationDefaultsPlugin.prototype.run = function (context, next) {\n        var config = context.client.config;\n        var defaultTags = config.defaultTags || [];\n        for (var index = 0; index < defaultTags.length; index++) {\n            var tag = defaultTags[index];\n            if (!!tag && context.event.tags.indexOf(tag) < 0) {\n                context.event.tags.push(tag);\n            }\n        }\n        var defaultData = config.defaultData || {};\n        for (var key in defaultData) {\n            if (!!defaultData[key]) {\n                var result = JSON.parse(Utils.stringify(defaultData[key], config.dataExclusions));\n                if (!Utils.isEmpty(result)) {\n                    context.event.data[key] = result;\n                }\n            }\n        }\n        next && next();\n    };\n    return ConfigurationDefaultsPlugin;\n}());\nexports.ConfigurationDefaultsPlugin = ConfigurationDefaultsPlugin;\nvar ErrorPlugin = (function () {\n    function ErrorPlugin() {\n        this.priority = 30;\n        this.name = 'ErrorPlugin';\n    }\n    ErrorPlugin.prototype.run = function (context, next) {\n        var ERROR_KEY = '@error';\n        var ignoredProperties = [\n            'arguments',\n            'column',\n            'columnNumber',\n            'description',\n            'fileName',\n            'message',\n            'name',\n            'number',\n            'line',\n            'lineNumber',\n            'opera#sourceloc',\n            'sourceId',\n            'sourceURL',\n            'stack',\n            'stackArray',\n            'stacktrace'\n        ];\n        var exception = context.contextData.getException();\n        if (!!exception) {\n            context.event.type = 'error';\n            if (!context.event.data[ERROR_KEY]) {\n                var config = context.client.config;\n                var parser = config.errorParser;\n                if (!parser) {\n                    throw new Error('No error parser was defined.');\n                }\n                var result = parser.parse(context, exception);\n                if (!!result) {\n                    var additionalData = JSON.parse(Utils.stringify(exception, config.dataExclusions.concat(ignoredProperties)));\n                    if (!Utils.isEmpty(additionalData)) {\n                        if (!result.data) {\n                            result.data = {};\n                        }\n                        result.data['@ext'] = additionalData;\n                    }\n                    context.event.data[ERROR_KEY] = result;\n                }\n            }\n        }\n        next && next();\n    };\n    return ErrorPlugin;\n}());\nexports.ErrorPlugin = ErrorPlugin;\nvar ModuleInfoPlugin = (function () {\n    function ModuleInfoPlugin() {\n        this.priority = 50;\n        this.name = 'ModuleInfoPlugin';\n    }\n    ModuleInfoPlugin.prototype.run = function (context, next) {\n        var ERROR_KEY = '@error';\n        var collector = context.client.config.moduleCollector;\n        if (context.event.data[ERROR_KEY] && !context.event.data['@error'].modules && !!collector) {\n            var modules = collector.getModules(context);\n            if (modules && modules.length > 0) {\n                context.event.data[ERROR_KEY].modules = modules;\n            }\n        }\n        next && next();\n    };\n    return ModuleInfoPlugin;\n}());\nexports.ModuleInfoPlugin = ModuleInfoPlugin;\nvar RequestInfoPlugin = (function () {\n    function RequestInfoPlugin() {\n        this.priority = 70;\n        this.name = 'RequestInfoPlugin';\n    }\n    RequestInfoPlugin.prototype.run = function (context, next) {\n        var REQUEST_KEY = '@request';\n        var config = context.client.config;\n        var collector = config.requestInfoCollector;\n        if (!context.event.data[REQUEST_KEY] && !!collector) {\n            var requestInfo = collector.getRequestInfo(context);\n            if (!!requestInfo) {\n                if (Utils.isMatch(requestInfo.user_agent, config.userAgentBotPatterns)) {\n                    context.log.info('Cancelling event as the request user agent matches a known bot pattern');\n                    context.cancelled = true;\n                }\n                else {\n                    context.event.data[REQUEST_KEY] = requestInfo;\n                }\n            }\n        }\n        next && next();\n    };\n    return RequestInfoPlugin;\n}());\nexports.RequestInfoPlugin = RequestInfoPlugin;\nvar EnvironmentInfoPlugin = (function () {\n    function EnvironmentInfoPlugin() {\n        this.priority = 80;\n        this.name = 'EnvironmentInfoPlugin';\n    }\n    EnvironmentInfoPlugin.prototype.run = function (context, next) {\n        var ENVIRONMENT_KEY = '@environment';\n        var collector = context.client.config.environmentInfoCollector;\n        if (!context.event.data[ENVIRONMENT_KEY] && collector) {\n            var environmentInfo = collector.getEnvironmentInfo(context);\n            if (!!environmentInfo) {\n                context.event.data[ENVIRONMENT_KEY] = environmentInfo;\n            }\n        }\n        next && next();\n    };\n    return EnvironmentInfoPlugin;\n}());\nexports.EnvironmentInfoPlugin = EnvironmentInfoPlugin;\nvar SubmissionMethodPlugin = (function () {\n    function SubmissionMethodPlugin() {\n        this.priority = 100;\n        this.name = 'SubmissionMethodPlugin';\n    }\n    SubmissionMethodPlugin.prototype.run = function (context, next) {\n        var submissionMethod = context.contextData.getSubmissionMethod();\n        if (!!submissionMethod) {\n            context.event.data['@submission_method'] = submissionMethod;\n        }\n        next && next();\n    };\n    return SubmissionMethodPlugin;\n}());\nexports.SubmissionMethodPlugin = SubmissionMethodPlugin;\nvar DuplicateCheckerPlugin = (function () {\n    function DuplicateCheckerPlugin(getCurrentTime) {\n        if (getCurrentTime === void 0) { getCurrentTime = function () { return Date.now(); }; }\n        this.priority = 40;\n        this.name = 'DuplicateCheckerPlugin';\n        this._processedHashcodes = [];\n        this._getCurrentTime = getCurrentTime;\n    }\n    DuplicateCheckerPlugin.prototype.run = function (context, next) {\n        function isDuplicate(error, processedHashcodes, now, log) {\n            var _loop_1 = function() {\n                var hashCode = Utils.getHashCode(error.stack_trace && JSON.stringify(error.stack_trace));\n                if (hashCode && processedHashcodes.some(function (h) { return h.hash === hashCode && h.timestamp >= (now - 2000); })) {\n                    log.info(\"Ignoring duplicate error event hash: \" + hashCode);\n                    return { value: true };\n                }\n                processedHashcodes.push({ hash: hashCode, timestamp: now });\n                while (processedHashcodes.length > 20) {\n                    processedHashcodes.shift();\n                }\n                error = error.inner;\n            };\n            while (error) {\n                var state_1 = _loop_1();\n                if (typeof state_1 === \"object\") return state_1.value;\n            }\n            return false;\n        }\n        if (context.event.type === 'error') {\n            if (isDuplicate(context.event.data['@error'], this._processedHashcodes, this._getCurrentTime(), context.log)) {\n                context.cancelled = true;\n                return;\n            }\n        }\n        next && next();\n    };\n    return DuplicateCheckerPlugin;\n}());\nexports.DuplicateCheckerPlugin = DuplicateCheckerPlugin;\nvar EventExclusionPlugin = (function () {\n    function EventExclusionPlugin() {\n        this.priority = 45;\n        this.name = 'EventExclusionPlugin';\n    }\n    EventExclusionPlugin.prototype.run = function (context, next) {\n        function getLogLevel(level) {\n            switch ((level || '').toLowerCase()) {\n                case 'trace':\n                    return 0;\n                case 'debug':\n                    return 1;\n                case 'info':\n                    return 2;\n                case 'warn':\n                    return 3;\n                case 'error':\n                    return 4;\n                case 'fatal':\n                    return 5;\n                case 'off':\n                    return 6;\n                default:\n                    return -1;\n            }\n        }\n        function getMinLogLevel(settings, loggerName) {\n            if (loggerName === void 0) { loggerName = '*'; }\n            return getLogLevel(getTypeAndSourceSetting(settings, 'log', loggerName, 'Trace') + '');\n        }\n        function getTypeAndSourceSetting(settings, type, source, defaultValue) {\n            if (settings === void 0) { settings = {}; }\n            if (defaultValue === void 0) { defaultValue = undefined; }\n            if (!type) {\n                return defaultValue;\n            }\n            var sourcePrefix = \"@@\" + type + \":\";\n            if (settings[sourcePrefix + source]) {\n                return settings[sourcePrefix + source];\n            }\n            for (var key in settings) {\n                if (Utils.startsWith(key.toLowerCase(), sourcePrefix.toLowerCase()) && Utils.isMatch(source, [key.substring(sourcePrefix.length)])) {\n                    return settings[key];\n                }\n            }\n            return defaultValue;\n        }\n        var ev = context.event;\n        var settings = context.client.config.settings;\n        if (ev.type === 'log') {\n            var minLogLevel = getMinLogLevel(settings, ev.source);\n            var logLevel = getLogLevel(ev.data['@level']);\n            if (logLevel >= 0 && (logLevel > 5 || logLevel < minLogLevel)) {\n                context.log.info('Cancelling log event due to minimum log level.');\n                context.cancelled = true;\n            }\n        }\n        else if (ev.type === 'error') {\n            var error = ev.data['@error'];\n            while (!context.cancelled && error) {\n                if (getTypeAndSourceSetting(settings, ev.type, error.type, true) === false) {\n                    context.log.info(\"Cancelling error from excluded exception type: \" + error.type);\n                    context.cancelled = true;\n                }\n                error = error.inner;\n            }\n        }\n        else if (getTypeAndSourceSetting(settings, ev.type, ev.source, true) === false) {\n            context.log.info(\"Cancelling event from excluded type: \" + ev.type + \" and source: \" + ev.source);\n            context.cancelled = true;\n        }\n        next && next();\n    };\n    return EventExclusionPlugin;\n}());\nexports.EventExclusionPlugin = EventExclusionPlugin;\nvar SettingsResponse = (function () {\n    function SettingsResponse(success, settings, settingsVersion, exception, message) {\n        if (settingsVersion === void 0) { settingsVersion = -1; }\n        if (exception === void 0) { exception = null; }\n        if (message === void 0) { message = null; }\n        this.success = false;\n        this.settingsVersion = -1;\n        this.success = success;\n        this.settings = settings;\n        this.settingsVersion = settingsVersion;\n        this.exception = exception;\n        this.message = message;\n    }\n    return SettingsResponse;\n}());\nexports.SettingsResponse = SettingsResponse;\nvar InMemoryStorage = (function () {\n    function InMemoryStorage(maxItems) {\n        this.items = [];\n        this.lastTimestamp = 0;\n        this.maxItems = maxItems;\n    }\n    InMemoryStorage.prototype.save = function (value) {\n        if (!value) {\n            return null;\n        }\n        var items = this.items;\n        var timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n        var item = { timestamp: timestamp, value: value };\n        if (items.push(item) > this.maxItems) {\n            items.shift();\n        }\n        this.lastTimestamp = timestamp;\n        return item.timestamp;\n    };\n    InMemoryStorage.prototype.get = function (limit) {\n        return this.items.slice(0, limit);\n    };\n    InMemoryStorage.prototype.remove = function (timestamp) {\n        var items = this.items;\n        for (var i = 0; i < items.length; i++) {\n            if (items[i].timestamp === timestamp) {\n                items.splice(i, 1);\n                return;\n            }\n        }\n    };\n    InMemoryStorage.prototype.clear = function () {\n        this.items = [];\n    };\n    return InMemoryStorage;\n}());\nexports.InMemoryStorage = InMemoryStorage;\nvar KeyValueStorageBase = (function () {\n    function KeyValueStorageBase(maxItems) {\n        this.lastTimestamp = 0;\n        this.maxItems = maxItems;\n    }\n    KeyValueStorageBase.prototype.save = function (value, single) {\n        if (!value) {\n            return null;\n        }\n        this.ensureIndex();\n        var items = this.items;\n        var timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n        var key = this.getKey(timestamp);\n        var json = JSON.stringify(value);\n        try {\n            this.write(key, json);\n            this.lastTimestamp = timestamp;\n            if (items.push(timestamp) > this.maxItems) {\n                this.delete(this.getKey(items.shift()));\n            }\n        }\n        catch (e) {\n            return null;\n        }\n        return timestamp;\n    };\n    KeyValueStorageBase.prototype.get = function (limit) {\n        var _this = this;\n        this.ensureIndex();\n        return this.items.slice(0, limit)\n            .map(function (timestamp) {\n            var key = _this.getKey(timestamp);\n            try {\n                var json = _this.read(key);\n                var value = JSON.parse(json, parseDate);\n                return { timestamp: timestamp, value: value };\n            }\n            catch (error) {\n                _this.safeDelete(key);\n                return null;\n            }\n        })\n            .filter(function (item) { return item != null; });\n    };\n    KeyValueStorageBase.prototype.remove = function (timestamp) {\n        this.ensureIndex();\n        var items = this.items;\n        var index = items.indexOf(timestamp);\n        if (index >= 0) {\n            var key = this.getKey(timestamp);\n            this.safeDelete(key);\n            items.splice(index, 1);\n        }\n        ;\n    };\n    KeyValueStorageBase.prototype.clear = function () {\n        var _this = this;\n        this.items.forEach(function (item) { return _this.safeDelete(_this.getKey(item)); });\n        this.items = [];\n    };\n    KeyValueStorageBase.prototype.ensureIndex = function () {\n        if (!this.items) {\n            this.items = this.createIndex();\n            this.lastTimestamp = Math.max.apply(Math, [0].concat(this.items)) + 1;\n        }\n    };\n    KeyValueStorageBase.prototype.safeDelete = function (key) {\n        try {\n            this.delete(key);\n        }\n        catch (error) {\n        }\n    };\n    KeyValueStorageBase.prototype.createIndex = function () {\n        var _this = this;\n        try {\n            var keys = this.readAllKeys();\n            return keys.map(function (key) {\n                try {\n                    var timestamp = _this.getTimestamp(key);\n                    if (!timestamp) {\n                        _this.safeDelete(key);\n                        return null;\n                    }\n                    return timestamp;\n                }\n                catch (error) {\n                    _this.safeDelete(key);\n                    return null;\n                }\n            }).filter(function (timestamp) { return timestamp != null; })\n                .sort(function (a, b) { return a - b; });\n        }\n        catch (error) {\n            return [];\n        }\n    };\n    return KeyValueStorageBase;\n}());\nexports.KeyValueStorageBase = KeyValueStorageBase;\nfunction parseDate(key, value) {\n    var dateRegx = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/g;\n    if (typeof value === 'string') {\n        var a = dateRegx.exec(value);\n        if (a) {\n            return new Date(value);\n        }\n    }\n    return value;\n}\n;\nvar BrowserStorage = (function (_super) {\n    __extends(BrowserStorage, _super);\n    function BrowserStorage(namespace, prefix, maxItems) {\n        if (prefix === void 0) { prefix = 'com.exceptionless.'; }\n        if (maxItems === void 0) { maxItems = 20; }\n        _super.call(this, maxItems);\n        this.prefix = prefix + namespace + '-';\n    }\n    BrowserStorage.isAvailable = function () {\n        try {\n            var storage = window.localStorage, x = '__storage_test__';\n            storage.setItem(x, x);\n            storage.removeItem(x);\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n    };\n    BrowserStorage.prototype.write = function (key, value) {\n        window.localStorage.setItem(key, value);\n    };\n    BrowserStorage.prototype.read = function (key) {\n        return window.localStorage.getItem(key);\n    };\n    BrowserStorage.prototype.readAllKeys = function () {\n        var _this = this;\n        return Object.keys(window.localStorage)\n            .filter(function (key) { return key.indexOf(_this.prefix) === 0; });\n    };\n    BrowserStorage.prototype.delete = function (key) {\n        window.localStorage.removeItem(key);\n    };\n    BrowserStorage.prototype.getKey = function (timestamp) {\n        return this.prefix + timestamp;\n    };\n    BrowserStorage.prototype.getTimestamp = function (key) {\n        return parseInt(key.substr(this.prefix.length), 10);\n    };\n    return BrowserStorage;\n}(KeyValueStorageBase));\nexports.BrowserStorage = BrowserStorage;\nvar DefaultErrorParser = (function () {\n    function DefaultErrorParser() {\n    }\n    DefaultErrorParser.prototype.parse = function (context, exception) {\n        function getParameters(parameters) {\n            var params = (typeof parameters === 'string' ? [parameters] : parameters) || [];\n            var result = [];\n            for (var index = 0; index < params.length; index++) {\n                result.push({ name: params[index] });\n            }\n            return result;\n        }\n        function getStackFrames(stackFrames) {\n            var ANONYMOUS = '<anonymous>';\n            var frames = [];\n            for (var index = 0; index < stackFrames.length; index++) {\n                var frame = stackFrames[index];\n                frames.push({\n                    name: (frame.func || ANONYMOUS).replace('?', ANONYMOUS),\n                    parameters: getParameters(frame.args),\n                    file_name: frame.url,\n                    line_number: frame.line || 0,\n                    column: frame.column || 0\n                });\n            }\n            return frames;\n        }\n        var TRACEKIT_STACK_TRACE_KEY = '@@_TraceKit.StackTrace';\n        var stackTrace = !!context.contextData[TRACEKIT_STACK_TRACE_KEY]\n            ? context.contextData[TRACEKIT_STACK_TRACE_KEY]\n            : TraceKit.computeStackTrace(exception, 25);\n        if (!stackTrace) {\n            throw new Error('Unable to parse the exceptions stack trace.');\n        }\n        return {\n            type: stackTrace.name,\n            message: stackTrace.message || exception.message,\n            stack_trace: getStackFrames(stackTrace.stack || [])\n        };\n    };\n    return DefaultErrorParser;\n}());\nexports.DefaultErrorParser = DefaultErrorParser;\nvar DefaultModuleCollector = (function () {\n    function DefaultModuleCollector() {\n    }\n    DefaultModuleCollector.prototype.getModules = function (context) {\n        if (document && document.getElementsByTagName) {\n            return null;\n        }\n        var modules = [];\n        var scripts = document.getElementsByTagName('script');\n        if (scripts && scripts.length > 0) {\n            for (var index = 0; index < scripts.length; index++) {\n                if (scripts[index].src) {\n                    modules.push({\n                        module_id: index,\n                        name: scripts[index].src,\n                        version: Utils.parseVersion(scripts[index].src)\n                    });\n                }\n                else if (!!scripts[index].innerHTML) {\n                    modules.push({\n                        module_id: index,\n                        name: 'Script Tag',\n                        version: Utils.getHashCode(scripts[index].innerHTML).toString()\n                    });\n                }\n            }\n        }\n        return modules;\n    };\n    return DefaultModuleCollector;\n}());\nexports.DefaultModuleCollector = DefaultModuleCollector;\nvar DefaultRequestInfoCollector = (function () {\n    function DefaultRequestInfoCollector() {\n    }\n    DefaultRequestInfoCollector.prototype.getRequestInfo = function (context) {\n        if (!document || !navigator || !location) {\n            return null;\n        }\n        var exclusions = context.client.config.dataExclusions;\n        var requestInfo = {\n            user_agent: navigator.userAgent,\n            is_secure: location.protocol === 'https:',\n            host: location.hostname,\n            port: location.port && location.port !== '' ? parseInt(location.port, 10) : 80,\n            path: location.pathname,\n            cookies: Utils.getCookies(document.cookie, exclusions),\n            query_string: Utils.parseQueryString(location.search.substring(1), exclusions)\n        };\n        if (document.referrer && document.referrer !== '') {\n            requestInfo.referrer = document.referrer;\n        }\n        return requestInfo;\n    };\n    return DefaultRequestInfoCollector;\n}());\nexports.DefaultRequestInfoCollector = DefaultRequestInfoCollector;\nvar DefaultSubmissionAdapter = (function () {\n    function DefaultSubmissionAdapter() {\n    }\n    DefaultSubmissionAdapter.prototype.sendRequest = function (request, callback, isAppExiting) {\n        var TIMEOUT = 'timeout';\n        var LOADED = 'loaded';\n        var WITH_CREDENTIALS = 'withCredentials';\n        var isCompleted = false;\n        var useSetTimeout = false;\n        function complete(mode, xhr) {\n            function parseResponseHeaders(headerStr) {\n                function trim(value) {\n                    return value.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n                }\n                var headers = {};\n                var headerPairs = (headerStr || '').split('\\u000d\\u000a');\n                for (var index = 0; index < headerPairs.length; index++) {\n                    var headerPair = headerPairs[index];\n                    var separator = headerPair.indexOf('\\u003a\\u0020');\n                    if (separator > 0) {\n                        headers[trim(headerPair.substring(0, separator).toLowerCase())] = headerPair.substring(separator + 2);\n                    }\n                }\n                return headers;\n            }\n            if (isCompleted) {\n                return;\n            }\n            isCompleted = true;\n            var message = xhr.statusText;\n            var responseText = xhr.responseText;\n            var status = xhr.status;\n            if (mode === TIMEOUT || status === 0) {\n                message = 'Unable to connect to server.';\n                status = 0;\n            }\n            else if (mode === LOADED && !status) {\n                status = request.method === 'POST' ? 202 : 200;\n            }\n            else if (status < 200 || status > 299) {\n                var responseBody = xhr.responseBody;\n                if (!!responseBody && !!responseBody.message) {\n                    message = responseBody.message;\n                }\n                else if (!!responseText && responseText.indexOf('message') !== -1) {\n                    try {\n                        message = JSON.parse(responseText).message;\n                    }\n                    catch (e) {\n                        message = responseText;\n                    }\n                }\n            }\n            callback && callback(status || 500, message || '', responseText, parseResponseHeaders(xhr.getAllResponseHeaders && xhr.getAllResponseHeaders()));\n        }\n        function createRequest(userAgent, method, url) {\n            var xhr = new XMLHttpRequest();\n            if (WITH_CREDENTIALS in xhr) {\n                xhr.open(method, url, true);\n                xhr.setRequestHeader('X-Exceptionless-Client', userAgent);\n                if (method === 'POST') {\n                    xhr.setRequestHeader('Content-Type', 'application/json');\n                }\n            }\n            else if (typeof XDomainRequest !== 'undefined') {\n                useSetTimeout = true;\n                xhr = new XDomainRequest();\n                xhr.open(method, location.protocol === 'http:' ? url.replace('https:', 'http:') : url);\n            }\n            else {\n                xhr = null;\n            }\n            if (xhr) {\n                xhr.timeout = 10000;\n            }\n            return xhr;\n        }\n        var url = \"\" + request.url + (request.url.indexOf('?') === -1 ? '?' : '&') + \"access_token=\" + encodeURIComponent(request.apiKey);\n        var xhr = createRequest(request.userAgent, request.method || 'POST', url);\n        if (!xhr) {\n            return (callback && callback(503, 'CORS not supported.'));\n        }\n        if (WITH_CREDENTIALS in xhr) {\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState !== 4) {\n                    return;\n                }\n                complete(LOADED, xhr);\n            };\n        }\n        xhr.onprogress = function () { };\n        xhr.ontimeout = function () { return complete(TIMEOUT, xhr); };\n        xhr.onerror = function () { return complete('error', xhr); };\n        xhr.onload = function () { return complete(LOADED, xhr); };\n        if (useSetTimeout) {\n            setTimeout(function () { return xhr.send(request.data); }, 500);\n        }\n        else {\n            xhr.send(request.data);\n        }\n    };\n    return DefaultSubmissionAdapter;\n}());\nexports.DefaultSubmissionAdapter = DefaultSubmissionAdapter;\nvar BrowserStorageProvider = (function () {\n    function BrowserStorageProvider(prefix, maxQueueItems) {\n        if (maxQueueItems === void 0) { maxQueueItems = 250; }\n        this.queue = new BrowserStorage('q', prefix, maxQueueItems);\n        this.settings = new BrowserStorage('settings', prefix, 1);\n    }\n    return BrowserStorageProvider;\n}());\nexports.BrowserStorageProvider = BrowserStorageProvider;\nfunction getDefaultsSettingsFromScriptTag() {\n    if (!document || !document.getElementsByTagName) {\n        return null;\n    }\n    var scripts = document.getElementsByTagName('script');\n    for (var index = 0; index < scripts.length; index++) {\n        if (scripts[index].src && scripts[index].src.indexOf('/exceptionless') > -1) {\n            return Utils.parseQueryString(scripts[index].src.split('?').pop());\n        }\n    }\n    return null;\n}\nfunction processUnhandledException(stackTrace, options) {\n    var builder = ExceptionlessClient.default.createUnhandledException(new Error(stackTrace.message || (options || {}).status || 'Script error'), 'onerror');\n    builder.pluginContextData['@@_TraceKit.StackTrace'] = stackTrace;\n    builder.submit();\n}\nConfiguration.prototype.useLocalStorage = function () {\n    if (BrowserStorage.isAvailable()) {\n        this.storage = new BrowserStorageProvider();\n        SettingsManager.applySavedServerSettings(this);\n    }\n};\nvar defaults = Configuration.defaults;\nvar settings = getDefaultsSettingsFromScriptTag();\nif (settings && (settings.apiKey || settings.serverUrl)) {\n    defaults.apiKey = settings.apiKey;\n    defaults.serverUrl = settings.serverUrl;\n}\ndefaults.errorParser = new DefaultErrorParser();\ndefaults.moduleCollector = new DefaultModuleCollector();\ndefaults.requestInfoCollector = new DefaultRequestInfoCollector();\ndefaults.submissionAdapter = new DefaultSubmissionAdapter();\nTraceKit.report.subscribe(processUnhandledException);\nTraceKit.extendToAsynchronousCallbacks();\nError.stackTraceLimit = Infinity;\n\nreturn exports;\n\n}));\n\n\n","import * as TraceKit from 'TraceKit';\nexport interface IEvent {\n  type?: string;\n  source?: string;\n  date?: Date;\n  tags?: string[];\n  message?: string;\n  geo?: string;\n  value?: number;\n  data?: any;\n  reference_id?: string;\n}\n\nexport interface ILastReferenceIdManager {\n  getLast(): string;\n  clearLast(): void;\n  setLast(eventId: string): void;\n}\n\nexport interface ILog {\n  info(message: string): void;\n  warn(message: string): void;\n  error(message: string): void;\n}\n\n                                          \n\nexport interface IEventQueue {\n  enqueue(event: IEvent): void;\n  process(isAppExiting?: boolean): void;\n  suspendProcessing(durationInMinutes?: number, discardFutureQueuedItems?: boolean, clearQueue?: boolean): void;\n}\n\n                                                                                                                                  \n\nexport interface IEnvironmentInfoCollector {\n  getEnvironmentInfo(context: EventPluginContext): IEnvironmentInfo;\n}\n\n                                                                                                              \n\nexport interface IErrorParser {\n  parse(context: EventPluginContext, exception: Error): IError;\n}\n\n                                                                                                                \n\nexport interface IModuleCollector {\n  getModules(context: EventPluginContext): IModule[];\n}\n\n                                                                                                                          \n\nexport interface IRequestInfoCollector {\n  getRequestInfo(context: EventPluginContext): IRequestInfo;\n}\n\n                                      \n\nexport interface IStorageProvider {\n  queue: IStorage;\n  settings: IStorage;\n}\n\n                                                                                                                   \n\nexport interface ISubmissionAdapter {\n  sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean): void;\n}\n\n                                                                                                                                                                                                                                                                                           \n\nexport interface ISubmissionClient {\n  postEvents(events: IEvent[], config: Configuration, callback: (response: SubmissionResponse) => void, isAppExiting?: boolean): void;\n  postUserDescription(referenceId: string, description: IUserDescription, config: Configuration, callback: (response: SubmissionResponse) => void): void;\n  getSettings(config: Configuration, callback: (response: SettingsResponse) => void): void;\n  sendHeartbeat(sessionIdOrUserId: string, closeSession: boolean, config: Configuration): void;\n}\n\nn\nexport interface IConfigurationSettings {\n  apiKey?: string;\n  serverUrl?: string;\n  heartbeatServerUrl?: string;\n  environmentInfoCollector?: IEnvironmentInfoCollector;\n  errorParser?: IErrorParser;\n  lastReferenceIdManager?: ILastReferenceIdManager;\n  log?: ILog;\n  moduleCollector?: IModuleCollector;\n  requestInfoCollector?: IRequestInfoCollector;\n  submissionBatchSize?: number;\n  submissionClient?: ISubmissionClient;\n  submissionAdapter?: ISubmissionAdapter;\n  storage?: IStorageProvider;\n  queue?: IEventQueue;\n}\n\n                                                                                                                                                     \n\ninterface ISettingsWithVersion {\n  version: number;\n  settings: { [key: string]: string };\n}\n\nexport class SettingsManager {\n  /**\n   * A list of handlers that will be fired when the settings change.\n   * @type {Array}\n   * @private\n   */\n  private static _handlers: { (config: Configuration): void }[] = [];\n\n  public static onChanged(handler: (config: Configuration) => void) {\n    !!handler && this._handlers.push(handler);\n  }\n\n  public static applySavedServerSettings(config: Configuration): void {\n    let savedSettings = this.getSavedServerSettings(config);\n    config.log.info('Applying saved settings.');\n    config.settings = Utils.merge(config.settings, savedSettings.settings);\n    this.changed(config);\n  }\n\n  public static checkVersion(version: number, config: Configuration): void {\n    if (version) {\n      let savedSettings = this.getSavedServerSettings(config);\n      let savedVersion = savedSettings.version;\n      if (version > savedVersion) {\n        config.log.info(`Updating settings from v${savedVersion} to v${version}`);\n        this.updateSettings(config);\n      }\n    }\n  }\n\n  public static updateSettings(config: Configuration): void {\n    if (!config.isValid) {\n      config.log.error('Unable to update settings: ApiKey is not set.');\n      return;\n    }\n\n    config.submissionClient.getSettings(config, (response: SettingsResponse) => {\n      if (!response || !response.success || !response.settings) {\n        return;\n      }\n\n      config.settings = Utils.merge(config.settings, response.settings);\n\n      // TODO: Store snapshot of settings after reading from config and attributes and use that to revert to defaults.\n      // Remove any existing server settings that are not in the new server settings.\n      let savedServerSettings = SettingsManager.getSavedServerSettings(config);\n      for (let key in savedServerSettings) {\n        if (response.settings[key]) {\n          continue;\n        }\n\n        delete config.settings[key];\n      }\n\n      let newSettings = <ISettingsWithVersion>{\n        version: response.settingsVersion,\n        settings: response.settings\n      };\n\n      config.storage.settings.save(newSettings);\n\n      config.log.info('Updated settings');\n      this.changed(config);\n    });\n  }\n\n  private static changed(config: Configuration) {\n    let handlers = this._handlers; // optimization for minifier.\n    for (let index = 0; index < handlers.length; index++) {\n      handlers[index](config);\n    }\n  }\n\n  private static getSavedServerSettings(config: Configuration): ISettingsWithVersion {\n    let item = config.storage.settings.get()[0];\n    if (item && item.value && item.value.version && item.value.settings) {\n      return item.value;\n    }\n\n    return { version: 0, settings: {} };\n  }\n}\n\n                                                                    \n\nexport class DefaultLastReferenceIdManager implements ILastReferenceIdManager {\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @type {string}\n   * @private\n   */\n  private _lastReferenceId: string = null;\n\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @returns {string}\n   */\n  public getLast(): string {\n    return this._lastReferenceId;\n  }\n\n  /**\n   * Clears the last event's reference id.\n   */\n  public clearLast(): void {\n    this._lastReferenceId = null;\n  }\n\n  /**\n   * Sets the last event's reference id.\n   * @param eventId\n   */\n  public setLast(eventId: string): void {\n    this._lastReferenceId = eventId;\n  }\n}\n\n                              \n\nexport class ConsoleLog implements ILog {\n  public info(message: string): void {\n    this.log('info', message);\n  }\n\n  public warn(message: string): void {\n    this.log('warn', message);\n  }\n\n  public error(message: string): void {\n    this.log('error', message);\n  }\n\n  private log(level: string, message: string) {\n    if (console && console[level]) {\n      console[level](`[${level}] Exceptionless: ${message}`);\n    }\n  }\n}\n\n                              \n\nexport class NullLog implements ILog {\n  public info(message: string): void { }\n  public warn(message: string): void { }\n  public error(message: string): void { }\n}\n\nexport interface IUserInfo {\n  identity?: string;\n  name?: string;\n  data?: any;\n}\n\n                                                                                                         \n\nexport interface IEventPlugin {\n  priority?: number;\n  name?: string;\n  run(context: EventPluginContext, next?: () => void): void;\n}\n\n                                                                                                                                                                                             \n\nexport class EventPluginContext {\n  public cancelled: boolean;\n  public client: ExceptionlessClient;\n  public event: IEvent;\n  public contextData: ContextData;\n\n  constructor(client: ExceptionlessClient, event: IEvent, contextData?: ContextData) {\n    this.client = client;\n    this.event = event;\n    this.contextData = contextData ? contextData : new ContextData();\n  }\n\n  public get log(): ILog {\n    return this.client.config.log;\n  }\n}\n\nn\nexport class EventPluginManager {\n  public static run(context: EventPluginContext, callback: (context?: EventPluginContext) => void): void {\n    let wrap = function(plugin: IEventPlugin, next?: () => void): () => void {\n      return () => {\n        try {\n          if (!context.cancelled) {\n            plugin.run(context, next);\n          }\n        } catch (ex) {\n          context.cancelled = true;\n          context.log.error(`Error running plugin '${plugin.name}': ${ex.message}. Discarding Event.`);\n        }\n\n        if (context.cancelled && !!callback) {\n          callback(context);\n        }\n      };\n    };\n\n    let plugins: IEventPlugin[] = context.client.config.plugins; // optimization for minifier.\n    let wrappedPlugins: { (): void }[] = [];\n    if (!!callback) {\n      wrappedPlugins[plugins.length] = wrap({ name: 'cb', priority: 9007199254740992, run: callback }, null);\n    }\n\n    for (let index = plugins.length - 1; index > -1; index--) {\n      wrappedPlugins[index] = wrap(plugins[index], !!callback || (index < plugins.length - 1) ? wrappedPlugins[index + 1] : null);\n    }\n\n    wrappedPlugins[0]();\n  }\n\n  public static addDefaultPlugins(config: Configuration): void {\n    config.addPlugin(new ConfigurationDefaultsPlugin());\n    config.addPlugin(new ErrorPlugin());\n    config.addPlugin(new DuplicateCheckerPlugin());\n    config.addPlugin(new EventExclusionPlugin());\n    config.addPlugin(new ModuleInfoPlugin());\n    config.addPlugin(new RequestInfoPlugin());\n    config.addPlugin(new EnvironmentInfoPlugin());\n    config.addPlugin(new SubmissionMethodPlugin());\n  }\n}\n\n                                                                                                                                                               \n\nexport class HeartbeatPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = 'HeartbeatPlugin';\n\n  private _heartbeatInterval: number;\n  private _heartbeatIntervalId: any;\n\n  constructor (heartbeatInterval: number = 30000) {\n    this._heartbeatInterval = heartbeatInterval;\n  }\n\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    let clearHeartbeatInterval = () => {\n      if (this._heartbeatIntervalId) {\n        clearInterval(this._heartbeatIntervalId);\n        this._heartbeatIntervalId = 0;\n      }\n    };\n\n    if (this._heartbeatIntervalId) {\n      clearHeartbeatInterval();\n    }\n\n    let user: IUserInfo = context.event.data['@user'];\n    if (user && user.identity) {\n      this._heartbeatIntervalId = setInterval(() => context.client.submitSessionHeartbeat(user.identity), this._heartbeatInterval);\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                \n\nexport class ReferenceIdPlugin implements IEventPlugin {\n  public priority: number = 20;\n  public name: string = 'ReferenceIdPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    if ((!context.event.reference_id || context.event.reference_id.length === 0) && context.event.type === 'error') {\n      context.event.reference_id = Utils.guid().replace('-', '').substring(0, 10);\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                                     \n\nexport class DefaultEventQueue implements IEventQueue {\n  /**\n   * The configuration object.\n   * @type {Configuration}\n   * @private\n   */\n  private _config: Configuration;\n\n  /**\n   * Suspends processing until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _suspendProcessingUntil: Date;\n\n  /**\n   * Discards queued items until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _discardQueuedItemsUntil: Date;\n\n  /**\n   * Returns true if the queue is processing.\n   * @type {boolean}\n   * @private\n   */\n  private _processingQueue: boolean = false;\n\n  /**\n   * Processes the queue every xx seconds.\n   * @type {Timer}\n   * @private\n   */\n  private _queueTimer: any;\n\n  constructor(config: Configuration) {\n    this._config = config;\n  }\n\n  public enqueue(event: IEvent): void {\n    let config: Configuration = this._config; // Optimization for minifier.\n    this.ensureQueueTimer();\n\n    if (this.areQueuedItemsDiscarded()) {\n      config.log.info('Queue items are currently being discarded. The event will not be queued.');\n      return;\n    }\n\n    let timestamp = config.storage.queue.save(event);\n    let logText = `type=${event.type} ${!!event.reference_id ? 'refid=' + event.reference_id : ''}`;\n    if (timestamp) {\n      config.log.info(`Enqueuing event: ${timestamp} ${logText}`);\n    } else {\n      config.log.error(`Could not enqueue event ${logText}`);\n    }\n  }\n\n  public process(isAppExiting?: boolean): void {\n    const queueNotProcessed: string = 'The queue will not be processed.'; // optimization for minifier.\n    let config: Configuration = this._config; // Optimization for minifier.\n    let log: ILog = config.log; // Optimization for minifier.\n\n    this.ensureQueueTimer();\n\n    if (this._processingQueue) {\n      return;\n    }\n\n    log.info('Processing queue...');\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${queueNotProcessed}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${queueNotProcessed}`);\n      return;\n    }\n\n    this._processingQueue = true;\n\n    try {\n      let events = config.storage.queue.get(config.submissionBatchSize);\n      if (!events || events.length === 0) {\n        this._processingQueue = false;\n        return;\n      }\n\n      log.info(`Sending ${events.length} events to ${config.serverUrl}.`);\n      config.submissionClient.postEvents(events.map(e => e.value), config, (response: SubmissionResponse) => {\n        this.processSubmissionResponse(response, events);\n        log.info('Finished processing queue.');\n        this._processingQueue = false;\n      }, isAppExiting);\n    } catch (ex) {\n      log.error(`Error processing queue: ${ex}`);\n      this.suspendProcessing();\n      this._processingQueue = false;\n    }\n  }\n\n  public suspendProcessing(durationInMinutes?: number, discardFutureQueuedItems?: boolean, clearQueue?: boolean): void {\n    let config: Configuration = this._config; // Optimization for minifier.\n\n    if (!durationInMinutes || durationInMinutes <= 0) {\n      durationInMinutes = 5;\n    }\n\n    config.log.info(`Suspending processing for ${durationInMinutes} minutes.`);\n    this._suspendProcessingUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\n\n    if (discardFutureQueuedItems) {\n      this._discardQueuedItemsUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\n    }\n\n    if (clearQueue) {\n      // Account is over the limit and we want to ensure that the sample size being sent in will contain newer errors.\n      config.storage.queue.clear();\n    }\n  }\n\n  private areQueuedItemsDiscarded(): boolean {\n    return this._discardQueuedItemsUntil && this._discardQueuedItemsUntil > new Date();\n  }\n\n  private ensureQueueTimer(): void {\n    if (!this._queueTimer) {\n      this._queueTimer = setInterval(() => this.onProcessQueue(), 10000);\n    }\n  }\n\n  private isQueueProcessingSuspended(): boolean {\n    return this._suspendProcessingUntil && this._suspendProcessingUntil > new Date();\n  }\n\n  private onProcessQueue(): void {\n    if (!this.isQueueProcessingSuspended() && !this._processingQueue) {\n      this.process();\n    }\n  }\n\n  private processSubmissionResponse(response: SubmissionResponse, events: IStorageItem[]): void {\n    const noSubmission: string = 'The event will not be submitted.'; // Optimization for minifier.\n    let config: Configuration = this._config; // Optimization for minifier.\n    let log: ILog = config.log; // Optimization for minifier.\n\n    if (response.success) {\n      log.info(`Sent ${events.length} events.`);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.serviceUnavailable) {\n      // You are currently over your rate limit or the servers are under stress.\n      log.error('Server returned service unavailable.');\n      this.suspendProcessing();\n      return;\n    }\n\n    if (response.paymentRequired) {\n      // If the organization over the rate limit then discard the event.\n      log.info('Too many events have been submitted, please upgrade your plan.');\n      this.suspendProcessing(null, true, true);\n      return;\n    }\n\n    if (response.unableToAuthenticate) {\n      // The api key was suspended or could not be authorized.\n      log.info(`Unable to authenticate, please check your configuration. ${noSubmission}`);\n      this.suspendProcessing(15);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.notFound || response.badRequest) {\n      // The service end point could not be found.\n      log.error(`Error while trying to submit data: ${response.message}`);\n      this.suspendProcessing(60 * 4);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.requestEntityTooLarge) {\n      let message = 'Event submission discarded for being too large.';\n      if (config.submissionBatchSize > 1) {\n        log.error(`${message} Retrying with smaller batch size.`);\n        config.submissionBatchSize = Math.max(1, Math.round(config.submissionBatchSize / 1.5));\n      } else {\n        log.error(`${message} ${noSubmission}`);\n        this.removeEvents(events);\n      }\n\n      return;\n    }\n\n    if (!response.success) {\n      log.error(`Error submitting events: ${response.message || 'Please check the network tab for more info.'}`);\n      this.suspendProcessing();\n    }\n  }\n\n  private removeEvents(events: IStorageItem[]) {\n    for (let index = 0; index < (events || []).length; index++) {\n      this._config.storage.queue.remove(events[index].timestamp);\n    }\n  }\n}\n\n                                                                                                                                                  \n\nexport class InMemoryStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(maxQueueItems: number = 250) {\n    this.queue = new InMemoryStorage(maxQueueItems);\n    this.settings = new InMemoryStorage(1);\n  }\n\n}\n\nn\ndeclare var XDomainRequest: { new (); create(); };\n\nexport class DefaultSubmissionClient implements ISubmissionClient {\n  public configurationVersionHeader: string = 'x-exceptionless-configversion';\n\n  public postEvents(events: IEvent[], config: Configuration, callback: (response: SubmissionResponse) => void, isAppExiting?: boolean): void {\n    let data = JSON.stringify(events);\n    let request = this.createRequest(config, 'POST',  `${config.serverUrl}/api/v2/events`, data);\n    let cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb, isAppExiting);\n  }\n\n  public postUserDescription(referenceId: string, description: IUserDescription, config: Configuration, callback: (response: SubmissionResponse) => void): void {\n    let path = `${config.serverUrl}/api/v2/events/by-ref/${encodeURIComponent(referenceId)}/user-description`;\n    let data = JSON.stringify(description);\n    let request = this.createRequest(config, 'POST', path, data);\n    let cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public getSettings(config: Configuration, callback: (response: SettingsResponse) => void): void {\n    let request = this.createRequest(config, 'GET', `${config.serverUrl}/api/v2/projects/config`);\n    let cb = (status, message, data?, headers?) => {\n      if (status !== 200) {\n        return callback(new SettingsResponse(false, null, -1, null, message));\n      }\n\n      let settings: IClientConfiguration;\n      try {\n        settings = JSON.parse(data);\n      } catch (e) {\n        config.log.error(`Unable to parse settings: '${data}'`);\n      }\n\n      if (!settings || isNaN(settings.version)) {\n        return callback(new SettingsResponse(false, null, -1, null, 'Invalid configuration settings.'));\n      }\n\n      callback(new SettingsResponse(true, settings.settings || {}, settings.version));\n    };\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public sendHeartbeat(sessionIdOrUserId: string, closeSession: boolean, config: Configuration): void {\n    let request = this.createRequest(config, 'GET', `${config.heartbeatServerUrl}/api/v2/events/session/heartbeat?id=${sessionIdOrUserId}&close=${closeSession}`);\n    config.submissionAdapter.sendRequest(request);\n  }\n\n  private createRequest(config: Configuration, method: string, url: string, data: string = null): SubmissionRequest {\n    return {\n      method,\n      url,\n      data,\n      apiKey: config.apiKey,\n      userAgent: config.userAgent\n    };\n  }\n\n  private createSubmissionCallback(config: Configuration, callback: (response: SubmissionResponse) => void) {\n    return (status, message, data?, headers?) => {\n      let settingsVersion: number = headers && parseInt(headers[this.configurationVersionHeader], 10);\n      SettingsManager.checkVersion(settingsVersion, config);\n\n      callback(new SubmissionResponse(status, message));\n    };\n  }\n}\n\nexport class Utils {\n  public static addRange<T>(target: T[], ...values: T[]) {\n    if (!target) {\n      target = [];\n    }\n\n    if (!values || values.length === 0) {\n      return target;\n    }\n\n    for (let index = 0; index < values.length; index++) {\n      if (values[index] && target.indexOf(values[index]) < 0) {\n        target.push(values[index]);\n      }\n    }\n\n    return target;\n  }\n\n  public static getHashCode(source: string): number {\n    if (!source || source.length === 0) {\n      return 0;\n    }\n\n    let hash: number = 0;\n    for (let index = 0; index < source.length; index++) {\n      let character = source.charCodeAt(index);\n      hash = ((hash << 5) - hash) + character;\n      hash |= 0;\n    }\n\n    return hash;\n  }\n\n  public static getCookies(cookies: string, exclusions?: string[]): Object {\n    let result: Object = {};\n\n    let parts: string[] = (cookies || '').split('; ');\n    for (let index = 0; index < parts.length; index++) {\n      let cookie: string[] = parts[index].split('=');\n      if (!Utils.isMatch(cookie[0], exclusions)) {\n        result[cookie[0]] = cookie[1];\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static guid(): string {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    }\n\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n  }\n\n  public static merge(defaultValues: Object, values: Object) {\n    let result: Object = {};\n\n    for (let key in defaultValues || {}) {\n      if (!!defaultValues[key]) {\n        result[key] = defaultValues[key];\n      }\n    }\n\n    for (let key in values || {}) {\n      if (!!values[key]) {\n        result[key] = values[key];\n      }\n    }\n\n    return result;\n  }\n\n  public static parseVersion(source: string): string {\n    if (!source) {\n      return null;\n    }\n\n    let versionRegex = /(v?((\\d+)\\.(\\d+)(\\.(\\d+))?)(?:-([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?(?:\\+([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?)/;\n    let matches = versionRegex.exec(source);\n    if (matches && matches.length > 0) {\n      return matches[0];\n    }\n\n    return null;\n  }\n\n  public static parseQueryString(query: string, exclusions?: string[]) {\n    if (!query || query.length === 0) {\n      return null;\n    }\n\n    let pairs: string[] = query.split('&');\n    if (pairs.length === 0) {\n      return null;\n    }\n\n    let result: Object = {};\n    for (let index = 0; index < pairs.length; index++) {\n      let pair = pairs[index].split('=');\n      if (!Utils.isMatch(pair[0], exclusions)) {\n        result[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static randomNumber(): number {\n    return Math.floor(Math.random() * 9007199254740992);\n  }\n\n  /**\n   * Checks to see if a value matches a pattern.\n   * @param input the value to check against the @pattern.\n   * @param pattern The pattern to check, supports wild cards (*).\n   */\n  public static isMatch(input: string, patterns: string[], ignoreCase: boolean = true): boolean {\n    if (!input || typeof input !== 'string') {\n      return false;\n    }\n\n    let trim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n    input = (ignoreCase ? input.toLowerCase() : input).replace(trim, '');\n\n    return (patterns || []).some(pattern => {\n      if (typeof pattern !== 'string') {\n        return false;\n      }\n\n      pattern = (ignoreCase ? pattern.toLowerCase() : pattern).replace(trim, '');\n      if (pattern.length <= 0) {\n        return false;\n      }\n\n      let startsWithWildcard: boolean = pattern[0] === '*';\n      if (startsWithWildcard) {\n        pattern = pattern.slice(1);\n      }\n\n      let endsWithWildcard: boolean = pattern[pattern.length - 1] === '*';\n      if (endsWithWildcard) {\n        pattern = pattern.substring(0, pattern.length - 1);\n      }\n\n      if (startsWithWildcard && endsWithWildcard) {\n        return pattern.length <= input.length && input.indexOf(pattern, 0) !== -1;\n      }\n\n      if (startsWithWildcard) {\n        return Utils.endsWith(input, pattern);\n      }\n\n      if (endsWithWildcard) {\n        return Utils.startsWith(input, pattern);\n      }\n\n      return input === pattern;\n    });\n  }\n\n  public static isEmpty(input: Object) {\n    return input === null || (typeof (input) === 'object' && Object.keys(input).length === 0);\n  }\n\n  public static startsWith(input: string, prefix: string): boolean {\n    return input.substring(0, prefix.length) === prefix;\n  }\n\n  public static endsWith(input: string, suffix: string): boolean {\n    return input.indexOf(suffix, input.length - suffix.length) !== -1;\n  }\n\n  /**\n   * Stringifys an object with optional exclusions and max depth.\n   * @param data The data object to add.\n   * @param exclusions Any property names that should be excluded.\n   * @param maxDepth The max depth of the object to include.\n   */\n  public static stringify(data: any, exclusions?: string[], maxDepth?: number): string {\n    function stringifyImpl(obj: any, excludedKeys: string[]): string {\n      let cache: string[] = [];\n      return JSON.stringify(obj, function(key: string, value: any) {\n        if (Utils.isMatch(key, excludedKeys)) {\n          return;\n        }\n\n        if (typeof value === 'object' && !!value) {\n          if (cache.indexOf(value) !== -1) {\n            // Circular reference found, discard key\n            return;\n          }\n\n          cache.push(value);\n        }\n\n        return value;\n      });\n    }\n\n    if (({}).toString.call(data) === '[object Object]') {\n      let flattened = {};\n      /* tslint:disable:forin */\n      for (let prop in data) {\n        let value = data[prop];\n        if (value === data) {\n          continue;\n        }\n        flattened[prop] = data[prop];\n      }\n      /* tslint:enable:forin */\n\n      return stringifyImpl(flattened, exclusions);\n    }\n\n    if (({}).toString.call(data) === '[object Array]') {\n      let result = [];\n      for (let index = 0; index < data.length; index++) {\n        result[index] = JSON.parse(stringifyImpl(data[index], exclusions));\n      }\n\n      return JSON.stringify(result);\n    }\n\n    return stringifyImpl(data, exclusions);\n  }\n}\n\nn\nexport class Configuration implements IConfigurationSettings {\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @type {IConfigurationSettings}\n   * @private\n   */\n  private static _defaultSettings: IConfigurationSettings = null;\n\n  /**\n   * A default list of tags that will automatically be added to every\n   * report submitted to the server.\n   *\n   * @type {Array}\n   */\n  public defaultTags: string[] = [];\n\n  /**\n   * A default list of of extended data objects that will automatically\n   * be added to every report submitted to the server.\n   *\n   * @type {{}}\n   */\n  public defaultData: Object = {};\n\n  /**\n   * Whether the client is currently enabled or not. If it is disabled,\n   * submitted errors will be discarded and no data will be sent to the server.\n   *\n   * @returns {boolean}\n   */\n  public enabled: boolean = true;\n\n  public environmentInfoCollector: IEnvironmentInfoCollector;\n  public errorParser: IErrorParser;\n  public lastReferenceIdManager: ILastReferenceIdManager = new DefaultLastReferenceIdManager();\n  public log: ILog;\n  public moduleCollector: IModuleCollector;\n  public requestInfoCollector: IRequestInfoCollector;\n\n  /**\n   * Maximum number of events that should be sent to the server together in a batch. (Defaults to 50)\n   */\n  public submissionBatchSize: number;\n  public submissionAdapter: ISubmissionAdapter;\n  public submissionClient: ISubmissionClient;\n\n  /**\n   * Contains a dictionary of custom settings that can be used to control\n   * the client and will be automatically updated from the server.\n   */\n  public settings: Object = {};\n\n  public storage: IStorageProvider;\n\n  public queue: IEventQueue;\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @type {Array}\n   * @private\n   */\n  private _plugins: IEventPlugin[] = [];\n\n  constructor(configSettings?: IConfigurationSettings) {\n    function inject(fn: any) {\n      return typeof fn === 'function' ? fn(this) : fn;\n    }\n\n    configSettings = Utils.merge(Configuration.defaults, configSettings);\n\n    this.log = inject(configSettings.log) || new NullLog();\n    this.apiKey = configSettings.apiKey;\n    this.serverUrl = configSettings.serverUrl;\n    this.heartbeatServerUrl = configSettings.heartbeatServerUrl;\n\n    this.environmentInfoCollector = inject(configSettings.environmentInfoCollector);\n    this.errorParser = inject(configSettings.errorParser);\n    this.lastReferenceIdManager = inject(configSettings.lastReferenceIdManager) || new DefaultLastReferenceIdManager();\n    this.moduleCollector = inject(configSettings.moduleCollector);\n    this.requestInfoCollector = inject(configSettings.requestInfoCollector);\n    this.submissionBatchSize = inject(configSettings.submissionBatchSize) || 50;\n    this.submissionAdapter = inject(configSettings.submissionAdapter);\n    this.submissionClient = inject(configSettings.submissionClient) || new DefaultSubmissionClient();\n    this.storage = inject(configSettings.storage) || new InMemoryStorageProvider();\n    this.queue = inject(configSettings.queue) || new DefaultEventQueue(this);\n\n    SettingsManager.applySavedServerSettings(this);\n    EventPluginManager.addDefaultPlugins(this);\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @type {string}\n   * @private\n   */\n  private _apiKey: string;\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @returns {string}\n   */\n  public get apiKey(): string {\n    return this._apiKey;\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @param value\n   */\n  public set apiKey(value: string) {\n    this._apiKey = value || null;\n    this.log.info(`apiKey: ${this._apiKey}`);\n  }\n\n  /**\n   * Returns true if the apiKey is valid.\n   * @returns {boolean}\n   */\n  public get isValid(): boolean {\n    return !!this.apiKey && this.apiKey.length >= 10;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _serverUrl: string = 'https://collector.exceptionless.io';\n\n  /**\n   * The server url that all events will be sent to.\n   * @returns {string}\n   */\n  public get serverUrl(): string {\n    return this._serverUrl;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @param value\n   */\n  public set serverUrl(value: string) {\n    if (!!value) {\n      this._serverUrl = value;\n      this._heartbeatServerUrl = value;\n      this.log.info(`serverUrl: ${this._serverUrl}`);\n    }\n  }\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _heartbeatServerUrl: string = 'https://heartbeat.exceptionless.io';\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @returns {string}\n   */\n  public get heartbeatServerUrl(): string {\n    return this._heartbeatServerUrl;\n  }\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @param value\n   */\n  public set heartbeatServerUrl(value: string) {\n    if (!!value) {\n      this._heartbeatServerUrl = value;\n      this.log.info(`heartbeatServerUrl: ${this._heartbeatServerUrl}`);\n    }\n  }\n\n  /**\n   * A list of exclusion patterns.\n   * @type {Array}\n   * @private\n   */\n  private _dataExclusions: string[] = [];\n\n  /**\n   * A list of user agent patterns.\n   * @type {Array}\n   * @private\n   */\n  private _userAgentBotPatterns: string[] = [];\n\n  /**\n   *  A list of exclusion patterns that will automatically remove any data that\n   *  matches them from any data submitted to the server.\n   *\n   *  For example, entering CreditCard will remove any extended data properties,\n   *  form fields, cookies and query parameters from the report.\n   *\n   * @returns {string[]}\n   */\n  public get dataExclusions(): string[] {\n    let exclusions: string = this.settings['@@DataExclusions'];\n    return this._dataExclusions.concat(exclusions && exclusions.split(',') || []);\n  }\n\n  /**\n   * Add items to the list of exclusion patterns that will automatically remove any\n   * data that matches them from any data submitted to the server.\n   *\n   * For example, entering CreditCard will remove any extended data properties, form\n   * fields, cookies and query parameters from the report.\n   *\n   * @param exclusions\n   */\n  public addDataExclusions(...exclusions: string[]) {\n    this._dataExclusions = Utils.addRange<string>(this._dataExclusions, ...exclusions);\n  }\n\n  /**\n   * A list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @returns {string[]}\n   */\n  public get userAgentBotPatterns(): string[] {\n    let patterns: string = this.settings['@@UserAgentBotPatterns'];\n    return this._userAgentBotPatterns.concat(patterns && patterns.split(',') || []);\n  }\n\n  /**\n   * Add items to the list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @param userAgentBotPatterns\n   */\n  public addUserAgentBotPatterns(...userAgentBotPatterns: string[]) {\n    this._userAgentBotPatterns = Utils.addRange<string>(this._userAgentBotPatterns, ...userAgentBotPatterns);\n  }\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @returns {IEventPlugin[]}\n   */\n  public get plugins(): IEventPlugin[] {\n    return this._plugins.sort((p1: IEventPlugin, p2: IEventPlugin) => {\n      return (p1.priority < p2.priority) ? -1 : (p1.priority > p2.priority) ? 1 : 0;\n    });\n  }\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param plugin\n   */\n  public addPlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param name The name used to identify the plugin.\n   * @param priority Used to determine plugins priority.\n   * @param pluginAction A function that is run.\n   */\n  public addPlugin(name: string, priority: number, pluginAction: (context: EventPluginContext, next?: () => void) => void): void;\n  public addPlugin(pluginOrName: IEventPlugin | string, priority?: number, pluginAction?: (context: EventPluginContext, next?: () => void) => void): void {\n    let plugin: IEventPlugin = !!pluginAction ? { name: <string>pluginOrName, priority: priority, run: pluginAction } : <IEventPlugin>pluginOrName;\n    if (!plugin || !plugin.run) {\n      this.log.error('Add plugin failed: Run method not defined');\n      return;\n    }\n\n    if (!plugin.name) {\n      plugin.name = Utils.guid();\n    }\n\n    if (!plugin.priority) {\n      plugin.priority = 0;\n    }\n\n    let pluginExists: boolean = false;\n    let plugins = this._plugins; // optimization for minifier.\n    for (let index = 0; index < plugins.length; index++) {\n      if (plugins[index].name === plugin.name) {\n        pluginExists = true;\n        break;\n      }\n    }\n\n    if (!pluginExists) {\n      plugins.push(plugin);\n    }\n  }\n\n  /**\n   * Remove the plugin from this configuration.\n   * @param plugin\n   */\n  public removePlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Remove an plugin by key from this configuration.\n   * @param name\n   */\n  public removePlugin(name: string): void;\n  public removePlugin(pluginOrName: IEventPlugin | string): void {\n    let name: string = typeof pluginOrName === 'string' ? pluginOrName : pluginOrName.name;\n    if (!name) {\n      this.log.error('Remove plugin failed: Plugin name not defined');\n      return;\n    }\n\n    let plugins = this._plugins; // optimization for minifier.\n    for (let index = 0; index < plugins.length; index++) {\n      if (plugins[index].name === name) {\n        plugins.splice(index, 1);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Automatically set the application version for events.\n   * @param version\n   */\n  public setVersion(version: string): void {\n    if (!!version) {\n      this.defaultData['@version'] = version;\n    }\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): void;\n  public setUserIdentity(identity: string): void;\n  public setUserIdentity(identity: string, name: string): void;\n  public setUserIdentity(userInfoOrIdentity: IUserInfo | string, name?: string): void {\n    const USER_KEY: string = '@user'; // optimization for minifier.\n    let userInfo: IUserInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name: name };\n\n    let shouldRemove: boolean = !userInfo || (!userInfo.identity && !userInfo.name);\n    if (shouldRemove) {\n      delete this.defaultData[USER_KEY];\n    } else {\n      this.defaultData[USER_KEY] = userInfo;\n    }\n\n    this.log.info(`user identity: ${shouldRemove ? 'null' : userInfo.identity}`);\n  }\n\n  /**\n   * Used to identify the client that sent the events to the server.\n   * @returns {string}\n   */\n  public get userAgent(): string {\n    return 'exceptionless-js/1.0.0.0';\n  }\n\n  /**\n   * Automatically send a heartbeat to keep the session alive.\n   */\n  public useSessions(sendHeartbeats: boolean = true, heartbeatInterval: number = 30000): void {\n    if (sendHeartbeats) {\n      this.addPlugin(new HeartbeatPlugin(heartbeatInterval));\n    }\n  }\n\n  /**\n   * Automatically set a reference id for error events.\n   */\n  public useReferenceIds(): void {\n    this.addPlugin(new ReferenceIdPlugin());\n  }\n\n  public useLocalStorage(): void {\n    // This method will be injected via the prototype.\n  }\n\n  // TODO: Support a min log level.\n  public useDebugLogger(): void {\n    this.log = new ConsoleLog();\n  }\n\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @returns {IConfigurationSettings}\n   */\n  public static get defaults() {\n    if (Configuration._defaultSettings === null) {\n      Configuration._defaultSettings = {};\n    }\n\n    return Configuration._defaultSettings;\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                   \n\nexport class EventBuilder {\n  public target: IEvent;\n  public client: ExceptionlessClient;\n  public pluginContextData: ContextData;\n\n  private _validIdentifierErrorMessage: string = 'must contain between 8 and 100 alphanumeric or \\'-\\' characters.'; // optimization for minifier.\n\n  constructor(event: IEvent, client: ExceptionlessClient, pluginContextData?: ContextData) {\n    this.target = event;\n    this.client = client;\n    this.pluginContextData = pluginContextData || new ContextData();\n  }\n\n  public setType(type: string): EventBuilder {\n    if (!!type) {\n      this.target.type = type;\n    }\n\n    return this;\n  }\n\n  public setSource(source: string): EventBuilder {\n    if (!!source) {\n      this.target.source = source;\n    }\n\n    return this;\n  }\n\n  public setReferenceId(referenceId: string): EventBuilder {\n    if (!this.isValidIdentifier(referenceId)) {\n      throw new Error(`ReferenceId ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.target.reference_id = referenceId;\n    return this;\n  }\n\n  /**\n   * Allows you to reference a parent event by its ReferenceId property. This allows you to have parent and child relationships.\n   * @param name Reference name\n   * @param id The reference id that points to a specific event\n   * @returns {EventBuilder}\n     */\n  public setEventReference(name: string, id: string): EventBuilder {\n    if (!name) {\n      throw new Error('Invalid name');\n    }\n\n    if (!id || !this.isValidIdentifier(id)) {\n      throw new Error(`Id ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.setProperty('@ref:' + name, id);\n    return this;\n  }\n\n  public setMessage(message: string): EventBuilder {\n    if (!!message) {\n      this.target.message = message;\n    }\n\n    return this;\n  }\n\n  public setGeo(latitude: number, longitude: number): EventBuilder {\n    if (latitude < -90.0 || latitude > 90.0) {\n      throw new Error('Must be a valid latitude value between -90.0 and 90.0.');\n    }\n\n    if (longitude < -180.0 || longitude > 180.0) {\n      throw new Error('Must be a valid longitude value between -180.0 and 180.0.');\n    }\n\n    this.target.geo = `${latitude},${longitude}`;\n    return this;\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): EventBuilder;\n  public setUserIdentity(identity: string): EventBuilder;\n  public setUserIdentity(identity: string, name: string): EventBuilder;\n  public setUserIdentity(userInfoOrIdentity: IUserInfo | string, name?: string): EventBuilder {\n    let userInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name: name };\n    if (!userInfo || (!userInfo.identity && !userInfo.name)) {\n      return this;\n    }\n\n    this.setProperty('@user', userInfo);\n    return this;\n  }\n\n  /**\n   * Sets the user's description of the event.\n   *\n   * @param emailAddress The email address\n   * @param description The user's description of the event.\n   * @returns {EventBuilder}\n     */\n  public setUserDescription(emailAddress: string, description: string): EventBuilder {\n    if (emailAddress && description) {\n      this.setProperty('@user_description', { email_address: emailAddress, description: description });\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting manual\n   * stacking information.\n   * @param signatureData A dictionary of strings to use for stacking.\n   * @param title An optional title for the stacking information.\n   * @returns {EventBuilder}\n     */\n  public setManualStackingInfo(signatureData: any, title?: string) {\n    if (signatureData) {\n      let stack = <IManualStackingInfo>{\n        signature_data: signatureData\n      };\n      if (title) {\n        stack.title = title;\n      }\n      this.setProperty('@stack', stack);\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting the stacking key.\n   * @param manualStackingKey The manual stacking key.\n   * @param title An optional title for the stacking information.\n   * @returns {EventBuilder}\n     */\n  public setManualStackingKey(manualStackingKey: string, title?: string): EventBuilder {\n    if (manualStackingKey) {\n      let data = {\n        'ManualStackingKey': manualStackingKey\n      };\n      this.setManualStackingInfo(data, title);\n    }\n\n    return this;\n  }\n\n  public setValue(value: number): EventBuilder {\n    if (!!value) {\n      this.target.value = value;\n    }\n\n    return this;\n  }\n\n  public addTags(...tags: string[]): EventBuilder {\n    this.target.tags = Utils.addRange<string>(this.target.tags, ...tags);\n    return this;\n  }\n\n  /**\n   * Adds the object to extended data. Uses @excludedPropertyNames\n   * to exclude data from being included in the event.\n   * @param name The data object to add.\n   * @param value The name of the object to add.\n   * @param maxDepth The max depth of the object to include.\n   * @param excludedPropertyNames Any property names that should be excluded.\n   */\n  public setProperty(name: string, value: any, maxDepth?: number, excludedPropertyNames?: string[]): EventBuilder {\n    if (!name || (value === undefined || value == null)) {\n      return this;\n    }\n\n    if (!this.target.data) {\n      this.target.data = {};\n    }\n\n    let result = JSON.parse(Utils.stringify(value, this.client.config.dataExclusions.concat(excludedPropertyNames || []), maxDepth));\n    if (!Utils.isEmpty(result)) {\n      this.target.data[name] = result;\n    }\n\n    return this;\n  }\n\n  public markAsCritical(critical: boolean): EventBuilder {\n    if (critical) {\n      this.addTags('Critical');\n    }\n\n    return this;\n  }\n\n  public addRequestInfo(request: Object): EventBuilder {\n    if (!!request) {\n      this.pluginContextData['@request'] = request;\n    }\n\n    return this;\n  }\n\n  public submit(callback?: (context: EventPluginContext) => void): void {\n    this.client.submitEvent(this.target, this.pluginContextData, callback);\n  }\n\n  private isValidIdentifier(value: string): boolean {\n    if (!value) {\n      return true;\n    }\n\n    if (value.length < 8 || value.length > 100) {\n      return false;\n    }\n\n    for (let index = 0; index < value.length; index++) {\n      let code = value.charCodeAt(index);\n      let isDigit = (code >= 48) && (code <= 57);\n      let isLetter = ((code >= 65) && (code <= 90)) || ((code >= 97) && (code <= 122));\n      let isMinus = code === 45;\n\n      if (!(isDigit || isLetter) && !isMinus) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nexport interface IUserDescription {\n  email_address?: string;\n  description?: string;\n  data?: any;\n}\n\nexport class ContextData {\n  public setException(exception: Error): void {\n    if (exception) {\n      this['@@_Exception'] = exception;\n    }\n  }\n\n  public get hasException(): boolean {\n    return !!this['@@_Exception'];\n  }\n\n  public getException(): Error {\n    return this['@@_Exception'] || null;\n  }\n\n  public markAsUnhandledError(): void {\n    this['@@_IsUnhandledError'] = true;\n  }\n\n  public get isUnhandledError(): boolean {\n    return !!this['@@_IsUnhandledError'];\n  }\n\n  public setSubmissionMethod(method: string): void {\n    if (method) {\n      this['@@_SubmissionMethod'] = method;\n    }\n  }\n\n  public getSubmissionMethod(): string {\n    return this['@@_SubmissionMethod'] || null;\n  }\n}\n\nexport class SubmissionResponse {\n  public success: boolean = false;\n  public badRequest: boolean = false;\n  public serviceUnavailable: boolean = false;\n  public paymentRequired: boolean = false;\n  public unableToAuthenticate: boolean = false;\n  public notFound: boolean = false;\n  public requestEntityTooLarge: boolean = false;\n  public statusCode: number;\n  public message: string;\n\n  constructor(statusCode: number, message?: string) {\n    this.statusCode = statusCode;\n    this.message = message;\n\n    this.success = statusCode >= 200 && statusCode <= 299;\n    this.badRequest = statusCode === 400;\n    this.serviceUnavailable = statusCode === 503;\n    this.paymentRequired = statusCode === 402;\n    this.unableToAuthenticate = statusCode === 401 || statusCode === 403;\n    this.notFound = statusCode === 404;\n    this.requestEntityTooLarge = statusCode === 413;\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n\nexport class ExceptionlessClient {\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   * @private\n   */\n  private static _instance: ExceptionlessClient = null;\n\n  public config: Configuration;\n\n  constructor();\n  constructor(settings: IConfigurationSettings);\n  constructor(apiKey: string, serverUrl?: string);\n  constructor(settingsOrApiKey?: IConfigurationSettings | string, serverUrl?: string) {\n    if (typeof settingsOrApiKey === 'object') {\n      this.config = new Configuration(settingsOrApiKey);\n    } else {\n      this.config = new Configuration({ apiKey: <string>settingsOrApiKey, serverUrl: serverUrl });\n    }\n  }\n\n  public createException(exception: Error): EventBuilder {\n    let pluginContextData = new ContextData();\n    pluginContextData.setException(exception);\n    return this.createEvent(pluginContextData).setType('error');\n  }\n\n  public submitException(exception: Error, callback?: (context: EventPluginContext) => void): void {\n    this.createException(exception).submit(callback);\n  }\n\n  public createUnhandledException(exception: Error, submissionMethod?: string): EventBuilder {\n    let builder = this.createException(exception);\n    builder.pluginContextData.markAsUnhandledError();\n    builder.pluginContextData.setSubmissionMethod(submissionMethod);\n\n    return builder;\n  }\n\n  public submitUnhandledException(exception: Error, submissionMethod?: string, callback?: (context: EventPluginContext) => void) {\n    this.createUnhandledException(exception, submissionMethod).submit(callback);\n  }\n\n  public createFeatureUsage(feature: string): EventBuilder {\n    return this.createEvent().setType('usage').setSource(feature);\n  }\n\n  public submitFeatureUsage(feature: string, callback?: (context: EventPluginContext) => void): void {\n    this.createFeatureUsage(feature).submit(callback);\n  }\n\n  public createLog(message: string): EventBuilder;\n  public createLog(source: string, message: string): EventBuilder;\n  public createLog(source: string, message: string, level: string): EventBuilder;\n  public createLog(sourceOrMessage: string, message?: string, level?: string): EventBuilder {\n    let builder = this.createEvent().setType('log');\n\n    if (message && level) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message).setProperty('@level', level);\n    } else if (message) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message);\n    } else {\n      // TODO: Look into using https://www.stevefenton.co.uk/Content/Blog/Date/201304/Blog/Obtaining-A-Class-Name-At-Runtime-In-TypeScript/\n      let caller: any = arguments.callee.caller;\n      builder = builder.setSource(caller && caller.name).setMessage(sourceOrMessage);\n    }\n\n    return builder;\n  }\n\n  public submitLog(message: string): void;\n  public submitLog(source: string, message: string): void;\n  public submitLog(source: string, message: string, level: string, callback?: (context: EventPluginContext) => void): void;\n  public submitLog(sourceOrMessage: string, message?: string, level?: string, callback?: (context: EventPluginContext) => void): void {\n    this.createLog(sourceOrMessage, message, level).submit(callback);\n  }\n\n  public createNotFound(resource: string): EventBuilder {\n    return this.createEvent().setType('404').setSource(resource);\n  }\n\n  public submitNotFound(resource: string, callback?: (context: EventPluginContext) => void): void {\n    this.createNotFound(resource).submit(callback);\n  }\n\n  public createSessionStart(): EventBuilder {\n    return this.createEvent().setType('session');\n  }\n\n  public submitSessionStart(callback?: (context: EventPluginContext) => void): void {\n    this.createSessionStart().submit(callback);\n  }\n\n  public submitSessionEnd(sessionIdOrUserId: string): void {\n    if (sessionIdOrUserId) {\n      this.config.log.info(`Submitting session end: ${sessionIdOrUserId}`);\n      this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, true, this.config);\n    }\n  }\n\n  public submitSessionHeartbeat(sessionIdOrUserId: string): void {\n    if (sessionIdOrUserId) {\n      this.config.log.info(`Submitting session heartbeat: ${sessionIdOrUserId}`);\n      this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, false, this.config);\n    }\n  }\n\n  public createEvent(pluginContextData?: ContextData): EventBuilder {\n    return new EventBuilder({ date: new Date() }, this, pluginContextData);\n  }\n\n  /**\n   * Submits the event to be sent to the server.\n   * @param event The event data.\n   * @param pluginContextData Any contextual data objects to be used by Exceptionless plugins to gather default information for inclusion in the report information.\n   * @param callback\n   */\n  public submitEvent(event: IEvent, pluginContextData?: ContextData, callback?: (context: EventPluginContext) => void): void {\n    function cancelled(context: EventPluginContext) {\n      if (!!context) {\n        context.cancelled = true;\n      }\n\n      return !!callback && callback(context);\n    }\n\n    let context = new EventPluginContext(this, event, pluginContextData);\n    if (!event) {\n      return cancelled(context);\n    }\n\n    if (!this.config.enabled) {\n      this.config.log.info('Event submission is currently disabled.');\n      return cancelled(context);\n    }\n\n    if (!event.data) {\n      event.data = {};\n    }\n\n    if (!event.tags || !event.tags.length) {\n      event.tags = [];\n    }\n\n    EventPluginManager.run(context, function(ctx: EventPluginContext) {\n      let ev = ctx.event;\n      if (!ctx.cancelled) {\n        // ensure all required data\n        if (!ev.type || ev.type.length === 0) {\n          ev.type = 'log';\n        }\n\n        if (!ev.date) {\n          ev.date = new Date();\n        }\n\n        let config = ctx.client.config;\n        config.queue.enqueue(ev);\n\n        if (ev.reference_id && ev.reference_id.length > 0) {\n          ctx.log.info(`Setting last reference id '${ev.reference_id}'`);\n          config.lastReferenceIdManager.setLast(ev.reference_id);\n        }\n      }\n\n      !!callback && callback(ctx);\n    });\n  }\n\n  /**\n   * Updates the user's email address and description of an event for the specified reference id.\n   * @param referenceId The reference id of the event to update.\n   * @param email The user's email address to set on the event.\n   * @param description The user's description of the event.\n   * @param callback The submission response.\n   */\n  public updateUserEmailAndDescription(referenceId: string, email: string, description: string, callback?: (response: SubmissionResponse) => void) {\n    if (!referenceId || !email || !description || !this.config.enabled) {\n      return !!callback && callback(new SubmissionResponse(500, 'cancelled'));\n    }\n\n    let userDescription: IUserDescription = { email_address: email, description: description };\n    this.config.submissionClient.postUserDescription(referenceId, userDescription, this.config, (response: SubmissionResponse) => {\n      if (!response.success) {\n        this.config.log.error(`Failed to submit user email and description for event '${referenceId}': ${response.statusCode} ${response.message}`);\n      }\n\n      !!callback && callback(response);\n    });\n  }\n\n  /**\n   * Gets the last event client id that was submitted to the server.\n   * @returns {string} The event client id.\n   */\n  public getLastReferenceId(): string {\n    return this.config.lastReferenceIdManager.getLast();\n  }\n\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   */\n  public static get default() {\n    if (ExceptionlessClient._instance === null) {\n      ExceptionlessClient._instance = new ExceptionlessClient(null);\n    }\n\n    return ExceptionlessClient._instance;\n  }\n}\n\nexport interface IManualStackingInfo {\n  title?: string;\n  signature_data?: any;\n}\n\nexport interface IModule {\n  data?: any;\n\n  module_id?: number;\n  name?: string;\n  version?: string;\n  is_entry?: boolean;\n  created_date?: Date;\n  modified_date?: Date;\n}\n\nexport interface IRequestInfo {\n  user_agent?: string;\n  http_method?: string;\n  is_secure?: boolean;\n  host?: string;\n  port?: number;\n  path?: string;\n  referrer?: string;\n  client_ip_address?: string;\n  cookies?: any;\n  post_data?: any;\n  query_string?: any;\n  data?: any;\n}\n\nexport interface IEnvironmentInfo {\n  processor_count?: number;\n  total_physical_memory?: number;\n  available_physical_memory?: number;\n  command_line?: string;\n  process_name?: string;\n  process_id?: string;\n  process_memory_size?: number;\n  thread_id?: string;\n  architecture?: string;\n  o_s_name?: string;\n  o_s_version?: string;\n  ip_address?: string;\n  machine_name?: string;\n  install_id?: string;\n  runtime_version?: string;\n  data?: any;\n}\n\nexport interface IParameter {\n  data?: any;\n  generic_arguments?: string[];\n\n  name?: string;\n  type?: string;\n  type_namespace?: string;\n}\n\n                                          \n\nexport interface IMethod {\n  data?: any;\n  generic_arguments?: string[];\n  parameters?: IParameter[];\n\n  is_signature_target?: boolean;\n  declaring_namespace?: string;\n  declaring_type?: string;\n  name?: string;\n  module_id?: number;\n}\n\n                                    \n\nexport interface IStackFrame extends IMethod {\n  file_name?: string;\n  line_number?: number;\n  column?: number;\n}\n\n                                                                                 \n\nexport interface IInnerError {\n  message?: string;\n  type?: string;\n  code?: string;\n  data?: any;\n  inner?: IInnerError;\n  stack_trace?: IStackFrame[];\n  target_method?: IMethod;\n}\n\n                                                                                                                                                \n\nexport class ConfigurationDefaultsPlugin implements IEventPlugin {\n  public priority: number = 10;\n  public name: string = 'ConfigurationDefaultsPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    let config = context.client.config;\n    let defaultTags: string[] = config.defaultTags || [];\n    for (let index = 0; index < defaultTags.length; index++) {\n      let tag = defaultTags[index];\n      if (!!tag && context.event.tags.indexOf(tag) < 0) {\n        context.event.tags.push(tag);\n      }\n    }\n\n    let defaultData: Object = config.defaultData || {};\n    for (let key in defaultData) {\n      if (!!defaultData[key]) {\n        let result = JSON.parse(Utils.stringify(defaultData[key], config.dataExclusions));\n        if (!Utils.isEmpty(result)) {\n          context.event.data[key] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                \n\nexport class ErrorPlugin implements IEventPlugin {\n  public priority: number = 30;\n  public name: string = 'ErrorPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\n    let ignoredProperties: string[] = [\n      'arguments',\n      'column',\n      'columnNumber',\n      'description',\n      'fileName',\n      'message',\n      'name',\n      'number',\n      'line',\n      'lineNumber',\n      'opera#sourceloc',\n      'sourceId',\n      'sourceURL',\n      'stack',\n      'stackArray',\n      'stacktrace'\n    ];\n\n    let exception = context.contextData.getException();\n    if (!!exception) {\n      context.event.type = 'error';\n\n      if (!context.event.data[ERROR_KEY]) {\n        let config = context.client.config;\n        let parser = config.errorParser;\n        if (!parser) {\n          throw new Error('No error parser was defined.');\n        }\n\n        let result = parser.parse(context, exception);\n        if (!!result) {\n          let additionalData = JSON.parse(Utils.stringify(exception, config.dataExclusions.concat(ignoredProperties)));\n          if (!Utils.isEmpty(additionalData)) {\n            if (!result.data) {\n              result.data = {};\n            }\n            result.data['@ext'] = additionalData;\n          }\n\n          context.event.data[ERROR_KEY] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                           \n\nexport class ModuleInfoPlugin implements IEventPlugin {\n  public priority: number = 50;\n  public name: string = 'ModuleInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\n\n    let collector = context.client.config.moduleCollector;\n    if (context.event.data[ERROR_KEY] && !context.event.data['@error'].modules && !!collector) {\n      let modules: IModule[] = collector.getModules(context);\n      if (modules && modules.length > 0) {\n        context.event.data[ERROR_KEY].modules = modules;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                          \n\nexport class RequestInfoPlugin implements IEventPlugin {\n  public priority: number = 70;\n  public name: string = 'RequestInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const REQUEST_KEY: string = '@request'; // optimization for minifier.\n\n    let config = context.client.config;\n    let collector = config.requestInfoCollector;\n    if (!context.event.data[REQUEST_KEY] && !!collector) {\n      let requestInfo: IRequestInfo = collector.getRequestInfo(context);\n      if (!!requestInfo) {\n        if (Utils.isMatch(requestInfo.user_agent, config.userAgentBotPatterns)) {\n          context.log.info('Cancelling event as the request user agent matches a known bot pattern');\n          context.cancelled = true;\n        } else {\n          context.event.data[REQUEST_KEY] = requestInfo;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                             \n\nexport class EnvironmentInfoPlugin implements IEventPlugin {\n  public priority: number = 80;\n  public name: string = 'EnvironmentInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ENVIRONMENT_KEY: string = '@environment'; // optimization for minifier.\n\n    let collector = context.client.config.environmentInfoCollector;\n    if (!context.event.data[ENVIRONMENT_KEY] && collector) {\n      let environmentInfo: IEnvironmentInfo = collector.getEnvironmentInfo(context);\n      if (!!environmentInfo) {\n        context.event.data[ENVIRONMENT_KEY] = environmentInfo;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                           \n\nexport class SubmissionMethodPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = 'SubmissionMethodPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    let submissionMethod: string = context.contextData.getSubmissionMethod();\n    if (!!submissionMethod) {\n      context.event.data['@submission_method'] = submissionMethod;\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                                                                   \n\nexport class DuplicateCheckerPlugin implements IEventPlugin {\n  public priority: number = 40;\n  public name: string = 'DuplicateCheckerPlugin';\n\n  private _processedHashcodes: TimestampedHash[] = [];\n  private _getCurrentTime: () => number;\n\n  constructor(getCurrentTime: () => number = () => Date.now()) {\n    this._getCurrentTime = getCurrentTime;\n  }\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    function isDuplicate(error: IInnerError, processedHashcodes, now, log: ILog): boolean {\n      while (error) {\n        let hashCode = Utils.getHashCode(error.stack_trace && JSON.stringify(error.stack_trace));\n\n        // Only process the unique errors times within a 2 second window.\n        if (hashCode && processedHashcodes.some(h => h.hash === hashCode && h.timestamp >= (now - 2000))) {\n          log.info(`Ignoring duplicate error event hash: ${hashCode}`);\n          return true;\n        }\n\n        // Add this exception to our list of recent processed errors.\n        processedHashcodes.push({ hash: hashCode, timestamp: now });\n\n        // Only keep the last 20 recent errors.\n        while (processedHashcodes.length > 20) {\n          processedHashcodes.shift();\n        }\n\n        error = error.inner;\n      }\n\n      return false;\n    }\n\n    if (context.event.type === 'error') {\n      if (isDuplicate(context.event.data['@error'], this._processedHashcodes, this._getCurrentTime(), context.log)) {\n        context.cancelled = true;\n        return;\n      }\n    }\n\n    next && next();\n  }\n}\n\ninterface TimestampedHash {\n  hash: number;\n  timestamp: number;\n}\n\n                                                                                                                                                                                                        \n\nexport class EventExclusionPlugin implements IEventPlugin {\n  public priority: number = 45;\n  public name: string = 'EventExclusionPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    function getLogLevel(level: string): number {\n      switch ((level || '').toLowerCase()) {\n        case 'trace':\n          return 0;\n        case 'debug':\n          return 1;\n        case 'info':\n          return 2;\n        case 'warn':\n          return 3;\n        case 'error':\n          return 4;\n        case 'fatal':\n          return 5;\n        case 'off':\n          return 6;\n        default:\n          return -1;\n      }\n    }\n\n    function getMinLogLevel(settings: Object, loggerName: string = '*'): number {\n      return getLogLevel(getTypeAndSourceSetting(settings, 'log', loggerName, 'Trace') + '');\n    }\n\n    function getTypeAndSourceSetting(settings: Object = {}, type: string, source: string, defaultValue: string|boolean = undefined): string|boolean {\n      if (!type) {\n        return defaultValue;\n      }\n\n      let sourcePrefix =  `@@${type}:`;\n      if (settings[sourcePrefix + source]) {\n        return settings[sourcePrefix + source];\n      }\n\n      // check for wildcard match\n      for (let key in settings) {\n        if (Utils.startsWith(key.toLowerCase(), sourcePrefix.toLowerCase()) && Utils.isMatch(source, [key.substring(sourcePrefix.length)])) {\n          return settings[key];\n        }\n      }\n\n      return defaultValue;\n    }\n\n    let ev = context.event;\n    let settings = context.client.config.settings;\n\n    if (ev.type === 'log') {\n      let minLogLevel = getMinLogLevel(settings, ev.source);\n      let logLevel = getLogLevel(ev.data['@level']);\n\n      if (logLevel >= 0 && (logLevel > 5 || logLevel < minLogLevel)) {\n        context.log.info('Cancelling log event due to minimum log level.');\n        context.cancelled = true;\n      }\n    } else if (ev.type === 'error') {\n      let error: IInnerError = ev.data['@error'];\n      while (!context.cancelled && error) {\n        if (getTypeAndSourceSetting(settings, ev.type, error.type, true) === false) {\n          context.log.info(`Cancelling error from excluded exception type: ${error.type}`);\n          context.cancelled = true;\n        }\n\n        error = error.inner;\n      }\n    } else if (getTypeAndSourceSetting(settings, ev.type, ev.source, true) === false) {\n      context.log.info(`Cancelling event from excluded type: ${ev.type} and source: ${ev.source}`);\n      context.cancelled = true;\n    }\n\n    next && next();\n  }\n}\n\n                                                                                 \n\nexport interface IError extends IInnerError {\n  modules?: IModule[];\n}\n\nexport interface IStorageItem {\n  timestamp: number;\n  value: any;\n}\n\n                                              \n\nexport interface IStorage {\n  save(value: any): number;\n  get(limit?: number): IStorageItem[];\n  remove(timestamp: number): void;\n  clear(): void;\n}\n\nexport interface SubmissionCallback {\n  (status: number, message: string, data?: string, headers?: Object): void;\n}\n\nexport interface SubmissionRequest {\n  apiKey: string;\n  userAgent: string;\n  method: string;\n  url: string;\n  data: string;\n}\n\nexport class SettingsResponse {\n  public success: boolean = false;\n  public settings: any;\n  public settingsVersion: number = -1;\n  public message: string;\n  public exception: any;\n\n  constructor(success: boolean, settings: any, settingsVersion: number = -1, exception: any = null, message: string = null) {\n    this.success = success;\n    this.settings = settings;\n    this.settingsVersion = settingsVersion;\n    this.exception = exception;\n    this.message = message;\n  }\n}\n\n                                                                                     \n\nexport class InMemoryStorage implements IStorage {\n  private maxItems: number;\n  private items: IStorageItem[] = [];\n  private lastTimestamp: number = 0;\n\n  constructor(maxItems: number) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any): number {\n    if (!value) {\n      return null;\n    }\n\n    let items = this.items;\n    let timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    let item = { timestamp, value };\n\n    if (items.push(item) > this.maxItems) {\n      items.shift();\n    }\n\n    this.lastTimestamp = timestamp;\n    return item.timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    return this.items.slice(0, limit);\n  }\n\n  public remove(timestamp: number): void {\n    let items = this.items;\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].timestamp === timestamp) {\n        items.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  public clear(): void {\n    this.items = [];\n  }\n}\n\nexport interface IClientConfiguration {\n  settings: Object;\n  version: number;\n}\n\n                                                                                     \n\nexport abstract class KeyValueStorageBase implements IStorage {\n  private maxItems: number;\n  private items: number[];\n  private lastTimestamp: number = 0;\n\n  constructor(maxItems) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any, single?: boolean): number {\n    if (!value) {\n      return null;\n    }\n\n    this.ensureIndex();\n\n    let items = this.items;\n    let timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    let key = this.getKey(timestamp);\n    let json = JSON.stringify(value);\n\n    try {\n      this.write(key, json);\n      this.lastTimestamp = timestamp;\n      if (items.push(timestamp) > this.maxItems) {\n        this.delete(this.getKey(items.shift()));\n      }\n    } catch (e) {\n      return null;\n    }\n\n    return timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    this.ensureIndex();\n\n    return this.items.slice(0, limit)\n      .map(timestamp => {\n        // Read and parse item for this timestamp\n        let key = this.getKey(timestamp);\n        try {\n          let json = this.read(key);\n          let value = JSON.parse(json, parseDate);\n          return { timestamp, value };\n        } catch (error) {\n          // Something went wrong - try to delete the cause.\n          this.safeDelete(key);\n          return null;\n        }\n      })\n      .filter(item => item != null);\n  }\n\n  public remove(timestamp: number): void {\n    this.ensureIndex();\n\n    let items = this.items;\n    let index = items.indexOf(timestamp);\n    if (index >= 0) {\n      let key = this.getKey(timestamp);\n      this.safeDelete(key);\n      items.splice(index, 1);\n    };\n  }\n\n  public clear(): void {\n    this.items.forEach(item => this.safeDelete(this.getKey(item)));\n    this.items = [];\n  }\n\n  protected abstract write(key: string, value: string): void;\n  protected abstract read(key: string): string;\n  protected abstract readAllKeys(): string[];\n  protected abstract delete(key: string);\n  protected abstract getKey(timestamp: number): string;\n  protected abstract getTimestamp(key: string): number;\n\n  private ensureIndex() {\n    if (!this.items) {\n      this.items = this.createIndex();\n      this.lastTimestamp = Math.max(0, ...this.items) + 1;\n    }\n  }\n\n  private safeDelete(key: string): void {\n    try {\n      this.delete(key);\n    } catch (error) {\n    }\n  }\n\n  private createIndex() {\n    try {\n      let keys = this.readAllKeys();\n      return keys.map(key => {\n        try {\n          let timestamp = this.getTimestamp(key);\n          if (!timestamp) {\n            this.safeDelete(key);\n            return null;\n          }\n          return timestamp;\n        } catch (error) {\n          this.safeDelete(key);\n          return null;\n        }\n      }).filter(timestamp => timestamp != null)\n        .sort((a, b) => a - b);\n    } catch (error) {\n      return [];\n    }\n  }\n}\n\nfunction parseDate(key, value) {\n  let dateRegx = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/g;\n  if (typeof value === 'string') {\n    let a = dateRegx.exec(value);\n    if (a) {\n      return new Date(value);\n    }\n  }\n  return value;\n};\n\n                                                            \n\nexport class BrowserStorage extends KeyValueStorageBase {\n  private prefix: string;\n\n  public static isAvailable(): boolean {\n    try {\n      let storage = window.localStorage,\n        x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  constructor(namespace: string, prefix: string = 'com.exceptionless.', maxItems: number = 20) {\n    super(maxItems);\n\n    this.prefix = prefix + namespace + '-';\n  }\n\n  public write(key: string, value: string) {\n    window.localStorage.setItem(key, value);\n  }\n\n  public read(key: string) {\n    return window.localStorage.getItem(key);\n  }\n\n  public readAllKeys() {\n    return Object.keys(window.localStorage)\n      .filter(key => key.indexOf(this.prefix) === 0);\n  }\n\n  public delete(key: string) {\n    window.localStorage.removeItem(key);\n  }\n\n  public getKey(timestamp) {\n    return this.prefix + timestamp;\n  }\n\n  public getTimestamp(key) {\n    return parseInt(key.substr(this.prefix.length), 10);\n  }\n}\n\n                                                                                                                                                                                                                                                                                                           \n\nexport class DefaultErrorParser implements IErrorParser {\n  public parse(context: EventPluginContext, exception: Error): IError {\n    function getParameters(parameters: string | string[]): IParameter[] {\n      let params: string[] = (typeof parameters === 'string' ? [parameters] : parameters) || [];\n\n      let result: IParameter[] = [];\n      for (let index = 0; index < params.length; index++) {\n        result.push({ name: params[index] });\n      }\n\n      return result;\n    }\n\n    function getStackFrames(stackFrames: TraceKit.StackFrame[]): IStackFrame[] {\n      const ANONYMOUS: string = '<anonymous>';\n      let frames: IStackFrame[] = [];\n\n      for (let index = 0; index < stackFrames.length; index++) {\n        let frame = stackFrames[index];\n        frames.push({\n          name: (frame.func || ANONYMOUS).replace('?', ANONYMOUS),\n          parameters: getParameters(frame.args),\n          file_name: frame.url,\n          line_number: frame.line || 0,\n          column: frame.column || 0\n        });\n      }\n\n      return frames;\n    }\n\n    const TRACEKIT_STACK_TRACE_KEY: string = '@@_TraceKit.StackTrace'; // optimization for minifier.\n\n    let stackTrace: TraceKit.StackTrace = !!context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      ? context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      : TraceKit.computeStackTrace(exception, 25);\n\n    if (!stackTrace) {\n      throw new Error('Unable to parse the exceptions stack trace.');\n    }\n\n    return {\n      type: stackTrace.name,\n      message: stackTrace.message || exception.message,\n      stack_trace: getStackFrames(stackTrace.stack || [])\n    };\n  }\n}\n\n                                                                                                                                                                                                         \n\nexport class DefaultModuleCollector implements IModuleCollector {\n  public getModules(context: EventPluginContext): IModule[] {\n    if (document && document.getElementsByTagName) {\n      return null;\n    }\n\n    let modules: IModule[] = [];\n    let scripts: NodeListOf<HTMLScriptElement> = document.getElementsByTagName('script');\n    if (scripts && scripts.length > 0) {\n      for (let index = 0; index < scripts.length; index++) {\n        if (scripts[index].src) {\n          modules.push({\n            module_id: index,\n            name: scripts[index].src,\n            version: Utils.parseVersion(scripts[index].src)\n          });\n        } else if (!!scripts[index].innerHTML) {\n          modules.push({\n            module_id: index,\n            name: 'Script Tag',\n            version: Utils.getHashCode(scripts[index].innerHTML).toString()\n          });\n        }\n      }\n    }\n\n    return modules;\n  }\n}\n\n                                                                                                                                                                                                                             \n\nexport class DefaultRequestInfoCollector implements IRequestInfoCollector {\n  public getRequestInfo(context: EventPluginContext): IRequestInfo {\n    if (!document || !navigator || !location) {\n      return null;\n    }\n\n    let exclusions = context.client.config.dataExclusions;\n    let requestInfo: IRequestInfo = {\n      user_agent: navigator.userAgent,\n      is_secure: location.protocol === 'https:',\n      host: location.hostname,\n      port: location.port && location.port !== '' ? parseInt(location.port, 10) : 80,\n      path: location.pathname,\n      // client_ip_address: 'TODO',\n      cookies: Utils.getCookies(document.cookie, exclusions),\n      query_string: Utils.parseQueryString(location.search.substring(1), exclusions)\n    };\n\n    if (document.referrer && document.referrer !== '') {\n      requestInfo.referrer = document.referrer;\n    }\n\n    return requestInfo;\n  }\n}\n\n                                                                                                                                                                              \n\ndeclare var XDomainRequest: { new (); create(); };\n\nexport class DefaultSubmissionAdapter implements ISubmissionAdapter {\n  public sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean) {\n    // TODO: Handle sending events when app is exiting with send beacon.\n    const TIMEOUT: string = 'timeout';  // optimization for minifier.\n    const LOADED: string = 'loaded';  // optimization for minifier.\n    const WITH_CREDENTIALS: string = 'withCredentials';  // optimization for minifier.\n\n    let isCompleted: boolean = false;\n    let useSetTimeout: boolean = false;\n    function complete(mode: string, xhr: XMLHttpRequest) {\n      function parseResponseHeaders(headerStr) {\n        function trim(value) {\n          return value.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n        }\n\n        let headers = {};\n        let headerPairs = (headerStr || '').split('\\u000d\\u000a');\n        for (let index: number = 0; index < headerPairs.length; index++) {\n          let headerPair = headerPairs[index];\n          // Can't use split() here because it does the wrong thing\n          // if the header value has the string \": \" in it.\n          let separator = headerPair.indexOf('\\u003a\\u0020');\n          if (separator > 0) {\n            headers[trim(headerPair.substring(0, separator).toLowerCase())] = headerPair.substring(separator + 2);\n          }\n        }\n\n        return headers;\n      }\n\n      if (isCompleted) {\n        return;\n      }\n\n      isCompleted = true;\n\n      let message: string = xhr.statusText;\n      let responseText: string = xhr.responseText;\n      let status: number = xhr.status;\n\n      if (mode === TIMEOUT || status === 0) {\n        message = 'Unable to connect to server.';\n        status = 0;\n      } else if (mode === LOADED && !status) {\n        status = request.method === 'POST' ? 202 : 200;\n      } else if (status < 200 || status > 299) {\n        let responseBody: any = xhr.responseBody;\n        if (!!responseBody && !!responseBody.message) {\n          message = responseBody.message;\n        } else if (!!responseText && responseText.indexOf('message') !== -1) {\n          try {\n            message = JSON.parse(responseText).message;\n          } catch (e) {\n            message = responseText;\n          }\n        }\n      }\n\n      callback && callback(status || 500, message || '', responseText, parseResponseHeaders(xhr.getAllResponseHeaders && xhr.getAllResponseHeaders()));\n    }\n\n    function createRequest(userAgent: string, method: string, url: string): XMLHttpRequest {\n      let xhr: any = new XMLHttpRequest();\n      if (WITH_CREDENTIALS in xhr) {\n        xhr.open(method, url, true);\n\n        xhr.setRequestHeader('X-Exceptionless-Client', userAgent);\n        if (method === 'POST') {\n          xhr.setRequestHeader('Content-Type', 'application/json');\n        }\n      } else if (typeof XDomainRequest !== 'undefined') {\n        useSetTimeout = true;\n        xhr = new XDomainRequest();\n        xhr.open(method, location.protocol === 'http:' ? url.replace('https:', 'http:') : url);\n      } else {\n        xhr = null;\n      }\n\n      if (xhr) {\n        xhr.timeout = 10000;\n      }\n\n      return xhr;\n    }\n\n    let url = `${request.url}${(request.url.indexOf('?') === -1 ? '?' : '&')}access_token=${encodeURIComponent(request.apiKey)}`;\n    let xhr = createRequest(request.userAgent, request.method || 'POST', url);\n    if (!xhr) {\n      return (callback && callback(503, 'CORS not supported.'));\n    }\n\n    if (WITH_CREDENTIALS in xhr) {\n      xhr.onreadystatechange = () => {\n        // xhr not ready.\n        if (xhr.readyState !== 4) {\n          return;\n        }\n\n        complete(LOADED, xhr);\n      };\n    }\n\n    xhr.onprogress = () => { };\n    xhr.ontimeout = () => complete(TIMEOUT, xhr);\n    xhr.onerror = () => complete('error', xhr);\n    xhr.onload = () => complete(LOADED, xhr);\n\n    if (useSetTimeout) {\n      setTimeout(() => xhr.send(request.data), 500);\n    } else {\n      xhr.send(request.data);\n    }\n  }\n}\n\n                                                                                                                                                \n\nexport class BrowserStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(prefix?: string, maxQueueItems: number = 250) {\n    this.queue = new BrowserStorage('q', prefix, maxQueueItems);\n    this.settings = new BrowserStorage('settings', prefix, 1);\n  }\n\n}\n\nn\nfunction getDefaultsSettingsFromScriptTag(): IConfigurationSettings {\n  if (!document || !document.getElementsByTagName) {\n    return null;\n  }\n\n  let scripts = document.getElementsByTagName('script');\n  for (let index = 0; index < scripts.length; index++) {\n    if (scripts[index].src && scripts[index].src.indexOf('/exceptionless') > -1) {\n      return Utils.parseQueryString(scripts[index].src.split('?').pop());\n    }\n  }\n  return null;\n}\n\nfunction processUnhandledException(stackTrace: TraceKit.StackTrace, options?: any): void {\n  let builder = ExceptionlessClient.default.createUnhandledException(new Error(stackTrace.message || (options || {}).status || 'Script error'), 'onerror');\n  builder.pluginContextData['@@_TraceKit.StackTrace'] = stackTrace;\n  builder.submit();\n}\n\n/*\nTODO: We currently are unable to parse string exceptions.\nfunction processJQueryAjaxError(event, xhr, settings, error:string): void {\n  let client = ExceptionlessClient.default;\n  if (xhr.status === 404) {\n    client.submitNotFound(settings.url);\n  } else if (xhr.status !== 401) {\n    client.createUnhandledException(error, 'JQuery.ajaxError')\n      .setSource(settings.url)\n      .setProperty('status', xhr.status)\n      .setProperty('request', settings.data)\n      .setProperty('response', xhr.responseText && xhr.responseText.slice && xhr.responseText.slice(0, 1024))\n      .submit();\n  }\n}\n*/\n\nConfiguration.prototype.useLocalStorage = function() {\n  if (BrowserStorage.isAvailable()) {\n    this.storage = new BrowserStorageProvider();\n    SettingsManager.applySavedServerSettings(this);\n  }\n};\n\nlet defaults = Configuration.defaults;\nlet settings = getDefaultsSettingsFromScriptTag();\nif (settings && (settings.apiKey || settings.serverUrl)) {\n  defaults.apiKey = settings.apiKey;\n  defaults.serverUrl = settings.serverUrl;\n}\n\ndefaults.errorParser = new DefaultErrorParser();\ndefaults.moduleCollector = new DefaultModuleCollector();\ndefaults.requestInfoCollector = new DefaultRequestInfoCollector();\ndefaults.submissionAdapter = new DefaultSubmissionAdapter();\n\nTraceKit.report.subscribe(processUnhandledException);\nTraceKit.extendToAsynchronousCallbacks();\n\n// window && window.addEventListener && window.addEventListener('beforeunload', function () {\n//   ExceptionlessClient.default.config.queue.process(true);\n// });\n\n// if (typeof $ !== 'undefined' && $(document)) {\n//   $(document).ajaxError(processJQueryAjaxError);\n// }\n\n(<any>Error).stackTraceLimit = Infinity;\n\ndeclare var $;\n\n"],"sourceRoot":"/source/"}