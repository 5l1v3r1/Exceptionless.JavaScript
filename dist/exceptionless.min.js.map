{"version":3,"sources":["tracekit.js","exceptionless.ts"],"names":["window","undefined","_has","object","key","Object","prototype","hasOwnProperty","call","_isUndefined","what","TraceKit","_oldTraceKit","_slice","slice","UNKNOWN_FUNCTION","noConflict","wrap","func","apply","this","arguments","e","report","notifyHandlers","stack","isWindowError","exception","collectWindowErrors","i","handlers","concat","inner","traceKitWindowOnError","message","url","lineNo","columnNo","errorObj","lastExceptionStack","computeStackTrace","augmentStackTraceWithInitialElement","processLastException","location","line","column","guessFunctionName","context","gatherContext","mode","_oldOnerrorHandler","installGlobalHandler","_onErrorHandlerInstalled","onerror","_lastExceptionStack","_lastArgs","lastArgs","lastException","ex","setTimeout","incomplete","subscribe","handler","push","unsubscribe","length","splice","loadSource","remoteFetching","request","XMLHttpRequest","ActiveXObject","open","send","responseText","getSource","sourceCache","source","domain","document","match","exec","split","m","reFunctionArgNames","reGuessFunction","linesBefore","Math","floor","linesOfContext","linesAfter","start","max","end","min","escapeRegExp","text","replace","escapeCodeAsRegExpForMatchingInsideHTML","body","findSourceInUrls","re","urls","j","join","substring","index","lastIndexOf","findSourceInLine","fragment","RegExp","findSourceByFunctionBody","parts","result","href","scripts","getElementsByTagName","code","codeRE","eventRE","script","src","name","args","event","computeStackTraceFromStackProp","element","chrome","gecko","winjs","lines","reference","isNative","indexOf","columnNumber","computeStackTraceFromStacktraceProp","stacktrace","opera10Regex","opera11Regex","exc","computeStackTraceFromOperaMultiLineMessage","lineRE1","lineRE2","lineRE3","inlineScriptBlocks","s","item","relativeLine","pos","innerText","midline","stackInfo","initial","unshift","partial","computeStackTraceByWalkingCallerChain","depth","functionName","funcs","recursion","curr","caller","toString","input","description","sourceURL","fileName","lineNumber","debug","ofCaller","Error","extendToAsynchronousCallbacks","_helper","fnName","originalFn","originalCallback","module","exports","define","amd","global","parseDate","value","dateRegx","Date","require","__extends","extendStatics","setPrototypeOf","__proto__","Array","d","b","p","__","constructor","create","defineProperty","DefaultLastReferenceIdManager","_lastReferenceId","getLast","clearLast","setLast","eventId","ConsoleLog","trace","log","info","warn","error","level","console","msg","NullLog","HeartbeatPlugin","heartbeatInterval","priority","_interval","run","next","clearInterval","_intervalId","user","data","identity","setInterval","client","submitSessionHeartbeat","ReferenceIdPlugin","reference_id","type","Utils","guid","EventPluginContext","contextData","ContextData","config","EventPluginManager","callback","plugin","cancelled","plugins","wrappedPlugins","addDefaultPlugins","addPlugin","ConfigurationDefaultsPlugin","ErrorPlugin","DuplicateCheckerPlugin","EventExclusionPlugin","ModuleInfoPlugin","RequestInfoPlugin","EnvironmentInfoPlugin","SubmissionMethodPlugin","DefaultEventQueue","_handlers","_processingQueue","_config","enqueue","enabled","isValid","areQueuedItemsDiscarded","ensureQueueTimer","timestamp","storage","queue","save","logText","process","isAppExiting","_this","events_1","get","submissionBatchSize","serverUrl","submissionClient","postEvents","map","response","processSubmissionResponse","eventsPosted","suspendProcessing","durationInMinutes","discardFutureQueuedItems","clearQueue","_suspendProcessingUntil","getTime","_discardQueuedItemsUntil","clear","onEventsPosted","events","_i","handlers_1","_queueTimer","onProcessQueue","isQueueProcessingSuspended","success","removeEvents","serviceUnavailable","paymentRequired","unableToAuthenticate","notFound","badRequest","requestEntityTooLarge","round","remove","maxQueueItems","InMemoryStorage","settings","InMemoryStorageProvider","configurationVersionHeader","JSON","stringify","createRequest","cb","createSubmissionCallback","submissionAdapter","sendRequest","postUserDescription","referenceId","encodeURIComponent","path","DefaultSubmissionClient","getSettings","version","status","headers","SettingsResponse","parse","isNaN","sendHeartbeat","sessionIdOrUserId","closeSession","heartbeatServerUrl","method","apiKey","userAgent","settingsVersion","parseInt","SettingsManager","checkVersion","SubmissionResponse","addRange","target","values","_a","values_1","hash","charCodeAt","getCookies","cookies","exclusions","parts_1","cookie","isMatch","isEmpty","s4","random","merge","defaultValues","parseVersion","matches","parseQueryString","query","pairs","pairs_1","decodeURIComponent","patterns","ignoreCase","trim","toLowerCase","some","pattern","startsWithWildcard","endsWithWildcard","endsWith","startsWith","keys","prefix","suffix","maxDepth","obj","excludedKeys","cache","flattened","prop","stringifyImpl","toBoolean","defaultValue","onChanged","applySavedServerSettings","savedSettings","getSavedServerSettings","changed","getVersion","currentVersion","updateSettings","savedServerSettings","newSettings","unableToUpdateMessage","handlers_2","statusCode","ExceptionlessClient","settingsOrApiKey","Configuration","updateSettingsTimer","_timeoutId","createException","pluginContextData","setException","createEvent","setType","submitException","submit","createUnhandledException","submissionMethod","builder","markAsUnhandledError","setSubmissionMethod","submitUnhandledException","createFeatureUsage","feature","setSource","submitFeatureUsage","createLog","sourceOrMessage","setMessage","setProperty","submitLog","createNotFound","resource","submitNotFound","createSessionStart","submitSessionStart","submitSessionEnd","EventBuilder","date","submitEvent","tags","ctx","ev","lastReferenceIdManager","updateUserEmailAndDescription","email","email_address","userDescription","getLastReferenceId","initialDelay","clearTimeout","interval","updateSettingsWhenIdleInterval","_instance","configurable","enumerable","getException","getSubmissionMethod","configSettings","inject","fn","defaultTags","defaultData","_serverUrl","_heartbeatServerUrl","_updateSettingsWhenIdleInterval","_dataExclusions","_userAgentBotPatterns","_plugins","defaults","environmentInfoCollector","errorParser","requestInfoCollector","_apiKey","addDataExclusions","addUserAgentBotPatterns","userAgentBotPatterns","sort","p1","p2","pluginOrName","pluginAction","pluginExists","plugins_1","removePlugin","setVersion","setUserIdentity","userInfoOrIdentity","userInfo","shouldRemove","useSessions","sendHeartbeats","useReferenceIds","useLocalStorage","useDebugLogger","handlers_3","_defaultSettings","_validIdentifierErrorMessage","setReferenceId","isValidIdentifier","setEventReference","id","setGeo","latitude","longitude","geo","setUserDescription","emailAddress","setManualStackingInfo","signatureData","title","signature_data","setManualStackingKey","manualStackingKey","ManualStackingKey","setValue","addTags","excludedPropertyNames","dataExclusions","markAsCritical","critical","addRequestInfo","isDigit","isLetter","isMinus","defaultTags_1","tag","getCurrentTime","now","_getCurrentTime","_mergedEvents","shift","resubmit","hashCode","getHashCode","stack_trace","count","now_1","merged","filter","incrementCount","updateDate","_processedHashcodes","h","MergedEvent","_context","_count","collector","environmentInfo","getEnvironmentInfo","ignoredProperties","parser","additionalData","getLogLevel","getTypeAndSourceSetting","isLog","sourcePrefix","minLogLevel","loggerName","logLevel","moduleCollector","modules","getModules","requestInfo","getRequestInfo","user_agent","maxItems","items","lastTimestamp","limit","KeyValueStorageBase","single","ensureIndex","getKey","write","json","delete","read","safeDelete","forEach","createIndex","readAllKeys","getTimestamp","a","BrowserStorage","_super","namespace","isAvailable","localStorage","x","setItem","removeItem","getItem","substr","getParameters","parameters","params_1","param","stackTrace","stackFrames","frames","stackFrames_1","frame","file_name","line_number","DefaultErrorParser","module_id","innerHTML","DefaultModuleCollector","DefaultRequestInfoCollector","navigator","is_secure","protocol","host","hostname","port","pathname","query_string","search","referrer","BrowserStorageProvider","complete","xhr","statusText","TIMEOUT","LOADED","responseBody","headerStr","headerPairs_1","headerPair","separator","getAllResponseHeaders","isCompleted","useSetTimeout","WITH_CREDENTIALS","setRequestHeader","XDomainRequest","timeout","onreadystatechange","readyState","onprogress","ontimeout","onload","DefaultSubmissionAdapter","pop","options","default"],"mappings":"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","file":"exceptionless.min.js","sourcesContent":["/**\n * https://github.com/csnover/TraceKit\n * @license MIT\n * @namespace TraceKit\n */\n(function(window, undefined) {\nif (!window) {\n    return;\n}\n\nvar TraceKit = {};\nvar _oldTraceKit = window.TraceKit;\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n/**\n * A better form of hasOwnProperty<br/>\n * Example: `_has(MainHostObject, property) === true/false`\n *\n * @param {Object} object to check property\n * @param {string} key to check\n * @return {Boolean} true if the object has the key and it is not inherited\n */\nfunction _has(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\n\n/**\n * Returns true if the parameter is undefined<br/>\n * Example: `_isUndefined(val) === true/false`\n *\n * @param {*} what Value to check\n * @return {Boolean} true if undefined and false otherwise\n */\nfunction _isUndefined(what) {\n    return typeof what === 'undefined';\n}\n\n/**\n * Export TraceKit out to another variable<br/>\n * Example: `var TK = TraceKit.noConflict()`\n * @return {Object} The TraceKit object\n * @memberof TraceKit\n */\nTraceKit.noConflict = function noConflict() {\n    window.TraceKit = _oldTraceKit;\n    return TraceKit;\n};\n\n/**\n * Wrap any function in a TraceKit reporter<br/>\n * Example: `func = TraceKit.wrap(func);`\n *\n * @param {Function} func Function to be wrapped\n * @return {Function} The wrapped func\n * @memberof TraceKit\n */\nTraceKit.wrap = function traceKitWrapper(func) {\n    function wrapped() {\n        try {\n            return func.apply(this, arguments);\n        } catch (e) {\n            TraceKit.report(e);\n            throw e;\n        }\n    }\n    return wrapped;\n};\n\n/**\n * Cross-browser processing of unhandled exceptions\n *\n * Syntax:\n * ```js\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n * ```\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *     on top frame; column number is not guaranteed\n *   - Opera: full stack trace with line and column numbers\n *   - Chrome: full stack trace with line and column numbers\n *   - Safari: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *   - IE: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a TraceKit.StackTrace object as described in the\n * TraceKit.computeStackTrace docs.\n *\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.report = (function reportModuleWrapper() {\n    var handlers = [],\n        lastArgs = null,\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {TraceKit.StackTrace} stack\n     * @param {boolean} isWindowError Is this a top-level window error?\n     * @memberof TraceKit.report\n     * @throws An exception if an error occurs while calling an handler.\n     */\n    function notifyHandlers(stack, isWindowError) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n          return;\n        }\n        for (var i in handlers) {\n            if (_has(handlers, i)) {\n                try {\n                    handlers[i].apply(null, [stack].concat(_slice.call(arguments, 2)));\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error occurred.\n     * @param {(number|string)=} columnNo The column number at which the error occurred.\n     * @param {Error=} errorObj The actual Error object.\n     * @memberof TraceKit.report\n     */\n    function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {\n        var stack = null;\n\n        if (lastExceptionStack) {\n            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n    \t    processLastException();\n\t    } else if (errorObj) {\n            stack = TraceKit.computeStackTrace(errorObj);\n            notifyHandlers(stack, true);\n        } else {\n            var location = {\n              'url': url,\n              'line': lineNo,\n              'column': columnNo\n            };\n            location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);\n            location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);\n            stack = {\n              'mode': 'onerror',\n              'message': message,\n              'stack': [location]\n            };\n\n            notifyHandlers(stack, true);\n        }\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    /**\n     * Install a global onerror handler\n     * @memberof TraceKit.report\n     */\n    function installGlobalHandler () {\n        if (_onErrorHandlerInstalled === true) {\n            return;\n        }\n        _oldOnerrorHandler = window.onerror;\n        window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    /**\n     * Process the most recent exception\n     * @memberof TraceKit.report\n     */\n    function processLastException() {\n        var _lastExceptionStack = lastExceptionStack,\n            _lastArgs = lastArgs;\n        lastArgs = null;\n        lastExceptionStack = null;\n        lastException = null;\n        notifyHandlers.apply(null, [_lastExceptionStack, false].concat(_lastArgs));\n    }\n\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     * @memberof TraceKit.report\n     * @throws An exception if an incomplete stack trace is detected (old IE browsers).\n     */\n    function report(ex) {\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n              processLastException();\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n        lastArgs = _slice.call(arguments, 1);\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        window.setTimeout(function () {\n            if (lastException === ex) {\n                processLastException();\n            }\n        }, (stack.incomplete ? 2000 : 0));\n\n        throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    return report;\n}());\n\n/**\n * An object representing a single stack frame.\n * @typedef {Object} StackFrame\n * @property {string} url The JavaScript or HTML file URL.\n * @property {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * @property {string[]?} args The arguments passed to the function, if known.\n * @property {number=} line The line number, if known.\n * @property {number=} column The column number, if known.\n * @property {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n * @memberof TraceKit\n */\n\n/**\n * An object representing a JavaScript stack trace.\n * @typedef {Object} StackTrace\n * @property {string} name The name of the thrown exception.\n * @property {string} message The exception error message.\n * @property {TraceKit.StackFrame[]} stack An array of stack frames.\n * @property {string} mode 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace.\n * @memberof TraceKit\n */\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   ```js\n *   s = TraceKit.computeStackTrace.ofCaller([depth])\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n *   ```\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n * Tracing example:\n *  ```js\n *     function trace(message) {\n *         var stackInfo = TraceKit.computeStackTrace.ofCaller();\n *         var data = message + \"\\n\";\n *         for(var i in stackInfo.stack) {\n *             var item = stackInfo.stack[i];\n *             data += (item.func || '[anonymous]') + \"() in \" + item.url + \":\" + (item.line || '0') + \"\\n\";\n *         }\n *         if (window.console)\n *             console.info(data);\n *         else\n *             alert(data);\n *     }\n * ```\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n    var debug = false,\n        sourceCache = {};\n\n    /**\n     * Attempts to retrieve source code via XMLHttpRequest, which is used\n     * to look up anonymous function names.\n     * @param {string} url URL of source code.\n     * @return {string} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function loadSource(url) {\n        if (!TraceKit.remoteFetching) { //Only attempt request if remoteFetching is on.\n            return '';\n        }\n        try {\n            var getXHR = function() {\n                try {\n                    return new window.XMLHttpRequest();\n                } catch (e) {\n                    // explicitly bubble up the exception if not found\n                    return new window.ActiveXObject('Microsoft.XMLHTTP');\n                }\n            };\n\n            var request = getXHR();\n            request.open('GET', url, false);\n            request.send('');\n            return request.responseText;\n        } catch (e) {\n            return '';\n        }\n    }\n\n    /**\n     * Retrieves source code from the source code cache.\n     * @param {string} url URL of source code.\n     * @return {Array.<string>} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function getSource(url) {\n        if (typeof url !== 'string') {\n            return [];\n        }\n\n        if (!_has(sourceCache, url)) {\n            // URL needs to be able to fetched within the acceptable domain.  Otherwise,\n            // cross-domain errors will be triggered.\n            /*\n                Regex matches:\n                0 - Full Url\n                1 - Protocol\n                2 - Domain\n                3 - Port (Useful for internal applications)\n                4 - Path\n            */\n            var source = '';\n            var domain = '';\n            try { domain = window.document.domain; } catch (e) { }\n            var match = /(.*)\\:\\/\\/([^:\\/]+)([:\\d]*)\\/{0,1}([\\s\\S]*)/.exec(url);\n            if (match && match[2] === domain) {\n                source = loadSource(url);\n            }\n            sourceCache[url] = source ? source.split('\\n') : [];\n        }\n\n        return sourceCache[url];\n    }\n\n    /**\n     * Tries to use an externally loaded copy of source code to determine\n     * the name of a function by looking at the name of the variable it was\n     * assigned to, if any.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} lineNo Line number in source code.\n     * @return {string} The function name, if discoverable.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function guessFunctionName(url, lineNo) {\n        var reFunctionArgNames = /function ([^(]*)\\(([^)]*)\\)/,\n            reGuessFunction = /['\"]?([0-9A-Za-z$_]+)['\"]?\\s*[:=]\\s*(function|eval|new Function)/,\n            line = '',\n            maxLines = 10,\n            source = getSource(url),\n            m;\n\n        if (!source.length) {\n            return UNKNOWN_FUNCTION;\n        }\n\n        // Walk backwards from the first line in the function until we find the line which\n        // matches the pattern above, which is the function definition\n        for (var i = 0; i < maxLines; ++i) {\n            line = source[lineNo - i] + line;\n\n            if (!_isUndefined(line)) {\n                if ((m = reGuessFunction.exec(line))) {\n                    return m[1];\n                } else if ((m = reFunctionArgNames.exec(line))) {\n                    return m[1];\n                }\n            }\n        }\n\n        return UNKNOWN_FUNCTION;\n    }\n\n    /**\n     * Retrieves the surrounding lines from where an exception occurred.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} line Line number in source code to centre\n     * around for context.\n     * @return {?Array.<string>} Lines of source code.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function gatherContext(url, line) {\n        var source = getSource(url);\n\n        if (!source.length) {\n            return null;\n        }\n\n        var context = [],\n            // linesBefore & linesAfter are inclusive with the offending line.\n            // if linesOfContext is even, there will be one extra line\n            //   *before* the offending line.\n            linesBefore = Math.floor(TraceKit.linesOfContext / 2),\n            // Add one extra line if linesOfContext is odd\n            linesAfter = linesBefore + (TraceKit.linesOfContext % 2),\n            start = Math.max(0, line - linesBefore - 1),\n            end = Math.min(source.length, line + linesAfter - 1);\n\n        line -= 1; // convert to 0-based index\n\n        for (var i = start; i < end; ++i) {\n            if (!_isUndefined(source[i])) {\n                context.push(source[i]);\n            }\n        }\n\n        return context.length > 0 ? context : null;\n    }\n\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    /**\n     * Determines where a code fragment occurs in the source code.\n     * @param {RegExp} re The function definition.\n     * @param {Array.<string>} urls A list of URLs to search.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInUrls(re, urls) {\n        var source, m;\n        for (var i = 0, j = urls.length; i < j; ++i) {\n            // console.log('searching', urls[i]);\n            if ((source = getSource(urls[i])).length) {\n                source = source.join('\\n');\n                if ((m = re.exec(source))) {\n                    // console.log('Found function in ' + urls[i]);\n\n                    return {\n                        'url': urls[i],\n                        'line': source.substring(0, m.index).split('\\n').length,\n                        'column': m.index - source.lastIndexOf('\\n', m.index) - 1\n                    };\n                }\n            }\n        }\n\n        // console.log('no match');\n\n        return null;\n    }\n\n    /**\n     * Determines at which column a code fragment occurs on a line of the\n     * source code.\n     * @param {string} fragment The code fragment.\n     * @param {string} url The URL to search.\n     * @param {(string|number)} line The line number to examine.\n     * @return {?number} The column number.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInLine(fragment, url, line) {\n        var source = getSource(url),\n            re = new RegExp('\\\\b' + escapeRegExp(fragment) + '\\\\b'),\n            m;\n\n        line -= 1;\n\n        if (source && source.length > line && (m = re.exec(source[line]))) {\n            return m.index;\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines where a function was defined within the source code.\n     * @param {(Function|string)} func A function reference or serialized\n     * function definition.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceByFunctionBody(func) {\n        if (_isUndefined(window && window.document)) {\n            return;\n        }\n\n        var urls = [window.location.href],\n            scripts = window.document.getElementsByTagName('script'),\n            body,\n            code = '' + func,\n            codeRE = /^function(?:\\s+([\\w$]+))?\\s*\\(([\\w\\s,]*)\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            eventRE = /^function on([\\w$]+)\\s*\\(event\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            re,\n            parts,\n            result;\n\n        for (var i = 0; i < scripts.length; ++i) {\n            var script = scripts[i];\n            if (script.src) {\n                urls.push(script.src);\n            }\n        }\n\n        if (!(parts = codeRE.exec(code))) {\n            re = new RegExp(escapeRegExp(code).replace(/\\s+/g, '\\\\s+'));\n        }\n\n        // not sure if this is really necessary, but I don’t have a test\n        // corpus large enough to confirm that and it was in the original.\n        else {\n            var name = parts[1] ? '\\\\s+' + parts[1] : '',\n                args = parts[2].split(',').join('\\\\s*,\\\\s*');\n\n            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\\s+/g, '\\\\s+');\n            re = new RegExp('function' + name + '\\\\s*\\\\(\\\\s*' + args + '\\\\s*\\\\)\\\\s*{\\\\s*' + body + '\\\\s*}');\n        }\n\n        // look for a normal function definition\n        if ((result = findSourceInUrls(re, urls))) {\n            return result;\n        }\n\n        // look for an old-school event handler function\n        if ((parts = eventRE.exec(code))) {\n            var event = parts[1];\n            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);\n\n            // look for a function defined in HTML as an onXXX handler\n            re = new RegExp('on' + event + '=[\\\\\\'\"]\\\\s*' + body + '\\\\s*[\\\\\\'\"]', 'i');\n\n            if ((result = findSourceInUrls(re, urls[0]))) {\n                return result;\n            }\n\n            // look for ???\n            re = new RegExp(body);\n\n            if ((result = findSourceInUrls(re, urls))) {\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (!ex.stack) {\n            return null;\n        }\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|webpack|eval).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|\\[native).*?)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if ((parts = chrome.exec(lines[i]))) {\n                var isNative = parts[2] && parts[2].indexOf('native') !== -1;\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ( parts = winjs.exec(lines[i]) ) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = gecko.exec(lines[i]))) {\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = guessFunctionName(element.url, element.line);\n            }\n\n            if (element.line) {\n                element.context = gatherContext(element.url, element.line);\n            }\n\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        if (stack[0] && stack[0].line && !stack[0].column && reference) {\n            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);\n        } else if (!stack[0].column && !_isUndefined(ex.columnNumber)) {\n            // FireFox uses this awesome columnNumber property for its top frame\n            // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n            // so adding 1\n            stack[0].column = ex.columnNumber + 1;\n        }\n\n        return {\n            'mode': 'stack',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * Computes stack trace information from the stacktrace property.\n     * Opera 10+ uses this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStacktraceProp(ex) {\n        // Access and store the stacktrace property before doing ANYTHING\n        // else to it because Opera is not very good at providing it\n        // reliably in other circumstances.\n        var stacktrace = ex.stacktrace;\n        if (!stacktrace) {\n            return;\n        }\n\n        var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i,\n            opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i,\n            lines = stacktrace.split('\\n'),\n            stack = [],\n            parts;\n\n        for (var line = 0; line < lines.length; line += 2) {\n            var element = null;\n            if ((parts = opera10Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[2],\n                    'line': +parts[1],\n                    'column': null,\n                    'func': parts[3],\n                    'args':[]\n                };\n            } else if ((parts = opera11Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[6],\n                    'line': +parts[1],\n                    'column': +parts[2],\n                    'func': parts[3] || parts[4],\n                    'args': parts[5] ? parts[5].split(',') : []\n                };\n            }\n\n            if (element) {\n                if (!element.func && element.line) {\n                    element.func = guessFunctionName(element.url, element.line);\n                }\n                if (element.line) {\n                    try {\n                        element.context = gatherContext(element.url, element.line);\n                    } catch (exc) {}\n                }\n\n                if (!element.context) {\n                    element.context = [lines[line + 1]];\n                }\n\n                stack.push(element);\n            }\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        return {\n            'mode': 'stacktrace',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * NOT TESTED.\n     * Computes stack trace information from an error message that includes\n     * the stack trace.\n     * Opera 9 and earlier use this method if the option to show stack\n     * traces is turned on in opera:config.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromOperaMultiLineMessage(ex) {\n        // TODO: Clean this function up\n        // Opera includes a stack trace into the exception message. An example is:\n        //\n        // Statement on line 3: Undefined variable: undefinedFunc\n        // Backtrace:\n        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz\n        //         undefinedFunc(a);\n        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy\n        //           zzz(x, y, z);\n        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx\n        //           yyy(a, a, a);\n        //   Line 1 of function script\n        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }\n        //   ...\n\n        var lines = ex.message.split('\\n');\n        if (lines.length < 4) {\n            return null;\n        }\n\n        var lineRE1 = /^\\s*Line (\\d+) of linked script ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE2 = /^\\s*Line (\\d+) of inline#(\\d+) script in ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE3 = /^\\s*Line (\\d+) of function script\\s*$/i,\n            stack = [],\n            scripts = (window && window.document && window.document.getElementsByTagName('script')),\n            inlineScriptBlocks = [],\n            parts;\n\n        for (var s in scripts) {\n            if (_has(scripts, s) && !scripts[s].src) {\n                inlineScriptBlocks.push(scripts[s]);\n            }\n        }\n\n        for (var line = 2; line < lines.length; line += 2) {\n            var item = null;\n            if ((parts = lineRE1.exec(lines[line]))) {\n                item = {\n                    'url': parts[2],\n                    'func': parts[3],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null\n                };\n            } else if ((parts = lineRE2.exec(lines[line]))) {\n                item = {\n                    'url': parts[3],\n                    'func': parts[4],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.\n                };\n                var relativeLine = (+parts[1]); // relative to the start of the <SCRIPT> block\n                var script = inlineScriptBlocks[parts[2] - 1];\n                if (script) {\n                    var source = getSource(item.url);\n                    if (source) {\n                        source = source.join('\\n');\n                        var pos = source.indexOf(script.innerText);\n                        if (pos >= 0) {\n                            item.line = relativeLine + source.substring(0, pos).split('\\n').length;\n                        }\n                    }\n                }\n            } else if ((parts = lineRE3.exec(lines[line]))) {\n                var url = window.location.href.replace(/#.*$/, '');\n                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));\n                var src = findSourceInUrls(re, [url]);\n                item = {\n                    'url': url,\n                    'func': '',\n                    'args': [],\n                    'line': src ? src.line : parts[1],\n                    'column': null\n                };\n            }\n\n            if (item) {\n                if (!item.func) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n                var context = gatherContext(item.url, item.line);\n                var midline = (context ? context[Math.floor(context.length / 2)] : null);\n                if (context && midline.replace(/^\\s*/, '') === lines[line + 1].replace(/^\\s*/, '')) {\n                    item.context = context;\n                } else {\n                    // if (context) alert(\"Context mismatch. Correct midline:\\n\" + lines[i+1] + \"\\n\\nMidline:\\n\" + midline + \"\\n\\nContext:\\n\" + context.join(\"\\n\") + \"\\n\\nURL:\\n\" + item.url);\n                    item.context = [lines[line + 1]];\n                }\n                stack.push(item);\n            }\n        }\n        if (!stack.length) {\n            return null; // could not parse multiline exception message as Opera stack trace\n        }\n\n        return {\n            'mode': 'multiline',\n            'name': ex.name,\n            'message': lines[0],\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {TraceKit.StackTrace} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = guessFunctionName(initial.url, initial.line);\n            }\n\n            if (!initial.context) {\n                initial.context = gatherContext(initial.url, initial.line);\n            }\n\n            var reference = / '([^']+)' /.exec(message);\n            if (reference) {\n                initial.column = findSourceInLine(reference[1], initial.url, initial.line);\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        stackInfo.stack[0].context = initial.context;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {TraceKit.StackTrace=} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                // console.log('skipping internal function');\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'args': [],\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if ((parts = functionName.exec(curr.toString()))) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n              try {\n                item.func = parts.input.substring(0, parts.input.indexOf('{'));\n              } catch (e) { }\n            }\n\n            if ((source = findSourceByFunctionBody(curr))) {\n                item.url = source.url;\n                item.line = source.line;\n\n                if (item.func === UNKNOWN_FUNCTION) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n\n                var reference = / '([^']+)' /.exec(ex.message || ex.description);\n                if (reference) {\n                    item.column = findSourceInLine(reference[1], source.url, source.line);\n                }\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            }else{\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            // console.log('depth is ' + depth);\n            // console.log('stack is ' + stack.length);\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'mode': 'callers',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = (depth == null ? 0 : +depth);\n\n        try {\n            // This must be tried first because Opera 10 *destroys*\n            // its stacktrace property if you try to access the stack\n            // property first!!\n            stack = computeStackTraceFromStacktraceProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromOperaMultiLineMessage(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        return {\n            'mode': 'failed'\n        };\n    }\n\n    /**\n     * Logs a stacktrace starting from the previous call and working down.\n     * @param {(number|string)=} depth How many frames deep to trace.\n     * @return {TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceOfCaller(depth) {\n        depth = (depth == null ? 0 : +depth) + 1; // \"+ 1\" because \"ofCaller\" should drop one frame\n        try {\n            throw new Error();\n        } catch (ex) {\n            return computeStackTrace(ex, depth + 1);\n        }\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.guessFunctionName = guessFunctionName;\n    computeStackTrace.gatherContext = gatherContext;\n    computeStackTrace.ofCaller = computeStackTraceOfCaller;\n    computeStackTrace.getSource = getSource;\n\n    return computeStackTrace;\n}());\n\n/**\n * Extends support for global error handling for asynchronous browser\n * functions. Adopted from Closure Library's errorhandler.js\n * @memberof TraceKit\n */\nTraceKit.extendToAsynchronousCallbacks = function () {\n    var _helper = function _helper(fnName) {\n        var originalFn = window[fnName];\n        window[fnName] = function traceKitAsyncExtension() {\n            // Make a copy of the arguments\n            var args = _slice.call(arguments);\n            var originalCallback = args[0];\n            if (typeof (originalCallback) === 'function') {\n                args[0] = TraceKit.wrap(originalCallback);\n            }\n            // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n            // also only supports 2 argument and doesn't care what \"this\" is, so we\n            // can just call the original function directly.\n            if (originalFn.apply) {\n                return originalFn.apply(this, args);\n            } else {\n                return originalFn(args[0], args[1]);\n            }\n        };\n    };\n\n    _helper('setTimeout');\n    _helper('setInterval');\n};\n\n//Default options:\nif (!TraceKit.remoteFetching) {\n    TraceKit.remoteFetching = true;\n}\nif (!TraceKit.collectWindowErrors) {\n    TraceKit.collectWindowErrors = true;\n}\nif (!TraceKit.linesOfContext || TraceKit.linesOfContext < 1) {\n    // 5 lines before, the offending line, 5 lines after\n    TraceKit.linesOfContext = 11;\n}\n\n// UMD export\nif (typeof module !== 'undefined' && module.exports && window.module !== module) {\n    module.exports = TraceKit;\n} else if (typeof define === 'function' && define.amd) {\n    define('TraceKit', [], TraceKit);\n} else {\n    window.TraceKit = TraceKit;\n}\n\n}(typeof window !== 'undefined' ? window : global));\n","import * as TraceKit from 'TraceKit';\nexport interface ILastReferenceIdManager {\n  getLast(): string;\n  clearLast(): void;\n  setLast(eventId: string): void;\n}\n\nexport interface ILog {\n  trace(message: string): void;\n  info(message: string): void;\n  warn(message: string): void;\n  error(message: string): void;\n}\n\n                                                                    \n\nexport class DefaultLastReferenceIdManager implements ILastReferenceIdManager {\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @type {string}\n   * @private\n   */\n  private _lastReferenceId: string = null;\n\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @returns {string}\n   */\n  public getLast(): string {\n    return this._lastReferenceId;\n  }\n\n  /**\n   * Clears the last event's reference id.\n   */\n  public clearLast(): void {\n    this._lastReferenceId = null;\n  }\n\n  /**\n   * Sets the last event's reference id.\n   * @param eventId\n   */\n  public setLast(eventId: string): void {\n    this._lastReferenceId = eventId;\n  }\n}\n\n                              \n\nexport class ConsoleLog implements ILog {\n  public trace(message: string): void {\n    this.log('trace', message);\n  }\n\n  public info(message: string): void {\n    this.log('info', message);\n  }\n\n  public warn(message: string): void {\n    this.log('warn', message);\n  }\n\n  public error(message: string): void {\n    this.log('error', message);\n  }\n\n  private log(level: string, message: string) {\n    if (console) {\n      const msg = `[${level}] Exceptionless: ${message}`;\n\n      if (console[level]) {\n        console[level](msg);\n      } else if (console.log) {\n        console[`log`](msg);\n      }\n    }\n  }\n}\n\n                              \n\nexport class NullLog implements ILog {\n  public trace(message: string): void { }\n  public info(message: string): void { }\n  public warn(message: string): void { }\n  public error(message: string): void { }\n}\n\nexport interface IUserInfo {\n  identity?: string;\n  name?: string;\n  data?: any;\n}\n\n                                                                                                                                                               \n\nexport class HeartbeatPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = 'HeartbeatPlugin';\n\n  private _interval: number;\n  private _intervalId: any;\n\n  constructor(heartbeatInterval: number = 30000) {\n    this._interval = heartbeatInterval;\n  }\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    clearInterval(this._intervalId);\n\n    const user: IUserInfo = context.event.data['@user'];\n    if (user && user.identity) {\n      this._intervalId = setInterval(() => context.client.submitSessionHeartbeat(user.identity), this._interval);\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                \n\nexport class ReferenceIdPlugin implements IEventPlugin {\n  public priority: number = 20;\n  public name: string = 'ReferenceIdPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    if ((!context.event.reference_id || context.event.reference_id.length === 0) && context.event.type === 'error') {\n      context.event.reference_id = Utils.guid().replace('-', '').substring(0, 10);\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                             \n\nexport class EventPluginContext {\n  public cancelled: boolean;\n  public client: ExceptionlessClient;\n  public event: IEvent;\n  public contextData: ContextData;\n\n  constructor(client: ExceptionlessClient, event: IEvent, contextData?: ContextData) {\n    this.client = client;\n    this.event = event;\n    this.contextData = contextData ? contextData : new ContextData();\n  }\n\n  public get log(): ILog {\n    return this.client.config.log;\n  }\n}\n\nn\nexport class EventPluginManager {\n  public static run(context: EventPluginContext, callback: (context?: EventPluginContext) => void): void {\n    const wrap = (plugin: IEventPlugin, next?: () => void): () => void => {\n      return () => {\n        try {\n          if (!context.cancelled) {\n            plugin.run(context, next);\n          }\n        } catch (ex) {\n          context.cancelled = true;\n          context.log.error(`Error running plugin '${plugin.name}': ${ex.message}. Discarding Event.`);\n        }\n\n        if (context.cancelled && !!callback) {\n          callback(context);\n        }\n      };\n    };\n\n    const plugins: IEventPlugin[] = context.client.config.plugins; // optimization for minifier.\n    const wrappedPlugins: Array<() => void> = [];\n    if (!!callback) {\n      wrappedPlugins[plugins.length] = wrap({ name: 'cb', priority: 9007199254740992, run: callback }, null);\n    }\n\n    for (let index = plugins.length - 1; index > -1; index--) {\n      wrappedPlugins[index] = wrap(plugins[index], !!callback || (index < plugins.length - 1) ? wrappedPlugins[index + 1] : null);\n    }\n\n    wrappedPlugins[0]();\n  }\n\n  public static addDefaultPlugins(config: Configuration): void {\n    config.addPlugin(new ConfigurationDefaultsPlugin());\n    config.addPlugin(new ErrorPlugin());\n    config.addPlugin(new DuplicateCheckerPlugin());\n    config.addPlugin(new EventExclusionPlugin());\n    config.addPlugin(new ModuleInfoPlugin());\n    config.addPlugin(new RequestInfoPlugin());\n    config.addPlugin(new EnvironmentInfoPlugin());\n    config.addPlugin(new SubmissionMethodPlugin());\n  }\n}\n\n                                                                                                         \n\nexport interface IEventPlugin {\n  priority?: number;\n  name?: string;\n  run(context: EventPluginContext, next?: () => void): void;\n}\n\n                                                                                                                                                                                                                                                                                                                                     \n\nexport class DefaultEventQueue implements IEventQueue {\n  /**\n   * The configuration object.\n   * @type {Configuration}\n   * @private\n   */\n  private _config: Configuration;\n\n  /**\n   * A list of handlers that will be fired when events are submitted.\n   * @type {Array}\n   * @private\n   */\n  private _handlers: Array<(events: IEvent[], response: SubmissionResponse) => void> = [];\n\n  /**\n   * Suspends processing until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _suspendProcessingUntil: Date;\n\n  /**\n   * Discards queued items until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _discardQueuedItemsUntil: Date;\n\n  /**\n   * Returns true if the queue is processing.\n   * @type {boolean}\n   * @private\n   */\n  private _processingQueue: boolean = false;\n\n  /**\n   * Processes the queue every xx seconds.\n   * @type {Timer}\n   * @private\n   */\n  private _queueTimer: any;\n\n  constructor(config: Configuration) {\n    this._config = config;\n  }\n\n  public enqueue(event: IEvent): void {\n    const eventWillNotBeQueued: string = 'The event will not be queued.'; // optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    if (this.areQueuedItemsDiscarded()) {\n      log.info(`Queue items are currently being discarded. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    this.ensureQueueTimer();\n\n    const timestamp = config.storage.queue.save(event);\n    const logText = `type=${event.type} ${!!event.reference_id ? 'refid=' + event.reference_id : ''}`;\n    if (timestamp) {\n      log.info(`Enqueuing event: ${timestamp} ${logText}`);\n    } else {\n      log.error(`Could not enqueue event ${logText}`);\n    }\n  }\n\n  public process(isAppExiting?: boolean): void {\n    const queueNotProcessed: string = 'The queue will not be processed.'; // optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (this._processingQueue) {\n      return;\n    }\n\n    log.info('Processing queue...');\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${queueNotProcessed}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${queueNotProcessed}`);\n      return;\n    }\n\n    this._processingQueue = true;\n    this.ensureQueueTimer();\n\n    try {\n      const events = config.storage.queue.get(config.submissionBatchSize);\n      if (!events || events.length === 0) {\n        this._processingQueue = false;\n        return;\n      }\n\n      log.info(`Sending ${events.length} events to ${config.serverUrl}.`);\n      config.submissionClient.postEvents(events.map((e) => e.value), config, (response: SubmissionResponse) => {\n        this.processSubmissionResponse(response, events);\n        this.eventsPosted(events.map((e) => e.value), response);\n        log.info('Finished processing queue.');\n        this._processingQueue = false;\n      }, isAppExiting);\n    } catch (ex) {\n      log.error(`Error processing queue: ${ex}`);\n      this.suspendProcessing();\n      this._processingQueue = false;\n    }\n  }\n\n  public suspendProcessing(durationInMinutes?: number, discardFutureQueuedItems?: boolean, clearQueue?: boolean): void {\n    const config: Configuration = this._config; // Optimization for minifier.\n\n    if (!durationInMinutes || durationInMinutes <= 0) {\n      durationInMinutes = 5;\n    }\n\n    config.log.info(`Suspending processing for ${durationInMinutes} minutes.`);\n    this._suspendProcessingUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\n\n    if (discardFutureQueuedItems) {\n      this._discardQueuedItemsUntil = this._suspendProcessingUntil;\n    }\n\n    if (clearQueue) {\n      // Account is over the limit and we want to ensure that the sample size being sent in will contain newer errors.\n      config.storage.queue.clear();\n    }\n  }\n\n  public onEventsPosted(handler: (events: IEvent[], response: SubmissionResponse) => void): void {\n    !!handler && this._handlers.push(handler);\n  }\n\n  private eventsPosted(events: IEvent[], response: SubmissionResponse) {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(events, response);\n      } catch (ex) {\n        this._config.log.error(`Error calling onEventsPosted handler: ${ex}`);\n      }\n    }\n  }\n\n  private areQueuedItemsDiscarded(): boolean {\n    return this._discardQueuedItemsUntil && this._discardQueuedItemsUntil > new Date();\n  }\n\n  private ensureQueueTimer(): void {\n    if (!this._queueTimer) {\n      this._queueTimer = setInterval(() => this.onProcessQueue(), 10000);\n    }\n  }\n\n  private isQueueProcessingSuspended(): boolean {\n    return this._suspendProcessingUntil && this._suspendProcessingUntil > new Date();\n  }\n\n  private onProcessQueue(): void {\n    if (!this.isQueueProcessingSuspended() && !this._processingQueue) {\n      this.process();\n    }\n  }\n\n  private processSubmissionResponse(response: SubmissionResponse, events: IStorageItem[]): void {\n    const noSubmission: string = 'The event will not be submitted.'; // Optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (response.success) {\n      log.info(`Sent ${events.length} events.`);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.serviceUnavailable) {\n      // You are currently over your rate limit or the servers are under stress.\n      log.error('Server returned service unavailable.');\n      this.suspendProcessing();\n      return;\n    }\n\n    if (response.paymentRequired) {\n      // If the organization over the rate limit then discard the event.\n      log.info('Too many events have been submitted, please upgrade your plan.');\n      this.suspendProcessing(null, true, true);\n      return;\n    }\n\n    if (response.unableToAuthenticate) {\n      // The api key was suspended or could not be authorized.\n      log.info(`Unable to authenticate, please check your configuration. ${noSubmission}`);\n      this.suspendProcessing(15);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.notFound || response.badRequest) {\n      // The service end point could not be found.\n      log.error(`Error while trying to submit data: ${response.message}`);\n      this.suspendProcessing(60 * 4);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.requestEntityTooLarge) {\n      const message = 'Event submission discarded for being too large.';\n      if (config.submissionBatchSize > 1) {\n        log.error(`${message} Retrying with smaller batch size.`);\n        config.submissionBatchSize = Math.max(1, Math.round(config.submissionBatchSize / 1.5));\n      } else {\n        log.error(`${message} ${noSubmission}`);\n        this.removeEvents(events);\n      }\n\n      return;\n    }\n\n    if (!response.success) {\n      log.error(`Error submitting events: ${response.message || 'Please check the network tab for more info.'}`);\n      this.suspendProcessing();\n    }\n  }\n\n  private removeEvents(events: IStorageItem[]) {\n    for (let index = 0; index < (events || []).length; index++) {\n      this._config.storage.queue.remove(events[index].timestamp);\n    }\n  }\n}\n\n                                                                                                                 \n\nexport interface IEventQueue {\n  enqueue(event: IEvent): void;\n  process(isAppExiting?: boolean): void;\n  suspendProcessing(durationInMinutes?: number, discardFutureQueuedItems?: boolean, clearQueue?: boolean): void;\n  onEventsPosted(handler: (events: IEvent[], response: SubmissionResponse) => void): void;\n}\n\n                                                                                                                                  \n\nexport interface IEnvironmentInfoCollector {\n  getEnvironmentInfo(context: EventPluginContext): IEnvironmentInfo;\n}\n\n                                                                                                              \n\nexport interface IErrorParser {\n  parse(context: EventPluginContext, exception: Error): IError;\n}\n\n                                                                                                                \n\nexport interface IModuleCollector {\n  getModules(context: EventPluginContext): IModule[];\n}\n\n                                                                                                                          \n\nexport interface IRequestInfoCollector {\n  getRequestInfo(context: EventPluginContext): IRequestInfo;\n}\n\n                                                                                                                                                  \n\nexport class InMemoryStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(maxQueueItems: number = 250) {\n    this.queue = new InMemoryStorage(maxQueueItems);\n    this.settings = new InMemoryStorage(1);\n  }\n\n}\n\n                                      \n\nexport interface IStorageProvider {\n  queue: IStorage;\n  settings: IStorage;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n\n// tslint:disable-next-line:prefer-const\ndeclare var XDomainRequest: { new (); create(); };\n\nexport class DefaultSubmissionClient implements ISubmissionClient {\n  public configurationVersionHeader: string = 'x-exceptionless-configversion';\n\n  public postEvents(events: IEvent[], config: Configuration, callback: (response: SubmissionResponse) => void, isAppExiting?: boolean): void {\n    const data = JSON.stringify(events);\n    const request = this.createRequest(config, 'POST',  `${config.serverUrl}/api/v2/events`, data);\n    const cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb, isAppExiting);\n  }\n\n  public postUserDescription(referenceId: string, description: IUserDescription, config: Configuration, callback: (response: SubmissionResponse) => void): void {\n    const path = `${config.serverUrl}/api/v2/events/by-ref/${encodeURIComponent(referenceId)}/user-description`;\n    const data = JSON.stringify(description);\n    const request = this.createRequest(config, 'POST', path, data);\n    const cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public getSettings(config: Configuration, version: number, callback: (response: SettingsResponse) => void): void {\n    const request = this.createRequest(config, 'GET', `${config.serverUrl}/api/v2/projects/config?v=${version}`);\n    const cb = (status, message, data?, headers?) => {\n      if (status !== 200) {\n        return callback(new SettingsResponse(false, null, -1, null, message));\n      }\n\n      let settings: IClientConfiguration;\n      try {\n        settings = JSON.parse(data);\n      } catch (e) {\n        config.log.error(`Unable to parse settings: '${data}'`);\n      }\n\n      if (!settings || isNaN(settings.version)) {\n        return callback(new SettingsResponse(false, null, -1, null, 'Invalid configuration settings.'));\n      }\n\n      callback(new SettingsResponse(true, settings.settings || {}, settings.version));\n    };\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public sendHeartbeat(sessionIdOrUserId: string, closeSession: boolean, config: Configuration): void {\n    const request = this.createRequest(config, 'GET', `${config.heartbeatServerUrl}/api/v2/events/session/heartbeat?id=${sessionIdOrUserId}&close=${closeSession}`);\n    config.submissionAdapter.sendRequest(request);\n  }\n\n  private createRequest(config: Configuration, method: string, url: string, data: string = null): SubmissionRequest {\n    return {\n      method,\n      url,\n      data,\n      apiKey: config.apiKey,\n      userAgent: config.userAgent\n    };\n  }\n\n  private createSubmissionCallback(config: Configuration, callback: (response: SubmissionResponse) => void) {\n    return (status, message, data?, headers?) => {\n      const settingsVersion: number = headers && parseInt(headers[this.configurationVersionHeader], 10);\n      SettingsManager.checkVersion(settingsVersion, config);\n\n      callback(new SubmissionResponse(status, message));\n    };\n  }\n}\n\n                                                                                                                   \n\nexport interface ISubmissionAdapter {\n  sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean): void;\n}\n\n                                                                                                                                                                                                                                                                                           \n\nexport interface ISubmissionClient {\n  postEvents(events: IEvent[], config: Configuration, callback: (response: SubmissionResponse) => void, isAppExiting?: boolean): void;\n  postUserDescription(referenceId: string, description: IUserDescription, config: Configuration, callback: (response: SubmissionResponse) => void): void;\n  getSettings(config: Configuration, version: number, callback: (response: SettingsResponse) => void): void;\n  sendHeartbeat(sessionIdOrUserId: string, closeSession: boolean, config: Configuration): void;\n}\n\nexport class Utils {\n  public static addRange<T>(target: T[], ...values: T[]) {\n    if (!target) {\n      target = [];\n    }\n\n    if (!values || values.length === 0) {\n      return target;\n    }\n\n    for (const value of values) {\n      if (value && target.indexOf(value) < 0) {\n        target.push(value);\n      }\n    }\n\n    return target;\n  }\n\n  public static getHashCode(source: string): number {\n    if (!source || source.length === 0) {\n      return 0;\n    }\n\n    let hash: number = 0;\n    for (let index = 0; index < source.length; index++) {\n      const character = source.charCodeAt(index);\n      hash = ((hash << 5) - hash) + character;\n      hash |= 0;\n    }\n\n    return hash;\n  }\n\n  public static getCookies(cookies: string, exclusions?: string[]): object {\n    const result: object = {};\n\n    const parts: string[] = (cookies || '').split('; ');\n    for (const part of parts) {\n      const cookie: string[] = part.split('=');\n      if (!Utils.isMatch(cookie[0], exclusions)) {\n        result[cookie[0]] = cookie[1];\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static guid(): string {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    }\n\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n  }\n\n  // tslint:disable-next-line:ban-types\n  public static merge(defaultValues: Object, values: Object) {\n    const result: object = {};\n\n    for (const key in defaultValues || {}) {\n      if (!!defaultValues[key]) {\n        result[key] = defaultValues[key];\n      }\n    }\n\n    for (const key in values || {}) {\n      if (!!values[key]) {\n        result[key] = values[key];\n      }\n    }\n\n    return result;\n  }\n\n  public static parseVersion(source: string): string {\n    if (!source) {\n      return null;\n    }\n\n    const versionRegex = /(v?((\\d+)\\.(\\d+)(\\.(\\d+))?)(?:-([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?(?:\\+([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?)/;\n    const matches = versionRegex.exec(source);\n    if (matches && matches.length > 0) {\n      return matches[0];\n    }\n\n    return null;\n  }\n\n  public static parseQueryString(query: string, exclusions?: string[]) {\n    if (!query || query.length === 0) {\n      return null;\n    }\n\n    const pairs: string[] = query.split('&');\n    if (pairs.length === 0) {\n      return null;\n    }\n\n    const result: object = {};\n    for (const pair of pairs) {\n      const parts = pair.split('=');\n      if (!Utils.isMatch(parts[0], exclusions)) {\n        result[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static randomNumber(): number {\n    return Math.floor(Math.random() * 9007199254740992);\n  }\n\n  /**\n   * Checks to see if a value matches a pattern.\n   * @param input the value to check against the @pattern.\n   * @param pattern The pattern to check, supports wild cards (*).\n   */\n  public static isMatch(input: string, patterns: string[], ignoreCase: boolean = true): boolean {\n    if (!input || typeof input !== 'string') {\n      return false;\n    }\n\n    const trim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n    input = (ignoreCase ? input.toLowerCase() : input).replace(trim, '');\n\n    return (patterns || []).some((pattern) => {\n      if (typeof pattern !== 'string') {\n        return false;\n      }\n\n      pattern = (ignoreCase ? pattern.toLowerCase() : pattern).replace(trim, '');\n      if (pattern.length <= 0) {\n        return false;\n      }\n\n      const startsWithWildcard: boolean = pattern[0] === '*';\n      if (startsWithWildcard) {\n        pattern = pattern.slice(1);\n      }\n\n      const endsWithWildcard: boolean = pattern[pattern.length - 1] === '*';\n      if (endsWithWildcard) {\n        pattern = pattern.substring(0, pattern.length - 1);\n      }\n\n      if (startsWithWildcard && endsWithWildcard) {\n        return pattern.length <= input.length && input.indexOf(pattern, 0) !== -1;\n      }\n\n      if (startsWithWildcard) {\n        return Utils.endsWith(input, pattern);\n      }\n\n      if (endsWithWildcard) {\n        return Utils.startsWith(input, pattern);\n      }\n\n      return input === pattern;\n    });\n  }\n\n  public static isEmpty(input: object) {\n    return input === null || (typeof (input) === 'object' && Object.keys(input).length === 0);\n  }\n\n  public static startsWith(input: string, prefix: string): boolean {\n    return input.substring(0, prefix.length) === prefix;\n  }\n\n  public static endsWith(input: string, suffix: string): boolean {\n    return input.indexOf(suffix, input.length - suffix.length) !== -1;\n  }\n\n  /**\n   * Stringifys an object with optional exclusions and max depth.\n   * @param data The data object to add.\n   * @param exclusions Any property names that should be excluded.\n   * @param maxDepth The max depth of the object to include.\n   */\n  public static stringify(data: any, exclusions?: string[], maxDepth?: number): string {\n    function stringifyImpl(obj: any, excludedKeys: string[]): string {\n      const cache: string[] = [];\n      return JSON.stringify(obj, (key: string, value: any) => {\n        if (Utils.isMatch(key, excludedKeys)) {\n          return;\n        }\n\n        if (typeof value === 'object' && !!value) {\n          if (cache.indexOf(value) !== -1) {\n            // Circular reference found, discard key\n            return;\n          }\n\n          cache.push(value);\n        }\n\n        return value;\n      });\n    }\n\n    if (({}).toString.call(data) === '[object Object]') {\n      const flattened = {};\n      /* tslint:disable:forin */\n      for (const prop in data) {\n        const value = data[prop];\n        if (value === data) {\n          continue;\n        }\n        flattened[prop] = data[prop];\n      }\n      /* tslint:enable:forin */\n\n      return stringifyImpl(flattened, exclusions);\n    }\n\n    if (({}).toString.call(data) === '[object Array]') {\n      const result = [];\n      for (let index = 0; index < data.length; index++) {\n        result[index] = JSON.parse(stringifyImpl(data[index], exclusions));\n      }\n\n      return JSON.stringify(result);\n    }\n\n    return stringifyImpl(data, exclusions);\n  }\n\n  public static toBoolean(input, defaultValue: boolean = false): boolean {\n    if (typeof input === 'boolean') {\n      return input;\n    }\n\n    if (input === null || typeof input !== 'number' && typeof input !== 'string') {\n      return defaultValue;\n    }\n\n    switch ((input + '').toLowerCase().trim()) {\n      case 'true': case 'yes': case '1': return true;\n      case 'false': case 'no': case '0': case null: return false;\n    }\n\n    return defaultValue;\n  }\n}\n\nn\nexport interface IConfigurationSettings {\n  apiKey?: string;\n  serverUrl?: string;\n  heartbeatServerUrl?: string;\n  updateSettingsWhenIdleInterval?: number;\n  environmentInfoCollector?: IEnvironmentInfoCollector;\n  errorParser?: IErrorParser;\n  lastReferenceIdManager?: ILastReferenceIdManager;\n  log?: ILog;\n  moduleCollector?: IModuleCollector;\n  requestInfoCollector?: IRequestInfoCollector;\n  submissionBatchSize?: number;\n  submissionClient?: ISubmissionClient;\n  submissionAdapter?: ISubmissionAdapter;\n  storage?: IStorageProvider;\n  queue?: IEventQueue;\n}\n\n                                                                                                                                                     \n\ninterface ISettingsWithVersion {\n  version: number;\n  settings: { [key: string]: string };\n}\n\nexport class SettingsManager {\n  /**\n   * A list of handlers that will be fired when the settings change.\n   * @type {Array}\n   * @private\n   */\n  private static _handlers: Array<(config: Configuration) => void> = [];\n\n  public static onChanged(handler: (config: Configuration) => void) {\n    !!handler && this._handlers.push(handler);\n  }\n\n  public static applySavedServerSettings(config: Configuration): void {\n    if (!config || !config.isValid) {\n      return;\n    }\n\n    const savedSettings = this.getSavedServerSettings(config);\n    config.log.info(`Applying saved settings: v${savedSettings.version}`);\n    config.settings = Utils.merge(config.settings, savedSettings.settings);\n    this.changed(config);\n  }\n\n  public static getVersion(config: Configuration): number {\n    if (!config || !config.isValid) {\n      return 0;\n    }\n\n    const savedSettings = this.getSavedServerSettings(config);\n    return savedSettings.version || 0;\n  }\n\n  public static checkVersion(version: number, config: Configuration): void {\n    const currentVersion: number = this.getVersion(config);\n    if (version <= currentVersion) {\n      return;\n    }\n\n    config.log.info(`Updating settings from v${currentVersion} to v${version}`);\n    this.updateSettings(config, currentVersion);\n  }\n\n  public static updateSettings(config: Configuration, version?: number): void {\n    if (!config || !config.enabled) {\n      return;\n    }\n\n    const unableToUpdateMessage = 'Unable to update settings';\n    if (!config.isValid) {\n      config.log.error(`${unableToUpdateMessage}: ApiKey is not set.`);\n      return;\n    }\n\n    if (!version || version < 0) {\n      version = this.getVersion(config);\n    }\n\n    config.log.info(`Checking for updated settings from: v${version}.`);\n    config.submissionClient.getSettings(config, version, (response: SettingsResponse) => {\n      if (!config || !response || !response.success || !response.settings) {\n        config.log.warn(`${unableToUpdateMessage}: ${response.message}`);\n        return;\n      }\n\n      config.settings = Utils.merge(config.settings, response.settings);\n\n      // TODO: Store snapshot of settings after reading from config and attributes and use that to revert to defaults.\n      // Remove any existing server settings that are not in the new server settings.\n      const savedServerSettings = SettingsManager.getSavedServerSettings(config);\n      for (const key in savedServerSettings) {\n        if (response.settings[key]) {\n          continue;\n        }\n\n        delete config.settings[key];\n      }\n\n      const newSettings: ISettingsWithVersion = {\n        version: response.settingsVersion,\n        settings: response.settings\n      };\n\n      config.storage.settings.save(newSettings);\n\n      config.log.info(`Updated settings: v${newSettings.version}`);\n      this.changed(config);\n    });\n  }\n\n  private static changed(config: Configuration) {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(config);\n      } catch (ex) {\n        config.log.error(`Error calling onChanged handler: ${ex}`);\n      }\n    }\n  }\n\n  private static getSavedServerSettings(config: Configuration): ISettingsWithVersion {\n    const item = config.storage.settings.get()[0];\n    if (item && item.value && item.value.version && item.value.settings) {\n      return item.value;\n    }\n\n    return { version: 0, settings: {} };\n  }\n}\n\nexport interface IEvent {\n  type?: string;\n  source?: string;\n  date?: Date;\n  tags?: string[];\n  message?: string;\n  geo?: string;\n  value?: number;\n  data?: any;\n  reference_id?: string;\n  count?: number;\n}\n\nexport class SubmissionResponse {\n  public success: boolean = false;\n  public badRequest: boolean = false;\n  public serviceUnavailable: boolean = false;\n  public paymentRequired: boolean = false;\n  public unableToAuthenticate: boolean = false;\n  public notFound: boolean = false;\n  public requestEntityTooLarge: boolean = false;\n  public statusCode: number;\n  public message: string;\n\n  constructor(statusCode: number, message?: string) {\n    this.statusCode = statusCode;\n    this.message = message;\n\n    this.success = statusCode >= 200 && statusCode <= 299;\n    this.badRequest = statusCode === 400;\n    this.serviceUnavailable = statusCode === 503;\n    this.paymentRequired = statusCode === 402;\n    this.unableToAuthenticate = statusCode === 401 || statusCode === 403;\n    this.notFound = statusCode === 404;\n    this.requestEntityTooLarge = statusCode === 413;\n  }\n}\n\nn\nexport class ExceptionlessClient {\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   * @private\n   */\n  private static _instance: ExceptionlessClient = null;\n\n  public config: Configuration;\n\n  private _intervalId: any;\n  private _timeoutId: any;\n\n  constructor();\n  constructor(settings: IConfigurationSettings);\n  constructor(apiKey: string, serverUrl?: string);\n  constructor(settingsOrApiKey?: IConfigurationSettings | string, serverUrl?: string) {\n    this.config = typeof settingsOrApiKey === 'object'\n      ? new Configuration(settingsOrApiKey)\n      : new Configuration({ apiKey:  settingsOrApiKey as string, serverUrl });\n\n    this.updateSettingsTimer(5000);\n    this.config.onChanged((config) => this.updateSettingsTimer(this._timeoutId > 0 ? 5000 : 0));\n    this.config.queue.onEventsPosted((events, response) =>  this.updateSettingsTimer());\n  }\n\n  public createException(exception: Error): EventBuilder {\n    const pluginContextData = new ContextData();\n    pluginContextData.setException(exception);\n    return this.createEvent(pluginContextData).setType('error');\n  }\n\n  public submitException(exception: Error, callback?: (context: EventPluginContext) => void): void {\n    this.createException(exception).submit(callback);\n  }\n\n  public createUnhandledException(exception: Error, submissionMethod?: string): EventBuilder {\n    const builder = this.createException(exception);\n    builder.pluginContextData.markAsUnhandledError();\n    builder.pluginContextData.setSubmissionMethod(submissionMethod);\n\n    return builder;\n  }\n\n  public submitUnhandledException(exception: Error, submissionMethod?: string, callback?: (context: EventPluginContext) => void) {\n    this.createUnhandledException(exception, submissionMethod).submit(callback);\n  }\n\n  public createFeatureUsage(feature: string): EventBuilder {\n    return this.createEvent().setType('usage').setSource(feature);\n  }\n\n  public submitFeatureUsage(feature: string, callback?: (context: EventPluginContext) => void): void {\n    this.createFeatureUsage(feature).submit(callback);\n  }\n\n  public createLog(message: string): EventBuilder;\n  public createLog(source: string, message: string): EventBuilder;\n  public createLog(source: string, message: string, level: string): EventBuilder;\n  public createLog(sourceOrMessage: string, message?: string, level?: string): EventBuilder {\n    let builder = this.createEvent().setType('log');\n\n    if (message && level) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message).setProperty('@level', level);\n    } else if (message) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message);\n    } else {\n      builder = builder.setMessage(sourceOrMessage);\n\n      try {\n        // TODO: Look into using https: //www.stevefenton.co.uk/Content/Blog/Date/201304/Blog/Obtaining-A-Class-Name-At-Runtime-In-TypeScript/\n        const caller: any = this.createLog.caller;\n        builder = builder.setSource(caller && caller.caller && caller.caller.name);\n      } catch (e) {\n        this.config.log.trace('Unable to resolve log source: ' + e.message);\n      }\n    }\n\n    return builder;\n  }\n\n  public submitLog(message: string): void;\n  public submitLog(source: string, message: string): void;\n  public submitLog(source: string, message: string, level: string, callback?: (context: EventPluginContext) => void): void;\n  public submitLog(sourceOrMessage: string, message?: string, level?: string, callback?: (context: EventPluginContext) => void): void {\n    this.createLog(sourceOrMessage, message, level).submit(callback);\n  }\n\n  public createNotFound(resource: string): EventBuilder {\n    return this.createEvent().setType('404').setSource(resource);\n  }\n\n  public submitNotFound(resource: string, callback?: (context: EventPluginContext) => void): void {\n    this.createNotFound(resource).submit(callback);\n  }\n\n  public createSessionStart(): EventBuilder {\n    return this.createEvent().setType('session');\n  }\n\n  public submitSessionStart(callback?: (context: EventPluginContext) => void): void {\n    this.createSessionStart().submit(callback);\n  }\n\n  public submitSessionEnd(sessionIdOrUserId: string): void {\n    if (sessionIdOrUserId) {\n      this.config.log.info(`Submitting session end: ${sessionIdOrUserId}`);\n      this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, true, this.config);\n    }\n  }\n\n  public submitSessionHeartbeat(sessionIdOrUserId: string): void {\n    if (sessionIdOrUserId) {\n      this.config.log.info(`Submitting session heartbeat: ${sessionIdOrUserId}`);\n      this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, false, this.config);\n    }\n  }\n\n  public createEvent(pluginContextData?: ContextData): EventBuilder {\n    return new EventBuilder({ date: new Date() }, this, pluginContextData);\n  }\n\n  /**\n   * Submits the event to be sent to the server.\n   * @param event The event data.\n   * @param pluginContextData Any contextual data objects to be used by Exceptionless plugins to gather default information for inclusion in the report information.\n   * @param callback\n   */\n  public submitEvent(event: IEvent, pluginContextData?: ContextData, callback?: (context: EventPluginContext) => void): void {\n    function cancelled(context: EventPluginContext) {\n      if (!!context) {\n        context.cancelled = true;\n      }\n\n      return !!callback && callback(context);\n    }\n\n    const context = new EventPluginContext(this, event, pluginContextData);\n    if (!event) {\n      return cancelled(context);\n    }\n\n    if (!this.config.enabled) {\n      this.config.log.info('Event submission is currently disabled.');\n      return cancelled(context);\n    }\n\n    if (!event.data) {\n      event.data = {};\n    }\n\n    if (!event.tags || !event.tags.length) {\n      event.tags = [];\n    }\n\n    EventPluginManager.run(context, (ctx: EventPluginContext) => {\n      const config = ctx.client.config;\n      const ev = ctx.event;\n\n      if (!ctx.cancelled) {\n        // ensure all required data\n        if (!ev.type || ev.type.length === 0) {\n          ev.type = 'log';\n        }\n\n        if (!ev.date) {\n          ev.date = new Date();\n        }\n\n        config.queue.enqueue(ev);\n\n        if (ev.reference_id && ev.reference_id.length > 0) {\n          ctx.log.info(`Setting last reference id '${ev.reference_id}'`);\n          config.lastReferenceIdManager.setLast(ev.reference_id);\n        }\n      }\n\n      !!callback && callback(ctx);\n    });\n  }\n\n  /**\n   * Updates the user's email address and description of an event for the specified reference id.\n   * @param referenceId The reference id of the event to update.\n   * @param email The user's email address to set on the event.\n   * @param description The user's description of the event.\n   * @param callback The submission response.\n   */\n  public updateUserEmailAndDescription(referenceId: string, email: string, description: string, callback?: (response: SubmissionResponse) => void) {\n    if (!referenceId || !email || !description || !this.config.enabled) {\n      return !!callback && callback(new SubmissionResponse(500, 'cancelled'));\n    }\n\n    const userDescription: IUserDescription = { email_address: email, description };\n    this.config.submissionClient.postUserDescription(referenceId, userDescription, this.config, (response: SubmissionResponse) => {\n      if (!response.success) {\n        this.config.log.error(`Failed to submit user email and description for event '${referenceId}': ${response.statusCode} ${response.message}`);\n      }\n\n      !!callback && callback(response);\n    });\n  }\n\n  /**\n   * Gets the last event client id that was submitted to the server.\n   * @returns {string} The event client id.\n   */\n  public getLastReferenceId(): string {\n    return this.config.lastReferenceIdManager.getLast();\n  }\n\n  private updateSettingsTimer(initialDelay?: number) {\n    this.config.log.info(`Updating settings timer with delay: ${initialDelay}`);\n\n    this._timeoutId = clearTimeout(this._timeoutId);\n    this._timeoutId = clearInterval(this._intervalId);\n\n    const interval = this.config.updateSettingsWhenIdleInterval;\n    if (interval > 0) {\n      const updateSettings = () => SettingsManager.updateSettings(this.config);\n      if (initialDelay > 0) {\n        this._timeoutId = setTimeout(updateSettings, initialDelay);\n      }\n\n      this._intervalId = setInterval(updateSettings, interval);\n    }\n  }\n\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   */\n  public static get default() {\n    if (ExceptionlessClient._instance === null) {\n      ExceptionlessClient._instance = new ExceptionlessClient(null);\n    }\n\n    return ExceptionlessClient._instance;\n  }\n}\n\nexport class ContextData {\n  public setException(exception: Error): void {\n    if (exception) {\n      this['@@_Exception'] = exception;\n    }\n  }\n\n  public get hasException(): boolean {\n    return !!this['@@_Exception'];\n  }\n\n  public getException(): Error {\n    return this['@@_Exception'] || null;\n  }\n\n  public markAsUnhandledError(): void {\n    this['@@_IsUnhandledError'] = true;\n  }\n\n  public get isUnhandledError(): boolean {\n    return !!this['@@_IsUnhandledError'];\n  }\n\n  public setSubmissionMethod(method: string): void {\n    if (method) {\n      this['@@_SubmissionMethod'] = method;\n    }\n  }\n\n  public getSubmissionMethod(): string {\n    return this['@@_SubmissionMethod'] || null;\n  }\n}\n\nexport interface IEnvironmentInfo {\n  processor_count?: number;\n  total_physical_memory?: number;\n  available_physical_memory?: number;\n  command_line?: string;\n  process_name?: string;\n  process_id?: string;\n  process_memory_size?: number;\n  thread_id?: string;\n  architecture?: string;\n  o_s_name?: string;\n  o_s_version?: string;\n  ip_address?: string;\n  machine_name?: string;\n  install_id?: string;\n  runtime_version?: string;\n  data?: any;\n}\n\nexport interface IParameter {\n  data?: any;\n  generic_arguments?: string[];\n\n  name?: string;\n  type?: string;\n  type_namespace?: string;\n}\n\n                                          \n\nexport interface IMethod {\n  data?: any;\n  generic_arguments?: string[];\n  parameters?: IParameter[];\n\n  is_signature_target?: boolean;\n  declaring_namespace?: string;\n  declaring_type?: string;\n  name?: string;\n  module_id?: number;\n}\n\n                                    \n\nexport interface IStackFrame extends IMethod {\n  file_name?: string;\n  line_number?: number;\n  column?: number;\n}\n\n                                                                                 \n\nexport interface IInnerError {\n  message?: string;\n  type?: string;\n  code?: string;\n  data?: any;\n  inner?: IInnerError;\n  stack_trace?: IStackFrame[];\n  target_method?: IMethod;\n}\n\nexport interface IModule {\n  data?: any;\n\n  module_id?: number;\n  name?: string;\n  version?: string;\n  is_entry?: boolean;\n  created_date?: Date;\n  modified_date?: Date;\n}\n\n                                                                                 \n\nexport interface IError extends IInnerError {\n  modules?: IModule[];\n}\n\nexport interface IRequestInfo {\n  user_agent?: string;\n  http_method?: string;\n  is_secure?: boolean;\n  host?: string;\n  port?: number;\n  path?: string;\n  referrer?: string;\n  client_ip_address?: string;\n  cookies?: any;\n  post_data?: any;\n  query_string?: any;\n  data?: any;\n}\n\nexport interface IStorageItem {\n  timestamp: number;\n  value: any;\n}\n\n                                              \n\nexport interface IStorage {\n  save(value: any): number;\n  get(limit?: number): IStorageItem[];\n  remove(timestamp: number): void;\n  clear(): void;\n}\n\nexport type SubmissionCallback = (status: number, message: string, data?: string, headers?: object) => void;\n\nexport interface SubmissionRequest {\n  apiKey: string;\n  userAgent: string;\n  method: string;\n  url: string;\n  data: string;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n\nexport class Configuration implements IConfigurationSettings {\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @type {IConfigurationSettings}\n   * @private\n   */\n  private static _defaultSettings: IConfigurationSettings = null;\n\n  /**\n   * A default list of tags that will automatically be added to every\n   * report submitted to the server.\n   *\n   * @type {Array}\n   */\n  public defaultTags: string[] = [];\n\n  /**\n   * A default list of of extended data objects that will automatically\n   * be added to every report submitted to the server.\n   *\n   * @type {{}}\n   */\n  public defaultData: object = {};\n\n  /**\n   * Whether the client is currently enabled or not. If it is disabled,\n   * submitted errors will be discarded and no data will be sent to the server.\n   *\n   * @returns {boolean}\n   */\n  public enabled: boolean = true;\n\n  public environmentInfoCollector: IEnvironmentInfoCollector;\n  public errorParser: IErrorParser;\n  public lastReferenceIdManager: ILastReferenceIdManager = new DefaultLastReferenceIdManager();\n  public log: ILog;\n  public moduleCollector: IModuleCollector;\n  public requestInfoCollector: IRequestInfoCollector;\n\n  /**\n   * Maximum number of events that should be sent to the server together in a batch. (Defaults to 50)\n   */\n  public submissionBatchSize: number;\n  public submissionAdapter: ISubmissionAdapter;\n  public submissionClient: ISubmissionClient;\n\n  /**\n   * Contains a dictionary of custom settings that can be used to control\n   * the client and will be automatically updated from the server.\n   */\n  public settings: object = {};\n\n  public storage: IStorageProvider;\n\n  public queue: IEventQueue;\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @type {string}\n   * @private\n   */\n  private _apiKey: string;\n\n  /**\n   * The server url that all events will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _serverUrl: string = 'https://collector.exceptionless.io';\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _heartbeatServerUrl: string = 'https://heartbeat.exceptionless.io';\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @type {number}\n   * @private\n   */\n  private _updateSettingsWhenIdleInterval: number = 120000;\n\n  /**\n   * A list of exclusion patterns.\n   * @type {Array}\n   * @private\n   */\n  private _dataExclusions: string[] = [];\n\n  /**\n   * A list of user agent patterns.\n   * @type {Array}\n   * @private\n   */\n  private _userAgentBotPatterns: string[] = [];\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @type {Array}\n   * @private\n   */\n  private _plugins: IEventPlugin[] = [];\n\n  /**\n   * A list of handlers that will be fired when configuration changes.\n   * @type {Array}\n   * @private\n   */\n  private _handlers: Array<(config: Configuration) => void> = [];\n\n  constructor(configSettings?: IConfigurationSettings) {\n    function inject(fn: any) {\n      return typeof fn === 'function' ? fn(this) : fn;\n    }\n\n    configSettings = Utils.merge(Configuration.defaults, configSettings);\n\n    this.log = inject(configSettings.log) || new NullLog();\n    this.apiKey = configSettings.apiKey;\n    this.serverUrl = configSettings.serverUrl;\n    this.heartbeatServerUrl = configSettings.heartbeatServerUrl;\n    this.updateSettingsWhenIdleInterval = configSettings.updateSettingsWhenIdleInterval;\n\n    this.environmentInfoCollector = inject(configSettings.environmentInfoCollector);\n    this.errorParser = inject(configSettings.errorParser);\n    this.lastReferenceIdManager = inject(configSettings.lastReferenceIdManager) || new DefaultLastReferenceIdManager();\n    this.moduleCollector = inject(configSettings.moduleCollector);\n    this.requestInfoCollector = inject(configSettings.requestInfoCollector);\n    this.submissionBatchSize = inject(configSettings.submissionBatchSize) || 50;\n    this.submissionAdapter = inject(configSettings.submissionAdapter);\n    this.submissionClient = inject(configSettings.submissionClient) || new DefaultSubmissionClient();\n    this.storage = inject(configSettings.storage) || new InMemoryStorageProvider();\n    this.queue = inject(configSettings.queue) || new DefaultEventQueue(this);\n\n    SettingsManager.applySavedServerSettings(this);\n    EventPluginManager.addDefaultPlugins(this);\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @returns {string}\n   */\n  public get apiKey(): string {\n    return this._apiKey;\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @param value\n   */\n  public set apiKey(value: string) {\n    this._apiKey = value || null;\n    this.log.info(`apiKey: ${this._apiKey}`);\n    this.changed();\n  }\n\n  /**\n   * Returns true if the apiKey is valid.\n   * @returns {boolean}\n   */\n  public get isValid(): boolean {\n    return !!this.apiKey && this.apiKey.length >= 10;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @returns {string}\n   */\n  public get serverUrl(): string {\n    return this._serverUrl;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @param value\n   */\n  public set serverUrl(value: string) {\n    if (!!value) {\n      this._serverUrl = value;\n      this._heartbeatServerUrl = value;\n      this.log.info(`serverUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @returns {string}\n   */\n  public get heartbeatServerUrl(): string {\n    return this._heartbeatServerUrl;\n  }\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @param value\n   */\n  public set heartbeatServerUrl(value: string) {\n    if (!!value) {\n      this._heartbeatServerUrl = value;\n      this.log.info(`heartbeatServerUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @returns {number}\n   */\n  public get updateSettingsWhenIdleInterval(): number {\n    return this._updateSettingsWhenIdleInterval;\n  }\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @param value\n   */\n  public set updateSettingsWhenIdleInterval(value: number) {\n    if (typeof value !== 'number') {\n      return;\n    }\n\n    if (value <= 0) {\n      value = -1;\n    } else if (value > 0 && value < 15000) {\n      value = 15000;\n    }\n\n    this._updateSettingsWhenIdleInterval = value;\n    this.log.info(`updateSettingsWhenIdleInterval: ${value}`);\n    this.changed();\n  }\n\n  /**\n   *  A list of exclusion patterns that will automatically remove any data that\n   *  matches them from any data submitted to the server.\n   *\n   *  For example, entering CreditCard will remove any extended data properties,\n   *  form fields, cookies and query parameters from the report.\n   *\n   * @returns {string[]}\n   */\n  public get dataExclusions(): string[] {\n    const exclusions: string = this.settings['@@DataExclusions'];\n    return this._dataExclusions.concat(exclusions && exclusions.split(',') || []);\n  }\n\n  /**\n   * Add items to the list of exclusion patterns that will automatically remove any\n   * data that matches them from any data submitted to the server.\n   *\n   * For example, entering CreditCard will remove any extended data properties, form\n   * fields, cookies and query parameters from the report.\n   *\n   * @param exclusions\n   */\n  public addDataExclusions(...exclusions: string[]) {\n    this._dataExclusions = Utils.addRange<string>(this._dataExclusions, ...exclusions);\n  }\n\n  /**\n   * A list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @returns {string[]}\n   */\n  public get userAgentBotPatterns(): string[] {\n    const patterns: string = this.settings['@@UserAgentBotPatterns'];\n    return this._userAgentBotPatterns.concat(patterns && patterns.split(',') || []);\n  }\n\n  /**\n   * Add items to the list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @param userAgentBotPatterns\n   */\n  public addUserAgentBotPatterns(...userAgentBotPatterns: string[]) {\n    this._userAgentBotPatterns = Utils.addRange<string>(this._userAgentBotPatterns, ...userAgentBotPatterns);\n  }\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @returns {IEventPlugin[]}\n   */\n  public get plugins(): IEventPlugin[] {\n    return this._plugins.sort((p1: IEventPlugin, p2: IEventPlugin) => {\n      return (p1.priority < p2.priority) ? -1 : (p1.priority > p2.priority) ? 1 : 0;\n    });\n  }\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param plugin\n   */\n  public addPlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param name The name used to identify the plugin.\n   * @param priority Used to determine plugins priority.\n   * @param pluginAction A function that is run.\n   */\n  public addPlugin(name: string, priority: number, pluginAction: (context: EventPluginContext, next?: () => void) => void): void;\n  public addPlugin(pluginOrName: IEventPlugin | string, priority?: number, pluginAction?: (context: EventPluginContext, next?: () => void) => void): void {\n    const plugin: IEventPlugin = !!pluginAction ? { name: pluginOrName as string, priority, run: pluginAction } :  pluginOrName as IEventPlugin;\n    if (!plugin || !plugin.run) {\n      this.log.error('Add plugin failed: Run method not defined');\n      return;\n    }\n\n    if (!plugin.name) {\n      plugin.name = Utils.guid();\n    }\n\n    if (!plugin.priority) {\n      plugin.priority = 0;\n    }\n\n    let pluginExists: boolean = false;\n    const plugins = this._plugins; // optimization for minifier.\n    for (const p of plugins) {\n      if (p.name === plugin.name) {\n        pluginExists = true;\n        break;\n      }\n    }\n\n    if (!pluginExists) {\n      plugins.push(plugin);\n    }\n  }\n\n  /**\n   * Remove the plugin from this configuration.\n   * @param plugin\n   */\n  public removePlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Remove an plugin by key from this configuration.\n   * @param name\n   */\n  public removePlugin(pluginOrName: IEventPlugin | string): void {\n    const name: string = typeof pluginOrName === 'string' ? pluginOrName : pluginOrName.name;\n    if (!name) {\n      this.log.error('Remove plugin failed: Plugin name not defined');\n      return;\n    }\n\n    const plugins = this._plugins; // optimization for minifier.\n    for (let index = 0; index < plugins.length; index++) {\n      if (plugins[index].name === name) {\n        plugins.splice(index, 1);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Automatically set the application version for events.\n   * @param version\n   */\n  public setVersion(version: string): void {\n    if (!!version) {\n      this.defaultData['@version'] = version;\n    }\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): void;\n  public setUserIdentity(identity: string): void;\n  public setUserIdentity(identity: string, name: string): void;\n  public setUserIdentity(userInfoOrIdentity: IUserInfo | string, name?: string): void {\n    const USER_KEY: string = '@user'; // optimization for minifier.\n    const userInfo: IUserInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name };\n\n    const shouldRemove: boolean = !userInfo || (!userInfo.identity && !userInfo.name);\n    if (shouldRemove) {\n      delete this.defaultData[USER_KEY];\n    } else {\n      this.defaultData[USER_KEY] = userInfo;\n    }\n\n    this.log.info(`user identity: ${shouldRemove ? 'null' : userInfo.identity}`);\n  }\n\n  /**\n   * Used to identify the client that sent the events to the server.\n   * @returns {string}\n   */\n  public get userAgent(): string {\n    return 'exceptionless-js/1.0.0.0';\n  }\n\n  /**\n   * Automatically send a heartbeat to keep the session alive.\n   */\n  public useSessions(sendHeartbeats: boolean = true, heartbeatInterval: number = 30000): void {\n    if (sendHeartbeats) {\n      this.addPlugin(new HeartbeatPlugin(heartbeatInterval));\n    }\n  }\n\n  /**\n   * Automatically set a reference id for error events.\n   */\n  public useReferenceIds(): void {\n    this.addPlugin(new ReferenceIdPlugin());\n  }\n\n  public useLocalStorage(): void {\n    // This method will be injected via the prototype.\n  }\n\n  // TODO: Support a min log level.\n  public useDebugLogger(): void {\n    this.log = new ConsoleLog();\n  }\n\n  public onChanged(handler: (config: Configuration) => void) {\n    !!handler && this._handlers.push(handler);\n  }\n\n  private changed() {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(this);\n      } catch (ex) {\n        this.log.error(`Error calling onChanged handler: ${ex}`);\n      }\n    }\n  }\n\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @returns {IConfigurationSettings}\n   */\n  public static get defaults() {\n    if (Configuration._defaultSettings === null) {\n      Configuration._defaultSettings = {};\n    }\n\n    return Configuration._defaultSettings;\n  }\n}\n\nexport interface IUserDescription {\n  email_address?: string;\n  description?: string;\n  data?: any;\n}\n\nexport class SettingsResponse {\n  public success: boolean = false;\n  public settings: any;\n  public settingsVersion: number = -1;\n  public message: string;\n  public exception: any;\n\n  constructor(success: boolean, settings: any, settingsVersion: number = -1, exception: any = null, message: string = null) {\n    this.success = success;\n    this.settings = settings;\n    this.settingsVersion = settingsVersion;\n    this.exception = exception;\n    this.message = message;\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                   \n\nexport class EventBuilder {\n  public target: IEvent;\n  public client: ExceptionlessClient;\n  public pluginContextData: ContextData;\n\n  private _validIdentifierErrorMessage: string = 'must contain between 8 and 100 alphanumeric or \\'-\\' characters.'; // optimization for minifier.\n\n  constructor(event: IEvent, client: ExceptionlessClient, pluginContextData?: ContextData) {\n    this.target = event;\n    this.client = client;\n    this.pluginContextData = pluginContextData || new ContextData();\n  }\n\n  public setType(type: string): EventBuilder {\n    if (!!type) {\n      this.target.type = type;\n    }\n\n    return this;\n  }\n\n  public setSource(source: string): EventBuilder {\n    if (!!source) {\n      this.target.source = source;\n    }\n\n    return this;\n  }\n\n  public setReferenceId(referenceId: string): EventBuilder {\n    if (!this.isValidIdentifier(referenceId)) {\n      throw new Error(`ReferenceId ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.target.reference_id = referenceId;\n    return this;\n  }\n\n  /**\n   * Allows you to reference a parent event by its ReferenceId property. This allows you to have parent and child relationships.\n   * @param name Reference name\n   * @param id The reference id that points to a specific event\n   * @returns {EventBuilder}\n   */\n  public setEventReference(name: string, id: string): EventBuilder {\n    if (!name) {\n      throw new Error('Invalid name');\n    }\n\n    if (!id || !this.isValidIdentifier(id)) {\n      throw new Error(`Id ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.setProperty('@ref:' + name, id);\n    return this;\n  }\n\n  public setMessage(message: string): EventBuilder {\n    if (!!message) {\n      this.target.message = message;\n    }\n\n    return this;\n  }\n\n  public setGeo(latitude: number, longitude: number): EventBuilder {\n    if (latitude < -90.0 || latitude > 90.0) {\n      throw new Error('Must be a valid latitude value between -90.0 and 90.0.');\n    }\n\n    if (longitude < -180.0 || longitude > 180.0) {\n      throw new Error('Must be a valid longitude value between -180.0 and 180.0.');\n    }\n\n    this.target.geo = `${latitude},${longitude}`;\n    return this;\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): EventBuilder;\n  public setUserIdentity(identity: string): EventBuilder;\n  public setUserIdentity(identity: string, name: string): EventBuilder;\n  public setUserIdentity(userInfoOrIdentity: IUserInfo | string, name?: string): EventBuilder {\n    const userInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name };\n    if (!userInfo || (!userInfo.identity && !userInfo.name)) {\n      return this;\n    }\n\n    this.setProperty('@user', userInfo);\n    return this;\n  }\n\n  /**\n   * Sets the user's description of the event.\n   *\n   * @param emailAddress The email address\n   * @param description The user's description of the event.\n   * @returns {EventBuilder}\n   */\n  public setUserDescription(emailAddress: string, description: string): EventBuilder {\n    if (emailAddress && description) {\n      this.setProperty('@user_description', { email_address: emailAddress, description });\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting manual\n   * stacking information.\n   * @param signatureData A dictionary of strings to use for stacking.\n   * @param title An optional title for the stacking information.\n   * @returns {EventBuilder}\n   */\n  public setManualStackingInfo(signatureData: any, title?: string) {\n    if (signatureData) {\n      const stack: IManualStackingInfo = { signature_data: signatureData };\n      if (title) {\n        stack.title = title;\n      }\n\n      this.setProperty('@stack', stack);\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting the stacking key.\n   * @param manualStackingKey The manual stacking key.\n   * @param title An optional title for the stacking information.\n   * @returns {EventBuilder}\n   */\n  public setManualStackingKey(manualStackingKey: string, title?: string): EventBuilder {\n    if (manualStackingKey) {\n      const data = { ManualStackingKey: manualStackingKey };\n      this.setManualStackingInfo(data, title);\n    }\n\n    return this;\n  }\n\n  public setValue(value: number): EventBuilder {\n    if (!!value) {\n      this.target.value = value;\n    }\n\n    return this;\n  }\n\n  public addTags(...tags: string[]): EventBuilder {\n    this.target.tags = Utils.addRange<string>(this.target.tags, ...tags);\n    return this;\n  }\n\n  /**\n   * Adds the object to extended data. Uses @excludedPropertyNames\n   * to exclude data from being included in the event.\n   * @param name The data object to add.\n   * @param value The name of the object to add.\n   * @param maxDepth The max depth of the object to include.\n   * @param excludedPropertyNames Any property names that should be excluded.\n   */\n  public setProperty(name: string, value: any, maxDepth?: number, excludedPropertyNames?: string[]): EventBuilder {\n    if (!name || (value === undefined || value == null)) {\n      return this;\n    }\n\n    if (!this.target.data) {\n      this.target.data = {};\n    }\n\n    const result = JSON.parse(Utils.stringify(value, this.client.config.dataExclusions.concat(excludedPropertyNames || []), maxDepth));\n    if (!Utils.isEmpty(result)) {\n      this.target.data[name] = result;\n    }\n\n    return this;\n  }\n\n  public markAsCritical(critical: boolean): EventBuilder {\n    if (critical) {\n      this.addTags('Critical');\n    }\n\n    return this;\n  }\n\n  public addRequestInfo(request: object): EventBuilder {\n    if (!!request) {\n      this.pluginContextData['@request'] = request;\n    }\n\n    return this;\n  }\n\n  public submit(callback?: (context: EventPluginContext) => void): void {\n    this.client.submitEvent(this.target, this.pluginContextData, callback);\n  }\n\n  private isValidIdentifier(value: string): boolean {\n    if (!value) {\n      return true;\n    }\n\n    if (value.length < 8 || value.length > 100) {\n      return false;\n    }\n\n    for (let index = 0; index < value.length; index++) {\n      const code = value.charCodeAt(index);\n      const isDigit = (code >= 48) && (code <= 57);\n      const isLetter = ((code >= 65) && (code <= 90)) || ((code >= 97) && (code <= 122));\n      const isMinus = code === 45;\n\n      if (!(isDigit || isLetter) && !isMinus) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nexport interface IManualStackingInfo {\n  title?: string;\n  signature_data?: any;\n}\n\n                                                                                                                                                \n\nexport class ConfigurationDefaultsPlugin implements IEventPlugin {\n  public priority: number = 10;\n  public name: string = 'ConfigurationDefaultsPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const config = context.client.config;\n    const defaultTags: string[] = config.defaultTags || [];\n    for (const tag of defaultTags) {\n      if (!!tag && context.event.tags.indexOf(tag) < 0) {\n        context.event.tags.push(tag);\n      }\n    }\n\n    // tslint:disable-next-line:ban-types\n    const defaultData: Object = config.defaultData || {};\n    for (const key in defaultData) {\n      if (!!defaultData[key]) {\n        const result = JSON.parse(Utils.stringify(defaultData[key], config.dataExclusions));\n        if (!Utils.isEmpty(result)) {\n          context.event.data[key] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                        \n\nexport class DuplicateCheckerPlugin implements IEventPlugin {\n  public priority: number = 1010;\n  public name: string = 'DuplicateCheckerPlugin';\n\n  private _mergedEvents: MergedEvent[] = [];\n  private _processedHashcodes: TimestampedHash[] = [];\n  private _getCurrentTime: () => number;\n  private _interval: number;\n\n  constructor(getCurrentTime: () => number = () => Date.now(), interval: number = 30000) {\n    this._getCurrentTime = getCurrentTime;\n    this._interval = interval;\n\n    setInterval(() => {\n      while (this._mergedEvents.length > 0) {\n        this._mergedEvents.shift().resubmit();\n      }\n    }, interval);\n  }\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    function getHashCode(error: IInnerError): number {\n      let hashCode = 0;\n      while (error) {\n        if (error.message && error.message.length) {\n          hashCode += (hashCode * 397) ^ Utils.getHashCode(error.message);\n        }\n        if (error.stack_trace && error.stack_trace.length) {\n          hashCode += (hashCode * 397) ^ Utils.getHashCode(JSON.stringify(error.stack_trace));\n        }\n        error = error.inner;\n      }\n\n      return hashCode;\n    }\n\n    const error = context.event.data['@error'];\n    const hashCode = getHashCode(error);\n    if (hashCode) {\n      const count = context.event.count || 1;\n      const now = this._getCurrentTime();\n\n      const merged = this._mergedEvents.filter((s) => s.hashCode === hashCode)[0];\n      if (merged) {\n        merged.incrementCount(count);\n        merged.updateDate(context.event.date);\n        context.log.info('Ignoring duplicate event with hash: ' + hashCode);\n        context.cancelled = true;\n      }\n\n      if (!context.cancelled && this._processedHashcodes.some((h) => h.hash === hashCode && h.timestamp >= (now - this._interval))) {\n        context.log.trace('Adding event with hash: ' + hashCode);\n        this._mergedEvents.push(new MergedEvent(hashCode, context, count));\n        context.cancelled = true;\n      }\n\n      if (!context.cancelled) {\n        context.log.trace('Enqueueing event with hash: ' + hashCode + 'to cache.');\n        this._processedHashcodes.push({ hash: hashCode, timestamp: now });\n\n        // Only keep the last 50 recent errors.\n        while (this._processedHashcodes.length > 50) {\n          this._processedHashcodes.shift();\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\ninterface TimestampedHash {\n  hash: number;\n  timestamp: number;\n}\n\nclass MergedEvent {\n  public hashCode: number;\n  private _count: number;\n  private _context: EventPluginContext;\n\n  constructor(hashCode: number, context: EventPluginContext, count: number) {\n    this.hashCode = hashCode;\n    this._context = context;\n    this._count = count;\n  }\n\n  public incrementCount(count: number) {\n    this._count += count;\n  }\n\n  public resubmit() {\n    this._context.event.count = this._count;\n    this._context.client.config.queue.enqueue(this._context.event);\n  }\n\n  public updateDate(date) {\n    if (date > this._context.event.date) {\n      this._context.event.date = date;\n    }\n  }\n}\n\n                                                                                                                                                                             \n\nexport class EnvironmentInfoPlugin implements IEventPlugin {\n  public priority: number = 80;\n  public name: string = 'EnvironmentInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ENVIRONMENT_KEY: string = '@environment'; // optimization for minifier.\n\n    const collector = context.client.config.environmentInfoCollector;\n    if (!context.event.data[ENVIRONMENT_KEY] && collector) {\n      const environmentInfo: IEnvironmentInfo = collector.getEnvironmentInfo(context);\n      if (!!environmentInfo) {\n        context.event.data[ENVIRONMENT_KEY] = environmentInfo;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                \n\nexport class ErrorPlugin implements IEventPlugin {\n  public priority: number = 30;\n  public name: string = 'ErrorPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\n    const ignoredProperties: string[] = [\n      'arguments',\n      'column',\n      'columnNumber',\n      'description',\n      'fileName',\n      'message',\n      'name',\n      'number',\n      'line',\n      'lineNumber',\n      'opera#sourceloc',\n      'sourceId',\n      'sourceURL',\n      'stack',\n      'stackArray',\n      'stacktrace'\n    ];\n\n    const exception = context.contextData.getException();\n    if (!!exception) {\n      context.event.type = 'error';\n\n      if (!context.event.data[ERROR_KEY]) {\n        const config = context.client.config;\n        const parser = config.errorParser;\n        if (!parser) {\n          throw new Error('No error parser was defined.');\n        }\n\n        const result = parser.parse(context, exception);\n        if (!!result) {\n          const additionalData = JSON.parse(Utils.stringify(exception, config.dataExclusions.concat(ignoredProperties)));\n          if (!Utils.isEmpty(additionalData)) {\n            if (!result.data) {\n              result.data = {};\n            }\n            result.data['@ext'] = additionalData;\n          }\n\n          context.event.data[ERROR_KEY] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                        \n\nexport class EventExclusionPlugin implements IEventPlugin {\n  public priority: number = 45;\n  public name: string = 'EventExclusionPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    function getLogLevel(level: string): number {\n      switch ((level || '').toLowerCase().trim()) {\n        case 'trace':\n        case 'true':\n        case '1':\n        case 'yes':\n          return 0;\n        case 'debug':\n          return 1;\n        case 'info':\n          return 2;\n        case 'warn':\n          return 3;\n        case 'error':\n          return 4;\n        case 'fatal':\n          return 5;\n        case 'off':\n        case 'false':\n        case '0':\n        case 'no':\n          return 6;\n        default:\n          return -1;\n      }\n    }\n\n    function getMinLogLevel(settings: object, loggerName: string = '*'): number {\n      return getLogLevel(getTypeAndSourceSetting(settings, 'log', loggerName, 'Trace') + '');\n    }\n\n    // tslint:disable-next-line:ban-types\n    function getTypeAndSourceSetting(settings: Object = {}, type: string, source: string, defaultValue?: string|boolean): string|boolean {\n      if (!type) {\n        return defaultValue;\n      }\n\n      const isLog = type === 'log';\n      const sourcePrefix =  `@@${type}:`;\n\n      const value = settings[sourcePrefix + source];\n      if (value) {\n        return !isLog ? Utils.toBoolean(value) : value;\n      }\n\n      // check for wildcard match\n      for (const key in settings) {\n        if (Utils.startsWith(key.toLowerCase(), sourcePrefix.toLowerCase()) && Utils.isMatch(source, [key.substring(sourcePrefix.length)])) {\n          return !isLog ? Utils.toBoolean(settings[key]) : settings[key];\n        }\n      }\n\n      return defaultValue;\n    }\n\n    const ev = context.event;\n    const log = context.log;\n    const settings = context.client.config.settings;\n\n    if (ev.type === 'log') {\n      const minLogLevel = getMinLogLevel(settings, ev.source);\n      const logLevel = getLogLevel(ev.data['@level']);\n\n      if (logLevel >= 0 && (logLevel > 5 || logLevel < minLogLevel)) {\n        log.info('Cancelling log event due to minimum log level.');\n        context.cancelled = true;\n      }\n    } else if (ev.type === 'error') {\n      let error: IInnerError = ev.data['@error'];\n      while (!context.cancelled && error) {\n        if (getTypeAndSourceSetting(settings, ev.type, error.type, true) === false) {\n          log.info(`Cancelling error from excluded exception type: ${error.type}`);\n          context.cancelled = true;\n        }\n\n        error = error.inner;\n      }\n    } else if (getTypeAndSourceSetting(settings, ev.type, ev.source, true) === false) {\n      log.info(`Cancelling event from excluded type: ${ev.type} and source: ${ev.source}`);\n      context.cancelled = true;\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                           \n\nexport class ModuleInfoPlugin implements IEventPlugin {\n  public priority: number = 50;\n  public name: string = 'ModuleInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\n\n    const collector = context.client.config.moduleCollector;\n    if (context.event.data[ERROR_KEY] && !context.event.data['@error'].modules && !!collector) {\n      const modules: IModule[] = collector.getModules(context);\n      if (modules && modules.length > 0) {\n        context.event.data[ERROR_KEY].modules = modules;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                          \n\nexport class RequestInfoPlugin implements IEventPlugin {\n  public priority: number = 70;\n  public name: string = 'RequestInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const REQUEST_KEY: string = '@request'; // optimization for minifier.\n\n    const config = context.client.config;\n    const collector = config.requestInfoCollector;\n    if (!context.event.data[REQUEST_KEY] && !!collector) {\n      const requestInfo: IRequestInfo = collector.getRequestInfo(context);\n      if (!!requestInfo) {\n        if (Utils.isMatch(requestInfo.user_agent, config.userAgentBotPatterns)) {\n          context.log.info('Cancelling event as the request user agent matches a known bot pattern');\n          context.cancelled = true;\n        } else {\n          context.event.data[REQUEST_KEY] = requestInfo;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                           \n\nexport class SubmissionMethodPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = 'SubmissionMethodPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const submissionMethod: string = context.contextData.getSubmissionMethod();\n    if (!!submissionMethod) {\n      context.event.data['@submission_method'] = submissionMethod;\n    }\n\n    next && next();\n  }\n}\n\n                                                                                     \n\nexport class InMemoryStorage implements IStorage {\n  private maxItems: number;\n  private items: IStorageItem[] = [];\n  private lastTimestamp: number = 0;\n\n  constructor(maxItems: number) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any): number {\n    if (!value) {\n      return null;\n    }\n\n    const items = this.items;\n    const timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    const item = { timestamp, value };\n\n    if (items.push(item) > this.maxItems) {\n      items.shift();\n    }\n\n    this.lastTimestamp = timestamp;\n    return item.timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    return this.items.slice(0, limit);\n  }\n\n  public remove(timestamp: number): void {\n    const items = this.items;\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].timestamp === timestamp) {\n        items.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  public clear(): void {\n    this.items = [];\n  }\n}\n\nexport interface IClientConfiguration {\n  settings: object;\n  version: number;\n}\n\n                                                                                     \n\nexport abstract class KeyValueStorageBase implements IStorage {\n  private maxItems: number;\n  private items: number[];\n  private lastTimestamp: number = 0;\n\n  constructor(maxItems) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any, single?: boolean): number {\n    if (!value) {\n      return null;\n    }\n\n    this.ensureIndex();\n\n    const items = this.items;\n    const timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    const key = this.getKey(timestamp);\n    const json = JSON.stringify(value);\n\n    try {\n      this.write(key, json);\n      this.lastTimestamp = timestamp;\n      if (items.push(timestamp) > this.maxItems) {\n        this.delete(this.getKey(items.shift()));\n      }\n    } catch (e) {\n      return null;\n    }\n\n    return timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    this.ensureIndex();\n\n    return this.items.slice(0, limit)\n      .map((timestamp) => {\n        // Read and parse item for this timestamp\n        const key = this.getKey(timestamp);\n        try {\n          const json = this.read(key);\n          const value = JSON.parse(json, parseDate);\n          return { timestamp, value };\n        } catch (error) {\n          // Something went wrong - try to delete the cause.\n          this.safeDelete(key);\n          return null;\n        }\n      })\n      .filter((item) => item != null);\n  }\n\n  public remove(timestamp: number): void {\n    this.ensureIndex();\n\n    const items = this.items;\n    const index = items.indexOf(timestamp);\n    if (index >= 0) {\n      const key = this.getKey(timestamp);\n      this.safeDelete(key);\n      items.splice(index, 1);\n    }\n  }\n\n  public clear(): void {\n    this.items.forEach((item) => this.safeDelete(this.getKey(item)));\n    this.items = [];\n  }\n\n  protected abstract write(key: string, value: string): void;\n  protected abstract read(key: string): string;\n  protected abstract readAllKeys(): string[];\n  protected abstract delete(key: string);\n  protected abstract getKey(timestamp: number): string;\n  protected abstract getTimestamp(key: string): number;\n\n  private ensureIndex() {\n    if (!this.items) {\n      this.items = this.createIndex();\n      this.lastTimestamp = Math.max(0, ...this.items) + 1;\n    }\n  }\n\n  private safeDelete(key: string): void {\n    try {\n      this.delete(key);\n    } catch (error) {\n    }\n  }\n\n  private createIndex() {\n    try {\n      const keys = this.readAllKeys();\n      return keys.map((key) => {\n        try {\n          const timestamp = this.getTimestamp(key);\n          if (!timestamp) {\n            this.safeDelete(key);\n            return null;\n          }\n          return timestamp;\n        } catch (error) {\n          this.safeDelete(key);\n          return null;\n        }\n      }).filter((timestamp) => timestamp != null)\n        .sort((a, b) => a - b);\n    } catch (error) {\n      return [];\n    }\n  }\n}\n\nfunction parseDate(key, value) {\n  const dateRegx = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/g;\n  if (typeof value === 'string') {\n    const a = dateRegx.exec(value);\n    if (a) {\n      return new Date(value);\n    }\n  }\n  return value;\n}\n\n                                                            \n\nexport class BrowserStorage extends KeyValueStorageBase {\n  private prefix: string;\n\n  public static isAvailable(): boolean {\n    try {\n      const storage = window.localStorage;\n      const x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  constructor(namespace: string, prefix: string = 'com.exceptionless.', maxItems: number = 20) {\n    super(maxItems);\n\n    this.prefix = prefix + namespace + '-';\n  }\n\n  public write(key: string, value: string) {\n    window.localStorage.setItem(key, value);\n  }\n\n  public read(key: string) {\n    return window.localStorage.getItem(key);\n  }\n\n  public readAllKeys() {\n    return Object.keys(window.localStorage)\n      .filter((key) => key.indexOf(this.prefix) === 0);\n  }\n\n  public delete(key: string) {\n    window.localStorage.removeItem(key);\n  }\n\n  public getKey(timestamp) {\n    return this.prefix + timestamp;\n  }\n\n  public getTimestamp(key) {\n    return parseInt(key.substr(this.prefix.length), 10);\n  }\n}\n\n                                                                                                                                                                                                                                                                                                           \n\nexport class DefaultErrorParser implements IErrorParser {\n  public parse(context: EventPluginContext, exception: Error): IError {\n    function getParameters(parameters: string | string[]): IParameter[] {\n      const params: string[] = (typeof parameters === 'string' ? [parameters] : parameters) || [];\n\n      const result: IParameter[] = [];\n      for (const param of params) {\n        result.push({ name: param });\n      }\n\n      return result;\n    }\n\n    function getStackFrames(stackFrames: TraceKit.StackFrame[]): IStackFrame[] {\n      const ANONYMOUS: string = '<anonymous>';\n      const frames: IStackFrame[] = [];\n\n      for (const frame of stackFrames) {\n        frames.push({\n          name: (frame.func || ANONYMOUS).replace('?', ANONYMOUS),\n          parameters: getParameters(frame.args),\n          file_name: frame.url,\n          line_number: frame.line || 0,\n          column: frame.column || 0\n        });\n      }\n\n      return frames;\n    }\n\n    const TRACEKIT_STACK_TRACE_KEY: string = '@@_TraceKit.StackTrace'; // optimization for minifier.\n\n    const stackTrace: TraceKit.StackTrace = !!context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      ? context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      : TraceKit.computeStackTrace(exception, 25);\n\n    if (!stackTrace) {\n      throw new Error('Unable to parse the exceptions stack trace.');\n    }\n\n    const message = typeof(exception) === 'string' ? exception as any : undefined;\n    return {\n      type: stackTrace.name,\n      message: stackTrace.message || exception.message || message,\n      stack_trace: getStackFrames(stackTrace.stack || [])\n    };\n  }\n}\n\n                                                                                                                                                                                                         \n\nexport class DefaultModuleCollector implements IModuleCollector {\n  public getModules(context: EventPluginContext): IModule[] {\n    if (document && document.getElementsByTagName) {\n      return null;\n    }\n\n    const modules: IModule[] = [];\n    const scripts: NodeListOf<HTMLScriptElement> = document.getElementsByTagName('script');\n    if (scripts && scripts.length > 0) {\n      for (let index = 0; index < scripts.length; index++) {\n        if (scripts[index].src) {\n          modules.push({\n            module_id: index,\n            name: scripts[index].src,\n            version: Utils.parseVersion(scripts[index].src)\n          });\n        } else if (!!scripts[index].innerHTML) {\n          modules.push({\n            module_id: index,\n            name: 'Script Tag',\n            version: Utils.getHashCode(scripts[index].innerHTML).toString()\n          });\n        }\n      }\n    }\n\n    return modules;\n  }\n}\n\n                                                                                                                                                                                                                             \n\nexport class DefaultRequestInfoCollector implements IRequestInfoCollector {\n  public getRequestInfo(context: EventPluginContext): IRequestInfo {\n    if (!document || !navigator || !location) {\n      return null;\n    }\n\n    const exclusions = context.client.config.dataExclusions;\n    const requestInfo: IRequestInfo = {\n      user_agent: navigator.userAgent,\n      is_secure: location.protocol === 'https:',\n      host: location.hostname,\n      port: location.port && location.port !== '' ? parseInt(location.port, 10) : 80,\n      path: location.pathname,\n      // client_ip_address: 'TODO',\n      cookies: Utils.getCookies(document.cookie, exclusions),\n      query_string: Utils.parseQueryString(location.search.substring(1), exclusions)\n    };\n\n    if (document.referrer && document.referrer !== '') {\n      requestInfo.referrer = document.referrer;\n    }\n\n    return requestInfo;\n  }\n}\n\n                                                                                                                                                \n\nexport class BrowserStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(prefix?: string, maxQueueItems: number = 250) {\n    this.queue = new BrowserStorage('q', prefix, maxQueueItems);\n    this.settings = new BrowserStorage('settings', prefix, 1);\n  }\n\n}\n\n                                                                                                                                                                              \n\n// tslint:disable-next-line:prefer-const\ndeclare var XDomainRequest: { new (); create(); };\n\nexport class DefaultSubmissionAdapter implements ISubmissionAdapter {\n  public sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean) {\n    // TODO: Handle sending events when app is exiting with send beacon.\n    const TIMEOUT: string = 'timeout';  // optimization for minifier.\n    const LOADED: string = 'loaded';  // optimization for minifier.\n    const WITH_CREDENTIALS: string = 'withCredentials';  // optimization for minifier.\n\n    let isCompleted: boolean = false;\n    let useSetTimeout: boolean = false;\n    function complete(mode: string, xhr: XMLHttpRequest) {\n      function parseResponseHeaders(headerStr) {\n        function trim(value) {\n          return value.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n        }\n\n        const headers = {};\n        const headerPairs = (headerStr || '').split('\\u000d\\u000a');\n        for (const headerPair of headerPairs) {\n          // Can't use split() here because it does the wrong thing\n          // if the header value has the string \": \" in it.\n          const separator = headerPair.indexOf('\\u003a\\u0020');\n          if (separator > 0) {\n            headers[trim(headerPair.substring(0, separator).toLowerCase())] = headerPair.substring(separator + 2);\n          }\n        }\n\n        return headers;\n      }\n\n      if (isCompleted) {\n        return;\n      }\n\n      isCompleted = true;\n\n      let message: string = xhr.statusText;\n      const responseText: string = xhr.responseText;\n      let status: number = xhr.status;\n\n      if (mode === TIMEOUT || status === 0) {\n        message = 'Unable to connect to server.';\n        status = 0;\n      } else if (mode === LOADED && !status) {\n        status = request.method === 'POST' ? 202 : 200;\n      } else if (status < 200 || status > 299) {\n        const responseBody: any = (xhr as any).responseBody;\n        if (!!responseBody && !!responseBody.message) {\n          message = responseBody.message;\n        } else if (!!responseText && responseText.indexOf('message') !== -1) {\n          try {\n            message = JSON.parse(responseText).message;\n          } catch (e) {\n            message = responseText;\n          }\n        }\n      }\n\n      callback && callback(status || 500, message || '', responseText, parseResponseHeaders(xhr.getAllResponseHeaders && xhr.getAllResponseHeaders()));\n    }\n\n    function createRequest(userAgent: string, method: string, url: string): XMLHttpRequest {\n      let xhr: any = new XMLHttpRequest();\n      if (WITH_CREDENTIALS in xhr) {\n        xhr.open(method, url, true);\n\n        xhr.setRequestHeader('X-Exceptionless-Client', userAgent);\n        if (method === 'POST') {\n          xhr.setRequestHeader('Content-Type', 'application/json');\n        }\n      } else if (typeof XDomainRequest !== 'undefined') {\n        useSetTimeout = true;\n        xhr = new XDomainRequest();\n        xhr.open(method, location.protocol === 'http:' ? url.replace('https:', 'http:') : url);\n      } else {\n        xhr = null;\n      }\n\n      if (xhr) {\n        xhr.timeout = 10000;\n      }\n\n      return xhr;\n    }\n\n    const url = `${request.url}${(request.url.indexOf('?') === -1 ? '?' : '&')}access_token=${encodeURIComponent(request.apiKey)}`;\n    const xhr = createRequest(request.userAgent, request.method || 'POST', url);\n    if (!xhr) {\n      return (callback && callback(503, 'CORS not supported.'));\n    }\n\n    if (WITH_CREDENTIALS in xhr) {\n      xhr.onreadystatechange = () => {\n        // xhr not ready.\n        if (xhr.readyState !== 4) {\n          return;\n        }\n\n        complete(LOADED, xhr);\n      };\n    }\n\n    xhr.onprogress = () => { };\n    xhr.ontimeout = () => complete(TIMEOUT, xhr);\n    xhr.onerror = () => complete('error', xhr);\n    xhr.onload = () => complete(LOADED, xhr);\n\n    if (useSetTimeout) {\n      setTimeout(() => xhr.send(request.data), 500);\n    } else {\n      xhr.send(request.data);\n    }\n  }\n}\n\nn\nfunction getDefaultsSettingsFromScriptTag(): IConfigurationSettings {\n  if (!document || !document.getElementsByTagName) {\n    return null;\n  }\n\n  const scripts = document.getElementsByTagName('script');\n  // tslint:disable-next-line:prefer-for-of\n  for (let index = 0; index < scripts.length; index++) {\n    if (scripts[index].src && scripts[index].src.indexOf('/exceptionless') > -1) {\n      return Utils.parseQueryString(scripts[index].src.split('?').pop());\n    }\n  }\n  return null;\n}\n\nfunction processUnhandledException(stackTrace: TraceKit.StackTrace, options?: any): void {\n  const builder = ExceptionlessClient.default.createUnhandledException(new Error(stackTrace.message || (options || {}).status || 'Script error'), 'onerror');\n  builder.pluginContextData['@@_TraceKit.StackTrace'] = stackTrace;\n  builder.submit();\n}\n\n/*\nTODO: We currently are unable to parse string exceptions.\nfunction processJQueryAjaxError(event, xhr, settings, error:string): void {\n  let client = ExceptionlessClient.default;\n  if (xhr.status === 404) {\n    client.submitNotFound(settings.url);\n  } else if (xhr.status !== 401) {\n    client.createUnhandledException(error, 'JQuery.ajaxError')\n      .setSource(settings.url)\n      .setProperty('status', xhr.status)\n      .setProperty('request', settings.data)\n      .setProperty('response', xhr.responseText && xhr.responseText.slice && xhr.responseText.slice(0, 1024))\n      .submit();\n  }\n}\n*/\n\nConfiguration.prototype.useLocalStorage = function() {\n  if (BrowserStorage.isAvailable()) {\n    this.storage = new BrowserStorageProvider();\n    SettingsManager.applySavedServerSettings(this);\n    this.changed();\n  }\n};\n\nconst defaults = Configuration.defaults;\nconst settings = getDefaultsSettingsFromScriptTag();\nif (settings && (settings.apiKey || settings.serverUrl)) {\n  defaults.apiKey = settings.apiKey;\n  defaults.serverUrl = settings.serverUrl;\n}\n\ndefaults.errorParser = new DefaultErrorParser();\ndefaults.moduleCollector = new DefaultModuleCollector();\ndefaults.requestInfoCollector = new DefaultRequestInfoCollector();\ndefaults.submissionAdapter = new DefaultSubmissionAdapter();\n\nTraceKit.report.subscribe(processUnhandledException);\nTraceKit.extendToAsynchronousCallbacks();\n\n// window && window.addEventListener && window.addEventListener('beforeunload', function () {\n//   ExceptionlessClient.default.config.queue.process(true);\n// });\n\n// if (typeof $ !== 'undefined' && $(document)) {\n//   $(document).ajaxError(processJQueryAjaxError);\n// }\n\n(Error as any).stackTraceLimit = Infinity;\n\n// tslint:disable-next-line:prefer-const\ndeclare var $;\n\n"]}