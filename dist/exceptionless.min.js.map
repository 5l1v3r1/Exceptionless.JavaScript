{"version":3,"sources":["tracekit.js","/source/exceptionless.ts","exceptionless.min.js"],"names":["window","undefined","_has","object","key","Object","prototype","hasOwnProperty","call","_isUndefined","what","TraceKit","_oldTraceKit","_slice","slice","UNKNOWN_FUNCTION","noConflict","wrap","func","wrapped","apply","this","arguments","e","report","subscribe","handler","installGlobalHandler","handlers","push","unsubscribe","i","length","splice","notifyHandlers","stack","isWindowError","exception","collectWindowErrors","concat","inner","traceKitWindowOnError","message","url","lineNo","columnNo","errorObj","computeStackTrace","lastExceptionStack","augmentStackTraceWithInitialElement","lastException","location","line","column","guessFunctionName","context","gatherContext","mode","_oldOnerrorHandler","_onErrorHandlerInstalled","onerror","ex","args","s","setTimeout","incomplete","loadSource","remoteFetching","getXHR","XMLHttpRequest","ActiveXObject","request","open","send","responseText","getSource","sourceCache","source","domain","document","indexOf","split","m","reFunctionArgNames","reGuessFunction","maxLines","exec","linesBefore","Math","floor","linesOfContext","linesAfter","start","max","end","min","escapeRegExp","text","replace","escapeCodeAsRegExpForMatchingInsideHTML","body","findSourceInUrls","re","urls","j","join","substring","index","lastIndexOf","findSourceInLine","fragment","RegExp","findSourceByFunctionBody","parts","result","href","scripts","getElementsByTagName","code","codeRE","eventRE","script","src","name","event","computeStackTraceFromStackProp","element","chrome","gecko","winjs","lines","reference","isNative","columnNumber","computeStackTraceFromStacktraceProp","stacktrace","opera10Regex","opera11Regex","exc","computeStackTraceFromOperaMultiLineMessage","lineRE1","lineRE2","lineRE3","inlineScriptBlocks","item","relativeLine","pos","innerText","midline","stackInfo","initial","unshift","partial","computeStackTraceByWalkingCallerChain","depth","functionName","funcs","recursion","curr","caller","toString","input","description","sourceURL","fileName","lineNumber","debug","computeStackTraceOfCaller","Error","ofCaller","extendToAsynchronousCallbacks","_helper","fnName","originalFn","originalCallback","global","root","factory","define","amd","exports","module","require","exceptionless","getDefaultsSettingsFromScriptTag","Utils","parseQueryString","pop","processUnhandledException","stackTrace","options","builder","ExceptionlessClient","createUnhandledException","status","pluginContextData","submit","SettingsManager","_handlers","changed","config","checkVersion","version","savedConfigVersion","parseInt","storage","get","_configPath","isNaN","log","info","updateSettings","_this","isValid","submissionClient","getSettings","response","success","settings","merge","savedServerSettings","getSavedServerSettings","path","save","settingsVersion","error","DefaultLastReferenceIdManager","_lastReferenceId","getLast","clearLast","setLast","eventId","ConsoleLog","warn","level","console","NullLog","EventPluginContext","client","contextData","ContextData","defineProperty","enumerable","configurable","EventPluginManager","run","callback","plugin","next","cancelled","plugins","wrappedPlugins","priority","addDefaultPlugins","addPlugin","ConfigurationDefaultsPlugin","ErrorPlugin","ModuleInfoPlugin","RequestInfoPlugin","EnvironmentInfoPlugin","SubmissionMethodPlugin","ReferenceIdPlugin","reference_id","type","guid","DefaultEventQueue","_processingQueue","_config","enqueue","ensureQueueTimer","areQueuedItemsDiscarded","Date","toJSON","randomNumber","process","isAppExiting","getEvents","events","items","value","queueNotProcessed","enabled","getList","submissionBatchSize","serverUrl","postEvents","processSubmissionResponse","suspendProcessing","durationInMinutes","discardFutureQueuedItems","clearQueue","_suspendProcessingUntil","getTime","_discardQueuedItemsUntil","removeEvents","_queueTimer","setInterval","onProcessQueue","isQueueProcessingSuspended","noSubmission","serviceUnavailable","paymentRequired","unableToAuthenticate","notFound","badRequest","requestEntityTooLarge","round","remove","InMemoryStorage","maxItems","_items","_maxItems","created","shift","searchPattern","limit","regex","results","test","DefaultSubmissionClient","configurationVersionHeader","data","stringify","dataExclusions","createRequest","cb","createSubmissionCallback","submissionAdapter","sendRequest","postUserDescription","referenceId","encodeURIComponent","headers","SettingsResponse","JSON","parse","method","apiKey","userAgent","SubmissionResponse","addRange","target","values","_i","getHashCode","hash","character","charCodeAt","getCookies","cookies","cookie","s4","random","defaultValues","parseVersion","versionRegex","matches","query","pairs","pair","decodeURIComponent","exclusions","checkForMatch","pattern","trim","toLowerCase","startsWithWildcard","endsWithWildcard","stringifyImpl","obj","excludedKeys","cache","Configuration","configSettings","inject","fn","defaultTags","defaultData","lastReferenceIdManager","_plugins","_serverUrl","_dataExclusions","defaults","environmentInfoCollector","errorParser","moduleCollector","requestInfoCollector","queue","applySavedServerSettings","_apiKey","set","addDataExclusions","sort","p1","p2","pluginOrName","pluginAction","pluginExists","removePlugin","setVersion","setUserIdentity","userInfoOrIdentity","USER_KEY","userInfo","identity","shouldRemove","useReferenceIds","useDebugLogger","_defaultSettings","EventBuilder","_validIdentifierErrorMessage","setType","setSource","setSessionId","sessionId","isValidIdentifier","session_id","setReferenceId","setMessage","setGeo","latitude","longitude","geo","setProperty","setValue","addTags","tags","markAsCritical","critical","addRequestInfo","submitEvent","isDigit","isLetter","isMinus","setException","getException","markAsUnhandledError","setSubmissionMethod","getSubmissionMethod","statusCode","settingsOrApiKey","createException","createEvent","submitException","submissionMethod","submitUnhandledException","createFeatureUsage","feature","submitFeatureUsage","createLog","sourceOrMessage","callee","submitLog","createNotFound","resource","submitNotFound","createSessionStart","submitSessionStart","createSessionEnd","submitSessionEnd","date","ctx","ev","updateUserEmailAndDescription","email","userDescription","email_address","getLastReferenceId","_instance","tag","ignoredProperties","ERROR_KEY","EXTRA_PROPERTIES_KEY","parser","additionalData","getAdditionalData","getOwnPropertyNames","collector","modules","getModules","REQUEST_KEY","requestInfo","getRequestInfo","ENVIRONMENT_KEY","environmentInfo","getEnvironmentInfo","DefaultErrorParser","getParameters","parameters","params","getStackFrames","stackFrames","ANONYMOUS","frames","frame","file_name","line_number","TRACEKIT_STACK_TRACE_KEY","stack_trace","DefaultModuleCollector","module_id","innerHTML","DefaultRequestInfoCollector","navigator","user_agent","is_secure","protocol","host","hostname","port","pathname","query_string","search","referrer","DefaultSubmissionAdapter","complete","xhr","parseResponseHeaders","headerStr","headerPairs","headerPair","separator","isCompleted","statusText","TIMEOUT","LOADED","responseBody","getAllResponseHeaders","WITH_CREDENTIALS","setRequestHeader","XDomainRequest","useSetTimeout","timeout","onreadystatechange","readyState","onprogress","ontimeout","onload","stackTraceLimit","Infinity"],"mappings":"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","file":"exceptionless.min.js","sourcesContent":["/*\n TraceKit - Cross browser stack traces - github.com/csnover/TraceKit\n MIT license\n*/\n\n(function(window, undefined) {\nif (!window) {\n    return;\n}\n\nvar TraceKit = {};\nvar _oldTraceKit = window.TraceKit;\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n\n/**\n * _has, a better form of hasOwnProperty\n * Example: _has(MainHostObject, property) === true/false\n *\n * @param {Object} object to check property\n * @param {string} key to check\n */\nfunction _has(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\n\nfunction _isUndefined(what) {\n    return typeof what === 'undefined';\n}\n\n/**\n * TraceKit.noConflict: Export TraceKit out to another variable\n * Example: var TK = TraceKit.noConflict()\n */\nTraceKit.noConflict = function noConflict() {\n    window.TraceKit = _oldTraceKit;\n    return TraceKit;\n};\n\n/**\n * TraceKit.wrap: Wrap any function in a TraceKit reporter\n * Example: func = TraceKit.wrap(func);\n *\n * @param {Function} func Function to be wrapped\n * @return {Function} The wrapped func\n */\nTraceKit.wrap = function traceKitWrapper(func) {\n    function wrapped() {\n        try {\n            return func.apply(this, arguments);\n        } catch (e) {\n            TraceKit.report(e);\n            throw e;\n        }\n    }\n    return wrapped;\n};\n\n/**\n * TraceKit.report: cross-browser processing of unhandled exceptions\n *\n * Syntax:\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *              on top frame; column number is not guaranteed\n *   - Opera:   full stack trace with line and column numbers\n *   - Chrome:  full stack trace with line and column numbers\n *   - Safari:  line and column number for the top frame only; some frames\n *              may be missing, and column number is not guaranteed\n *   - IE:      line and column number for the top frame only; some frames\n *              may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a stackInfo object as described in the\n * TraceKit.computeStackTrace docs.\n */\nTraceKit.report = (function reportModuleWrapper() {\n    var handlers = [],\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {Object.<string, *>} stack\n     */\n    function notifyHandlers(stack, isWindowError) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n          return;\n        }\n        for (var i in handlers) {\n            if (_has(handlers, i)) {\n                try {\n                    handlers[i].apply(null, [stack].concat(_slice.call(arguments, 2)));\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error\n     * occurred.\n     * @param {?(number|string)} columnNo The column number at which the error\n     * occurred.\n     * @param {?Error} errorObj The actual Error object.\n     */\n    function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {\n        var stack = null;\n\n        if (errorObj) {\n          stack = TraceKit.computeStackTrace(errorObj);\n        }\n        else\n        {\n            if (lastExceptionStack) {\n                TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n                stack = lastExceptionStack;\n                lastExceptionStack = null;\n                lastException = null;\n            } else {\n                var location = {\n                    'url': url,\n                    'line': lineNo,\n                    'column': columnNo\n                };\n                location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);\n                location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);\n                stack = {\n                    'mode': 'onerror',\n                    'message': message,\n                    'stack': [location]\n                };\n            }\n        }\n\n        notifyHandlers(stack, 'from window.onerror');\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    function installGlobalHandler ()\n    {\n        if (_onErrorHandlerInstalled === true) {\n            return;\n        }\n        _oldOnerrorHandler = window.onerror;\n        window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     */\n    function report(ex) {\n        var args = _slice.call(arguments, 1);\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n                var s = lastExceptionStack;\n                lastExceptionStack = null;\n                lastException = null;\n                notifyHandlers.apply(null, [s, null].concat(args));\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        window.setTimeout(function () {\n            if (lastException === ex) {\n                lastExceptionStack = null;\n                lastException = null;\n                notifyHandlers.apply(null, [stack, null].concat(args));\n            }\n        }, (stack.incomplete ? 2000 : 0));\n\n        throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    return report;\n}());\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   s = TraceKit.computeStackTrace.ofCaller([depth])\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n * Returns:\n *   s.name              - exception name\n *   s.message           - exception message\n *   s.stack[i].url      - JavaScript or HTML file URL\n *   s.stack[i].func     - function name, or empty for anonymous functions (if guessing did not work)\n *   s.stack[i].args     - arguments passed to the function, if known\n *   s.stack[i].line     - line number, if known\n *   s.stack[i].column   - column number, if known\n *   s.stack[i].context  - an array of source code lines; the middle element corresponds to the correct line#\n *   s.mode              - 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n * Tracing example:\n *     function trace(message) {\n *         var stackInfo = TraceKit.computeStackTrace.ofCaller();\n *         var data = message + \"\\n\";\n *         for(var i in stackInfo.stack) {\n *             var item = stackInfo.stack[i];\n *             data += (item.func || '[anonymous]') + \"() in \" + item.url + \":\" + (item.line || '0') + \"\\n\";\n *         }\n *         if (window.console)\n *             console.info(data);\n *         else\n *             alert(data);\n *     }\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n    var debug = false,\n        sourceCache = {};\n\n    /**\n     * Attempts to retrieve source code via XMLHttpRequest, which is used\n     * to look up anonymous function names.\n     * @param {string} url URL of source code.\n     * @return {string} Source contents.\n     */\n    function loadSource(url) {\n        if (!TraceKit.remoteFetching) { //Only attempt request if remoteFetching is on.\n            return '';\n        }\n        try {\n            var getXHR = function() {\n                try {\n                    return new window.XMLHttpRequest();\n                } catch (e) {\n                    // explicitly bubble up the exception if not found\n                    return new window.ActiveXObject('Microsoft.XMLHTTP');\n                }\n            };\n\n            var request = getXHR();\n            request.open('GET', url, false);\n            request.send('');\n            return request.responseText;\n        } catch (e) {\n            return '';\n        }\n    }\n\n    /**\n     * Retrieves source code from the source code cache.\n     * @param {string} url URL of source code.\n     * @return {Array.<string>} Source contents.\n     */\n    function getSource(url) {\n        if (typeof url !== 'string') {\n            return [];\n        }\n\n        if (!_has(sourceCache, url)) {\n            // URL needs to be able to fetched within the acceptable domain.  Otherwise,\n            // cross-domain errors will be triggered.\n            var source = '';\n\n            var domain = '';\n            try { domain = document.domain; } catch (e) {}\n            if (url.indexOf(domain) !== -1) {\n                source = loadSource(url);\n            }\n            sourceCache[url] = source ? source.split('\\n') : [];\n        }\n\n        return sourceCache[url];\n    }\n\n    /**\n     * Tries to use an externally loaded copy of source code to determine\n     * the name of a function by looking at the name of the variable it was\n     * assigned to, if any.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} lineNo Line number in source code.\n     * @return {string} The function name, if discoverable.\n     */\n    function guessFunctionName(url, lineNo) {\n        var reFunctionArgNames = /function ([^(]*)\\(([^)]*)\\)/,\n            reGuessFunction = /['\"]?([0-9A-Za-z$_]+)['\"]?\\s*[:=]\\s*(function|eval|new Function)/,\n            line = '',\n            maxLines = 10,\n            source = getSource(url),\n            m;\n\n        if (!source.length) {\n            return UNKNOWN_FUNCTION;\n        }\n\n        // Walk backwards from the first line in the function until we find the line which\n        // matches the pattern above, which is the function definition\n        for (var i = 0; i < maxLines; ++i) {\n            line = source[lineNo - i] + line;\n\n            if (!_isUndefined(line)) {\n                if ((m = reGuessFunction.exec(line))) {\n                    return m[1];\n                } else if ((m = reFunctionArgNames.exec(line))) {\n                    return m[1];\n                }\n            }\n        }\n\n        return UNKNOWN_FUNCTION;\n    }\n\n    /**\n     * Retrieves the surrounding lines from where an exception occurred.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} line Line number in source code to centre\n     * around for context.\n     * @return {?Array.<string>} Lines of source code.\n     */\n    function gatherContext(url, line) {\n        var source = getSource(url);\n\n        if (!source.length) {\n            return null;\n        }\n\n        var context = [],\n            // linesBefore & linesAfter are inclusive with the offending line.\n            // if linesOfContext is even, there will be one extra line\n            //   *before* the offending line.\n            linesBefore = Math.floor(TraceKit.linesOfContext / 2),\n            // Add one extra line if linesOfContext is odd\n            linesAfter = linesBefore + (TraceKit.linesOfContext % 2),\n            start = Math.max(0, line - linesBefore - 1),\n            end = Math.min(source.length, line + linesAfter - 1);\n\n        line -= 1; // convert to 0-based index\n\n        for (var i = start; i < end; ++i) {\n            if (!_isUndefined(source[i])) {\n                context.push(source[i]);\n            }\n        }\n\n        return context.length > 0 ? context : null;\n    }\n\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    /**\n     * Determines where a code fragment occurs in the source code.\n     * @param {RegExp} re The function definition.\n     * @param {Array.<string>} urls A list of URLs to search.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     */\n    function findSourceInUrls(re, urls) {\n        var source, m;\n        for (var i = 0, j = urls.length; i < j; ++i) {\n            // console.log('searching', urls[i]);\n            if ((source = getSource(urls[i])).length) {\n                source = source.join('\\n');\n                if ((m = re.exec(source))) {\n                    // console.log('Found function in ' + urls[i]);\n\n                    return {\n                        'url': urls[i],\n                        'line': source.substring(0, m.index).split('\\n').length,\n                        'column': m.index - source.lastIndexOf('\\n', m.index) - 1\n                    };\n                }\n            }\n        }\n\n        // console.log('no match');\n\n        return null;\n    }\n\n    /**\n     * Determines at which column a code fragment occurs on a line of the\n     * source code.\n     * @param {string} fragment The code fragment.\n     * @param {string} url The URL to search.\n     * @param {(string|number)} line The line number to examine.\n     * @return {?number} The column number.\n     */\n    function findSourceInLine(fragment, url, line) {\n        var source = getSource(url),\n            re = new RegExp('\\\\b' + escapeRegExp(fragment) + '\\\\b'),\n            m;\n\n        line -= 1;\n\n        if (source && source.length > line && (m = re.exec(source[line]))) {\n            return m.index;\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines where a function was defined within the source code.\n     * @param {(Function|string)} func A function reference or serialized\n     * function definition.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     */\n    function findSourceByFunctionBody(func) {\n        var urls = [window.location.href],\n            scripts = document.getElementsByTagName('script'),\n            body,\n            code = '' + func,\n            codeRE = /^function(?:\\s+([\\w$]+))?\\s*\\(([\\w\\s,]*)\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            eventRE = /^function on([\\w$]+)\\s*\\(event\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            re,\n            parts,\n            result;\n\n        for (var i = 0; i < scripts.length; ++i) {\n            var script = scripts[i];\n            if (script.src) {\n                urls.push(script.src);\n            }\n        }\n\n        if (!(parts = codeRE.exec(code))) {\n            re = new RegExp(escapeRegExp(code).replace(/\\s+/g, '\\\\s+'));\n        }\n\n        // not sure if this is really necessary, but I don’t have a test\n        // corpus large enough to confirm that and it was in the original.\n        else {\n            var name = parts[1] ? '\\\\s+' + parts[1] : '',\n                args = parts[2].split(',').join('\\\\s*,\\\\s*');\n\n            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\\s+/g, '\\\\s+');\n            re = new RegExp('function' + name + '\\\\s*\\\\(\\\\s*' + args + '\\\\s*\\\\)\\\\s*{\\\\s*' + body + '\\\\s*}');\n        }\n\n        // look for a normal function definition\n        if ((result = findSourceInUrls(re, urls))) {\n            return result;\n        }\n\n        // look for an old-school event handler function\n        if ((parts = eventRE.exec(code))) {\n            var event = parts[1];\n            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);\n\n            // look for a function defined in HTML as an onXXX handler\n            re = new RegExp('on' + event + '=[\\\\\\'\"]\\\\s*' + body + '\\\\s*[\\\\\\'\"]', 'i');\n\n            if ((result = findSourceInUrls(re, urls[0]))) {\n                return result;\n            }\n\n            // look for ???\n            re = new RegExp(body);\n\n            if ((result = findSourceInUrls(re, urls))) {\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (!ex.stack) {\n            return null;\n        }\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|chrome-extension|native|eval).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?@?((?:file|https?|chrome|\\[).*?)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:ms-appx|http|https):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if ((parts = chrome.exec(lines[i]))) {\n                var isNative = parts[2] && parts[2].indexOf('native') !== -1;\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = winjs.exec(lines[i]))) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = gecko.exec(lines[i]))) {\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = guessFunctionName(element.url, element.line);\n            }\n\n            if (element.line) {\n                element.context = gatherContext(element.url, element.line);\n            }\n\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        if (stack[0] && stack[0].line && !stack[0].column && reference) {\n            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);\n        } else if (!stack[0].column && !_isUndefined(ex.columnNumber)) {\n            // FireFox uses this awesome columnNumber property for its top frame\n            // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n            // so adding 1\n            stack[0].column = ex.columnNumber + 1;\n        }\n\n        return {\n            'mode': 'stack',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * Computes stack trace information from the stacktrace property.\n     * Opera 10+ uses this property.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceFromStacktraceProp(ex) {\n        // Access and store the stacktrace property before doing ANYTHING\n        // else to it because Opera is not very good at providing it\n        // reliably in other circumstances.\n        var stacktrace = ex.stacktrace;\n        if (!stacktrace) {\n            return;\n        }\n\n        var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i,\n            opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i,\n            lines = stacktrace.split('\\n'),\n            stack = [],\n            parts;\n\n        for (var line = 0; line < lines.length; line += 2) {\n            var element = null;\n            if ((parts = opera10Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[2],\n                    'line': +parts[1],\n                    'column': null,\n                    'func': parts[3],\n                    'args':[]\n                };\n            } else if ((parts = opera11Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[6],\n                    'line': +parts[1],\n                    'column': +parts[2],\n                    'func': parts[3] || parts[4],\n                    'args': parts[5] ? parts[5].split(',') : []\n                };\n            }\n\n            if (element) {\n                if (!element.func && element.line) {\n                    element.func = guessFunctionName(element.url, element.line);\n                }\n                if (element.line) {\n                    try {\n                        element.context = gatherContext(element.url, element.line);\n                    } catch (exc) {}\n                }\n\n                if (!element.context) {\n                    element.context = [lines[line + 1]];\n                }\n\n                stack.push(element);\n            }\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        return {\n            'mode': 'stacktrace',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * NOT TESTED.\n     * Computes stack trace information from an error message that includes\n     * the stack trace.\n     * Opera 9 and earlier use this method if the option to show stack\n     * traces is turned on in opera:config.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack information.\n     */\n    function computeStackTraceFromOperaMultiLineMessage(ex) {\n        // TODO: Clean this function up\n        // Opera includes a stack trace into the exception message. An example is:\n        //\n        // Statement on line 3: Undefined variable: undefinedFunc\n        // Backtrace:\n        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz\n        //         undefinedFunc(a);\n        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy\n        //           zzz(x, y, z);\n        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx\n        //           yyy(a, a, a);\n        //   Line 1 of function script\n        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }\n        //   ...\n\n        var lines = ex.message.split('\\n');\n        if (lines.length < 4) {\n            return null;\n        }\n\n        var lineRE1 = /^\\s*Line (\\d+) of linked script ((?:file|https?)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE2 = /^\\s*Line (\\d+) of inline#(\\d+) script in ((?:file|https?)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE3 = /^\\s*Line (\\d+) of function script\\s*$/i,\n            stack = [],\n            scripts = document.getElementsByTagName('script'),\n            inlineScriptBlocks = [],\n            parts;\n\n        for (var s in scripts) {\n            if (_has(scripts, s) && !scripts[s].src) {\n                inlineScriptBlocks.push(scripts[s]);\n            }\n        }\n\n        for (var line = 2; line < lines.length; line += 2) {\n            var item = null;\n            if ((parts = lineRE1.exec(lines[line]))) {\n                item = {\n                    'url': parts[2],\n                    'func': parts[3],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null\n                };\n            } else if ((parts = lineRE2.exec(lines[line]))) {\n                item = {\n                    'url': parts[3],\n                    'func': parts[4],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.\n                };\n                var relativeLine = (+parts[1]); // relative to the start of the <SCRIPT> block\n                var script = inlineScriptBlocks[parts[2] - 1];\n                if (script) {\n                    var source = getSource(item.url);\n                    if (source) {\n                        source = source.join('\\n');\n                        var pos = source.indexOf(script.innerText);\n                        if (pos >= 0) {\n                            item.line = relativeLine + source.substring(0, pos).split('\\n').length;\n                        }\n                    }\n                }\n            } else if ((parts = lineRE3.exec(lines[line]))) {\n                var url = window.location.href.replace(/#.*$/, '');\n                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));\n                var src = findSourceInUrls(re, [url]);\n                item = {\n                    'url': url,\n                    'func': '',\n                    'args': [],\n                    'line': src ? src.line : parts[1],\n                    'column': null\n                };\n            }\n\n            if (item) {\n                if (!item.func) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n                var context = gatherContext(item.url, item.line);\n                var midline = (context ? context[Math.floor(context.length / 2)] : null);\n                if (context && midline.replace(/^\\s*/, '') === lines[line + 1].replace(/^\\s*/, '')) {\n                    item.context = context;\n                } else {\n                    // if (context) alert(\"Context mismatch. Correct midline:\\n\" + lines[i+1] + \"\\n\\nMidline:\\n\" + midline + \"\\n\\nContext:\\n\" + context.join(\"\\n\") + \"\\n\\nURL:\\n\" + item.url);\n                    item.context = [lines[line + 1]];\n                }\n                stack.push(item);\n            }\n        }\n        if (!stack.length) {\n            return null; // could not parse multiline exception message as Opera stack trace\n        }\n\n        return {\n            'mode': 'multiline',\n            'name': ex.name,\n            'message': lines[0],\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {Object.<string, *>} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = guessFunctionName(initial.url, initial.line);\n            }\n\n            if (!initial.context) {\n                initial.context = gatherContext(initial.url, initial.line);\n            }\n\n            var reference = / '([^']+)' /.exec(message);\n            if (reference) {\n                initial.column = findSourceInLine(reference[1], initial.url, initial.line);\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        stackInfo.stack[0].context = initial.context;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                // console.log('skipping internal function');\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'args': [],\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if ((parts = functionName.exec(curr.toString()))) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n              try {\n                item.func = parts.input.substring(0, parts.input.indexOf('{'));\n              } catch (e) { }\n            }\n\n            if ((source = findSourceByFunctionBody(curr))) {\n                item.url = source.url;\n                item.line = source.line;\n\n                if (item.func === UNKNOWN_FUNCTION) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n\n                var reference = / '([^']+)' /.exec(ex.message || ex.description);\n                if (reference) {\n                    item.column = findSourceInLine(reference[1], source.url, source.line);\n                }\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            }else{\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            // console.log('depth is ' + depth);\n            // console.log('stack is ' + stack.length);\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'mode': 'callers',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = (depth == null ? 0 : +depth);\n\n        try {\n            // This must be tried first because Opera 10 *destroys*\n            // its stacktrace property if you try to access the stack\n            // property first!!\n            stack = computeStackTraceFromStacktraceProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromOperaMultiLineMessage(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        return {\n            'mode': 'failed'\n        };\n    }\n\n    /**\n     * Logs a stacktrace starting from the previous call and working down.\n     * @param {(number|string)=} depth How many frames deep to trace.\n     * @return {Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceOfCaller(depth) {\n        depth = (depth == null ? 0 : +depth) + 1; // \"+ 1\" because \"ofCaller\" should drop one frame\n        try {\n            throw new Error();\n        } catch (ex) {\n            return computeStackTrace(ex, depth + 1);\n        }\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.guessFunctionName = guessFunctionName;\n    computeStackTrace.gatherContext = gatherContext;\n    computeStackTrace.ofCaller = computeStackTraceOfCaller;\n    computeStackTrace.getSource = getSource;\n\n    return computeStackTrace;\n}());\n\n/**\n * Extends support for global error handling for asynchronous browser\n * functions. Adopted from Closure Library's errorhandler.js\n */\nTraceKit.extendToAsynchronousCallbacks = function () {\n    var _helper = function _helper(fnName) {\n        var originalFn = window[fnName];\n        window[fnName] = function traceKitAsyncExtension() {\n            // Make a copy of the arguments\n            var args = _slice.call(arguments);\n            var originalCallback = args[0];\n            if (typeof (originalCallback) === 'function') {\n                args[0] = TraceKit.wrap(originalCallback);\n            }\n            // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n            // also only supports 2 argument and doesn't care what \"this\" is, so we\n            // can just call the original function directly.\n            if (originalFn.apply) {\n                return originalFn.apply(this, args);\n            } else {\n                return originalFn(args[0], args[1]);\n            }\n        };\n    };\n\n    _helper('setTimeout');\n    _helper('setInterval');\n};\n\n//Default options:\nif (!TraceKit.remoteFetching) {\n  TraceKit.remoteFetching = true;\n}\nif (!TraceKit.collectWindowErrors) {\n  TraceKit.collectWindowErrors = true;\n}\nif (!TraceKit.linesOfContext || TraceKit.linesOfContext < 1) {\n  // 5 lines before, the offending line, 5 lines after\n  TraceKit.linesOfContext = 11;\n}\n\n\n\n// Export to global object\nwindow.TraceKit = TraceKit;\n\n}(typeof window !== 'undefined' ? window : global));\n","export interface IEvent {\n  type?:string;\n  source?:string;\n  date?:Date;\n  tags?:string[];\n  message?:string;\n  geo?:string;\n  value?:number;\n  data?:any;\n  reference_id?:string;\n  session_id?:string;\n}\n\nexport interface ILastReferenceIdManager {\n  getLast(): string;\n  clearLast(): void;\n  setLast(eventId:string): void;\n}\n\nexport interface ILog {\n  info(message:string):void;\n  warn(message:string):void;\n  error(message:string):void;\n}\n\n                                          \n\nexport interface IEventQueue {\n  enqueue(event:IEvent):void;\n  process(isAppExiting?:boolean):void;\n  suspendProcessing(durationInMinutes?:number, discardFutureQueuedItems?:boolean, clearQueue?:boolean):void;\n}\n\n                                                                                                                                  \n\nexport interface IEnvironmentInfoCollector {\n  getEnvironmentInfo(context:EventPluginContext):IEnvironmentInfo;\n}\n\n                                                                                                              \n\nexport interface IErrorParser {\n  parse(context:EventPluginContext, exception:Error): IError;\n}\n\n                                                                                                                \n\nexport interface IModuleCollector {\n  getModules(context:EventPluginContext):IModule[];\n}\n\n                                                                                                                          \n\nexport interface IRequestInfoCollector {\n  getRequestInfo(context:EventPluginContext):IRequestInfo;\n}\n\n                                              \n\nexport interface IStorage<T> {\n  save(path:string, value:T):boolean;\n  get(path:string):T;\n  getList(searchPattern?:string, limit?:number):IStorageItem<T>[];\n  remove(path:string):void;\n}\n\n                                                                                                                   \n\nexport interface ISubmissionAdapter {\n  sendRequest(request:SubmissionRequest, callback:SubmissionCallback, isAppExiting?:boolean): void;\n}\n\n                                                                                                                                                                                                                                                                                           \n\nexport interface ISubmissionClient {\n  postEvents(events:IEvent[], config:Configuration, callback:(response:SubmissionResponse) => void, isAppExiting?:boolean):void;\n  postUserDescription(referenceId:string, description:IUserDescription, config:Configuration, callback:(response:SubmissionResponse) => void):void;\n  getSettings(config:Configuration, callback:(response:SettingsResponse) => void):void;\n}\n\nn\nexport interface IConfigurationSettings {\n  apiKey?:string;\n  serverUrl?:string;\n  environmentInfoCollector?:IEnvironmentInfoCollector;\n  errorParser?:IErrorParser;\n  lastReferenceIdManager?:ILastReferenceIdManager;\n  log?:ILog;\n  moduleCollector?:IModuleCollector;\n  requestInfoCollector?:IRequestInfoCollector;\n  submissionBatchSize?:number;\n  submissionClient?:ISubmissionClient;\n  submissionAdapter?:ISubmissionAdapter;\n  storage?:IStorage<any>;\n  queue?:IEventQueue;\n}\n\n                                                                                                                                                     \n\nexport class SettingsManager {\n  /**\n   * The configuration settings path.\n   * @type {string}\n   * @private\n   */\n  private static _configPath:string = 'ex-server-settings.json';\n\n  /**\n   * A list of handlers that will be fired when the settings change.\n   * @type {Array}\n   * @private\n   */\n  private static _handlers:{ (config:Configuration):void }[] = [];\n\n  public static onChanged(handler:(config:Configuration) => void) {\n    !!handler && this._handlers.push(handler);\n  }\n\n  public static applySavedServerSettings(config:Configuration):void {\n    config.log.info('Applying saved settings.');\n    config.settings = Utils.merge(config.settings, this.getSavedServerSettings(config));\n    this.changed(config);\n  }\n\n  public static checkVersion(version:number, config:Configuration):void {\n    if (version) {\n      let savedConfigVersion = parseInt(<string>config.storage.get(`${this._configPath}-version`), 10);\n      if (isNaN(savedConfigVersion) || version > savedConfigVersion) {\n        config.log.info(`Updating settings from v${(!isNaN(savedConfigVersion) ? savedConfigVersion : 0)} to v${version}`);\n        this.updateSettings(config);\n      }\n    }\n  }\n\n  public static updateSettings(config:Configuration):void {\n    if (!config.isValid) {\n      config.log.error('Unable to update settings: ApiKey is not set.');\n      return;\n    }\n\n    config.submissionClient.getSettings(config, (response:SettingsResponse) => {\n      if (!response || !response.success || !response.settings) {\n        return;\n      }\n\n      config.settings = Utils.merge(config.settings, response.settings);\n\n      // TODO: Store snapshot of settings after reading from config and attributes and use that to revert to defaults.\n      // Remove any existing server settings that are not in the new server settings.\n      let savedServerSettings = SettingsManager.getSavedServerSettings(config);\n      for (let key in savedServerSettings) {\n        if (response.settings[key]) {\n          continue;\n        }\n\n        delete config.settings[key];\n      }\n\n      let path = SettingsManager._configPath; // optimization for minifier.\n      config.storage.save(`${path}-version`, response.settingsVersion);\n      config.storage.save(path, response.settings);\n\n      config.log.info('Updated settings');\n      this.changed(config);\n    });\n  }\n\n  private static changed(config:Configuration) {\n    let handlers = this._handlers; // optimization for minifier.\n    for (let index = 0; index < handlers.length; index++) {\n      handlers[index](config);\n    }\n  }\n\n  private static getSavedServerSettings(config:Configuration):Object {\n    return config.storage.get(this._configPath) || {};\n  }\n}\n\n                                                                    \n\nexport class DefaultLastReferenceIdManager implements ILastReferenceIdManager {\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @type {string}\n   * @private\n   */\n  private _lastReferenceId:string = null;\n\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @returns {string}\n   */\n  getLast(): string {\n    return this._lastReferenceId;\n  }\n\n  /**\n   * Clears the last event's reference id.\n   */\n  clearLast():void {\n    this._lastReferenceId = null;\n  }\n\n  /**\n   * Sets the last event's reference id.\n   * @param eventId\n   */\n  setLast(eventId:string):void {\n    this._lastReferenceId = eventId;\n  }\n}\n\n                              \n\nexport class ConsoleLog implements ILog {\n  public info(message:string):void {\n    this.log('info', message);\n  }\n\n  public warn(message:string):void {\n    this.log('warn', message);\n  }\n\n  public error(message:string):void {\n    this.log('error', message);\n  }\n\n  private log(level:string, message:string) {\n    if (console && console[level]) {\n      console[level](`[${level}] Exceptionless: ${message}`);\n    }\n  }\n}\n\n                              \n\nexport class NullLog implements ILog {\n  public info(message:string):void {}\n  public warn(message:string):void {}\n  public error(message:string):void {}\n}\n\nexport interface IUserInfo {\n  identity?:string;\n  name?:string;\n  data?:any;\n}\n\n                                                                                                         \n\nexport interface IEventPlugin {\n  priority?:number;\n  name?:string;\n  run(context:EventPluginContext, next?:() => void): void;\n}\n\n                                                                                                                                                                                             \n\nexport class EventPluginContext {\n  public cancelled:boolean;\n  public client:ExceptionlessClient;\n  public event:IEvent;\n  public contextData:ContextData;\n\n  constructor(client:ExceptionlessClient, event:IEvent, contextData?:ContextData) {\n    this.client = client;\n    this.event = event;\n    this.contextData = contextData ? contextData : new ContextData();\n  }\n\n  public get log(): ILog {\n    return this.client.config.log;\n  }\n}\n\nn\nexport class EventPluginManager {\n  public static run(context:EventPluginContext, callback:(context?:EventPluginContext) => void): void {\n    let wrap = function (plugin:IEventPlugin, next?:() => void): () => void {\n      return () => {\n        try {\n          if (!context.cancelled) {\n            plugin.run(context, next);\n          }\n        } catch (ex) {\n          context.cancelled = true;\n          context.log.error(`Error running plugin '${plugin.name}': ${ex.message}. Discarding Event.`);\n        }\n\n        if (context.cancelled && !!callback) {\n          callback(context);\n        }\n      };\n    };\n\n    let plugins:IEventPlugin[] = context.client.config.plugins; // optimization for minifier.\n    let wrappedPlugins:{ (): void }[] = [];\n    if (!!callback) {\n      wrappedPlugins[plugins.length] = wrap({ name: 'cb', priority: 9007199254740992, run: callback }, null);\n    }\n\n    for (let index = plugins.length - 1; index > -1; index--) {\n      wrappedPlugins[index] = wrap(plugins[index], !!callback || (index < plugins.length - 1) ? wrappedPlugins[index + 1] : null);\n    }\n\n    wrappedPlugins[0]();\n  }\n\n  public static addDefaultPlugins(config:Configuration): void {\n    config.addPlugin(new ConfigurationDefaultsPlugin());\n    config.addPlugin(new ErrorPlugin());\n    config.addPlugin(new ModuleInfoPlugin());\n    config.addPlugin(new RequestInfoPlugin());\n    config.addPlugin(new EnvironmentInfoPlugin());\n    config.addPlugin(new SubmissionMethodPlugin());\n  }\n}\n\n                                                                                                                                                \n\nexport class ReferenceIdPlugin implements IEventPlugin {\n  public priority:number = 20;\n  public name:string = 'ReferenceIdPlugin';\n\n  public run(context:EventPluginContext, next?:() => void): void {\n    if ((!context.event.reference_id || context.event.reference_id.length === 0) && context.event.type === 'error') {\n      context.event.reference_id = Utils.guid().replace('-', '').substring(0, 10);\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                                                                                                                               \n\nexport class DefaultEventQueue implements IEventQueue {\n  /**\n   * The configuration object.\n   * @type {Configuration}\n   * @private\n   */\n  private _config:Configuration;\n\n  /**\n   * Suspends processing until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _suspendProcessingUntil:Date;\n\n  /**\n   * Discards queued items until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _discardQueuedItemsUntil:Date;\n\n  /**\n   * Returns true if the queue is processing.\n   * @type {boolean}\n   * @private\n   */\n  private _processingQueue:boolean = false;\n\n  /**\n   * Processes the queue every xx seconds.\n   * @type {Timer}\n   * @private\n   */\n  private _queueTimer:any;\n\n  constructor(config:Configuration) {\n    this._config = config;\n  }\n\n  public enqueue(event:IEvent): void {\n    let config:Configuration = this._config; // Optimization for minifier.\n    this.ensureQueueTimer();\n\n    if (this.areQueuedItemsDiscarded()) {\n      config.log.info('Queue items are currently being discarded. The event will not be queued.');\n      return;\n    }\n\n    let key = `ex-q-${new Date().toJSON()}-${Utils.randomNumber()}`;\n    config.log.info(`Enqueuing event: ${key} type=${event.type} ${!!event.reference_id ? 'refid=' + event.reference_id : ''}`);\n    config.storage.save(key, event);\n  }\n\n  public process(isAppExiting?:boolean): void {\n    function getEvents(events:{ path:string, value:IEvent }[]):IEvent[] {\n      let items:IEvent[] = [];\n      for (let index = 0; index < events.length; index++) {\n        items.push(events[index].value);\n      }\n\n      return items;\n    }\n\n    const queueNotProcessed:string = 'The queue will not be processed.'; // optimization for minifier.\n    let config:Configuration = this._config; // Optimization for minifier.\n    let log:ILog = config.log; // Optimization for minifier.\n\n    this.ensureQueueTimer();\n\n    if (this._processingQueue) {\n      return;\n    }\n\n    log.info('Processing queue...');\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${queueNotProcessed}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${queueNotProcessed}`);\n      return;\n    }\n\n    this._processingQueue = true;\n\n    try {\n      let events = config.storage.getList('ex-q', config.submissionBatchSize);\n      if (!events || events.length === 0) {\n        this._processingQueue = false;\n        return;\n      }\n\n      log.info(`Sending ${events.length} events to ${config.serverUrl}.`);\n      config.submissionClient.postEvents(getEvents(events), config, (response:SubmissionResponse) => {\n        this.processSubmissionResponse(response, events);\n        log.info('Finished processing queue.');\n        this._processingQueue = false;\n      }, isAppExiting);\n    } catch (ex) {\n      log.error(`Error processing queue: ${ex}`);\n      this.suspendProcessing();\n      this._processingQueue = false;\n    }\n  }\n\n  public suspendProcessing(durationInMinutes?:number, discardFutureQueuedItems?:boolean, clearQueue?:boolean): void {\n    let config:Configuration = this._config; // Optimization for minifier.\n\n    if (!durationInMinutes || durationInMinutes <= 0) {\n      durationInMinutes = 5;\n    }\n\n    config.log.info(`Suspending processing for ${durationInMinutes} minutes.`);\n    this._suspendProcessingUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\n\n    if (discardFutureQueuedItems) {\n      this._discardQueuedItemsUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\n    }\n\n    if (clearQueue) {\n      // Account is over the limit and we want to ensure that the sample size being sent in will contain newer errors.\n      this.removeEvents(config.storage.getList('ex-q'));\n    }\n  }\n\n  private areQueuedItemsDiscarded(): boolean {\n    return this._discardQueuedItemsUntil && this._discardQueuedItemsUntil > new Date();\n  }\n\n  private ensureQueueTimer(): void {\n    if (!this._queueTimer) {\n      this._queueTimer = setInterval(() => this.onProcessQueue(), 10000);\n    }\n  }\n\n  private isQueueProcessingSuspended(): boolean {\n    return this._suspendProcessingUntil && this._suspendProcessingUntil > new Date();\n  }\n\n  private onProcessQueue(): void {\n    if (!this.isQueueProcessingSuspended() && !this._processingQueue) {\n      this.process();\n    }\n  }\n\n  private processSubmissionResponse(response:SubmissionResponse, events:{ path:string, value:IEvent }[]): void {\n    const noSubmission:string = 'The event will not be submitted.'; // Optimization for minifier.\n    let config:Configuration = this._config; // Optimization for minifier.\n    let log:ILog = config.log; // Optimization for minifier.\n\n    if (response.success) {\n      log.info(`Sent ${events.length} events.`);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.serviceUnavailable) {\n      // You are currently over your rate limit or the servers are under stress.\n      log.error('Server returned service unavailable.');\n      this.suspendProcessing();\n      return;\n    }\n\n    if (response.paymentRequired) {\n      // If the organization over the rate limit then discard the event.\n      log.info('Too many events have been submitted, please upgrade your plan.');\n      this.suspendProcessing(null, true, true);\n      return;\n    }\n\n    if (response.unableToAuthenticate) {\n      // The api key was suspended or could not be authorized.\n      log.info(`Unable to authenticate, please check your configuration. ${noSubmission}`);\n      this.suspendProcessing(15);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.notFound || response.badRequest) {\n      // The service end point could not be found.\n      log.error(`Error while trying to submit data: ${response.message}`);\n      this.suspendProcessing(60 * 4);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.requestEntityTooLarge) {\n      let message = 'Event submission discarded for being too large.';\n      if (config.submissionBatchSize > 1) {\n        log.error(`${message} Retrying with smaller batch size.`);\n        config.submissionBatchSize = Math.max(1, Math.round(config.submissionBatchSize / 1.5));\n      } else {\n        log.error(`${message} ${noSubmission}`);\n        this.removeEvents(events);\n      }\n\n      return;\n    }\n\n    if (!response.success) {\n      log.error(`Error submitting events: ${response.message || 'Please check the network tab for more info.'}`);\n      this.suspendProcessing();\n    }\n  }\n\n  private removeEvents(events:{ path:string, value:IEvent }[]) {\n    for (let index = 0; index < (events || []).length; index++) {\n      this._config.storage.remove(events[index].path);\n    }\n  }\n}\n\n                                                                                     \n\nexport class InMemoryStorage<T> implements IStorage<T> {\n  private _items:IStorageItem<T>[] = [];\n  private _maxItems:number;\n\n  constructor(maxItems?:number) {\n    this._maxItems = maxItems > 0 ? maxItems : 250;\n  }\n\n  public save(path:string, value:T):boolean {\n    if (!path || !value) {\n      return false;\n    }\n\n    this.remove(path);\n    if (this._items.push({ created: new Date().getTime(), path: path, value: value }) > this._maxItems) {\n      this._items.shift();\n    }\n\n    return true;\n  }\n\n  public get(path:string):T {\n    let item:IStorageItem<T> = path ? this.getList(`^${path}$`, 1)[0] : null;\n    return item ? item.value : null;\n  }\n\n  public getList(searchPattern?:string, limit?:number):IStorageItem<T>[] {\n    let items = this._items; // Optimization for minifier\n    if (!searchPattern) {\n      return items.slice(0, limit);\n    }\n\n    let regex = new RegExp(searchPattern);\n    let results:IStorageItem<T>[] = [];\n    for (let index = 0; index < items.length; index++) {\n      if (regex.test(items[index].path)) {\n        results.push(items[index]);\n\n        if (results.length >= limit) {\n          break;\n        }\n      }\n    }\n\n    return results;\n  }\n\n  public remove(path:string):void {\n    if (path) {\n      let item = this.getList(`^${path}$`, 1)[0];\n      if (item) {\n        this._items.splice(this._items.indexOf(item), 1);\n      }\n    }\n  }\n}\n\nn\ndeclare var XDomainRequest:{ new (); create(); };\n\nexport class DefaultSubmissionClient implements ISubmissionClient {\n  public configurationVersionHeader:string = 'x-exceptionless-configversion';\n\n  public postEvents(events:IEvent[], config:Configuration, callback:(response:SubmissionResponse) => void, isAppExiting?:boolean):void {\n    let data = Utils.stringify(events, config.dataExclusions);\n    let request = this.createRequest(config, 'POST', '/api/v2/events', data);\n    let cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb, isAppExiting);\n  }\n\n  public postUserDescription(referenceId:string, description:IUserDescription, config:Configuration, callback:(response:SubmissionResponse) => void):void {\n    let path = `/api/v2/events/by-ref/${encodeURIComponent(referenceId)}/user-description`;\n    let data = Utils.stringify(description, config.dataExclusions);\n    let request = this.createRequest(config, 'POST', path, data);\n    let cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public getSettings(config:Configuration, callback:(response:SettingsResponse) => void):void {\n    let request = this.createRequest(config, 'GET', '/api/v2/projects/config');\n    let cb = (status, message, data?, headers?) => {\n      if (status !== 200) {\n        return callback(new SettingsResponse(false, null, -1, null, message));\n      }\n\n      let settings:IClientConfiguration;\n      try {\n        settings = JSON.parse(data);\n      } catch (e) {\n        config.log.error(`Unable to parse settings: '${data}'`);\n      }\n\n      if (!settings || isNaN(settings.version)) {\n        return callback(new SettingsResponse(false, null, -1, null, 'Invalid configuration settings.'));\n      }\n\n      callback(new SettingsResponse(true, settings.settings || {}, settings.version));\n    };\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  private createRequest(config: Configuration, method: string, path: string, data: string = null): SubmissionRequest {\n    return {\n      method,\n      path,\n      data,\n      serverUrl: config.serverUrl,\n      apiKey: config.apiKey,\n      userAgent: config.userAgent\n    };\n  }\n\n  private createSubmissionCallback(config:Configuration, callback:(response:SubmissionResponse) => void) {\n    return (status, message, data?, headers?) => {\n      let settingsVersion:number = headers && parseInt(headers[this.configurationVersionHeader], 10);\n      SettingsManager.checkVersion(settingsVersion, config);\n\n      callback(new SubmissionResponse(status, message));\n    };\n  }\n}\n\nexport class Utils {\n  public static addRange<T>(target:T[], ...values:T[]) {\n    if (!target) {\n      target = [];\n    }\n\n    if (!values || values.length === 0) {\n      return target;\n    }\n\n    for (let index = 0; index < values.length; index++) {\n      if (values[index] && target.indexOf(values[index]) < 0) {\n        target.push(values[index]);\n      }\n    }\n\n    return target;\n  }\n\n  public static getHashCode(source:string): string {\n    if (!source || source.length === 0) {\n      return null;\n    }\n\n    let hash:number = 0;\n    for (let index = 0; index < source.length; index++) {\n      let character   = source.charCodeAt(index);\n      hash  = ((hash << 5) - hash) + character;\n      hash |= 0;\n    }\n\n    return hash.toString();\n  }\n\n  public static getCookies(cookies:string): Object {\n    let result:Object = {};\n\n    let parts:string[] = (cookies || '').split('; ');\n    for (let index = 0; index < parts.length; index++) {\n      let cookie:string[] = parts[index].split('=');\n      result[cookie[0]] = cookie[1];\n    }\n\n    return result;\n  }\n\n  public static guid(): string {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    }\n\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n  }\n\n  public static merge(defaultValues:Object, values:Object) {\n    let result:Object = {};\n\n    for (let key in defaultValues || {}) {\n      if (!!defaultValues[key]) {\n        result[key] = defaultValues[key];\n      }\n    }\n\n    for (let key in values || {}) {\n      if (!!values[key]) {\n        result[key] = values[key];\n      }\n    }\n\n    return result;\n  }\n\n  public static parseVersion(source:string): string {\n    if (!source) {\n      return null;\n    }\n\n    let versionRegex = /(v?((\\d+)\\.(\\d+)(\\.(\\d+))?)(?:-([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?(?:\\+([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?)/;\n    let matches = versionRegex.exec(source);\n    if (matches && matches.length > 0) {\n      return matches[0];\n    }\n\n    return null;\n  }\n\n  public static parseQueryString(query:string) {\n    if (!query || query.length === 0) {\n      return null;\n    }\n\n    let pairs:string[] = query.split('&');\n    if (pairs.length === 0) {\n      return null;\n    }\n\n    let result:Object = {};\n    for (let index = 0; index < pairs.length; index++) {\n      let pair = pairs[index].split('=');\n      result[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n    }\n\n    return result;\n  }\n\n  public static randomNumber(): number {\n    return Math.floor(Math.random() * 9007199254740992);\n  }\n\n  public static stringify(data:any, exclusions?:string[]): string {\n    function checkForMatch(pattern:string, value:string): boolean {\n      if (!pattern || !value || typeof value !== 'string') {\n        return false;\n      }\n\n      let trim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n      pattern = pattern.toLowerCase().replace(trim, '');\n      value = value.toLowerCase().replace(trim, '');\n\n      if (pattern.length <= 0) {\n        return false;\n      }\n\n      let startsWithWildcard:boolean = pattern[0] === '*';\n      if (startsWithWildcard) {\n        pattern = pattern.slice(1);\n      }\n\n      let endsWithWildcard:boolean = pattern[pattern.length - 1] === '*';\n      if (endsWithWildcard) {\n        pattern = pattern.substring(0, pattern.length - 1);\n      }\n\n      if (startsWithWildcard && endsWithWildcard) {\n        return value.indexOf(pattern) !== -1;\n      }\n\n      if (startsWithWildcard) {\n        return value.lastIndexOf(pattern) === (value.length - pattern.length);\n      }\n\n      if (endsWithWildcard) {\n        return value.indexOf(pattern) === 0;\n      }\n\n      return value === pattern;\n    }\n\n    function stringifyImpl(obj:any, excludedKeys:string[]): string {\n      let cache:string[] = [];\n      return JSON.stringify(obj, function(key:string, value:any) {\n        for (let index = 0; index < (excludedKeys || []).length; index++) {\n          if (checkForMatch(excludedKeys[index], key)) {\n            return;\n          }\n        }\n\n        if (typeof value === 'object' && !!value) {\n          if (cache.indexOf(value) !== -1) {\n            // Circular reference found, discard key\n            return;\n          }\n\n          cache.push(value);\n        }\n\n        return value;\n      });\n    }\n\n    if (({}).toString.call(data) === '[object Array]') {\n      let result = [];\n      for (let index = 0; index < data.length; index++) {\n        result[index] = JSON.parse(stringifyImpl(data[index], exclusions || []));\n      }\n\n      return JSON.stringify(result);\n    }\n\n    return stringifyImpl(data, exclusions || []);\n  }\n}\n\nn\nexport class Configuration implements IConfigurationSettings {\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @type {IConfigurationSettings}\n   * @private\n   */\n  private static _defaultSettings:IConfigurationSettings = null;\n\n  /**\n   * A default list of tags that will automatically be added to every\n   * report submitted to the server.\n   *\n   * @type {Array}\n   */\n  public defaultTags:string[] = [];\n\n  /**\n   * A default list of of extended data objects that will automatically\n   * be added to every report submitted to the server.\n   *\n   * @type {{}}\n   */\n  public defaultData:Object = {};\n\n  /**\n   * Whether the client is currently enabled or not. If it is disabled,\n   * submitted errors will be discarded and no data will be sent to the server.\n   *\n   * @returns {boolean}\n   */\n  public enabled:boolean = true;\n\n  public environmentInfoCollector:IEnvironmentInfoCollector;\n  public errorParser:IErrorParser;\n  public lastReferenceIdManager:ILastReferenceIdManager = new DefaultLastReferenceIdManager();\n  public log:ILog;\n  public moduleCollector:IModuleCollector;\n  public requestInfoCollector:IRequestInfoCollector;\n\n  /**\n   * Maximum number of events that should be sent to the server together in a batch. (Defaults to 50)\n   */\n  public submissionBatchSize:number;\n  public submissionAdapter:ISubmissionAdapter;\n  public submissionClient:ISubmissionClient;\n\n  /**\n   * Contains a dictionary of custom settings that can be used to control\n   * the client and will be automatically updated from the server.\n   */\n  public settings:Object = {};\n\n  public storage:IStorage<Object>;\n\n  public queue:IEventQueue;\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @type {Array}\n   * @private\n   */\n  private _plugins:IEventPlugin[] = [];\n\n  constructor(configSettings?:IConfigurationSettings) {\n    function inject(fn:any) {\n      return typeof fn === 'function' ? fn(this) : fn;\n    }\n\n    configSettings = Utils.merge(Configuration.defaults, configSettings);\n\n    this.log = inject(configSettings.log) || new NullLog();\n    this.apiKey = configSettings.apiKey;\n    this.serverUrl = configSettings.serverUrl;\n\n    this.environmentInfoCollector = inject(configSettings.environmentInfoCollector);\n    this.errorParser = inject(configSettings.errorParser);\n    this.lastReferenceIdManager = inject(configSettings.lastReferenceIdManager) || new DefaultLastReferenceIdManager();\n    this.moduleCollector = inject(configSettings.moduleCollector);\n    this.requestInfoCollector = inject(configSettings.requestInfoCollector);\n    this.submissionBatchSize = inject(configSettings.submissionBatchSize) || 50;\n    this.submissionAdapter = inject(configSettings.submissionAdapter);\n    this.submissionClient = inject(configSettings.submissionClient) || new DefaultSubmissionClient();\n    this.storage = inject(configSettings.storage) || new InMemoryStorage<any>();\n    this.queue = inject(configSettings.queue) || new DefaultEventQueue(this);\n\n    SettingsManager.applySavedServerSettings(this);\n    EventPluginManager.addDefaultPlugins(this);\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @type {string}\n   * @private\n   */\n  private _apiKey:string;\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @returns {string}\n   */\n  public get apiKey():string {\n    return this._apiKey;\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @param value\n   */\n  public set apiKey(value:string) {\n    this._apiKey = value || null;\n    this.log.info(`apiKey: ${this._apiKey}`);\n  }\n\n  /**\n   * Returns true if the apiKey is valid.\n   * @returns {boolean}\n   */\n  public get isValid():boolean {\n    return !!this.apiKey && this.apiKey.length >= 10;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _serverUrl:string = 'https://collector.exceptionless.io';\n\n  /**\n   * The server url that all events will be sent to.\n   * @returns {string}\n   */\n  public get serverUrl():string {\n    return this._serverUrl;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @param value\n   */\n  public set serverUrl(value:string) {\n    if (!!value) {\n      this._serverUrl = value;\n      this.log.info(`serverUrl: ${this._serverUrl}`);\n    }\n  }\n\n  /**\n   * A list of exclusion patterns.\n   * @type {Array}\n   * @private\n   */\n  private _dataExclusions:string[] = [];\n\n  /**\n   *  A list of exclusion patterns that will automatically remove any data that\n   *  matches them from any data submitted to the server.\n   *\n   *  For example, entering CreditCard will remove any extended data properties,\n   *  form fields, cookies and query parameters from the report.\n   *\n   * @returns {string[]}\n   */\n  public get dataExclusions():string[] {\n    let exclusions:string = this.settings['@@DataExclusions'];\n    return this._dataExclusions.concat(exclusions && exclusions.split(',') || []);\n  }\n\n  /**\n   * Add items to the list of exclusion patterns that will automatically remove any\n   * data that matches them from any data submitted to the server.\n   *\n   * For example, entering CreditCard will remove any extended data properties, form\n   * fields, cookies and query parameters from the report.\n   *\n   * @param exclusions\n   */\n  public addDataExclusions(...exclusions:string[]) {\n    this._dataExclusions = Utils.addRange<string>(this._dataExclusions, ...exclusions);\n  }\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @returns {IEventPlugin[]}\n   */\n  public get plugins():IEventPlugin[] {\n    return this._plugins.sort((p1:IEventPlugin, p2:IEventPlugin) => {\n      return (p1.priority < p2.priority) ? -1 : (p1.priority > p2.priority) ? 1 : 0;\n    });\n  }\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param plugin\n   */\n  public addPlugin(plugin:IEventPlugin): void;\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param name The name used to identify the plugin.\n   * @param priority Used to determine plugins priority.\n   * @param pluginAction A function that is run.\n   */\n  public addPlugin(name:string, priority:number, pluginAction:(context:EventPluginContext, next?:() => void) => void): void;\n  public addPlugin(pluginOrName:IEventPlugin|string, priority?:number, pluginAction?:(context:EventPluginContext, next?:() => void) => void): void {\n    let plugin:IEventPlugin = !!pluginAction ? { name: <string>pluginOrName, priority: priority, run: pluginAction } : <IEventPlugin>pluginOrName;\n    if (!plugin || !plugin.run) {\n      this.log.error('Add plugin failed: Run method not defined');\n      return;\n    }\n\n    if (!plugin.name) {\n      plugin.name = Utils.guid();\n    }\n\n    if (!plugin.priority) {\n      plugin.priority = 0;\n    }\n\n    let pluginExists:boolean = false;\n    let plugins = this._plugins; // optimization for minifier.\n    for (let index = 0; index < plugins.length; index++) {\n      if (plugins[index].name === plugin.name) {\n        pluginExists = true;\n        break;\n      }\n    }\n\n    if (!pluginExists) {\n      plugins.push(plugin);\n    }\n  }\n\n  /**\n   * Remove the plugin from this configuration.\n   * @param plugin\n   */\n  public removePlugin(plugin:IEventPlugin): void;\n\n  /**\n   * Remove an plugin by key from this configuration.\n   * @param name\n   */\n  public removePlugin(name:string): void;\n  public removePlugin(pluginOrName:IEventPlugin|string): void {\n    let name:string = typeof pluginOrName === 'string' ? pluginOrName : pluginOrName.name;\n    if (!name) {\n      this.log.error('Remove plugin failed: Plugin name not defined');\n      return;\n    }\n\n    let plugins = this._plugins; // optimization for minifier.\n    for (let index = 0; index < plugins.length; index++) {\n      if (plugins[index].name === name) {\n        plugins.splice(index, 1);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Automatically set the application version for events.\n   * @param version\n   */\n  public setVersion(version:string): void {\n    if (!!version) {\n      this.defaultData['@version'] = version;\n    }\n  }\n\n  public setUserIdentity(userInfo:IUserInfo): void;\n  public setUserIdentity(identity:string): void;\n  public setUserIdentity(identity:string, name:string): void;\n  public setUserIdentity(userInfoOrIdentity:IUserInfo|string, name?:string): void {\n    const USER_KEY:string = '@user'; // optimization for minifier.\n    let userInfo:IUserInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name: name };\n\n    let shouldRemove:boolean = !userInfo || (!userInfo.identity && !userInfo.name);\n    if (shouldRemove) {\n      delete this.defaultData[USER_KEY];\n    } else {\n      this.defaultData[USER_KEY] = userInfo;\n    }\n\n    this.log.info(`user identity: ${shouldRemove ? 'null' : userInfo.identity}`);\n  }\n\n  /**\n   * Used to identify the client that sent the events to the server.\n   * @returns {string}\n   */\n  public get userAgent():string {\n    return 'exceptionless-js/1.0.0.0';\n  }\n\n  /**\n   * Automatically set a reference id for error events.\n   */\n  public useReferenceIds(): void {\n    this.addPlugin(new ReferenceIdPlugin());\n  }\n\n  // TODO: Support a min log level.\n  public useDebugLogger(): void {\n    this.log = new ConsoleLog();\n  }\n\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @returns {IConfigurationSettings}\n   */\n  public static get defaults() {\n    if (Configuration._defaultSettings === null) {\n      Configuration._defaultSettings = {};\n    }\n\n    return Configuration._defaultSettings;\n  }\n}\n\n                                                                                                                                                                                                                                                                                                               \n\nexport class EventBuilder {\n  public target:IEvent;\n  public client:ExceptionlessClient;\n  public pluginContextData:ContextData;\n\n  private _validIdentifierErrorMessage:string = 'must contain between 8 and 100 alphanumeric or \\'-\\' characters.'; // optimization for minifier.\n\n  constructor(event:IEvent, client:ExceptionlessClient, pluginContextData?:ContextData) {\n    this.target = event;\n    this.client = client;\n    this.pluginContextData = pluginContextData || new ContextData();\n  }\n\n  public setType(type:string): EventBuilder {\n    if (!!type) {\n      this.target.type = type;\n    }\n\n    return this;\n  }\n\n  public setSource(source:string): EventBuilder {\n    if (!!source) {\n      this.target.source = source;\n    }\n\n    return this;\n  }\n\n  public setSessionId(sessionId:string): EventBuilder {\n    if (!this.isValidIdentifier(sessionId)) {\n      throw new Error(`SessionId ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.target.session_id = sessionId;\n    return this;\n  }\n\n  public setReferenceId(referenceId:string): EventBuilder {\n    if (!this.isValidIdentifier(referenceId)) {\n      throw new Error(`ReferenceId ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.target.reference_id = referenceId;\n    return this;\n  }\n\n  public setMessage(message:string): EventBuilder {\n    if (!!message) {\n      this.target.message = message;\n    }\n\n    return this;\n  }\n\n  public setGeo(latitude: number, longitude: number): EventBuilder {\n    if (latitude < -90.0 || latitude > 90.0) {\n      throw new Error('Must be a valid latitude value between -90.0 and 90.0.');\n    }\n\n    if (longitude < -180.0 || longitude > 180.0) {\n      throw new Error('Must be a valid longitude value between -180.0 and 180.0.');\n    }\n\n    this.target.geo = `${latitude},${longitude}`;\n    return this;\n  }\n\n  public setUserIdentity(userInfo:IUserInfo): EventBuilder;\n  public setUserIdentity(identity:string): EventBuilder;\n  public setUserIdentity(identity:string, name:string): EventBuilder;\n  public setUserIdentity(userInfoOrIdentity:IUserInfo|string, name?:string): EventBuilder {\n    let userInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name: name };\n    if (!userInfo || (!userInfo.identity && !userInfo.name)) {\n      return this;\n    }\n\n    this.setProperty('@user', userInfo);\n    return this;\n  }\n\n  public setValue(value:number): EventBuilder {\n    if (!!value) {\n      this.target.value = value;\n    }\n\n    return this;\n  }\n\n  public addTags(...tags:string[]): EventBuilder {\n    this.target.tags = Utils.addRange<string>(this.target.tags, ...tags);\n    return this;\n  }\n\n  public setProperty(name:string, value:any): EventBuilder {\n    if (!name || (value === undefined || value == null)) {\n      return this;\n    }\n\n    if (!this.target.data) {\n      this.target.data = {};\n    }\n\n    this.target.data[name] = value;\n    return this;\n  }\n\n  public markAsCritical(critical:boolean): EventBuilder {\n    if (critical) {\n      this.addTags('Critical');\n    }\n\n    return this;\n  }\n\n  public addRequestInfo(request:Object): EventBuilder {\n    if (!!request) {\n      this.pluginContextData['@request'] = request;\n    }\n\n    return this;\n  }\n\n  public submit(callback?:(context:EventPluginContext) => void): void {\n    this.client.submitEvent(this.target, this.pluginContextData, callback);\n  }\n\n  private isValidIdentifier(value:string): boolean {\n    if (!value) {\n      return true;\n    }\n\n    if (value.length < 8 || value.length > 100) {\n      return false;\n    }\n\n    for (var index = 0; index < value.length; index++) {\n      let code = value.charCodeAt(index);\n      let isDigit = (code >= 48) && (code <= 57);\n      let isLetter = ((code >= 65) && (code <= 90)) || ((code >= 97) && (code <= 122));\n      let isMinus = code === 45;\n\n      if (!(isDigit || isLetter) && !isMinus) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nexport interface IUserDescription {\n  email_address?:string;\n  description?:string;\n  data?:any;\n}\n\nexport class ContextData {\n  public setException(exception:Error): void {\n    if (exception) {\n      this['@@_Exception'] = exception;\n    }\n  }\n\n  public get hasException(): boolean {\n    return !!this['@@_Exception'];\n  }\n\n  public getException(): Error {\n    return this['@@_Exception'] || null;\n  }\n\n  public markAsUnhandledError(): void {\n    this['@@_IsUnhandledError'] = true;\n  }\n\n  public get isUnhandledError(): boolean {\n    return !!this['@@_IsUnhandledError'];\n  }\n\n  public setSubmissionMethod(method:string): void {\n    if (method) {\n      this['@@_SubmissionMethod'] = method;\n    }\n  }\n\n  public getSubmissionMethod(): string {\n    return this['@@_SubmissionMethod'] || null;\n  }\n}\n\nexport class SubmissionResponse {\n  success:boolean = false;\n  badRequest:boolean = false;\n  serviceUnavailable:boolean = false;\n  paymentRequired:boolean = false;\n  unableToAuthenticate:boolean = false;\n  notFound:boolean = false;\n  requestEntityTooLarge:boolean = false;\n  statusCode:number;\n  message:string;\n\n  constructor(statusCode:number, message?:string) {\n    this.statusCode = statusCode;\n    this.message = message;\n\n    this.success = statusCode >= 200 && statusCode <= 299;\n    this.badRequest = statusCode === 400;\n    this.serviceUnavailable = statusCode === 503;\n    this.paymentRequired = statusCode === 402;\n    this.unableToAuthenticate = statusCode === 401 || statusCode === 403;\n    this.notFound = statusCode === 404;\n    this.requestEntityTooLarge = statusCode === 413;\n  }\n}\n\nn\nexport class ExceptionlessClient {\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   * @private\n   */\n  private static _instance:ExceptionlessClient = null;\n\n  public config:Configuration;\n\n  constructor();\n  constructor(settings:IConfigurationSettings);\n  constructor(apiKey:string, serverUrl?:string);\n  constructor(settingsOrApiKey?:IConfigurationSettings|string, serverUrl?:string) {\n    if (typeof settingsOrApiKey !== 'object') {\n      this.config = new Configuration(settingsOrApiKey);\n    } else {\n      this.config = new Configuration({ apiKey: <string>settingsOrApiKey, serverUrl: serverUrl });\n    }\n  }\n\n  public createException(exception:Error): EventBuilder {\n    let pluginContextData = new ContextData();\n    pluginContextData.setException(exception);\n    return this.createEvent(pluginContextData).setType('error');\n  }\n\n  public submitException(exception:Error, callback?:(context:EventPluginContext) => void): void {\n    this.createException(exception).submit(callback);\n  }\n\n  public createUnhandledException(exception:Error, submissionMethod?:string): EventBuilder {\n    let builder = this.createException(exception);\n    builder.pluginContextData.markAsUnhandledError();\n    builder.pluginContextData.setSubmissionMethod(submissionMethod);\n\n    return builder;\n  }\n\n  public submitUnhandledException(exception:Error, submissionMethod?:string, callback?:(context:EventPluginContext) => void) {\n    this.createUnhandledException(exception, submissionMethod).submit(callback);\n  }\n\n  public createFeatureUsage(feature:string): EventBuilder {\n    return this.createEvent().setType('usage').setSource(feature);\n  }\n\n  public submitFeatureUsage(feature:string, callback?:(context:EventPluginContext) => void): void {\n    this.createFeatureUsage(feature).submit(callback);\n  }\n\n  public createLog(message:string): EventBuilder;\n  public createLog(source:string, message:string): EventBuilder;\n  public createLog(source:string, message:string, level:string): EventBuilder;\n  public createLog(sourceOrMessage:string, message?:string, level?:string): EventBuilder {\n    let builder = this.createEvent().setType('log');\n\n    if (message && level) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message).setProperty('@level', level);\n    } else if (message) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message);\n    } else {\n      // TODO: Look into using https://www.stevefenton.co.uk/Content/Blog/Date/201304/Blog/Obtaining-A-Class-Name-At-Runtime-In-TypeScript/\n      let caller:any = arguments.callee.caller;\n      builder = builder.setSource(caller && caller.name).setMessage(sourceOrMessage);\n    }\n\n    return builder;\n  }\n\n  public submitLog(message:string): void;\n  public submitLog(source:string, message:string): void;\n  public submitLog(source:string, message:string, level:string, callback?:(context:EventPluginContext) => void): void;\n  public submitLog(sourceOrMessage:string, message?:string, level?:string, callback?:(context:EventPluginContext) => void): void {\n    this.createLog(sourceOrMessage, message, level).submit(callback);\n  }\n\n  public createNotFound(resource:string): EventBuilder {\n    return this.createEvent().setType('404').setSource(resource);\n  }\n\n  public submitNotFound(resource:string, callback?:(context:EventPluginContext) => void): void {\n    this.createNotFound(resource).submit(callback);\n  }\n\n  public createSessionStart(sessionId:string): EventBuilder {\n    return this.createEvent().setType('start').setSessionId(sessionId);\n  }\n\n  public submitSessionStart(sessionId:string, callback?:(context:EventPluginContext) => void): void {\n    this.createSessionStart(sessionId).submit(callback);\n  }\n\n  public createSessionEnd(sessionId:string): EventBuilder {\n    return this.createEvent().setType('end').setSessionId(sessionId);\n  }\n\n  public submitSessionEnd(sessionId:string, callback?:(context:EventPluginContext) => void): void {\n    this.createSessionEnd(sessionId).submit(callback);\n  }\n\n  public createEvent(pluginContextData?:ContextData): EventBuilder {\n    return new EventBuilder({ date: new Date() }, this, pluginContextData);\n  }\n\n  /**\n   * Submits the event to be sent to the server.\n   * @param event The event data.\n   * @param pluginContextData Any contextual data objects to be used by Exceptionless plugins to gather default information for inclusion in the report information.\n   * @param callback\n   */\n  public submitEvent(event:IEvent, pluginContextData?:ContextData, callback?:(context:EventPluginContext) => void): void {\n    function cancelled(context:EventPluginContext) {\n      if (!!context) {\n        context.cancelled = true;\n      }\n\n      return !!callback && callback(context);\n    }\n\n    let context = new EventPluginContext(this, event, pluginContextData);\n    if (!event) {\n      return cancelled(context);\n    }\n\n    if (!this.config.enabled) {\n      this.config.log.info('Event submission is currently disabled.');\n      return cancelled(context);\n    }\n\n    if (!event.data) {\n      event.data = {};\n    }\n\n    if (!event.tags || !event.tags.length) {\n      event.tags = [];\n    }\n\n    EventPluginManager.run(context, function (ctx:EventPluginContext) {\n      let ev = ctx.event;\n      if (!ctx.cancelled) {\n        // ensure all required data\n        if (!ev.type || ev.type.length === 0) {\n          ev.type = 'log';\n        }\n\n        if (!ev.date) {\n          ev.date = new Date();\n        }\n\n        let config = ctx.client.config;\n        config.queue.enqueue(ev);\n\n        if (ev.reference_id && ev.reference_id.length > 0) {\n          ctx.log.info(`Setting last reference id '${ev.reference_id}'`);\n          config.lastReferenceIdManager.setLast(ev.reference_id);\n        }\n      }\n\n      !!callback && callback(ctx);\n    });\n  }\n\n  /**\n   * Updates the user's email address and description of an event for the specified reference id.\n   * @param referenceId The reference id of the event to update.\n   * @param email The user's email address to set on the event.\n   * @param description The user's description of the event.\n   */\n  public updateUserEmailAndDescription(referenceId:string, email:string, description:string, callback?:(response:SubmissionResponse) => void) {\n    if (!referenceId || !email || !description || !this.config.enabled) {\n      return !!callback && callback(new SubmissionResponse(500, 'cancelled'));\n    }\n\n    let userDescription:IUserDescription = { email_address: email, description: description };\n    this.config.submissionClient.postUserDescription(referenceId, userDescription, this.config, (response:SubmissionResponse) => {\n      if (!response.success) {\n        this.config.log.error(`Failed to submit user email and description for event '${referenceId}': ${response.statusCode} ${response.message}`);\n      }\n\n      !!callback && callback(response);\n    });\n  }\n\n  /**\n   * Gets the last event client id that was submitted to the server.\n   * @returns {string} The event client id.\n   */\n  public getLastReferenceId(): string {\n    return this.config.lastReferenceIdManager.getLast();\n  }\n\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   */\n  public static get default() {\n    if (ExceptionlessClient._instance === null) {\n      ExceptionlessClient._instance = new ExceptionlessClient(null);\n    }\n\n    return ExceptionlessClient._instance;\n  }\n}\n\nexport interface IModule {\n  data?:any;\n\n  module_id?:number;\n  name?:string;\n  version?:string;\n  is_entry?:boolean;\n  created_date?:Date;\n  modified_date?:Date;\n}\n\nexport interface IRequestInfo {\n  user_agent?:string;\n  http_method?:string;\n  is_secure?:boolean;\n  host?:string;\n  port?:number;\n  path?:string;\n  referrer?:string;\n  client_ip_address?:string;\n  cookies?:any;\n  post_data?:any;\n  query_string?:any;\n  data?:any;\n}\n\nexport interface IEnvironmentInfo {\n  processor_count?:number;\n  total_physical_memory?:number;\n  available_physical_memory?:number;\n  command_line?:string;\n  process_name?:string;\n  process_id?:string;\n  process_memory_size?:number;\n  thread_id?:string;\n  architecture?:string;\n  o_s_name?:string;\n  o_s_version?:string;\n  ip_address?:string;\n  machine_name?:string;\n  install_id?:string;\n  runtime_version?:string;\n  data?:any;\n}\n\n                                                                                                           \n\nexport class ConfigurationDefaultsPlugin implements IEventPlugin {\n  public priority:number = 10;\n  public name:string = 'ConfigurationDefaultsPlugin';\n\n  public run(context:EventPluginContext, next?:() => void): void {\n    let defaultTags:string[] = context.client.config.defaultTags || [];\n    for (let index = 0; index < defaultTags.length; index++) {\n      let tag = defaultTags[index];\n      if (!!tag && context.event.tags.indexOf(tag) < 0) {\n        context.event.tags.push(tag);\n      }\n    }\n\n    let defaultData:Object = context.client.config.defaultData || {};\n    for (let key in defaultData) {\n      if (!!defaultData[key]) {\n        context.event.data[key] = defaultData[key];\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                           \n\nexport class ErrorPlugin implements IEventPlugin {\n  public priority: number = 30;\n  public name: string = 'ErrorPlugin';\n  public ignoredProperties: string[] = [\n    'arguments',\n    'column',\n    'columnNumber',\n    'description',\n    'fileName',\n    'message',\n    'name',\n    'number',\n    'line',\n    'lineNumber',\n    'opera#sourceloc',\n    'sourceId',\n    'sourceURL',\n    'stack',\n    'stackArray',\n    'stacktrace'\n  ];\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\n    const EXTRA_PROPERTIES_KEY: string = '@ext';\n\n    let exception = context.contextData.getException();\n    if (!!exception) {\n      context.event.type = 'error';\n\n      if (!context.event.data[ERROR_KEY]) {\n        let parser = context.client.config.errorParser;\n        if (!parser) {\n          throw new Error('No error parser was defined.');\n        }\n\n        let result = parser.parse(context, exception);\n        if (!!result) {\n          let additionalData = this.getAdditionalData(exception);\n          if (!!additionalData) {\n            if (!result.data) {\n              result.data = {};\n            }\n            result.data[EXTRA_PROPERTIES_KEY] = additionalData;\n          }\n\n          context.event.data[ERROR_KEY] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n\n  private getAdditionalData(exception: Error): { [key: string]: any } {\n    let additionalData = {};\n    for (var key in exception) {\n      if (this.ignoredProperties.indexOf(key) >= 0) {\n        continue;\n      }\n      let value = exception[key];\n      if (typeof value !== 'function') {\n        additionalData[key] = value;\n      }\n    }\n\n    return Object.getOwnPropertyNames(additionalData).length\n      ? additionalData\n      : null;\n  }\n}\n\n                                                                                                                                                           \n\nexport class ModuleInfoPlugin implements IEventPlugin {\n  public priority:number = 40;\n  public name:string = 'ModuleInfoPlugin';\n\n  public run(context:EventPluginContext, next?:() => void): void {\n    const ERROR_KEY:string = '@error'; // optimization for minifier.\n\n    let collector = context.client.config.moduleCollector;\n    if (context.event.data[ERROR_KEY] && !context.event.data['@error'].modules && !!collector) {\n      let modules:IModule[] = collector.getModules(context);\n      if (modules && modules.length > 0) {\n        context.event.data[ERROR_KEY].modules = modules;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                     \n\nexport class RequestInfoPlugin implements IEventPlugin {\n  public priority:number = 60;\n  public name:string = 'RequestInfoPlugin';\n\n  public run(context:EventPluginContext, next?:() => void): void {\n    const REQUEST_KEY:string = '@request'; // optimization for minifier.\n\n    let collector = context.client.config.requestInfoCollector;\n    if (!context.event.data[REQUEST_KEY] && !!collector) {\n      let requestInfo:IRequestInfo = collector.getRequestInfo(context);\n      if (!!requestInfo) {\n        context.event.data[REQUEST_KEY] = requestInfo;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                             \n\nexport class EnvironmentInfoPlugin implements IEventPlugin {\n  public priority:number = 70;\n  public name:string = 'EnvironmentInfoPlugin';\n\n  public run(context:EventPluginContext, next?:() => void): void {\n    const ENVIRONMENT_KEY:string = '@environment'; // optimization for minifier.\n\n    let collector = context.client.config.environmentInfoCollector;\n    if (!context.event.data[ENVIRONMENT_KEY] && collector) {\n      let environmentInfo:IEnvironmentInfo = collector.getEnvironmentInfo(context);\n      if (!!environmentInfo) {\n        context.event.data[ENVIRONMENT_KEY] = environmentInfo;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                           \n\nexport class SubmissionMethodPlugin implements IEventPlugin {\n  public priority:number = 100;\n  public name:string = 'SubmissionMethodPlugin';\n\n  public run(context:EventPluginContext, next?:() => void): void {\n    let submissionMethod:string = context.contextData.getSubmissionMethod();\n    if (!!submissionMethod) {\n      context.event.data['@submission_method'] = submissionMethod;\n    }\n\n    next && next();\n  }\n}\n\nexport interface IParameter {\n  data?:any;\n  generic_arguments?:string[];\n\n  name?:string;\n  type?:string;\n  type_namespace?:string;\n}\n\n                                          \n\nexport interface IMethod {\n  data?:any;\n  generic_arguments?:string[];\n  parameters?:IParameter[];\n\n  is_signature_target?:boolean;\n  declaring_namespace?:string;\n  declaring_type?:string;\n  name?:string;\n  module_id?:number;\n}\n\n                                    \n\nexport interface IStackFrame extends IMethod {\n  file_name?:string;\n  line_number?:number;\n  column?:number;\n}\n\n                                                                                 \n\nexport interface IInnerError {\n  message?:string;\n  type?:string;\n  code?:string;\n  data?:any;\n  inner?:IInnerError;\n  stack_trace?:IStackFrame[];\n  target_method?:IMethod;\n}\n\n                                                                                 \n\nexport interface IError extends IInnerError {\n  modules?:IModule[];\n}\n\nexport interface IStorageItem<T> {\n  created:number;\n  path:string;\n  value:T;\n}\n\nexport interface SubmissionCallback {\n  (status: number, message: string, data?: string, headers?: Object): void;\n}\n\nexport interface SubmissionRequest {\n  serverUrl: string;\n  apiKey: string;\n  userAgent: string;\n  method: string;\n  path: string;\n  data: string;\n}\n\nexport class SettingsResponse {\n  success:boolean = false;\n  settings:any;\n  settingsVersion:number = -1;\n  message:string;\n  exception:any;\n\n  constructor(success:boolean, settings:any, settingsVersion:number = -1, exception:any = null, message:string = null) {\n    this.success = success;\n    this.settings = settings;\n    this.settingsVersion = settingsVersion;\n    this.exception = exception;\n    this.message = message;\n  }\n}\n\nexport interface IClientConfiguration {\n  settings:Object;\n  version:number;\n}\n\n                                                                                                                                                                                                                                                                     \n\nexport class DefaultErrorParser implements IErrorParser {\n  public parse(context:EventPluginContext, exception:Error): IError {\n    function getParameters(parameters:string|string[]): IParameter[] {\n      let params:string[] = (typeof parameters === 'string' ? [parameters] : parameters) || [];\n\n      let result:IParameter[] = [];\n      for (let index = 0; index < params.length; index++) {\n        result.push({ name: params[index] });\n      }\n\n      return result;\n    }\n\n    function getStackFrames(stackFrames:TraceKit.StackFrame[]): IStackFrame[] {\n      const ANONYMOUS:string = '<anonymous>';\n      let frames:IStackFrame[] = [];\n\n      for (let index = 0; index < stackFrames.length; index++) {\n        let frame = stackFrames[index];\n        frames.push({\n          name: (frame.func || ANONYMOUS).replace('?', ANONYMOUS),\n          parameters: getParameters(frame.args),\n          file_name: frame.url,\n          line_number: frame.line || 0,\n          column: frame.column || 0\n        });\n      }\n\n      return frames;\n    }\n\n    const TRACEKIT_STACK_TRACE_KEY:string = '@@_TraceKit.StackTrace'; // optimization for minifier.\n\n    let stackTrace:TraceKit.StackTrace = !!context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      ? context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      : TraceKit.computeStackTrace(exception, 25);\n\n    if (!stackTrace) {\n      throw new Error('Unable to parse the exceptions stack trace.');\n    }\n\n    return {\n      type: stackTrace.name,\n      message: stackTrace.message || exception.message,\n      stack_trace: getStackFrames(stackTrace.stack || [])\n    };\n  }\n}\n\n                                                                                                                                                                                                         \n\nexport class DefaultModuleCollector implements IModuleCollector {\n  public getModules(context:EventPluginContext): IModule[] {\n    if (document && document.getElementsByTagName) {\n      return null;\n    }\n\n    let modules:IModule[] = [];\n    let scripts = document.getElementsByTagName('script');\n    if (scripts && scripts.length > 0) {\n      for (let index = 0; index < scripts.length; index++) {\n        if (scripts[index].src) {\n          modules.push({\n            module_id: index,\n            name: scripts[index].src,\n            version: Utils.parseVersion(scripts[index].src)\n          });\n        } else if (!!scripts[index].innerHTML) {\n          modules.push({\n            module_id: index,\n            name: 'Script Tag',\n            version: Utils.getHashCode(scripts[index].innerHTML)\n          });\n        }\n      }\n    }\n\n    return modules;\n  }\n}\n\n                                                                                                                                                                                                                             \n\nexport class DefaultRequestInfoCollector implements IRequestInfoCollector {\n  public getRequestInfo(context:EventPluginContext): IRequestInfo {\n    if (!document || !navigator || !location) {\n      return null;\n    }\n\n    let requestInfo:IRequestInfo = {\n      user_agent: navigator.userAgent,\n      is_secure: location.protocol === 'https:',\n      host: location.hostname,\n      port: location.port && location.port !== '' ? parseInt(location.port, 10) : 80,\n      path: location.pathname,\n      // client_ip_address: 'TODO',\n      cookies: Utils.getCookies(document.cookie),\n      query_string: Utils.parseQueryString(location.search.substring(1))\n    };\n\n    if (document.referrer && document.referrer !== '') {\n      requestInfo.referrer = document.referrer;\n    }\n\n    return requestInfo;\n  }\n}\n\n                                                                                                                                                                              \n\ndeclare var XDomainRequest: { new (); create(); };\n\nexport class DefaultSubmissionAdapter implements ISubmissionAdapter {\n  public sendRequest(request: SubmissionRequest, callback: SubmissionCallback, isAppExiting?:boolean) {\n    // TODO: Handle sending events when app is exiting with send beacon.\n    const TIMEOUT: string = 'timeout';  // optimization for minifier.\n    const LOADED: string = 'loaded';  // optimization for minifier.\n    const WITH_CREDENTIALS: string = 'withCredentials';  // optimization for minifier.\n\n    let isCompleted: boolean = false;\n    let useSetTimeout: boolean = false;\n    function complete(mode: string, xhr: XMLHttpRequest) {\n      function parseResponseHeaders(headerStr) {\n        function trim(value) {\n          return value.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n        }\n\n        let headers = {};\n        let headerPairs = (headerStr || '').split('\\u000d\\u000a');\n        for (let index: number = 0; index < headerPairs.length; index++) {\n          let headerPair = headerPairs[index];\n          // Can't use split() here because it does the wrong thing\n          // if the header value has the string \": \" in it.\n          let separator = headerPair.indexOf('\\u003a\\u0020');\n          if (separator > 0) {\n            headers[trim(headerPair.substring(0, separator).toLowerCase())] = headerPair.substring(separator + 2);\n          }\n        }\n\n        return headers;\n      }\n\n      if (isCompleted) {\n        return;\n      }\n\n      isCompleted = true;\n\n      let message: string = xhr.statusText;\n      let responseText: string = xhr.responseText;\n      let status: number = xhr.status;\n\n      if (mode === TIMEOUT || status === 0) {\n        message = 'Unable to connect to server.';\n        status = 0;\n      } else if (mode === LOADED && !status) {\n        status = request.method === 'POST' ? 202 : 200;\n      } else if (status < 200 || status > 299) {\n        let responseBody: any = xhr.responseBody;\n        if (!!responseBody && !!responseBody.message) {\n          message = responseBody.message;\n        } else if (!!responseText && responseText.indexOf('message') !== -1) {\n          try {\n            message = JSON.parse(responseText).message;\n          } catch (e) {\n            message = responseText;\n          }\n        }\n      }\n\n      callback(status || 500, message || '', responseText, parseResponseHeaders(xhr.getAllResponseHeaders && xhr.getAllResponseHeaders()));\n    }\n\n    function createRequest(userAgent:string, method: string, url: string): XMLHttpRequest {\n      let xhr: any = new XMLHttpRequest();\n      if (WITH_CREDENTIALS in xhr) {\n        xhr.open(method, url, true);\n\n        xhr.setRequestHeader('X-Exceptionless-Client', userAgent);\n        if (method === 'POST') {\n          xhr.setRequestHeader('Content-Type', 'application/json');\n        }\n      } else if (typeof XDomainRequest !== 'undefined') {\n        useSetTimeout = true;\n        xhr = new XDomainRequest();\n        xhr.open(method, location.protocol === 'http:' ? url.replace('https:', 'http:') : url);\n      } else {\n        xhr = null;\n      }\n\n      if (xhr) {\n        xhr.timeout = 10000;\n      }\n\n      return xhr;\n    }\n\n    let url = `${request.serverUrl}${request.path}?access_token=${encodeURIComponent(request.apiKey) }`;\n    let xhr = createRequest(request.userAgent, request.method || 'POST', url);\n    if (!xhr) {\n      return callback(503, 'CORS not supported.');\n    }\n\n    if (WITH_CREDENTIALS in xhr) {\n      xhr.onreadystatechange = () => {\n        // xhr not ready.\n        if (xhr.readyState !== 4) {\n          return;\n        }\n\n        complete(LOADED, xhr);\n      };\n    }\n\n    xhr.onprogress = () => {};\n    xhr.ontimeout = () => complete(TIMEOUT, xhr);\n    xhr.onerror = () => complete('error', xhr);\n    xhr.onload = () => complete(LOADED, xhr);\n\n    if (useSetTimeout) {\n      setTimeout(() => xhr.send(request.data), 500);\n    } else {\n      xhr.send(request.data);\n    }\n  }\n}\n\nn\nfunction getDefaultsSettingsFromScriptTag(): IConfigurationSettings {\n  if (!document || !document.getElementsByTagName) {\n    return null;\n  }\n\n  let scripts = document.getElementsByTagName('script');\n  for (let index = 0; index < scripts.length; index++) {\n    if (scripts[index].src && scripts[index].src.indexOf('/exceptionless') > -1) {\n      return Utils.parseQueryString(scripts[index].src.split('?').pop());\n    }\n  }\n  return null;\n}\n\nfunction processUnhandledException(stackTrace:TraceKit.StackTrace, options?:any): void {\n  let builder = ExceptionlessClient.default.createUnhandledException(new Error(stackTrace.message || (options || {}).status || 'Script error'), 'onerror');\n  builder.pluginContextData['@@_TraceKit.StackTrace'] = stackTrace;\n  builder.submit();\n}\n\n/*\nTODO: We currently are unable to parse string exceptions.\nfunction processJQueryAjaxError(event, xhr, settings, error:string): void {\n  let client = ExceptionlessClient.default;\n  if (xhr.status === 404) {\n    client.submitNotFound(settings.url);\n  } else if (xhr.status !== 401) {\n    client.createUnhandledException(error, 'JQuery.ajaxError')\n      .setSource(settings.url)\n      .setProperty('status', xhr.status)\n      .setProperty('request', settings.data)\n      .setProperty('response', xhr.responseText && xhr.responseText.slice && xhr.responseText.slice(0, 1024))\n      .submit();\n  }\n}\n*/\n\nlet defaults = Configuration.defaults;\nlet settings = getDefaultsSettingsFromScriptTag();\nif (settings && (settings.apiKey || settings.serverUrl)) {\n  defaults.apiKey = settings.apiKey;\n  defaults.serverUrl = settings.serverUrl;\n}\n\ndefaults.errorParser = new DefaultErrorParser();\ndefaults.moduleCollector = new DefaultModuleCollector();\ndefaults.requestInfoCollector = new DefaultRequestInfoCollector();\ndefaults.submissionAdapter = new DefaultSubmissionAdapter();\n\nTraceKit.report.subscribe(processUnhandledException);\nTraceKit.extendToAsynchronousCallbacks();\n\n// window && window.addEventListener && window.addEventListener('beforeunload', function () {\n//   ExceptionlessClient.default.config.queue.process(true);\n// });\n\n// if (typeof $ !== 'undefined' && $(document)) {\n//   $(document).ajaxError(processJQueryAjaxError);\n// }\n\n(<any>Error).stackTraceLimit = Infinity;\n\ndeclare var $;\n\n",null],"sourceRoot":"/source/"}