{"version":3,"sources":["tracekit.js","exceptionless.ts"],"names":["window","_oldOnerrorHandler","_onErrorHandlerInstalled","handlers","lastException","lastExceptionStack","debug","sourceCache","TraceKit","_oldTraceKit","_slice","slice","UNKNOWN_FUNCTION","ERROR_TYPES_RE","noConflict","wrap","func","apply","this","arguments","e","report","subscribe","handler","onerror","traceKitWindowOnError","push","unsubscribe","i","length","splice","computeStackTrace","augmentStackTraceWithInitialElement","computeStackTraceFromStackProp","guessFunctionName","gatherContext","ofCaller","depth","Error","ex","getSource","extendToAsynchronousCallbacks","_helper","fnName","originalFn","args","call","originalCallback","remoteFetching","collectWindowErrors","linesOfContext","define","amd","module","exports","_has","object","key","Object","prototype","hasOwnProperty","_isUndefined","what","notifyHandlers","stack","isWindowError","error","exception","inner","message","url","lineNo","columnNo","errorObj","processLastException","name","location","line","column","msg","toString","groups","match","context","mode","_lastExceptionStack","_lastException","setTimeout","incomplete","source","domain","document","exec","request","XMLHttpRequest","ActiveXObject","getXHR","open","send","responseText","loadSource","split","m","reFunctionArgNames","reGuessFunction","linesBefore","Math","floor","linesAfter","start","max","end","min","escapeRegExp","text","replace","escapeCodeAsRegExpForMatchingInsideHTML","body","findSourceInUrls","re","urls","j","join","substring","index","lastIndexOf","findSourceInLine","fragment","RegExp","findSourceByFunctionBody","parts","result","href","scripts","getElementsByTagName","code","script","src","event","submatch","element","chrome","gecko","winjs","geckoEval","chromeEval","lines","reference","isNative","indexOf","columnNumber","stackInfo","initial","unshift","partial","computeStackTraceByWalkingCallerChain","item","functionName","funcs","recursion","curr","caller","input","description","sourceURL","fileName","lineNumber","stacktrace","opera10Regex","opera11Regex","exc","computeStackTraceFromStacktraceProp","lineRE1","lineRE2","lineRE3","inlineScriptBlocks","s","relativeLine","pos","innerText","midline","computeStackTraceFromOperaMultiLineMessage","global","extendStatics","__extends","setPrototypeOf","__proto__","Array","d","b","p","__","constructor","create","value","DefaultLastReferenceIdManager","getLast","_lastReferenceId","clearLast","setLast","eventId","ConsoleLog","trace","log","info","warn","level","console","NullLog","HeartbeatPlugin","run","next","clearInterval","_intervalId","user","data","identity","setInterval","client","submitSessionHeartbeat","_interval","heartbeatInterval","priority","ReferenceIdPlugin","reference_id","type","Utils","guid","defineProperty","EventPluginContext","get","config","contextData","ContextData","callback","plugin","cancelled","plugins","wrappedPlugins","EventPluginManager","addDefaultPlugins","addPlugin","ConfigurationDefaultsPlugin","ErrorPlugin","DuplicateCheckerPlugin","EventExclusionPlugin","ModuleInfoPlugin","RequestInfoPlugin","EnvironmentInfoPlugin","SubmissionMethodPlugin","enqueue","eventWillNotBeQueued","_config","enabled","isValid","areQueuedItemsDiscarded","ensureQueueTimer","timestamp","storage","queue","save","logText","process","isAppExiting","_this","queueNotProcessed","_processingQueue","events_1","submissionBatchSize","serverUrl","submissionClient","postEvents","map","response","processSubmissionResponse","eventsPosted","suspendProcessing","durationInMinutes","discardFutureQueuedItems","clearQueue","_suspendProcessingUntil","Date","getTime","_discardQueuedItemsUntil","clear","onEventsPosted","_handlers","DefaultEventQueue","events","_i","handlers_1","_queueTimer","onProcessQueue","isQueueProcessingSuspended","noSubmission","success","removeEvents","serviceUnavailable","paymentRequired","unableToAuthenticate","notFound","badRequest","requestEntityTooLarge","round","remove","InMemoryStorageProvider","maxQueueItems","InMemoryStorage","settings","DefaultSubmissionClient","JSON","stringify","createRequest","cb","createSubmissionCallback","submissionAdapter","sendRequest","postUserDescription","referenceId","path","encodeURIComponent","getSettings","version","configServerUrl","status","headers","SettingsResponse","parse","isNaN","sendHeartbeat","sessionIdOrUserId","closeSession","heartbeatServerUrl","method","apiKey","userAgent","settingsVersion","parseInt","configurationVersionHeader","SettingsManager","checkVersion","SubmissionResponse","target","values","_a","values_1","getHashCode","hash","charCodeAt","getCookies","cookies","exclusions","parts_1","cookie","isMatch","isEmpty","s4","random","merge","defaultValues","undefined","parseVersion","matches","query","pairs","pairs_1","decodeURIComponent","patterns","ignoreCase","toLowerCase","trim","some","pattern","startsWithWildcard","endsWithWildcard","endsWith","startsWith","keys","prefix","suffix","maxDepth","stringifyImpl","obj","excludedKeys","cache","flattened","prop","defaultValue","onChanged","applySavedServerSettings","savedSettings","getSavedServerSettings","changed","getVersion","currentVersion","updateSettings","_isUpdatingSettings","unableToUpdateMessage","savedServerSettings","newSettings","handlers_2","statusCode","createException","pluginContextData","setException","createEvent","setType","ExceptionlessClient","submitException","submit","createUnhandledException","submissionMethod","builder","markAsUnhandledError","setSubmissionMethod","submitUnhandledException","createFeatureUsage","feature","setSource","submitFeatureUsage","createLog","sourceOrMessage","setMessage","setProperty","submitLog","createNotFound","resource","submitNotFound","createSessionStart","submitSessionStart","submitSessionEnd","EventBuilder","date","submitEvent","eventPluginContext","tags","ctx","ev","lastReferenceIdManager","updateUserEmailAndDescription","email","userDescription","email_address","getLastReferenceId","updateSettingsTimer","initialDelay","_timeoutId","clearTimeout","updateSettingsWhenIdleInterval","interval","_instance","configurable","settingsOrApiKey","Configuration","enumerable","getException","getSubmissionMethod","_apiKey","set","_serverUrl","_configServerUrl","_heartbeatServerUrl","_updateSettingsWhenIdleInterval","_dataExclusions","concat","addDataExclusions","addRange","_includePrivateInformation","val","_includeUserName","_includeMachineName","_includeIpAddress","_includeCookies","_includePostData","_includeQueryString","_userAgentBotPatterns","addUserAgentBotPatterns","userAgentBotPatterns","_plugins","sort","p1","p2","pluginOrName","pluginAction","pluginExists","plugins_1","removePlugin","setVersion","defaultData","setUserIdentity","userInfoOrIdentity","userInfo","shouldRemove","useSessions","sendHeartbeats","useReferenceIds","useLocalStorage","useDebugLogger","handlers_3","_defaultSettings","includePrivateInformation","configSettings","inject","fn","defaultTags","defaults","environmentInfoCollector","errorParser","moduleCollector","requestInfoCollector","setReferenceId","isValidIdentifier","_validIdentifierErrorMessage","setEventReference","id","setGeo","latitude","longitude","geo","setUserDescription","emailAddress","setManualStackingInfo","signatureData","title","signature_data","setManualStackingKey","manualStackingKey","ManualStackingKey","setValue","addTags","excludedPropertyNames","dataExclusions","markAsCritical","critical","addRequestInfo","defaultTags_1","tag","stack_trace","count","now_1","_getCurrentTime","merged","_mergedEvents","filter","hashCode","incrementCount","updateDate","_processedHashcodes","h","MergedEvent","shift","getCurrentTime","now","resubmit","_count","_context","ENVIRONMENT_KEY","collector","environmentInfo","getEnvironmentInfo","parser","additionalData","getTypeAndSourceSetting","isLog","sourcePrefix","toBoolean","loggerName","getLogLevel","logLevel","minLogLevel","modules","getModules","REQUEST_KEY","requestInfo","getRequestInfo","user_agent","items","lastTimestamp","maxItems","limit","single","ensureIndex","getKey","json","write","delete","read","parseDate","safeDelete","forEach","KeyValueStorageBase","createIndex","readAllKeys","getTimestamp","a","_super","BrowserStorage","isAvailable","localStorage","x","setItem","removeItem","getItem","substr","namespace","getParameters","parameters","params_1","param","TRACEKIT_STACK_TRACE_KEY","stackTrace","stackFrames","ANONYMOUS","frames","stackFrames_1","frame","file_name","line_number","getStackFrames","DefaultErrorParser","module_id","innerHTML","DefaultModuleCollector","navigator","is_secure","protocol","host","hostname","port","pathname","includeCookies","includeQueryString","query_string","parseQueryString","search","referrer","DefaultRequestInfoCollector","BrowserStorageProvider","xhrRequest","isCompleted","statusText","TIMEOUT","LOADED","responseBody","headerStr","headerPairs_1","headerPair","separator","parseResponseHeaders","getAllResponseHeaders","uri","xmlRequest","xhr","WITH_CREDENTIALS","setRequestHeader","XDomainRequest","useSetTimeout","timeout","onreadystatechange","readyState","complete","onprogress","ontimeout","onload","DefaultSubmissionAdapter","pop","getDefaultsSettingsFromScriptTag","options","default"],"mappings":"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","file":"exceptionless.min.js","sourcesContent":["/**\n * https://github.com/csnover/TraceKit\n * @license MIT\n * @namespace TraceKit\n */\n(function(window, undefined) {\nif (!window) {\n    return;\n}\n\nvar TraceKit = {};\nvar _oldTraceKit = window.TraceKit;\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\nvar ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/;\n\n/**\n * A better form of hasOwnProperty<br/>\n * Example: `_has(MainHostObject, property) === true/false`\n *\n * @param {Object} object to check property\n * @param {string} key to check\n * @return {Boolean} true if the object has the key and it is not inherited\n */\nfunction _has(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\n\n/**\n * Returns true if the parameter is undefined<br/>\n * Example: `_isUndefined(val) === true/false`\n *\n * @param {*} what Value to check\n * @return {Boolean} true if undefined and false otherwise\n */\nfunction _isUndefined(what) {\n    return typeof what === 'undefined';\n}\n\n/**\n * Export TraceKit out to another variable<br/>\n * Example: `var TK = TraceKit.noConflict()`\n * @return {Object} The TraceKit object\n * @memberof TraceKit\n */\nTraceKit.noConflict = function noConflict() {\n    window.TraceKit = _oldTraceKit;\n    return TraceKit;\n};\n\n/**\n * Wrap any function in a TraceKit reporter<br/>\n * Example: `func = TraceKit.wrap(func);`\n *\n * @param {Function} func Function to be wrapped\n * @return {Function} The wrapped func\n * @memberof TraceKit\n */\nTraceKit.wrap = function traceKitWrapper(func) {\n    function wrapped() {\n        try {\n            return func.apply(this, arguments);\n        } catch (e) {\n            TraceKit.report(e);\n            throw e;\n        }\n    }\n    return wrapped;\n};\n\n/**\n * Cross-browser processing of unhandled exceptions\n *\n * Syntax:\n * ```js\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n * ```\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *     on top frame; column number is not guaranteed\n *   - Opera: full stack trace with line and column numbers\n *   - Chrome: full stack trace with line and column numbers\n *   - Safari: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *   - IE: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a TraceKit.StackTrace object as described in the\n * TraceKit.computeStackTrace docs.\n *\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.report = (function reportModuleWrapper() {\n    var handlers = [],\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n\n        if (handlers.length === 0) {\n            window.onerror = _oldOnerrorHandler;\n            _onErrorHandlerInstalled = false;\n        }\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {TraceKit.StackTrace} stack\n     * @param {boolean} isWindowError Is this a top-level window error?\n     * @param {Error=} error The error that's being handled (if available, null otherwise)\n     * @memberof TraceKit.report\n     * @throws An exception if an error occurs while calling an handler.\n     */\n    function notifyHandlers(stack, isWindowError, error) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n          return;\n        }\n        for (var i in handlers) {\n            if (_has(handlers, i)) {\n                try {\n                    handlers[i](stack, isWindowError, error);\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error occurred.\n     * @param {(number|string)=} columnNo The column number at which the error occurred.\n     * @param {Error=} errorObj The actual Error object.\n     * @memberof TraceKit.report\n     */\n    function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {\n        var stack = null;\n\n        if (lastExceptionStack) {\n            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n    \t    processLastException();\n        } else if (errorObj) {\n            stack = TraceKit.computeStackTrace(errorObj);\n            notifyHandlers(stack, true, errorObj);\n        } else {\n            var location = {\n              'url': url,\n              'line': lineNo,\n              'column': columnNo\n            };\n\n            var name;\n            var msg = message; // must be new var or will modify original `arguments`\n            if ({}.toString.call(message) === '[object String]') {\n                var groups = message.match(ERROR_TYPES_RE);\n                if (groups) {\n                    name = groups[1];\n                    msg = groups[2];\n                }\n            }\n\n            location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);\n            location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);\n            stack = {\n                'name': name,\n                'message': msg,\n                'mode': 'onerror',\n                'stack': [location]\n            };\n\n            notifyHandlers(stack, true, null);\n        }\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    /**\n     * Install a global onerror handler\n     * @memberof TraceKit.report\n     */\n    function installGlobalHandler() {\n        if (_onErrorHandlerInstalled === true) {\n            return;\n        }\n\n        _oldOnerrorHandler = window.onerror;\n        window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    /**\n     * Process the most recent exception\n     * @memberof TraceKit.report\n     */\n    function processLastException() {\n        var _lastExceptionStack = lastExceptionStack,\n            _lastException = lastException;\n        lastExceptionStack = null;\n        lastException = null;\n        notifyHandlers(_lastExceptionStack, false, _lastException);\n    }\n\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     * @memberof TraceKit.report\n     * @throws An exception if an incomplete stack trace is detected (old IE browsers).\n     */\n    function report(ex) {\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n              processLastException();\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        setTimeout(function () {\n            if (lastException === ex) {\n                processLastException();\n            }\n        }, (stack.incomplete ? 2000 : 0));\n\n        throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    return report;\n}());\n\n/**\n * An object representing a single stack frame.\n * @typedef {Object} StackFrame\n * @property {string} url The JavaScript or HTML file URL.\n * @property {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * @property {string[]?} args The arguments passed to the function, if known.\n * @property {number=} line The line number, if known.\n * @property {number=} column The column number, if known.\n * @property {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n * @memberof TraceKit\n */\n\n/**\n * An object representing a JavaScript stack trace.\n * @typedef {Object} StackTrace\n * @property {string} name The name of the thrown exception.\n * @property {string} message The exception error message.\n * @property {TraceKit.StackFrame[]} stack An array of stack frames.\n * @property {string} mode 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace.\n * @memberof TraceKit\n */\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   ```js\n *   s = TraceKit.computeStackTrace.ofCaller([depth])\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n *   ```\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n * Tracing example:\n *  ```js\n *     function trace(message) {\n *         var stackInfo = TraceKit.computeStackTrace.ofCaller();\n *         var data = message + \"\\n\";\n *         for(var i in stackInfo.stack) {\n *             var item = stackInfo.stack[i];\n *             data += (item.func || '[anonymous]') + \"() in \" + item.url + \":\" + (item.line || '0') + \"\\n\";\n *         }\n *         if (window.console)\n *             console.info(data);\n *         else\n *             alert(data);\n *     }\n * ```\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n    var debug = false,\n        sourceCache = {};\n\n    /**\n     * Attempts to retrieve source code via XMLHttpRequest, which is used\n     * to look up anonymous function names.\n     * @param {string} url URL of source code.\n     * @return {string} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function loadSource(url) {\n        if (!TraceKit.remoteFetching) { //Only attempt request if remoteFetching is on.\n            return '';\n        }\n        try {\n            var getXHR = function() {\n                try {\n                    return new window.XMLHttpRequest();\n                } catch (e) {\n                    // explicitly bubble up the exception if not found\n                    return new window.ActiveXObject('Microsoft.XMLHTTP');\n                }\n            };\n\n            var request = getXHR();\n            request.open('GET', url, false);\n            request.send('');\n            return request.responseText;\n        } catch (e) {\n            return '';\n        }\n    }\n\n    /**\n     * Retrieves source code from the source code cache.\n     * @param {string} url URL of source code.\n     * @return {Array.<string>} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function getSource(url) {\n        if (typeof url !== 'string') {\n            return [];\n        }\n\n        if (!_has(sourceCache, url)) {\n            // URL needs to be able to fetched within the acceptable domain.  Otherwise,\n            // cross-domain errors will be triggered.\n            /*\n                Regex matches:\n                0 - Full Url\n                1 - Protocol\n                2 - Domain\n                3 - Port (Useful for internal applications)\n                4 - Path\n            */\n            var source = '';\n            var domain = '';\n            try { domain = window.document.domain; } catch (e) { }\n            var match = /(.*)\\:\\/\\/([^:\\/]+)([:\\d]*)\\/{0,1}([\\s\\S]*)/.exec(url);\n            if (match && match[2] === domain) {\n                source = loadSource(url);\n            }\n            sourceCache[url] = source ? source.split('\\n') : [];\n        }\n\n        return sourceCache[url];\n    }\n\n    /**\n     * Tries to use an externally loaded copy of source code to determine\n     * the name of a function by looking at the name of the variable it was\n     * assigned to, if any.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} lineNo Line number in source code.\n     * @return {string} The function name, if discoverable.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function guessFunctionName(url, lineNo) {\n        var reFunctionArgNames = /function ([^(]*)\\(([^)]*)\\)/,\n            reGuessFunction = /['\"]?([0-9A-Za-z$_]+)['\"]?\\s*[:=]\\s*(function|eval|new Function)/,\n            line = '',\n            maxLines = 10,\n            source = getSource(url),\n            m;\n\n        if (!source.length) {\n            return UNKNOWN_FUNCTION;\n        }\n\n        // Walk backwards from the first line in the function until we find the line which\n        // matches the pattern above, which is the function definition\n        for (var i = 0; i < maxLines; ++i) {\n            line = source[lineNo - i] + line;\n\n            if (!_isUndefined(line)) {\n                if ((m = reGuessFunction.exec(line))) {\n                    return m[1];\n                } else if ((m = reFunctionArgNames.exec(line))) {\n                    return m[1];\n                }\n            }\n        }\n\n        return UNKNOWN_FUNCTION;\n    }\n\n    /**\n     * Retrieves the surrounding lines from where an exception occurred.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} line Line number in source code to center around for context.\n     * @return {?Array.<string>} Lines of source code.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function gatherContext(url, line) {\n        var source = getSource(url);\n\n        if (!source.length) {\n            return null;\n        }\n\n        var context = [],\n            // linesBefore & linesAfter are inclusive with the offending line.\n            // if linesOfContext is even, there will be one extra line\n            //   *before* the offending line.\n            linesBefore = Math.floor(TraceKit.linesOfContext / 2),\n            // Add one extra line if linesOfContext is odd\n            linesAfter = linesBefore + (TraceKit.linesOfContext % 2),\n            start = Math.max(0, line - linesBefore - 1),\n            end = Math.min(source.length, line + linesAfter - 1);\n\n        line -= 1; // convert to 0-based index\n\n        for (var i = start; i < end; ++i) {\n            if (!_isUndefined(source[i])) {\n                context.push(source[i]);\n            }\n        }\n\n        return context.length > 0 ? context : null;\n    }\n\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    /**\n     * Determines where a code fragment occurs in the source code.\n     * @param {RegExp} re The function definition.\n     * @param {Array.<string>} urls A list of URLs to search.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInUrls(re, urls) {\n        var source, m;\n        for (var i = 0, j = urls.length; i < j; ++i) {\n            if ((source = getSource(urls[i])).length) {\n                source = source.join('\\n');\n                if ((m = re.exec(source))) {\n\n                    return {\n                        'url': urls[i],\n                        'line': source.substring(0, m.index).split('\\n').length,\n                        'column': m.index - source.lastIndexOf('\\n', m.index) - 1\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines at which column a code fragment occurs on a line of the\n     * source code.\n     * @param {string} fragment The code fragment.\n     * @param {string} url The URL to search.\n     * @param {(string|number)} line The line number to examine.\n     * @return {?number} The column number.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInLine(fragment, url, line) {\n        var source = getSource(url),\n            re = new RegExp('\\\\b' + escapeRegExp(fragment) + '\\\\b'),\n            m;\n\n        line -= 1;\n\n        if (source && source.length > line && (m = re.exec(source[line]))) {\n            return m.index;\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines where a function was defined within the source code.\n     * @param {(Function|string)} func A function reference or serialized\n     * function definition.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceByFunctionBody(func) {\n        if (_isUndefined(window && window.document)) {\n            return;\n        }\n\n        var urls = [window.location.href],\n            scripts = window.document.getElementsByTagName('script'),\n            body,\n            code = '' + func,\n            codeRE = /^function(?:\\s+([\\w$]+))?\\s*\\(([\\w\\s,]*)\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            eventRE = /^function on([\\w$]+)\\s*\\(event\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            re,\n            parts,\n            result;\n\n        for (var i = 0; i < scripts.length; ++i) {\n            var script = scripts[i];\n            if (script.src) {\n                urls.push(script.src);\n            }\n        }\n\n        if (!(parts = codeRE.exec(code))) {\n            re = new RegExp(escapeRegExp(code).replace(/\\s+/g, '\\\\s+'));\n        }\n\n        // not sure if this is really necessary, but I don’t have a test\n        // corpus large enough to confirm that and it was in the original.\n        else {\n            var name = parts[1] ? '\\\\s+' + parts[1] : '',\n                args = parts[2].split(',').join('\\\\s*,\\\\s*');\n\n            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\\s+/g, '\\\\s+');\n            re = new RegExp('function' + name + '\\\\s*\\\\(\\\\s*' + args + '\\\\s*\\\\)\\\\s*{\\\\s*' + body + '\\\\s*}');\n        }\n\n        // look for a normal function definition\n        if ((result = findSourceInUrls(re, urls))) {\n            return result;\n        }\n\n        // look for an old-school event handler function\n        if ((parts = eventRE.exec(code))) {\n            var event = parts[1];\n            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);\n\n            // look for a function defined in HTML as an onXXX handler\n            re = new RegExp('on' + event + '=[\\\\\\'\"]\\\\s*' + body + '\\\\s*[\\\\\\'\"]', 'i');\n\n            if ((result = findSourceInUrls(re, urls[0]))) {\n                return result;\n            }\n\n            // look for ???\n            re = new RegExp(body);\n\n            if ((result = findSourceInUrls(re, urls))) {\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (!ex.stack) {\n            return null;\n        }\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\\[native).*?|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n\n            // Used to additionally parse URL/line/column from eval frames\n            isEval,\n            geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i,\n            chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/,\n\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            submatch,\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if ((parts = chrome.exec(lines[i]))) {\n                var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n                isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n                if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n                    // throw out eval line/column and use top-most line/column number\n                    parts[2] = submatch[1]; // url\n                    parts[3] = submatch[2]; // line\n                    parts[4] = submatch[3]; // column\n                }\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ( parts = winjs.exec(lines[i]) ) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = gecko.exec(lines[i]))) {\n                isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n                if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n                    // throw out eval line/column and use top-most line number\n                    parts[3] = submatch[1];\n                    parts[4] = submatch[2];\n                    parts[5] = null; // no column when eval\n                } else if (i === 0 && !parts[5] && !_isUndefined(ex.columnNumber)) {\n                    // FireFox uses this awesome columnNumber property for its top frame\n                    // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n                    // so adding 1\n                    // NOTE: this hack doesn't work if top-most frame is eval\n                    stack[0].column = ex.columnNumber + 1;\n                }\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = guessFunctionName(element.url, element.line);\n            }\n\n            element.context = element.line ? gatherContext(element.url, element.line) : null;\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        if (stack[0] && stack[0].line && !stack[0].column && reference) {\n            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);\n        }\n\n        return {\n            'mode': 'stack',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * Computes stack trace information from the stacktrace property.\n     * Opera 10+ uses this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStacktraceProp(ex) {\n        // Access and store the stacktrace property before doing ANYTHING\n        // else to it because Opera is not very good at providing it\n        // reliably in other circumstances.\n        var stacktrace = ex.stacktrace;\n        if (!stacktrace) {\n            return;\n        }\n\n        var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i,\n            opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i,\n            lines = stacktrace.split('\\n'),\n            stack = [],\n            parts;\n\n        for (var line = 0; line < lines.length; line += 2) {\n            var element = null;\n            if ((parts = opera10Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[2],\n                    'line': +parts[1],\n                    'column': null,\n                    'func': parts[3],\n                    'args':[]\n                };\n            } else if ((parts = opera11Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[6],\n                    'line': +parts[1],\n                    'column': +parts[2],\n                    'func': parts[3] || parts[4],\n                    'args': parts[5] ? parts[5].split(',') : []\n                };\n            }\n\n            if (element) {\n                if (!element.func && element.line) {\n                    element.func = guessFunctionName(element.url, element.line);\n                }\n                if (element.line) {\n                    try {\n                        element.context = gatherContext(element.url, element.line);\n                    } catch (exc) {}\n                }\n\n                if (!element.context) {\n                    element.context = [lines[line + 1]];\n                }\n\n                stack.push(element);\n            }\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        return {\n            'mode': 'stacktrace',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * NOT TESTED.\n     * Computes stack trace information from an error message that includes\n     * the stack trace.\n     * Opera 9 and earlier use this method if the option to show stack\n     * traces is turned on in opera:config.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromOperaMultiLineMessage(ex) {\n        // TODO: Clean this function up\n        // Opera includes a stack trace into the exception message. An example is:\n        //\n        // Statement on line 3: Undefined variable: undefinedFunc\n        // Backtrace:\n        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz\n        //         undefinedFunc(a);\n        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy\n        //           zzz(x, y, z);\n        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx\n        //           yyy(a, a, a);\n        //   Line 1 of function script\n        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }\n        //   ...\n\n        var lines = ex.message.split('\\n');\n        if (lines.length < 4) {\n            return null;\n        }\n\n        var lineRE1 = /^\\s*Line (\\d+) of linked script ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE2 = /^\\s*Line (\\d+) of inline#(\\d+) script in ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE3 = /^\\s*Line (\\d+) of function script\\s*$/i,\n            stack = [],\n            scripts = (window && window.document && window.document.getElementsByTagName('script')),\n            inlineScriptBlocks = [],\n            parts;\n\n        for (var s in scripts) {\n            if (_has(scripts, s) && !scripts[s].src) {\n                inlineScriptBlocks.push(scripts[s]);\n            }\n        }\n\n        for (var line = 2; line < lines.length; line += 2) {\n            var item = null;\n            if ((parts = lineRE1.exec(lines[line]))) {\n                item = {\n                    'url': parts[2],\n                    'func': parts[3],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null\n                };\n            } else if ((parts = lineRE2.exec(lines[line]))) {\n                item = {\n                    'url': parts[3],\n                    'func': parts[4],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.\n                };\n                var relativeLine = (+parts[1]); // relative to the start of the <SCRIPT> block\n                var script = inlineScriptBlocks[parts[2] - 1];\n                if (script) {\n                    var source = getSource(item.url);\n                    if (source) {\n                        source = source.join('\\n');\n                        var pos = source.indexOf(script.innerText);\n                        if (pos >= 0) {\n                            item.line = relativeLine + source.substring(0, pos).split('\\n').length;\n                        }\n                    }\n                }\n            } else if ((parts = lineRE3.exec(lines[line]))) {\n                var url = window.location.href.replace(/#.*$/, '');\n                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));\n                var src = findSourceInUrls(re, [url]);\n                item = {\n                    'url': url,\n                    'func': '',\n                    'args': [],\n                    'line': src ? src.line : parts[1],\n                    'column': null\n                };\n            }\n\n            if (item) {\n                if (!item.func) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n                var context = gatherContext(item.url, item.line);\n                var midline = (context ? context[Math.floor(context.length / 2)] : null);\n                if (context && midline.replace(/^\\s*/, '') === lines[line + 1].replace(/^\\s*/, '')) {\n                    item.context = context;\n                } else {\n                    // if (context) alert(\"Context mismatch. Correct midline:\\n\" + lines[i+1] + \"\\n\\nMidline:\\n\" + midline + \"\\n\\nContext:\\n\" + context.join(\"\\n\") + \"\\n\\nURL:\\n\" + item.url);\n                    item.context = [lines[line + 1]];\n                }\n                stack.push(item);\n            }\n        }\n        if (!stack.length) {\n            return null; // could not parse multiline exception message as Opera stack trace\n        }\n\n        return {\n            'mode': 'multiline',\n            'name': ex.name,\n            'message': lines[0],\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {TraceKit.StackTrace} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = guessFunctionName(initial.url, initial.line);\n            }\n\n            if (!initial.context) {\n                initial.context = gatherContext(initial.url, initial.line);\n            }\n\n            var reference = / '([^']+)' /.exec(message);\n            if (reference) {\n                initial.column = findSourceInLine(reference[1], initial.url, initial.line);\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        stackInfo.stack[0].context = initial.context;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {TraceKit.StackTrace=} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'args': [],\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if ((parts = functionName.exec(curr.toString()))) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n              try {\n                item.func = parts.input.substring(0, parts.input.indexOf('{'));\n              } catch (e) { }\n            }\n\n            if ((source = findSourceByFunctionBody(curr))) {\n                item.url = source.url;\n                item.line = source.line;\n\n                if (item.func === UNKNOWN_FUNCTION) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n\n                var reference = / '([^']+)' /.exec(ex.message || ex.description);\n                if (reference) {\n                    item.column = findSourceInLine(reference[1], source.url, source.line);\n                }\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            }else{\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'mode': 'callers',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = (depth == null ? 0 : +depth);\n\n        try {\n            // This must be tried first because Opera 10 *destroys*\n            // its stacktrace property if you try to access the stack\n            // property first!!\n            stack = computeStackTraceFromStacktraceProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromOperaMultiLineMessage(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        return {\n            'name': ex.name,\n            'message': ex.message,\n            'mode': 'failed'\n        };\n    }\n\n    /**\n     * Logs a stacktrace starting from the previous call and working down.\n     * @param {(number|string)=} depth How many frames deep to trace.\n     * @return {TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceOfCaller(depth) {\n        depth = (depth == null ? 0 : +depth) + 1; // \"+ 1\" because \"ofCaller\" should drop one frame\n        try {\n            throw new Error();\n        } catch (ex) {\n            return computeStackTrace(ex, depth + 1);\n        }\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.computeStackTraceFromStackProp = computeStackTraceFromStackProp;\n    computeStackTrace.guessFunctionName = guessFunctionName;\n    computeStackTrace.gatherContext = gatherContext;\n    computeStackTrace.ofCaller = computeStackTraceOfCaller;\n    computeStackTrace.getSource = getSource;\n\n    return computeStackTrace;\n}());\n\n/**\n * Extends support for global error handling for asynchronous browser\n * functions. Adopted from Closure Library's errorhandler.js\n * @memberof TraceKit\n */\nTraceKit.extendToAsynchronousCallbacks = function () {\n    var _helper = function _helper(fnName) {\n        var originalFn = window[fnName];\n        window[fnName] = function traceKitAsyncExtension() {\n            // Make a copy of the arguments\n            var args = _slice.call(arguments);\n            var originalCallback = args[0];\n            if (typeof (originalCallback) === 'function') {\n                args[0] = TraceKit.wrap(originalCallback);\n            }\n            // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n            // also only supports 2 argument and doesn't care what \"this\" is, so we\n            // can just call the original function directly.\n            if (originalFn.apply) {\n                return originalFn.apply(this, args);\n            } else {\n                return originalFn(args[0], args[1]);\n            }\n        };\n    };\n\n    _helper('setTimeout');\n    _helper('setInterval');\n};\n\n//Default options:\nif (!TraceKit.remoteFetching) {\n    TraceKit.remoteFetching = true;\n}\nif (!TraceKit.collectWindowErrors) {\n    TraceKit.collectWindowErrors = true;\n}\nif (!TraceKit.linesOfContext || TraceKit.linesOfContext < 1) {\n    // 5 lines before, the offending line, 5 lines after\n    TraceKit.linesOfContext = 11;\n}\n\n// UMD export\nif (typeof define === 'function' && define.amd) {\n    define('TraceKit', [], TraceKit);\n} else if (typeof module !== 'undefined' && module.exports && window.module !== module) {\n    module.exports = TraceKit;\n} else {\n    window.TraceKit = TraceKit;\n}\n\n}(typeof window !== 'undefined' ? window : global));\n","import * as TraceKit from 'TraceKit';\nexport interface ILastReferenceIdManager {\n  getLast(): string;\n  clearLast(): void;\n  setLast(eventId: string): void;\n}\n\nexport interface ILog {\n  trace(message: string): void;\n  info(message: string): void;\n  warn(message: string): void;\n  error(message: string): void;\n}\n\n                                                                    \n\nexport class DefaultLastReferenceIdManager implements ILastReferenceIdManager {\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @type {string}\n   * @private\n   */\n  private _lastReferenceId: string = null;\n\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @returns {string}\n   */\n  public getLast(): string {\n    return this._lastReferenceId;\n  }\n\n  /**\n   * Clears the last event's reference id.\n   */\n  public clearLast(): void {\n    this._lastReferenceId = null;\n  }\n\n  /**\n   * Sets the last event's reference id.\n   * @param eventId\n   */\n  public setLast(eventId: string): void {\n    this._lastReferenceId = eventId;\n  }\n}\n\n                              \n\nexport class ConsoleLog implements ILog {\n  public trace(message: string): void {\n    this.log('debug', message);\n  }\n\n  public info(message: string): void {\n    this.log('info', message);\n  }\n\n  public warn(message: string): void {\n    this.log('warn', message);\n  }\n\n  public error(message: string): void {\n    this.log('error', message);\n  }\n\n  private log(level: string, message: string) {\n    if (console) {\n      const msg = `[${level}] Exceptionless: ${message}`;\n\n      if (console[level]) {\n        console[level](msg);\n      } else if (console.log) {\n        console[`log`](msg);\n      }\n    }\n  }\n}\n\n                              \n\nexport class NullLog implements ILog {\n  public trace(message: string): void { }\n  public info(message: string): void { }\n  public warn(message: string): void { }\n  public error(message: string): void { }\n}\n\nexport interface IUserInfo {\n  identity?: string;\n  name?: string;\n  data?: any;\n}\n\n                                                                                                                                                               \n\nexport class HeartbeatPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = 'HeartbeatPlugin';\n\n  private _interval: number;\n  private _intervalId: any;\n\n  constructor(heartbeatInterval: number = 30000) {\n    this._interval = heartbeatInterval >= 30000 ? heartbeatInterval : 60000;\n  }\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    clearInterval(this._intervalId);\n\n    const user: IUserInfo = context.event.data['@user'];\n    if (user && user.identity) {\n      this._intervalId = setInterval(() => context.client.submitSessionHeartbeat(user.identity), this._interval);\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                \n\nexport class ReferenceIdPlugin implements IEventPlugin {\n  public priority: number = 20;\n  public name: string = 'ReferenceIdPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    if ((!context.event.reference_id || context.event.reference_id.length === 0) && context.event.type === 'error') {\n      context.event.reference_id = Utils.guid().replace('-', '').substring(0, 10);\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                             \n\nexport class EventPluginContext {\n  public cancelled: boolean;\n  public client: ExceptionlessClient;\n  public event: IEvent;\n  public contextData: ContextData;\n\n  constructor(client: ExceptionlessClient, event: IEvent, contextData?: ContextData) {\n    this.client = client;\n    this.event = event;\n    this.contextData = contextData ? contextData : new ContextData();\n  }\n\n  public get log(): ILog {\n    return this.client.config.log;\n  }\n}\n\nn\nexport class EventPluginManager {\n  public static run(context: EventPluginContext, callback: (context?: EventPluginContext) => void): void {\n    const wrap = (plugin: IEventPlugin, next?: () => void): () => void => {\n      return () => {\n        try {\n          if (!context.cancelled) {\n            plugin.run(context, next);\n          }\n        } catch (ex) {\n          context.cancelled = true;\n          context.log.error(`Error running plugin '${plugin.name}': ${ex.message}. Discarding Event.`);\n        }\n\n        if (context.cancelled && !!callback) {\n          callback(context);\n        }\n      };\n    };\n\n    const plugins: IEventPlugin[] = context.client.config.plugins; // optimization for minifier.\n    const wrappedPlugins: Array<() => void> = [];\n    if (!!callback) {\n      wrappedPlugins[plugins.length] = wrap({ name: 'cb', priority: 9007199254740992, run: callback }, null);\n    }\n\n    for (let index = plugins.length - 1; index > -1; index--) {\n      wrappedPlugins[index] = wrap(plugins[index], !!callback || (index < plugins.length - 1) ? wrappedPlugins[index + 1] : null);\n    }\n\n    wrappedPlugins[0]();\n  }\n\n  public static addDefaultPlugins(config: Configuration): void {\n    config.addPlugin(new ConfigurationDefaultsPlugin());\n    config.addPlugin(new ErrorPlugin());\n    config.addPlugin(new DuplicateCheckerPlugin());\n    config.addPlugin(new EventExclusionPlugin());\n    config.addPlugin(new ModuleInfoPlugin());\n    config.addPlugin(new RequestInfoPlugin());\n    config.addPlugin(new EnvironmentInfoPlugin());\n    config.addPlugin(new SubmissionMethodPlugin());\n  }\n}\n\n                                                                                                         \n\nexport interface IEventPlugin {\n  priority?: number;\n  name?: string;\n  run(context: EventPluginContext, next?: () => void): void;\n}\n\n                                                                                                                                                                                                                                                                                                                                     \n\nexport class DefaultEventQueue implements IEventQueue {\n  /**\n   * The configuration object.\n   * @type {Configuration}\n   * @private\n   */\n  private _config: Configuration;\n\n  /**\n   * A list of handlers that will be fired when events are submitted.\n   * @type {Array}\n   * @private\n   */\n  private _handlers: Array<(events: IEvent[], response: SubmissionResponse) => void> = [];\n\n  /**\n   * Suspends processing until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _suspendProcessingUntil: Date;\n\n  /**\n   * Discards queued items until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _discardQueuedItemsUntil: Date;\n\n  /**\n   * Returns true if the queue is processing.\n   * @type {boolean}\n   * @private\n   */\n  private _processingQueue: boolean = false;\n\n  /**\n   * Processes the queue every xx seconds.\n   * @type {Timer}\n   * @private\n   */\n  private _queueTimer: any;\n\n  constructor(config: Configuration) {\n    this._config = config;\n  }\n\n  public enqueue(event: IEvent): void {\n    const eventWillNotBeQueued: string = 'The event will not be queued.'; // optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    if (this.areQueuedItemsDiscarded()) {\n      log.info(`Queue items are currently being discarded. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    this.ensureQueueTimer();\n\n    const timestamp = config.storage.queue.save(event);\n    const logText = `type=${event.type} ${!!event.reference_id ? 'refid=' + event.reference_id : ''}`;\n    if (timestamp) {\n      log.info(`Enqueuing event: ${timestamp} ${logText}`);\n    } else {\n      log.error(`Could not enqueue event ${logText}`);\n    }\n  }\n\n  public process(isAppExiting?: boolean): void {\n    const queueNotProcessed: string = 'The queue will not be processed.'; // optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (this._processingQueue) {\n      return;\n    }\n\n    log.info('Processing queue...');\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${queueNotProcessed}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${queueNotProcessed}`);\n      return;\n    }\n\n    this._processingQueue = true;\n    this.ensureQueueTimer();\n\n    try {\n      const events = config.storage.queue.get(config.submissionBatchSize);\n      if (!events || events.length === 0) {\n        this._processingQueue = false;\n        return;\n      }\n\n      log.info(`Sending ${events.length} events to ${config.serverUrl}.`);\n      config.submissionClient.postEvents(events.map((e) => e.value), config, (response: SubmissionResponse) => {\n        this.processSubmissionResponse(response, events);\n        this.eventsPosted(events.map((e) => e.value), response);\n        log.info('Finished processing queue.');\n        this._processingQueue = false;\n      }, isAppExiting);\n    } catch (ex) {\n      log.error(`Error processing queue: ${ex}`);\n      this.suspendProcessing();\n      this._processingQueue = false;\n    }\n  }\n\n  public suspendProcessing(durationInMinutes?: number, discardFutureQueuedItems?: boolean, clearQueue?: boolean): void {\n    const config: Configuration = this._config; // Optimization for minifier.\n\n    if (!durationInMinutes || durationInMinutes <= 0) {\n      durationInMinutes = 5;\n    }\n\n    config.log.info(`Suspending processing for ${durationInMinutes} minutes.`);\n    this._suspendProcessingUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\n\n    if (discardFutureQueuedItems) {\n      this._discardQueuedItemsUntil = this._suspendProcessingUntil;\n    }\n\n    if (clearQueue) {\n      // Account is over the limit and we want to ensure that the sample size being sent in will contain newer errors.\n      config.storage.queue.clear();\n    }\n  }\n\n  public onEventsPosted(handler: (events: IEvent[], response: SubmissionResponse) => void): void {\n    !!handler && this._handlers.push(handler);\n  }\n\n  private eventsPosted(events: IEvent[], response: SubmissionResponse) {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(events, response);\n      } catch (ex) {\n        this._config.log.error(`Error calling onEventsPosted handler: ${ex}`);\n      }\n    }\n  }\n\n  private areQueuedItemsDiscarded(): boolean {\n    return this._discardQueuedItemsUntil && this._discardQueuedItemsUntil > new Date();\n  }\n\n  private ensureQueueTimer(): void {\n    if (!this._queueTimer) {\n      this._queueTimer = setInterval(() => this.onProcessQueue(), 10000);\n    }\n  }\n\n  private isQueueProcessingSuspended(): boolean {\n    return this._suspendProcessingUntil && this._suspendProcessingUntil > new Date();\n  }\n\n  private onProcessQueue(): void {\n    if (!this.isQueueProcessingSuspended() && !this._processingQueue) {\n      this.process();\n    }\n  }\n\n  private processSubmissionResponse(response: SubmissionResponse, events: IStorageItem[]): void {\n    const noSubmission: string = 'The event will not be submitted.'; // Optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (response.success) {\n      log.info(`Sent ${events.length} events.`);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.serviceUnavailable) {\n      // You are currently over your rate limit or the servers are under stress.\n      log.error('Server returned service unavailable.');\n      this.suspendProcessing();\n      return;\n    }\n\n    if (response.paymentRequired) {\n      // If the organization over the rate limit then discard the event.\n      log.info('Too many events have been submitted, please upgrade your plan.');\n      this.suspendProcessing(null, true, true);\n      return;\n    }\n\n    if (response.unableToAuthenticate) {\n      // The api key was suspended or could not be authorized.\n      log.info(`Unable to authenticate, please check your configuration. ${noSubmission}`);\n      this.suspendProcessing(15);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.notFound || response.badRequest) {\n      // The service end point could not be found.\n      log.error(`Error while trying to submit data: ${response.message}`);\n      this.suspendProcessing(60 * 4);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.requestEntityTooLarge) {\n      const message = 'Event submission discarded for being too large.';\n      if (config.submissionBatchSize > 1) {\n        log.error(`${message} Retrying with smaller batch size.`);\n        config.submissionBatchSize = Math.max(1, Math.round(config.submissionBatchSize / 1.5));\n      } else {\n        log.error(`${message} ${noSubmission}`);\n        this.removeEvents(events);\n      }\n\n      return;\n    }\n\n    if (!response.success) {\n      log.error(`Error submitting events: ${response.message || 'Please check the network tab for more info.'}`);\n      this.suspendProcessing();\n    }\n  }\n\n  private removeEvents(events: IStorageItem[]) {\n    for (let index = 0; index < (events || []).length; index++) {\n      this._config.storage.queue.remove(events[index].timestamp);\n    }\n  }\n}\n\n                                                                                                                 \n\nexport interface IEventQueue {\n  enqueue(event: IEvent): void;\n  process(isAppExiting?: boolean): void;\n  suspendProcessing(durationInMinutes?: number, discardFutureQueuedItems?: boolean, clearQueue?: boolean): void;\n  onEventsPosted(handler: (events: IEvent[], response: SubmissionResponse) => void): void;\n}\n\n                                                                                                                                  \n\nexport interface IEnvironmentInfoCollector {\n  getEnvironmentInfo(context: EventPluginContext): IEnvironmentInfo;\n}\n\n                                                                                                              \n\nexport interface IErrorParser {\n  parse(context: EventPluginContext, exception: Error): IError;\n}\n\n                                                                                                                \n\nexport interface IModuleCollector {\n  getModules(context: EventPluginContext): IModule[];\n}\n\n                                                                                                                          \n\nexport interface IRequestInfoCollector {\n  getRequestInfo(context: EventPluginContext): IRequestInfo;\n}\n\n                                                                                                                                                  \n\nexport class InMemoryStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(maxQueueItems: number = 250) {\n    this.queue = new InMemoryStorage(maxQueueItems);\n    this.settings = new InMemoryStorage(1);\n  }\n\n}\n\n                                      \n\nexport interface IStorageProvider {\n  queue: IStorage;\n  settings: IStorage;\n}\n\nn\n// tslint:disable-next-line:prefer-const\ndeclare var XDomainRequest: { new(); create(); };\n\nexport class DefaultSubmissionClient implements ISubmissionClient {\n  public configurationVersionHeader: string = 'x-exceptionless-configversion';\n\n  public postEvents(events: IEvent[], config: Configuration, callback: (response: SubmissionResponse) => void, isAppExiting?: boolean): void {\n    const data = JSON.stringify(events);\n    const request = this.createRequest(config, 'POST', `${config.serverUrl}/api/v2/events`, data);\n    const cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb, isAppExiting);\n  }\n\n  public postUserDescription(referenceId: string, description: IUserDescription, config: Configuration, callback: (response: SubmissionResponse) => void): void {\n    const path = `${config.serverUrl}/api/v2/events/by-ref/${encodeURIComponent(referenceId)}/user-description`;\n    const data = JSON.stringify(description);\n    const request = this.createRequest(config, 'POST', path, data);\n    const cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public getSettings(config: Configuration, version: number, callback: (response: SettingsResponse) => void): void {\n    const request = this.createRequest(config, 'GET', `${config.configServerUrl}/api/v2/projects/config?v=${version}`);\n    const cb = (status, message, data?, headers?) => {\n      if (status !== 200) {\n        return callback(new SettingsResponse(false, null, -1, null, message));\n      }\n\n      let settings: IClientConfiguration;\n      try {\n        settings = JSON.parse(data);\n      } catch (e) {\n        config.log.error(`Unable to parse settings: '${data}'`);\n      }\n\n      if (!settings || isNaN(settings.version)) {\n        return callback(new SettingsResponse(false, null, -1, null, 'Invalid configuration settings.'));\n      }\n\n      callback(new SettingsResponse(true, settings.settings || {}, settings.version));\n    };\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public sendHeartbeat(sessionIdOrUserId: string, closeSession: boolean, config: Configuration): void {\n    const request = this.createRequest(config, 'GET', `${config.heartbeatServerUrl}/api/v2/events/session/heartbeat?id=${sessionIdOrUserId}&close=${closeSession}`);\n    config.submissionAdapter.sendRequest(request);\n  }\n\n  private createRequest(config: Configuration, method: string, url: string, data: string = null): SubmissionRequest {\n    return {\n      method,\n      url,\n      data,\n      apiKey: config.apiKey,\n      userAgent: config.userAgent\n    };\n  }\n\n  private createSubmissionCallback(config: Configuration, callback: (response: SubmissionResponse) => void) {\n    return (status, message, data?, headers?) => {\n      const settingsVersion: number = headers && parseInt(headers[this.configurationVersionHeader], 10);\n      if (!isNaN(settingsVersion)) {\n        SettingsManager.checkVersion(settingsVersion, config);\n      } else {\n        config.log.error('No config version header was returned.');\n      }\n\n      callback(new SubmissionResponse(status, message));\n    };\n  }\n}\n\n                                                                                                                   \n\nexport interface ISubmissionAdapter {\n  sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean): void;\n}\n\n                                                                                                                                                                                                                                                                                           \n\nexport interface ISubmissionClient {\n  postEvents(events: IEvent[], config: Configuration, callback: (response: SubmissionResponse) => void, isAppExiting?: boolean): void;\n  postUserDescription(referenceId: string, description: IUserDescription, config: Configuration, callback: (response: SubmissionResponse) => void): void;\n  getSettings(config: Configuration, version: number, callback: (response: SettingsResponse) => void): void;\n  sendHeartbeat(sessionIdOrUserId: string, closeSession: boolean, config: Configuration): void;\n}\n\nexport class Utils {\n  public static addRange<T>(target: T[], ...values: T[]) {\n    if (!target) {\n      target = [];\n    }\n\n    if (!values || values.length === 0) {\n      return target;\n    }\n\n    for (const value of values) {\n      if (value && target.indexOf(value) < 0) {\n        target.push(value);\n      }\n    }\n\n    return target;\n  }\n\n  public static getHashCode(source: string): number {\n    if (!source || source.length === 0) {\n      return 0;\n    }\n\n    let hash: number = 0;\n    for (let index = 0; index < source.length; index++) {\n      const character = source.charCodeAt(index);\n      hash = ((hash << 5) - hash) + character;\n      hash |= 0;\n    }\n\n    return hash;\n  }\n\n  public static getCookies(cookies: string, exclusions?: string[]): object {\n    const result: object = {};\n\n    const parts: string[] = (cookies || '').split('; ');\n    for (const part of parts) {\n      const cookie: string[] = part.split('=');\n      if (!Utils.isMatch(cookie[0], exclusions)) {\n        result[cookie[0]] = cookie[1];\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static guid(): string {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    }\n\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n  }\n\n  // tslint:disable-next-line:ban-types\n  public static merge(defaultValues: Object, values: Object) {\n    const result: object = {};\n\n    for (const key in defaultValues || {}) {\n      if (defaultValues[key] !== undefined && defaultValues[key] !== null) {\n        result[key] = defaultValues[key];\n      }\n    }\n\n    for (const key in values || {}) {\n      if (values[key] !== undefined && values[key] !== null) {\n        result[key] = values[key];\n      }\n    }\n\n    return result;\n  }\n\n  public static parseVersion(source: string): string {\n    if (!source) {\n      return null;\n    }\n\n    const versionRegex = /(v?((\\d+)\\.(\\d+)(\\.(\\d+))?)(?:-([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?(?:\\+([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?)/;\n    const matches = versionRegex.exec(source);\n    if (matches && matches.length > 0) {\n      return matches[0];\n    }\n\n    return null;\n  }\n\n  public static parseQueryString(query: string, exclusions?: string[]) {\n    if (!query || query.length === 0) {\n      return null;\n    }\n\n    const pairs: string[] = query.split('&');\n    if (pairs.length === 0) {\n      return null;\n    }\n\n    const result: object = {};\n    for (const pair of pairs) {\n      const parts = pair.split('=');\n      if (!Utils.isMatch(parts[0], exclusions)) {\n        result[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static randomNumber(): number {\n    return Math.floor(Math.random() * 9007199254740992);\n  }\n\n  /**\n   * Checks to see if a value matches a pattern.\n   * @param input the value to check against the @pattern.\n   * @param pattern The pattern to check, supports wild cards (*).\n   */\n  public static isMatch(input: string, patterns: string[], ignoreCase: boolean = true): boolean {\n    if (!input || typeof input !== 'string') {\n      return false;\n    }\n\n    const trim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n    input = (ignoreCase ? input.toLowerCase() : input).replace(trim, '');\n\n    return (patterns || []).some((pattern) => {\n      if (typeof pattern !== 'string') {\n        return false;\n      }\n\n      pattern = (ignoreCase ? pattern.toLowerCase() : pattern).replace(trim, '');\n      if (pattern.length <= 0) {\n        return false;\n      }\n\n      const startsWithWildcard: boolean = pattern[0] === '*';\n      if (startsWithWildcard) {\n        pattern = pattern.slice(1);\n      }\n\n      const endsWithWildcard: boolean = pattern[pattern.length - 1] === '*';\n      if (endsWithWildcard) {\n        pattern = pattern.substring(0, pattern.length - 1);\n      }\n\n      if (startsWithWildcard && endsWithWildcard) {\n        return pattern.length <= input.length && input.indexOf(pattern, 0) !== -1;\n      }\n\n      if (startsWithWildcard) {\n        return Utils.endsWith(input, pattern);\n      }\n\n      if (endsWithWildcard) {\n        return Utils.startsWith(input, pattern);\n      }\n\n      return input === pattern;\n    });\n  }\n\n  public static isEmpty(input: object) {\n    return input === null || (typeof (input) === 'object' && Object.keys(input).length === 0);\n  }\n\n  public static startsWith(input: string, prefix: string): boolean {\n    return input.substring(0, prefix.length) === prefix;\n  }\n\n  public static endsWith(input: string, suffix: string): boolean {\n    return input.indexOf(suffix, input.length - suffix.length) !== -1;\n  }\n\n  /**\n   * Stringifys an object with optional exclusions and max depth.\n   * @param data The data object to add.\n   * @param exclusions Any property names that should be excluded.\n   * @param maxDepth The max depth of the object to include.\n   */\n  public static stringify(data: any, exclusions?: string[], maxDepth?: number): string {\n    function stringifyImpl(obj: any, excludedKeys: string[]): string {\n      const cache: string[] = [];\n      return JSON.stringify(obj, (key: string, value: any) => {\n        if (Utils.isMatch(key, excludedKeys)) {\n          return;\n        }\n\n        if (typeof value === 'object' && !!value) {\n          if (cache.indexOf(value) !== -1) {\n            // Circular reference found, discard key\n            return;\n          }\n\n          cache.push(value);\n        }\n\n        return value;\n      });\n    }\n\n    if (({}).toString.call(data) === '[object Object]') {\n      const flattened = {};\n      /* tslint:disable:forin */\n      for (const prop in data) {\n        const value = data[prop];\n        if (value === data) {\n          continue;\n        }\n        flattened[prop] = data[prop];\n      }\n      /* tslint:enable:forin */\n\n      return stringifyImpl(flattened, exclusions);\n    }\n\n    if (({}).toString.call(data) === '[object Array]') {\n      const result = [];\n      for (let index = 0; index < data.length; index++) {\n        result[index] = JSON.parse(stringifyImpl(data[index], exclusions));\n      }\n\n      return JSON.stringify(result);\n    }\n\n    return stringifyImpl(data, exclusions);\n  }\n\n  public static toBoolean(input, defaultValue: boolean = false): boolean {\n    if (typeof input === 'boolean') {\n      return input;\n    }\n\n    if (input === null || typeof input !== 'number' && typeof input !== 'string') {\n      return defaultValue;\n    }\n\n    switch ((input + '').toLowerCase().trim()) {\n      case 'true': case 'yes': case '1': return true;\n      case 'false': case 'no': case '0': case null: return false;\n    }\n\n    return defaultValue;\n  }\n}\n\nn\nexport interface IConfigurationSettings {\n  apiKey?: string;\n  serverUrl?: string;\n  configServerUrl?: string;\n  heartbeatServerUrl?: string;\n  updateSettingsWhenIdleInterval?: number;\n  includePrivateInformation?: boolean;\n  environmentInfoCollector?: IEnvironmentInfoCollector;\n  errorParser?: IErrorParser;\n  lastReferenceIdManager?: ILastReferenceIdManager;\n  log?: ILog;\n  moduleCollector?: IModuleCollector;\n  requestInfoCollector?: IRequestInfoCollector;\n  submissionBatchSize?: number;\n  submissionClient?: ISubmissionClient;\n  submissionAdapter?: ISubmissionAdapter;\n  storage?: IStorageProvider;\n  queue?: IEventQueue;\n}\n\n                                                                                                                                                     \n\ninterface ISettingsWithVersion {\n  version: number;\n  settings: { [key: string]: string };\n}\n\nexport class SettingsManager {\n  private static _isUpdatingSettings: boolean = false;\n\n  /**\n   * A list of handlers that will be fired when the settings change.\n   * @type {Array}\n   * @private\n   */\n  private static _handlers: Array<(config: Configuration) => void> = [];\n\n  public static onChanged(handler: (config: Configuration) => void) {\n    !!handler && this._handlers.push(handler);\n  }\n\n  public static applySavedServerSettings(config: Configuration): void {\n    if (!config || !config.isValid) {\n      return;\n    }\n\n    const savedSettings = this.getSavedServerSettings(config);\n    config.log.info(`Applying saved settings: v${savedSettings.version}`);\n    config.settings = Utils.merge(config.settings, savedSettings.settings);\n    this.changed(config);\n  }\n\n  public static getVersion(config: Configuration): number {\n    if (!config || !config.isValid) {\n      return 0;\n    }\n\n    const savedSettings = this.getSavedServerSettings(config);\n    return savedSettings.version || 0;\n  }\n\n  public static checkVersion(version: number, config: Configuration): void {\n    const currentVersion: number = this.getVersion(config);\n    if (version <= currentVersion) {\n      return;\n    }\n\n    config.log.info(`Updating settings from v${currentVersion} to v${version}`);\n    this.updateSettings(config, currentVersion);\n  }\n\n  public static updateSettings(config: Configuration, version?: number): void {\n    if (!config || !config.enabled || this._isUpdatingSettings) {\n      return;\n    }\n\n    const unableToUpdateMessage = 'Unable to update settings';\n    if (!config.isValid) {\n      config.log.error(`${unableToUpdateMessage}: ApiKey is not set.`);\n      return;\n    }\n\n    if (!version || version < 0) {\n      version = this.getVersion(config);\n    }\n\n    config.log.info(`Checking for updated settings from: v${version}.`);\n    this._isUpdatingSettings = true;\n    config.submissionClient.getSettings(config, version, (response: SettingsResponse) => {\n      try {\n        if (!config || !response || !response.success || !response.settings) {\n          config.log.warn(`${unableToUpdateMessage}: ${response.message}`);\n          return;\n        }\n\n        config.settings = Utils.merge(config.settings, response.settings);\n\n        // TODO: Store snapshot of settings after reading from config and attributes and use that to revert to defaults.\n        // Remove any existing server settings that are not in the new server settings.\n        const savedServerSettings = SettingsManager.getSavedServerSettings(config);\n        for (const key in savedServerSettings) {\n          if (response.settings[key]) {\n            continue;\n          }\n\n          delete config.settings[key];\n        }\n\n        const newSettings: ISettingsWithVersion = {\n          version: response.settingsVersion,\n          settings: response.settings\n        };\n\n        config.storage.settings.save(newSettings);\n\n        config.log.info(`Updated settings: v${newSettings.version}`);\n        this.changed(config);\n      } finally {\n        this._isUpdatingSettings = false;\n      }\n    });\n  }\n\n  private static changed(config: Configuration) {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(config);\n      } catch (ex) {\n        config.log.error(`Error calling onChanged handler: ${ex}`);\n      }\n    }\n  }\n\n  private static getSavedServerSettings(config: Configuration): ISettingsWithVersion {\n    const item = config.storage.settings.get()[0];\n    if (item && item.value && item.value.version && item.value.settings) {\n      return item.value;\n    }\n\n    return { version: 0, settings: {} };\n  }\n}\n\nexport interface IEvent {\n  type?: string;\n  source?: string;\n  date?: Date;\n  tags?: string[];\n  message?: string;\n  geo?: string;\n  value?: number;\n  data?: any;\n  reference_id?: string;\n  count?: number;\n}\n\nexport class SubmissionResponse {\n  public success: boolean = false;\n  public badRequest: boolean = false;\n  public serviceUnavailable: boolean = false;\n  public paymentRequired: boolean = false;\n  public unableToAuthenticate: boolean = false;\n  public notFound: boolean = false;\n  public requestEntityTooLarge: boolean = false;\n  public statusCode: number;\n  public message: string;\n\n  constructor(statusCode: number, message?: string) {\n    this.statusCode = statusCode;\n    this.message = message;\n\n    this.success = statusCode >= 200 && statusCode <= 299;\n    this.badRequest = statusCode === 400;\n    this.serviceUnavailable = statusCode === 503;\n    this.paymentRequired = statusCode === 402;\n    this.unableToAuthenticate = statusCode === 401 || statusCode === 403;\n    this.notFound = statusCode === 404;\n    this.requestEntityTooLarge = statusCode === 413;\n  }\n}\n\nn\nexport class ExceptionlessClient {\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   * @private\n   */\n  private static _instance: ExceptionlessClient = null;\n\n  public config: Configuration;\n\n  private _intervalId: any;\n  private _timeoutId: any;\n\n  constructor();\n  constructor(settings: IConfigurationSettings);\n  constructor(apiKey: string, serverUrl?: string);\n  constructor(settingsOrApiKey?: IConfigurationSettings | string, serverUrl?: string) {\n    this.config = typeof settingsOrApiKey === 'object'\n      ? new Configuration(settingsOrApiKey)\n      : new Configuration({ apiKey: settingsOrApiKey as string, serverUrl });\n\n    this.updateSettingsTimer(5000);\n    this.config.onChanged((config) => this.updateSettingsTimer(this._timeoutId > 0 ? 5000 : 0));\n    this.config.queue.onEventsPosted((events, response) => this.updateSettingsTimer());\n  }\n\n  public createException(exception: Error): EventBuilder {\n    const pluginContextData = new ContextData();\n    pluginContextData.setException(exception);\n    return this.createEvent(pluginContextData).setType('error');\n  }\n\n  public submitException(exception: Error, callback?: (context: EventPluginContext) => void): void {\n    this.createException(exception).submit(callback);\n  }\n\n  public createUnhandledException(exception: Error, submissionMethod?: string): EventBuilder {\n    const builder = this.createException(exception);\n    builder.pluginContextData.markAsUnhandledError();\n    builder.pluginContextData.setSubmissionMethod(submissionMethod);\n\n    return builder;\n  }\n\n  public submitUnhandledException(exception: Error, submissionMethod?: string, callback?: (context: EventPluginContext) => void) {\n    this.createUnhandledException(exception, submissionMethod).submit(callback);\n  }\n\n  public createFeatureUsage(feature: string): EventBuilder {\n    return this.createEvent().setType('usage').setSource(feature);\n  }\n\n  public submitFeatureUsage(feature: string, callback?: (context: EventPluginContext) => void): void {\n    this.createFeatureUsage(feature).submit(callback);\n  }\n\n  public createLog(message: string): EventBuilder;\n  public createLog(source: string, message: string): EventBuilder;\n  public createLog(source: string, message: string, level: string): EventBuilder;\n  public createLog(sourceOrMessage: string, message?: string, level?: string): EventBuilder {\n    let builder = this.createEvent().setType('log');\n\n    if (level) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message).setProperty('@level', level);\n    } else if (message) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message);\n    } else {\n      builder = builder.setMessage(sourceOrMessage);\n\n      try {\n        // TODO: Look into using https: //www.stevefenton.co.uk/Content/Blog/Date/201304/Blog/Obtaining-A-Class-Name-At-Runtime-In-TypeScript/\n        const caller: any = this.createLog.caller;\n        builder = builder.setSource(caller && caller.caller && caller.caller.name);\n      } catch (e) {\n        this.config.log.trace('Unable to resolve log source: ' + e.message);\n      }\n    }\n\n    return builder;\n  }\n\n  public submitLog(message: string): void;\n  public submitLog(source: string, message: string): void;\n  public submitLog(source: string, message: string, level: string, callback?: (context: EventPluginContext) => void): void;\n  public submitLog(sourceOrMessage: string, message?: string, level?: string, callback?: (context: EventPluginContext) => void): void {\n    this.createLog(sourceOrMessage, message, level).submit(callback);\n  }\n\n  public createNotFound(resource: string): EventBuilder {\n    return this.createEvent().setType('404').setSource(resource);\n  }\n\n  public submitNotFound(resource: string, callback?: (context: EventPluginContext) => void): void {\n    this.createNotFound(resource).submit(callback);\n  }\n\n  public createSessionStart(): EventBuilder {\n    return this.createEvent().setType('session');\n  }\n\n  public submitSessionStart(callback?: (context: EventPluginContext) => void): void {\n    this.createSessionStart().submit(callback);\n  }\n\n  public submitSessionEnd(sessionIdOrUserId: string): void {\n    if (sessionIdOrUserId) {\n      this.config.log.info(`Submitting session end: ${sessionIdOrUserId}`);\n      this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, true, this.config);\n    }\n  }\n\n  public submitSessionHeartbeat(sessionIdOrUserId: string): void {\n    if (sessionIdOrUserId) {\n      this.config.log.info(`Submitting session heartbeat: ${sessionIdOrUserId}`);\n      this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, false, this.config);\n    }\n  }\n\n  public createEvent(pluginContextData?: ContextData): EventBuilder {\n    return new EventBuilder({ date: new Date() }, this, pluginContextData);\n  }\n\n  /**\n   * Submits the event to be sent to the server.\n   * @param event The event data.\n   * @param pluginContextData Any contextual data objects to be used by Exceptionless plugins to gather default information for inclusion in the report information.\n   * @param callback\n   */\n  public submitEvent(event: IEvent, pluginContextData?: ContextData, callback?: (context: EventPluginContext) => void): void {\n    function cancelled(eventPluginContext: EventPluginContext) {\n      if (!!eventPluginContext) {\n        eventPluginContext.cancelled = true;\n      }\n\n      return !!callback && callback(eventPluginContext);\n    }\n\n    const context = new EventPluginContext(this, event, pluginContextData);\n    if (!event) {\n      return cancelled(context);\n    }\n\n    if (!this.config.enabled) {\n      this.config.log.info('Event submission is currently disabled.');\n      return cancelled(context);\n    }\n\n    if (!event.data) {\n      event.data = {};\n    }\n\n    if (!event.tags || !event.tags.length) {\n      event.tags = [];\n    }\n\n    EventPluginManager.run(context, (ctx: EventPluginContext) => {\n      const config = ctx.client.config;\n      const ev = ctx.event;\n\n      if (!ctx.cancelled) {\n        // ensure all required data\n        if (!ev.type || ev.type.length === 0) {\n          ev.type = 'log';\n        }\n\n        if (!ev.date) {\n          ev.date = new Date();\n        }\n\n        config.queue.enqueue(ev);\n\n        if (ev.reference_id && ev.reference_id.length > 0) {\n          ctx.log.info(`Setting last reference id '${ev.reference_id}'`);\n          config.lastReferenceIdManager.setLast(ev.reference_id);\n        }\n      }\n\n      !!callback && callback(ctx);\n    });\n  }\n\n  /**\n   * Updates the user's email address and description of an event for the specified reference id.\n   * @param referenceId The reference id of the event to update.\n   * @param email The user's email address to set on the event.\n   * @param description The user's description of the event.\n   * @param callback The submission response.\n   */\n  public updateUserEmailAndDescription(referenceId: string, email: string, description: string, callback?: (response: SubmissionResponse) => void) {\n    if (!referenceId || !email || !description || !this.config.enabled) {\n      return !!callback && callback(new SubmissionResponse(500, 'cancelled'));\n    }\n\n    const userDescription: IUserDescription = { email_address: email, description };\n    this.config.submissionClient.postUserDescription(referenceId, userDescription, this.config, (response: SubmissionResponse) => {\n      if (!response.success) {\n        this.config.log.error(`Failed to submit user email and description for event '${referenceId}': ${response.statusCode} ${response.message}`);\n      }\n\n      !!callback && callback(response);\n    });\n  }\n\n  /**\n   * Gets the last event client id that was submitted to the server.\n   * @returns {string} The event client id.\n   */\n  public getLastReferenceId(): string {\n    return this.config.lastReferenceIdManager.getLast();\n  }\n\n  private updateSettingsTimer(initialDelay?: number) {\n    this.config.log.info(`Updating settings timer with delay: ${initialDelay}`);\n\n    this._timeoutId = clearTimeout(this._timeoutId);\n    this._timeoutId = clearInterval(this._intervalId);\n\n    const interval = this.config.updateSettingsWhenIdleInterval;\n    if (interval > 0) {\n      const updateSettings = () => SettingsManager.updateSettings(this.config);\n      if (initialDelay > 0) {\n        this._timeoutId = setTimeout(updateSettings, initialDelay);\n      }\n\n      this._intervalId = setInterval(updateSettings, interval);\n    }\n  }\n\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   */\n  public static get default() {\n    if (ExceptionlessClient._instance === null) {\n      ExceptionlessClient._instance = new ExceptionlessClient(null);\n    }\n\n    return ExceptionlessClient._instance;\n  }\n}\n\nexport class ContextData {\n  public setException(exception: Error): void {\n    if (exception) {\n      this['@@_Exception'] = exception;\n    }\n  }\n\n  public get hasException(): boolean {\n    return !!this['@@_Exception'];\n  }\n\n  public getException(): Error {\n    return this['@@_Exception'] || null;\n  }\n\n  public markAsUnhandledError(): void {\n    this['@@_IsUnhandledError'] = true;\n  }\n\n  public get isUnhandledError(): boolean {\n    return !!this['@@_IsUnhandledError'];\n  }\n\n  public setSubmissionMethod(method: string): void {\n    if (method) {\n      this['@@_SubmissionMethod'] = method;\n    }\n  }\n\n  public getSubmissionMethod(): string {\n    return this['@@_SubmissionMethod'] || null;\n  }\n}\n\nexport interface IEnvironmentInfo {\n  processor_count?: number;\n  total_physical_memory?: number;\n  available_physical_memory?: number;\n  command_line?: string;\n  process_name?: string;\n  process_id?: string;\n  process_memory_size?: number;\n  thread_id?: string;\n  architecture?: string;\n  o_s_name?: string;\n  o_s_version?: string;\n  ip_address?: string;\n  machine_name?: string;\n  install_id?: string;\n  runtime_version?: string;\n  data?: any;\n}\n\nexport interface IParameter {\n  data?: any;\n  generic_arguments?: string[];\n\n  name?: string;\n  type?: string;\n  type_namespace?: string;\n}\n\n                                          \n\nexport interface IMethod {\n  data?: any;\n  generic_arguments?: string[];\n  parameters?: IParameter[];\n\n  is_signature_target?: boolean;\n  declaring_namespace?: string;\n  declaring_type?: string;\n  name?: string;\n  module_id?: number;\n}\n\n                                    \n\nexport interface IStackFrame extends IMethod {\n  file_name?: string;\n  line_number?: number;\n  column?: number;\n}\n\n                                                                                 \n\nexport interface IInnerError {\n  message?: string;\n  type?: string;\n  code?: string;\n  data?: any;\n  inner?: IInnerError;\n  stack_trace?: IStackFrame[];\n  target_method?: IMethod;\n}\n\nexport interface IModule {\n  data?: any;\n\n  module_id?: number;\n  name?: string;\n  version?: string;\n  is_entry?: boolean;\n  created_date?: Date;\n  modified_date?: Date;\n}\n\n                                                                                 \n\nexport interface IError extends IInnerError {\n  modules?: IModule[];\n}\n\nexport interface IRequestInfo {\n  user_agent?: string;\n  http_method?: string;\n  is_secure?: boolean;\n  host?: string;\n  port?: number;\n  path?: string;\n  referrer?: string;\n  client_ip_address?: string;\n  cookies?: any;\n  post_data?: any;\n  query_string?: any;\n  data?: any;\n}\n\nexport interface IStorageItem {\n  timestamp: number;\n  value: any;\n}\n\n                                              \n\nexport interface IStorage {\n  save(value: any): number;\n  get(limit?: number): IStorageItem[];\n  remove(timestamp: number): void;\n  clear(): void;\n}\n\nexport type SubmissionCallback = (status: number, message: string, data?: string, headers?: object) => void;\n\nexport interface SubmissionRequest {\n  apiKey: string;\n  userAgent: string;\n  method: string;\n  url: string;\n  data: string;\n}\n\nn\nexport class Configuration implements IConfigurationSettings {\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @type {IConfigurationSettings}\n   * @private\n   */\n  private static _defaultSettings: IConfigurationSettings = null;\n\n  /**\n   * A default list of tags that will automatically be added to every\n   * report submitted to the server.\n   *\n   * @type {Array}\n   */\n  public defaultTags: string[] = [];\n\n  /**\n   * A default list of of extended data objects that will automatically\n   * be added to every report submitted to the server.\n   *\n   * @type {{}}\n   */\n  public defaultData: object = {};\n\n  /**\n   * Whether the client is currently enabled or not. If it is disabled,\n   * submitted errors will be discarded and no data will be sent to the server.\n   *\n   * @returns {boolean}\n   */\n  public enabled: boolean = true;\n\n  public environmentInfoCollector: IEnvironmentInfoCollector;\n  public errorParser: IErrorParser;\n  public lastReferenceIdManager: ILastReferenceIdManager = new DefaultLastReferenceIdManager();\n  public log: ILog;\n  public moduleCollector: IModuleCollector;\n  public requestInfoCollector: IRequestInfoCollector;\n\n  /**\n   * Maximum number of events that should be sent to the server together in a batch. (Defaults to 50)\n   */\n  public submissionBatchSize: number;\n  public submissionAdapter: ISubmissionAdapter;\n  public submissionClient: ISubmissionClient;\n\n  /**\n   * Contains a dictionary of custom settings that can be used to control\n   * the client and will be automatically updated from the server.\n   */\n  public settings: object = {};\n\n  public storage: IStorageProvider;\n\n  public queue: IEventQueue;\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @type {string}\n   * @private\n   */\n  private _apiKey: string;\n\n  /**\n   * The server url that all events will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _serverUrl: string = 'https://collector.exceptionless.io';\n\n  /**\n   * The config server url that all configuration will be retrieved from.\n   * @type {string}\n   * @private\n   */\n  private _configServerUrl: string = 'https://config.exceptionless.io';\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _heartbeatServerUrl: string = 'https://heartbeat.exceptionless.io';\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @type {number}\n   * @private\n   */\n  private _updateSettingsWhenIdleInterval: number = 120000;\n\n  /**\n   * A list of exclusion patterns.\n   * @type {Array}\n   * @private\n   */\n  private _dataExclusions: string[] = [];\n\n  private _includePrivateInformation: boolean;\n  private _includeUserName: boolean;\n  private _includeMachineName: boolean;\n  private _includeIpAddress: boolean;\n  private _includeCookies: boolean;\n  private _includePostData: boolean;\n  private _includeQueryString: boolean;\n\n  /**\n   * A list of user agent patterns.\n   * @type {Array}\n   * @private\n   */\n  private _userAgentBotPatterns: string[] = [];\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @type {Array}\n   * @private\n   */\n  private _plugins: IEventPlugin[] = [];\n\n  /**\n   * A list of handlers that will be fired when configuration changes.\n   * @type {Array}\n   * @private\n   */\n  private _handlers: Array<(config: Configuration) => void> = [];\n\n  constructor(configSettings?: IConfigurationSettings) {\n    function inject(fn: any) {\n      return typeof fn === 'function' ? fn(this) : fn;\n    }\n\n    configSettings = Utils.merge(Configuration.defaults, configSettings);\n\n    this.log = inject(configSettings.log) || new NullLog();\n    this.apiKey = configSettings.apiKey;\n    this.serverUrl = configSettings.serverUrl;\n    this.configServerUrl = configSettings.configServerUrl;\n    this.heartbeatServerUrl = configSettings.heartbeatServerUrl;\n    this.updateSettingsWhenIdleInterval = configSettings.updateSettingsWhenIdleInterval;\n    this.includePrivateInformation = configSettings.includePrivateInformation;\n\n    this.environmentInfoCollector = inject(configSettings.environmentInfoCollector);\n    this.errorParser = inject(configSettings.errorParser);\n    this.lastReferenceIdManager = inject(configSettings.lastReferenceIdManager) || new DefaultLastReferenceIdManager();\n    this.moduleCollector = inject(configSettings.moduleCollector);\n    this.requestInfoCollector = inject(configSettings.requestInfoCollector);\n    this.submissionBatchSize = inject(configSettings.submissionBatchSize) || 50;\n    this.submissionAdapter = inject(configSettings.submissionAdapter);\n    this.submissionClient = inject(configSettings.submissionClient) || new DefaultSubmissionClient();\n    this.storage = inject(configSettings.storage) || new InMemoryStorageProvider();\n    this.queue = inject(configSettings.queue) || new DefaultEventQueue(this);\n\n    SettingsManager.applySavedServerSettings(this);\n    EventPluginManager.addDefaultPlugins(this);\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @returns {string}\n   */\n  public get apiKey(): string {\n    return this._apiKey;\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @param value\n   */\n  public set apiKey(value: string) {\n    this._apiKey = value || null;\n    this.log.info(`apiKey: ${this._apiKey}`);\n    this.changed();\n  }\n\n  /**\n   * Returns true if the apiKey is valid.\n   * @returns {boolean}\n   */\n  public get isValid(): boolean {\n    return !!this.apiKey && this.apiKey.length >= 10;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @returns {string}\n   */\n  public get serverUrl(): string {\n    return this._serverUrl;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @param value\n   */\n  public set serverUrl(value: string) {\n    if (!!value) {\n      this._serverUrl = value;\n      this._configServerUrl = value;\n      this._heartbeatServerUrl = value;\n      this.log.info(`serverUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * The config server url that all configuration will be retrieved from.\n   * @returns {string}\n   */\n  public get configServerUrl(): string {\n    return this._configServerUrl;\n  }\n\n  /**\n   * The config server url that all configuration will be retrieved from.\n   * @param value\n   */\n  public set configServerUrl(value: string) {\n    if (!!value) {\n      this._configServerUrl = value;\n      this.log.info(`configServerUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @returns {string}\n   */\n  public get heartbeatServerUrl(): string {\n    return this._heartbeatServerUrl;\n  }\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @param value\n   */\n  public set heartbeatServerUrl(value: string) {\n    if (!!value) {\n      this._heartbeatServerUrl = value;\n      this.log.info(`heartbeatServerUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @returns {number}\n   */\n  public get updateSettingsWhenIdleInterval(): number {\n    return this._updateSettingsWhenIdleInterval;\n  }\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @param value\n   */\n  public set updateSettingsWhenIdleInterval(value: number) {\n    if (typeof value !== 'number') {\n      return;\n    }\n\n    if (value <= 0) {\n      value = -1;\n    } else if (value > 0 && value < 120000) {\n      value = 120000;\n    }\n\n    this._updateSettingsWhenIdleInterval = value;\n    this.log.info(`updateSettingsWhenIdleInterval: ${value}`);\n    this.changed();\n  }\n\n  /**\n   *  A list of exclusion patterns that will automatically remove any data that\n   *  matches them from any data submitted to the server.\n   *\n   *  For example, entering CreditCard will remove any extended data properties,\n   *  form fields, cookies and query parameters from the report.\n   *\n   * @returns {string[]}\n   */\n  public get dataExclusions(): string[] {\n    const exclusions: string = this.settings['@@DataExclusions'];\n    return this._dataExclusions.concat(exclusions && exclusions.split(',') || []);\n  }\n\n  /**\n   * Add items to the list of exclusion patterns that will automatically remove any\n   * data that matches them from any data submitted to the server.\n   *\n   * For example, entering CreditCard will remove any extended data properties, form\n   * fields, cookies and query parameters from the report.\n   *\n   * @param exclusions\n   */\n  public addDataExclusions(...exclusions: string[]) {\n    this._dataExclusions = Utils.addRange<string>(this._dataExclusions, ...exclusions);\n  }\n\n  /**\n   * Gets a value indicating whether to include private information about the local machine.\n   * @returns {boolean}\n   */\n  public get includePrivateInformation(): boolean {\n    return this._includePrivateInformation;\n  }\n\n  /**\n   * Sets a value indicating whether to include private information about the local machine\n   * @param value\n   */\n  public set includePrivateInformation(value: boolean) {\n    const val = value || false;\n    this._includePrivateInformation = val;\n    this._includeUserName = val;\n    this._includeMachineName = val;\n    this._includeIpAddress = val;\n    this._includeCookies = val;\n    this._includePostData = val;\n    this._includeQueryString = val;\n    this.log.info(`includePrivateInformation: ${val}`);\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include User Name.\n   * @returns {boolean}\n   */\n  public get includeUserName(): boolean {\n    return this._includeUserName;\n  }\n\n  /**\n   * Sets a value indicating whether to include User Name.\n   * @param value\n   */\n  public set includeUserName(value: boolean) {\n    this._includeUserName = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include MachineName in MachineInfo.\n   * @returns {boolean}\n   */\n  public get includeMachineName(): boolean {\n    return this._includeMachineName;\n  }\n\n  /**\n   * Sets a value indicating whether to include MachineName in MachineInfo.\n   * @param value\n   */\n  public set includeMachineName(value: boolean) {\n    this._includeMachineName = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include Ip Addresses in MachineInfo and RequestInfo.\n   * @returns {boolean}\n   */\n  public get includeIpAddress(): boolean {\n    return this._includeIpAddress;\n  }\n\n  /**\n   * Sets a value indicating whether to include Ip Addresses in MachineInfo and RequestInfo.\n   * @param value\n   */\n  public set includeIpAddress(value: boolean) {\n    this._includeIpAddress = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include Cookies.\n   * NOTE: DataExclusions are applied to all Cookie keys when enabled.\n   * @returns {boolean}\n   */\n  public get includeCookies(): boolean {\n    return this._includeCookies;\n  }\n\n  /**\n   * Sets a value indicating whether to include Cookies.\n   * NOTE: DataExclusions are applied to all Cookie keys when enabled.\n   * @param value\n   */\n  public set includeCookies(value: boolean) {\n    this._includeCookies = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include Form/POST Data.\n   * NOTE: DataExclusions are only applied to Form data keys when enabled.\n   * @returns {boolean}\n   */\n  public get includePostData(): boolean {\n    return this._includePostData;\n  }\n\n  /**\n   * Sets a value indicating whether to include Form/POST Data.\n   * NOTE: DataExclusions are only applied to Form data keys when enabled.\n   * @param value\n   */\n  public set includePostData(value: boolean) {\n    this._includePostData = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include query string information.\n   * NOTE: DataExclusions are applied to all Query String keys when enabled.\n   * @returns {boolean}\n   */\n  public get includeQueryString(): boolean {\n    return this._includeQueryString;\n  }\n\n  /**\n   * Sets a value indicating whether to include query string information.\n   * NOTE: DataExclusions are applied to all Query String keys when enabled.\n   * @param value\n   */\n  public set includeQueryString(value: boolean) {\n    this._includeQueryString = value || false;\n    this.changed();\n  }\n\n  /**\n   * A list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @returns {string[]}\n   */\n  public get userAgentBotPatterns(): string[] {\n    const patterns: string = this.settings['@@UserAgentBotPatterns'];\n    return this._userAgentBotPatterns.concat(patterns && patterns.split(',') || []);\n  }\n\n  /**\n   * Add items to the list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @param userAgentBotPatterns\n   */\n  public addUserAgentBotPatterns(...userAgentBotPatterns: string[]) {\n    this._userAgentBotPatterns = Utils.addRange<string>(this._userAgentBotPatterns, ...userAgentBotPatterns);\n  }\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @returns {IEventPlugin[]}\n   */\n  public get plugins(): IEventPlugin[] {\n    return this._plugins.sort((p1: IEventPlugin, p2: IEventPlugin) => {\n      return (p1.priority < p2.priority) ? -1 : (p1.priority > p2.priority) ? 1 : 0;\n    });\n  }\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param plugin\n   */\n  public addPlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param name The name used to identify the plugin.\n   * @param priority Used to determine plugins priority.\n   * @param pluginAction A function that is run.\n   */\n  public addPlugin(name: string, priority: number, pluginAction: (context: EventPluginContext, next?: () => void) => void): void;\n  public addPlugin(pluginOrName: IEventPlugin | string, priority?: number, pluginAction?: (context: EventPluginContext, next?: () => void) => void): void {\n    const plugin: IEventPlugin = !!pluginAction ? { name: pluginOrName as string, priority, run: pluginAction } : pluginOrName as IEventPlugin;\n    if (!plugin || !plugin.run) {\n      this.log.error('Add plugin failed: Run method not defined');\n      return;\n    }\n\n    if (!plugin.name) {\n      plugin.name = Utils.guid();\n    }\n\n    if (!plugin.priority) {\n      plugin.priority = 0;\n    }\n\n    let pluginExists: boolean = false;\n    const plugins = this._plugins; // optimization for minifier.\n    for (const p of plugins) {\n      if (p.name === plugin.name) {\n        pluginExists = true;\n        break;\n      }\n    }\n\n    if (!pluginExists) {\n      plugins.push(plugin);\n    }\n  }\n\n  /**\n   * Remove the plugin from this configuration.\n   * @param plugin\n   */\n  public removePlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Remove an plugin by key from this configuration.\n   * @param name\n   */\n  public removePlugin(pluginOrName: IEventPlugin | string): void {\n    const name: string = typeof pluginOrName === 'string' ? pluginOrName : pluginOrName.name;\n    if (!name) {\n      this.log.error('Remove plugin failed: Plugin name not defined');\n      return;\n    }\n\n    const plugins = this._plugins; // optimization for minifier.\n    for (let index = 0; index < plugins.length; index++) {\n      if (plugins[index].name === name) {\n        plugins.splice(index, 1);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Automatically set the application version for events.\n   * @param version\n   */\n  public setVersion(version: string): void {\n    if (!!version) {\n      this.defaultData['@version'] = version;\n    }\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): void;\n  public setUserIdentity(identity: string): void;\n  public setUserIdentity(identity: string, name: string): void;\n  public setUserIdentity(userInfoOrIdentity: IUserInfo | string, name?: string): void {\n    const USER_KEY: string = '@user'; // optimization for minifier.\n    const userInfo: IUserInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name };\n\n    const shouldRemove: boolean = !userInfo || (!userInfo.identity && !userInfo.name);\n    if (shouldRemove) {\n      delete this.defaultData[USER_KEY];\n    } else {\n      this.defaultData[USER_KEY] = userInfo;\n    }\n\n    this.log.info(`user identity: ${shouldRemove ? 'null' : userInfo.identity}`);\n  }\n\n  /**\n   * Used to identify the client that sent the events to the server.\n   * @returns {string}\n   */\n  public get userAgent(): string {\n    return 'exceptionless-js/1.0.0.0';\n  }\n\n  /**\n   * Automatically send a heartbeat to keep the session alive.\n   */\n  public useSessions(sendHeartbeats: boolean = true, heartbeatInterval: number = 30000): void {\n    if (sendHeartbeats) {\n      this.addPlugin(new HeartbeatPlugin(heartbeatInterval));\n    }\n  }\n\n  /**\n   * Automatically set a reference id for error events.\n   */\n  public useReferenceIds(): void {\n    this.addPlugin(new ReferenceIdPlugin());\n  }\n\n  public useLocalStorage(): void {\n    // This method will be injected via the prototype.\n  }\n\n  // TODO: Support a min log level.\n  public useDebugLogger(): void {\n    this.log = new ConsoleLog();\n  }\n\n  public onChanged(handler: (config: Configuration) => void) {\n    !!handler && this._handlers.push(handler);\n  }\n\n  private changed() {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(this);\n      } catch (ex) {\n        this.log.error(`Error calling onChanged handler: ${ex}`);\n      }\n    }\n  }\n\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @returns {IConfigurationSettings}\n   */\n  public static get defaults() {\n    if (Configuration._defaultSettings === null) {\n      Configuration._defaultSettings = { includePrivateInformation: true };\n    }\n\n    return Configuration._defaultSettings;\n  }\n}\n\nexport interface IUserDescription {\n  email_address?: string;\n  description?: string;\n  data?: any;\n}\n\nexport class SettingsResponse {\n  public success: boolean = false;\n  public settings: any;\n  public settingsVersion: number = -1;\n  public message: string;\n  public exception: any;\n\n  constructor(success: boolean, settings: any, settingsVersion: number = -1, exception: any = null, message: string = null) {\n    this.success = success;\n    this.settings = settings;\n    this.settingsVersion = settingsVersion;\n    this.exception = exception;\n    this.message = message;\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                   \n\nexport class EventBuilder {\n  public target: IEvent;\n  public client: ExceptionlessClient;\n  public pluginContextData: ContextData;\n\n  private _validIdentifierErrorMessage: string = 'must contain between 8 and 100 alphanumeric or \\'-\\' characters.'; // optimization for minifier.\n\n  constructor(event: IEvent, client: ExceptionlessClient, pluginContextData?: ContextData) {\n    this.target = event;\n    this.client = client;\n    this.pluginContextData = pluginContextData || new ContextData();\n  }\n\n  public setType(type: string): EventBuilder {\n    if (!!type) {\n      this.target.type = type;\n    }\n\n    return this;\n  }\n\n  public setSource(source: string): EventBuilder {\n    if (!!source) {\n      this.target.source = source;\n    }\n\n    return this;\n  }\n\n  public setReferenceId(referenceId: string): EventBuilder {\n    if (!this.isValidIdentifier(referenceId)) {\n      throw new Error(`ReferenceId ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.target.reference_id = referenceId;\n    return this;\n  }\n\n  /**\n   * Allows you to reference a parent event by its ReferenceId property. This allows you to have parent and child relationships.\n   * @param name Reference name\n   * @param id The reference id that points to a specific event\n   * @returns {EventBuilder}\n   */\n  public setEventReference(name: string, id: string): EventBuilder {\n    if (!name) {\n      throw new Error('Invalid name');\n    }\n\n    if (!id || !this.isValidIdentifier(id)) {\n      throw new Error(`Id ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.setProperty('@ref:' + name, id);\n    return this;\n  }\n\n  public setMessage(message: string): EventBuilder {\n    if (!!message) {\n      this.target.message = message;\n    }\n\n    return this;\n  }\n\n  public setGeo(latitude: number, longitude: number): EventBuilder {\n    if (latitude < -90.0 || latitude > 90.0) {\n      throw new Error('Must be a valid latitude value between -90.0 and 90.0.');\n    }\n\n    if (longitude < -180.0 || longitude > 180.0) {\n      throw new Error('Must be a valid longitude value between -180.0 and 180.0.');\n    }\n\n    this.target.geo = `${latitude},${longitude}`;\n    return this;\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): EventBuilder;\n  public setUserIdentity(identity: string): EventBuilder;\n  public setUserIdentity(identity: string, name: string): EventBuilder;\n  public setUserIdentity(userInfoOrIdentity: IUserInfo | string, name?: string): EventBuilder {\n    const userInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name };\n    if (!userInfo || (!userInfo.identity && !userInfo.name)) {\n      return this;\n    }\n\n    this.setProperty('@user', userInfo);\n    return this;\n  }\n\n  /**\n   * Sets the user's description of the event.\n   *\n   * @param emailAddress The email address\n   * @param description The user's description of the event.\n   * @returns {EventBuilder}\n   */\n  public setUserDescription(emailAddress: string, description: string): EventBuilder {\n    if (emailAddress && description) {\n      this.setProperty('@user_description', { email_address: emailAddress, description });\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting manual\n   * stacking information.\n   * @param signatureData A dictionary of strings to use for stacking.\n   * @param title An optional title for the stacking information.\n   * @returns {EventBuilder}\n   */\n  public setManualStackingInfo(signatureData: any, title?: string) {\n    if (signatureData) {\n      const stack: IManualStackingInfo = { signature_data: signatureData };\n      if (title) {\n        stack.title = title;\n      }\n\n      this.setProperty('@stack', stack);\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting the stacking key.\n   * @param manualStackingKey The manual stacking key.\n   * @param title An optional title for the stacking information.\n   * @returns {EventBuilder}\n   */\n  public setManualStackingKey(manualStackingKey: string, title?: string): EventBuilder {\n    if (manualStackingKey) {\n      const data = { ManualStackingKey: manualStackingKey };\n      this.setManualStackingInfo(data, title);\n    }\n\n    return this;\n  }\n\n  public setValue(value: number): EventBuilder {\n    if (!!value) {\n      this.target.value = value;\n    }\n\n    return this;\n  }\n\n  public addTags(...tags: string[]): EventBuilder {\n    this.target.tags = Utils.addRange<string>(this.target.tags, ...tags);\n    return this;\n  }\n\n  /**\n   * Adds the object to extended data. Uses @excludedPropertyNames\n   * to exclude data from being included in the event.\n   * @param name The data object to add.\n   * @param value The name of the object to add.\n   * @param maxDepth The max depth of the object to include.\n   * @param excludedPropertyNames Any property names that should be excluded.\n   */\n  public setProperty(name: string, value: any, maxDepth?: number, excludedPropertyNames?: string[]): EventBuilder {\n    if (!name || (value === undefined || value == null)) {\n      return this;\n    }\n\n    if (!this.target.data) {\n      this.target.data = {};\n    }\n\n    const result = JSON.parse(Utils.stringify(value, this.client.config.dataExclusions.concat(excludedPropertyNames || []), maxDepth));\n    if (!Utils.isEmpty(result)) {\n      this.target.data[name] = result;\n    }\n\n    return this;\n  }\n\n  public markAsCritical(critical: boolean): EventBuilder {\n    if (critical) {\n      this.addTags('Critical');\n    }\n\n    return this;\n  }\n\n  public addRequestInfo(request: object): EventBuilder {\n    if (!!request) {\n      this.pluginContextData['@request'] = request;\n    }\n\n    return this;\n  }\n\n  public submit(callback?: (context: EventPluginContext) => void): void {\n    this.client.submitEvent(this.target, this.pluginContextData, callback);\n  }\n\n  private isValidIdentifier(value: string): boolean {\n    if (!value) {\n      return true;\n    }\n\n    if (value.length < 8 || value.length > 100) {\n      return false;\n    }\n\n    for (let index = 0; index < value.length; index++) {\n      const code = value.charCodeAt(index);\n      const isDigit = (code >= 48) && (code <= 57);\n      const isLetter = ((code >= 65) && (code <= 90)) || ((code >= 97) && (code <= 122));\n      const isMinus = code === 45;\n\n      if (!(isDigit || isLetter) && !isMinus) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nexport interface IManualStackingInfo {\n  title?: string;\n  signature_data?: any;\n}\n\n                                                                                                                                                \n\nexport class ConfigurationDefaultsPlugin implements IEventPlugin {\n  public priority: number = 10;\n  public name: string = 'ConfigurationDefaultsPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const config = context.client.config;\n    const defaultTags: string[] = config.defaultTags || [];\n    for (const tag of defaultTags) {\n      if (!!tag && context.event.tags.indexOf(tag) < 0) {\n        context.event.tags.push(tag);\n      }\n    }\n\n    // tslint:disable-next-line:ban-types\n    const defaultData: Object = config.defaultData || {};\n    for (const key in defaultData) {\n      if (!!defaultData[key]) {\n        const result = JSON.parse(Utils.stringify(defaultData[key], config.dataExclusions));\n        if (!Utils.isEmpty(result)) {\n          context.event.data[key] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                        \n\nexport class DuplicateCheckerPlugin implements IEventPlugin {\n  public priority: number = 1010;\n  public name: string = 'DuplicateCheckerPlugin';\n\n  private _mergedEvents: MergedEvent[] = [];\n  private _processedHashcodes: TimestampedHash[] = [];\n  private _getCurrentTime: () => number;\n  private _interval: number;\n\n  constructor(getCurrentTime: () => number = () => Date.now(), interval: number = 30000) {\n    this._getCurrentTime = getCurrentTime;\n    this._interval = interval;\n\n    setInterval(() => {\n      while (this._mergedEvents.length > 0) {\n        this._mergedEvents.shift().resubmit();\n      }\n    }, interval);\n  }\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    function getHashCode(e: IInnerError): number {\n      let hash = 0;\n      while (e) {\n        if (e.message && e.message.length) {\n          hash += (hash * 397) ^ Utils.getHashCode(e.message);\n        }\n        if (e.stack_trace && e.stack_trace.length) {\n          hash += (hash * 397) ^ Utils.getHashCode(JSON.stringify(e.stack_trace));\n        }\n        e = e.inner;\n      }\n\n      return hash;\n    }\n\n    const error = context.event.data['@error'];\n    const hashCode = getHashCode(error);\n    if (hashCode) {\n      const count = context.event.count || 1;\n      const now = this._getCurrentTime();\n\n      const merged = this._mergedEvents.filter((s) => s.hashCode === hashCode)[0];\n      if (merged) {\n        merged.incrementCount(count);\n        merged.updateDate(context.event.date);\n        context.log.info('Ignoring duplicate event with hash: ' + hashCode);\n        context.cancelled = true;\n      }\n\n      if (!context.cancelled && this._processedHashcodes.some((h) => h.hash === hashCode && h.timestamp >= (now - this._interval))) {\n        context.log.trace('Adding event with hash: ' + hashCode);\n        this._mergedEvents.push(new MergedEvent(hashCode, context, count));\n        context.cancelled = true;\n      }\n\n      if (!context.cancelled) {\n        context.log.trace('Enqueueing event with hash: ' + hashCode + 'to cache.');\n        this._processedHashcodes.push({ hash: hashCode, timestamp: now });\n\n        // Only keep the last 50 recent errors.\n        while (this._processedHashcodes.length > 50) {\n          this._processedHashcodes.shift();\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\ninterface TimestampedHash {\n  hash: number;\n  timestamp: number;\n}\n\nclass MergedEvent {\n  public hashCode: number;\n  private _count: number;\n  private _context: EventPluginContext;\n\n  constructor(hashCode: number, context: EventPluginContext, count: number) {\n    this.hashCode = hashCode;\n    this._context = context;\n    this._count = count;\n  }\n\n  public incrementCount(count: number) {\n    this._count += count;\n  }\n\n  public resubmit() {\n    this._context.event.count = this._count;\n    this._context.client.config.queue.enqueue(this._context.event);\n  }\n\n  public updateDate(date) {\n    if (date > this._context.event.date) {\n      this._context.event.date = date;\n    }\n  }\n}\n\n                                                                                                                                                                             \n\nexport class EnvironmentInfoPlugin implements IEventPlugin {\n  public priority: number = 80;\n  public name: string = 'EnvironmentInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ENVIRONMENT_KEY: string = '@environment'; // optimization for minifier.\n\n    const collector = context.client.config.environmentInfoCollector;\n    if (!context.event.data[ENVIRONMENT_KEY] && collector) {\n      const environmentInfo: IEnvironmentInfo = collector.getEnvironmentInfo(context);\n      if (!!environmentInfo) {\n        context.event.data[ENVIRONMENT_KEY] = environmentInfo;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                \n\nexport class ErrorPlugin implements IEventPlugin {\n  public priority: number = 30;\n  public name: string = 'ErrorPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\n    const ignoredProperties: string[] = [\n      'arguments',\n      'column',\n      'columnNumber',\n      'description',\n      'fileName',\n      'message',\n      'name',\n      'number',\n      'line',\n      'lineNumber',\n      'opera#sourceloc',\n      'sourceId',\n      'sourceURL',\n      'stack',\n      'stackArray',\n      'stacktrace'\n    ];\n\n    const exception = context.contextData.getException();\n    if (!!exception) {\n      context.event.type = 'error';\n\n      if (!context.event.data[ERROR_KEY]) {\n        const config = context.client.config;\n        const parser = config.errorParser;\n        if (!parser) {\n          throw new Error('No error parser was defined.');\n        }\n\n        const result = parser.parse(context, exception);\n        if (!!result) {\n          const additionalData = JSON.parse(Utils.stringify(exception, config.dataExclusions.concat(ignoredProperties)));\n          if (!Utils.isEmpty(additionalData)) {\n            if (!result.data) {\n              result.data = {};\n            }\n            result.data['@ext'] = additionalData;\n          }\n\n          context.event.data[ERROR_KEY] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                        \n\nexport class EventExclusionPlugin implements IEventPlugin {\n  public priority: number = 45;\n  public name: string = 'EventExclusionPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    function getLogLevel(level: string): number {\n      switch ((level || '').toLowerCase().trim()) {\n        case 'trace':\n        case 'true':\n        case '1':\n        case 'yes':\n          return 0;\n        case 'debug':\n          return 1;\n        case 'info':\n          return 2;\n        case 'warn':\n          return 3;\n        case 'error':\n          return 4;\n        case 'fatal':\n          return 5;\n        case 'off':\n        case 'false':\n        case '0':\n        case 'no':\n          return 6;\n        default:\n          return -1;\n      }\n    }\n\n    function getMinLogLevel(configSettings: object, loggerName: string = '*'): number {\n      return getLogLevel(getTypeAndSourceSetting(configSettings, 'log', loggerName, 'Trace') + '');\n    }\n\n    // tslint:disable-next-line:ban-types\n    function getTypeAndSourceSetting(configSettings: Object = {}, type: string, source: string, defaultValue?: string | boolean): string | boolean {\n      if (!type) {\n        return defaultValue;\n      }\n\n      const isLog = type === 'log';\n      const sourcePrefix = `@@${type}:`;\n\n      const value = configSettings[sourcePrefix + source];\n      if (value) {\n        return !isLog ? Utils.toBoolean(value) : value;\n      }\n\n      // check for wildcard match\n      for (const key in configSettings) {\n        if (Utils.startsWith(key.toLowerCase(), sourcePrefix.toLowerCase()) && Utils.isMatch(source, [key.substring(sourcePrefix.length)])) {\n          return !isLog ? Utils.toBoolean(configSettings[key]) : configSettings[key];\n        }\n      }\n\n      return defaultValue;\n    }\n\n    const ev = context.event;\n    const log = context.log;\n    const settings = context.client.config.settings;\n\n    if (ev.type === 'log') {\n      const minLogLevel = getMinLogLevel(settings, ev.source);\n      const logLevel = getLogLevel(ev.data['@level']);\n\n      if (logLevel >= 0 && (logLevel > 5 || logLevel < minLogLevel)) {\n        log.info('Cancelling log event due to minimum log level.');\n        context.cancelled = true;\n      }\n    } else if (ev.type === 'error') {\n      let error: IInnerError = ev.data['@error'];\n      while (!context.cancelled && error) {\n        if (getTypeAndSourceSetting(settings, ev.type, error.type, true) === false) {\n          log.info(`Cancelling error from excluded exception type: ${error.type}`);\n          context.cancelled = true;\n        }\n\n        error = error.inner;\n      }\n    } else if (getTypeAndSourceSetting(settings, ev.type, ev.source, true) === false) {\n      log.info(`Cancelling event from excluded type: ${ev.type} and source: ${ev.source}`);\n      context.cancelled = true;\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                           \n\nexport class ModuleInfoPlugin implements IEventPlugin {\n  public priority: number = 50;\n  public name: string = 'ModuleInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\n\n    const collector = context.client.config.moduleCollector;\n    if (context.event.data[ERROR_KEY] && !context.event.data['@error'].modules && !!collector) {\n      const modules: IModule[] = collector.getModules(context);\n      if (modules && modules.length > 0) {\n        context.event.data[ERROR_KEY].modules = modules;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                          \n\nexport class RequestInfoPlugin implements IEventPlugin {\n  public priority: number = 70;\n  public name: string = 'RequestInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const REQUEST_KEY: string = '@request'; // optimization for minifier.\n\n    const config = context.client.config;\n    const collector = config.requestInfoCollector;\n    if (!context.event.data[REQUEST_KEY] && !!collector) {\n      const requestInfo: IRequestInfo = collector.getRequestInfo(context);\n      if (!!requestInfo) {\n        if (Utils.isMatch(requestInfo.user_agent, config.userAgentBotPatterns)) {\n          context.log.info('Cancelling event as the request user agent matches a known bot pattern');\n          context.cancelled = true;\n        } else {\n          context.event.data[REQUEST_KEY] = requestInfo;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                           \n\nexport class SubmissionMethodPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = 'SubmissionMethodPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const submissionMethod: string = context.contextData.getSubmissionMethod();\n    if (!!submissionMethod) {\n      context.event.data['@submission_method'] = submissionMethod;\n    }\n\n    next && next();\n  }\n}\n\n                                                                                     \n\nexport class InMemoryStorage implements IStorage {\n  private maxItems: number;\n  private items: IStorageItem[] = [];\n  private lastTimestamp: number = 0;\n\n  constructor(maxItems: number) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any): number {\n    if (!value) {\n      return null;\n    }\n\n    const items = this.items;\n    const timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    const item = { timestamp, value };\n\n    if (items.push(item) > this.maxItems) {\n      items.shift();\n    }\n\n    this.lastTimestamp = timestamp;\n    return item.timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    return this.items.slice(0, limit);\n  }\n\n  public remove(timestamp: number): void {\n    const items = this.items;\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].timestamp === timestamp) {\n        items.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  public clear(): void {\n    this.items = [];\n  }\n}\n\nexport interface IClientConfiguration {\n  settings: object;\n  version: number;\n}\n\n                                                                                     \n\nexport abstract class KeyValueStorageBase implements IStorage {\n  private maxItems: number;\n  private items: number[];\n  private lastTimestamp: number = 0;\n\n  constructor(maxItems) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any, single?: boolean): number {\n    if (!value) {\n      return null;\n    }\n\n    this.ensureIndex();\n\n    const items = this.items;\n    const timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    const key = this.getKey(timestamp);\n    const json = JSON.stringify(value);\n\n    try {\n      this.write(key, json);\n      this.lastTimestamp = timestamp;\n      if (items.push(timestamp) > this.maxItems) {\n        this.delete(this.getKey(items.shift()));\n      }\n    } catch (e) {\n      return null;\n    }\n\n    return timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    this.ensureIndex();\n\n    return this.items.slice(0, limit)\n      .map((timestamp) => {\n        // Read and parse item for this timestamp\n        const key = this.getKey(timestamp);\n        try {\n          const json = this.read(key);\n          const value = JSON.parse(json, parseDate);\n          return { timestamp, value };\n        } catch (error) {\n          // Something went wrong - try to delete the cause.\n          this.safeDelete(key);\n          return null;\n        }\n      })\n      .filter((item) => item != null);\n  }\n\n  public remove(timestamp: number): void {\n    this.ensureIndex();\n\n    const items = this.items;\n    const index = items.indexOf(timestamp);\n    if (index >= 0) {\n      const key = this.getKey(timestamp);\n      this.safeDelete(key);\n      items.splice(index, 1);\n    }\n  }\n\n  public clear(): void {\n    this.items.forEach((item) => this.safeDelete(this.getKey(item)));\n    this.items = [];\n  }\n\n  protected abstract write(key: string, value: string): void;\n  protected abstract read(key: string): string;\n  protected abstract readAllKeys(): string[];\n  protected abstract delete(key: string);\n  protected abstract getKey(timestamp: number): string;\n  protected abstract getTimestamp(key: string): number;\n\n  private ensureIndex() {\n    if (!this.items) {\n      this.items = this.createIndex();\n      this.lastTimestamp = Math.max(0, ...this.items) + 1;\n    }\n  }\n\n  private safeDelete(key: string): void {\n    try {\n      this.delete(key);\n    } catch (error) {\n    }\n  }\n\n  private createIndex() {\n    try {\n      const keys = this.readAllKeys();\n      return keys.map((key) => {\n        try {\n          const timestamp = this.getTimestamp(key);\n          if (!timestamp) {\n            this.safeDelete(key);\n            return null;\n          }\n          return timestamp;\n        } catch (error) {\n          this.safeDelete(key);\n          return null;\n        }\n      }).filter((timestamp) => timestamp != null)\n        .sort((a, b) => a - b);\n    } catch (error) {\n      return [];\n    }\n  }\n}\n\nfunction parseDate(key, value) {\n  const dateRegx = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/g;\n  if (typeof value === 'string') {\n    const a = dateRegx.exec(value);\n    if (a) {\n      return new Date(value);\n    }\n  }\n  return value;\n}\n\n                                                            \n\nexport class BrowserStorage extends KeyValueStorageBase {\n  private prefix: string;\n\n  public static isAvailable(): boolean {\n    try {\n      const storage = window.localStorage;\n      const x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  constructor(namespace: string, prefix: string = 'com.exceptionless.', maxItems: number = 20) {\n    super(maxItems);\n\n    this.prefix = prefix + namespace + '-';\n  }\n\n  public write(key: string, value: string) {\n    window.localStorage.setItem(key, value);\n  }\n\n  public read(key: string) {\n    return window.localStorage.getItem(key);\n  }\n\n  public readAllKeys() {\n    return Object.keys(window.localStorage)\n      .filter((key) => key.indexOf(this.prefix) === 0);\n  }\n\n  public delete(key: string) {\n    window.localStorage.removeItem(key);\n  }\n\n  public getKey(timestamp) {\n    return this.prefix + timestamp;\n  }\n\n  public getTimestamp(key) {\n    return parseInt(key.substr(this.prefix.length), 10);\n  }\n}\n\n                                                                                                                                                                                                                                                                                                           \n\nexport class DefaultErrorParser implements IErrorParser {\n  public parse(context: EventPluginContext, exception: Error): IError {\n    function getParameters(parameters: string | string[]): IParameter[] {\n      const params: string[] = (typeof parameters === 'string' ? [parameters] : parameters) || [];\n\n      const result: IParameter[] = [];\n      for (const param of params) {\n        result.push({ name: param });\n      }\n\n      return result;\n    }\n\n    function getStackFrames(stackFrames: TraceKit.StackFrame[]): IStackFrame[] {\n      const ANONYMOUS: string = '<anonymous>';\n      const frames: IStackFrame[] = [];\n\n      for (const frame of stackFrames) {\n        frames.push({\n          name: (frame.func || ANONYMOUS).replace('?', ANONYMOUS),\n          parameters: getParameters(frame.args),\n          file_name: frame.url,\n          line_number: frame.line || 0,\n          column: frame.column || 0\n        });\n      }\n\n      return frames;\n    }\n\n    const TRACEKIT_STACK_TRACE_KEY: string = '@@_TraceKit.StackTrace'; // optimization for minifier.\n\n    const stackTrace: TraceKit.StackTrace = !!context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      ? context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      : TraceKit.computeStackTrace(exception, 25);\n\n    if (!stackTrace) {\n      throw new Error('Unable to parse the exceptions stack trace.');\n    }\n\n    const message = typeof (exception) === 'string' ? exception as any : undefined;\n    return {\n      type: stackTrace.name || 'Error',\n      message: stackTrace.message || exception.message || message,\n      stack_trace: getStackFrames(stackTrace.stack || [])\n    };\n  }\n}\n\n                                                                                                                                                                                                         \n\nexport class DefaultModuleCollector implements IModuleCollector {\n  public getModules(context: EventPluginContext): IModule[] {\n    if (!document || !document.getElementsByTagName) {\n      return null;\n    }\n\n    const modules: IModule[] = [];\n    const scripts: NodeListOf<HTMLScriptElement> = document.getElementsByTagName('script');\n    if (scripts && scripts.length > 0) {\n      for (let index = 0; index < scripts.length; index++) {\n        if (scripts[index].src) {\n          modules.push({\n            module_id: index,\n            name: scripts[index].src.split('?')[0],\n            version: Utils.parseVersion(scripts[index].src)\n          });\n        } else if (!!scripts[index].innerHTML) {\n          modules.push({\n            module_id: index,\n            name: 'Script Tag',\n            version: Utils.getHashCode(scripts[index].innerHTML).toString()\n          });\n        }\n      }\n    }\n\n    return modules;\n  }\n}\n\n                                                                                                                                                                                                                             \n\nexport class DefaultRequestInfoCollector implements IRequestInfoCollector {\n  public getRequestInfo(context: EventPluginContext): IRequestInfo {\n    if (!document || !navigator || !location) {\n      return null;\n    }\n\n    const config = context.client.config;\n    const exclusions = config.dataExclusions;\n    const requestInfo: IRequestInfo = {\n      user_agent: navigator.userAgent,\n      is_secure: location.protocol === 'https:',\n      host: location.hostname,\n      port: location.port && location.port !== '' ? parseInt(location.port, 10) : 80,\n      path: location.pathname\n      // client_ip_address: 'TODO'\n    };\n\n    if (config.includeCookies) {\n      requestInfo.cookies = Utils.getCookies(document.cookie, exclusions);\n    }\n\n    if (config.includeQueryString) {\n      requestInfo.query_string = Utils.parseQueryString(location.search.substring(1), exclusions);\n    }\n\n    if (document.referrer && document.referrer !== '') {\n      requestInfo.referrer = document.referrer;\n    }\n\n    return requestInfo;\n  }\n}\n\n                                                                                                                                                \n\nexport class BrowserStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(prefix?: string, maxQueueItems: number = 250) {\n    this.queue = new BrowserStorage('q', prefix, maxQueueItems);\n    this.settings = new BrowserStorage('settings', prefix, 1);\n  }\n\n}\n\n                                                                                                                                                                              \n\n// tslint:disable-next-line:prefer-const\ndeclare var XDomainRequest: { new(); create(); };\n\nexport class DefaultSubmissionAdapter implements ISubmissionAdapter {\n  public sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean) {\n    // TODO: Handle sending events when app is exiting with send beacon.\n    const TIMEOUT: string = 'timeout';  // optimization for minifier.\n    const LOADED: string = 'loaded';  // optimization for minifier.\n    const WITH_CREDENTIALS: string = 'withCredentials';  // optimization for minifier.\n\n    let isCompleted: boolean = false;\n    let useSetTimeout: boolean = false;\n    function complete(mode: string, xhrRequest: XMLHttpRequest) {\n      function parseResponseHeaders(headerStr) {\n        function trim(value) {\n          return value.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n        }\n\n        const headers = {};\n        const headerPairs = (headerStr || '').split('\\u000d\\u000a');\n        for (const headerPair of headerPairs) {\n          // Can't use split() here because it does the wrong thing\n          // if the header value has the string \": \" in it.\n          const separator = headerPair.indexOf('\\u003a\\u0020');\n          if (separator > 0) {\n            headers[trim(headerPair.substring(0, separator).toLowerCase())] = headerPair.substring(separator + 2);\n          }\n        }\n\n        return headers;\n      }\n\n      if (isCompleted) {\n        return;\n      }\n\n      isCompleted = true;\n\n      let message: string = xhrRequest.statusText;\n      const responseText: string = xhrRequest.responseText;\n      let status: number = xhrRequest.status;\n\n      if (mode === TIMEOUT || status === 0) {\n        message = 'Unable to connect to server.';\n        status = 0;\n      } else if (mode === LOADED && !status) {\n        status = request.method === 'POST' ? 202 : 200;\n      } else if (status < 200 || status > 299) {\n        const responseBody: any = (xhrRequest as any).responseBody;\n        if (!!responseBody && !!responseBody.message) {\n          message = responseBody.message;\n        } else if (!!responseText && responseText.indexOf('message') !== -1) {\n          try {\n            message = JSON.parse(responseText).message;\n          } catch (e) {\n            message = responseText;\n          }\n        }\n      }\n\n      callback && callback(status || 500, message || '', responseText, parseResponseHeaders(xhrRequest.getAllResponseHeaders && xhrRequest.getAllResponseHeaders()));\n    }\n\n    function createRequest(userAgent: string, method: string, uri: string): XMLHttpRequest {\n      let xmlRequest: any = new XMLHttpRequest();\n      if (WITH_CREDENTIALS in xmlRequest) {\n        xmlRequest.open(method, uri, true);\n\n        xmlRequest.setRequestHeader('X-Exceptionless-Client', userAgent);\n        if (method === 'POST') {\n          xmlRequest.setRequestHeader('Content-Type', 'application/json');\n        }\n      } else if (typeof XDomainRequest !== 'undefined') {\n        useSetTimeout = true;\n        xmlRequest = new XDomainRequest();\n        xmlRequest.open(method, location.protocol === 'http:' ? uri.replace('https:', 'http:') : uri);\n      } else {\n        xmlRequest = null;\n      }\n\n      if (xmlRequest) {\n        xmlRequest.timeout = 10000;\n      }\n\n      return xmlRequest;\n    }\n\n    const url = `${request.url}${(request.url.indexOf('?') === -1 ? '?' : '&')}access_token=${encodeURIComponent(request.apiKey)}`;\n    const xhr = createRequest(request.userAgent, request.method || 'POST', url);\n    if (!xhr) {\n      return (callback && callback(503, 'CORS not supported.'));\n    }\n\n    if (WITH_CREDENTIALS in xhr) {\n      xhr.onreadystatechange = () => {\n        // xhr not ready.\n        if (xhr.readyState !== 4) {\n          return;\n        }\n\n        complete(LOADED, xhr);\n      };\n    }\n\n    xhr.onprogress = () => { };\n    xhr.ontimeout = () => complete(TIMEOUT, xhr);\n    xhr.onerror = () => complete('error', xhr);\n    xhr.onload = () => complete(LOADED, xhr);\n\n    if (useSetTimeout) {\n      setTimeout(() => xhr.send(request.data), 500);\n    } else {\n      xhr.send(request.data);\n    }\n  }\n}\n\nn\n(function init() {\n  function getDefaultsSettingsFromScriptTag(): IConfigurationSettings {\n    if (!document || !document.getElementsByTagName) {\n      return null;\n    }\n\n    const scripts = document.getElementsByTagName('script');\n    // tslint:disable-next-line:prefer-for-of\n    for (let index = 0; index < scripts.length; index++) {\n      if (scripts[index].src && scripts[index].src.indexOf('/exceptionless') > -1) {\n        return Utils.parseQueryString(scripts[index].src.split('?').pop());\n      }\n    }\n    return null;\n  }\n\n  function processUnhandledException(stackTrace: TraceKit.StackTrace, options?: any): void {\n    const builder = ExceptionlessClient.default.createUnhandledException(new Error(stackTrace.message || (options || {}).status || 'Script error'), 'onerror');\n    builder.pluginContextData['@@_TraceKit.StackTrace'] = stackTrace;\n    builder.submit();\n  }\n\n  if (typeof document === 'undefined') {\n    return;\n  }\n\n  /*\n   TODO: We currently are unable to parse string exceptions.\n   function processJQueryAjaxError(event, xhr, settings, error:string): void {\n   let client = ExceptionlessClient.default;\n   if (xhr.status === 404) {\n   client.submitNotFound(settings.url);\n   } else if (xhr.status !== 401) {\n   client.createUnhandledException(error, 'JQuery.ajaxError')\n   .setSource(settings.url)\n   .setProperty('status', xhr.status)\n   .setProperty('request', settings.data)\n   .setProperty('response', xhr.responseText && xhr.responseText.slice && xhr.responseText.slice(0, 1024))\n   .submit();\n   }\n   }\n   */\n\n  Configuration.prototype.useLocalStorage = function() {\n    if (BrowserStorage.isAvailable()) {\n      this.storage = new BrowserStorageProvider();\n      SettingsManager.applySavedServerSettings(this);\n      this.changed();\n    }\n  };\n\n  const defaults = Configuration.defaults;\n  const settings = getDefaultsSettingsFromScriptTag();\n  if (settings) {\n    if (settings.apiKey) {\n      defaults.apiKey = settings.apiKey;\n    }\n\n    if (settings.serverUrl) {\n      defaults.serverUrl = settings.serverUrl;\n    }\n\n    if (typeof settings.includePrivateInformation === 'string') {\n      defaults.includePrivateInformation = settings.includePrivateInformation === 'false' ? false : true;\n    }\n  }\n\n  defaults.errorParser = new DefaultErrorParser();\n  defaults.moduleCollector = new DefaultModuleCollector();\n  defaults.requestInfoCollector = new DefaultRequestInfoCollector();\n  defaults.submissionAdapter = new DefaultSubmissionAdapter();\n\n  TraceKit.report.subscribe(processUnhandledException);\n  TraceKit.extendToAsynchronousCallbacks();\n\n  // window && window.addEventListener && window.addEventListener('beforeunload', function () {\n  //   ExceptionlessClient.default.config.queue.process(true);\n  // });\n\n  // if (typeof $ !== 'undefined' && $(document)) {\n  //   $(document).ajaxError(processJQueryAjaxError);\n  // }\n\n  (Error as any).stackTraceLimit = Infinity;\n})();\n\n// tslint:disable-next-line:prefer-const\ndeclare var $;\n\n"]}