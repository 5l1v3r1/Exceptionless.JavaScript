{"version":3,"sources":["tracekit.js","exceptionless.min.js","/source/exceptionless.ts"],"names":["window","undefined","_has","object","key","Object","prototype","hasOwnProperty","call","_isUndefined","what","TraceKit","_oldTraceKit","_slice","slice","UNKNOWN_FUNCTION","noConflict","wrap","func","wrapped","apply","this","arguments","e","report","subscribe","handler","installGlobalHandler","handlers","push","unsubscribe","i","length","splice","notifyHandlers","stack","isWindowError","exception","collectWindowErrors","concat","inner","traceKitWindowOnError","message","url","lineNo","columnNo","errorObj","lastExceptionStack","computeStackTrace","augmentStackTraceWithInitialElement","processLastException","location","line","column","guessFunctionName","context","gatherContext","mode","_oldOnerrorHandler","_onErrorHandlerInstalled","onerror","_lastExceptionStack","_lastArgs","lastArgs","lastException","ex","setTimeout","incomplete","loadSource","remoteFetching","getXHR","XMLHttpRequest","ActiveXObject","request","open","send","responseText","getSource","sourceCache","source","domain","document","indexOf","split","m","reFunctionArgNames","reGuessFunction","maxLines","exec","linesBefore","Math","floor","linesOfContext","linesAfter","start","max","end","min","escapeRegExp","text","replace","escapeCodeAsRegExpForMatchingInsideHTML","body","findSourceInUrls","re","urls","j","join","substring","index","lastIndexOf","findSourceInLine","fragment","RegExp","findSourceByFunctionBody","parts","result","href","scripts","getElementsByTagName","code","codeRE","eventRE","script","src","name","args","event","computeStackTraceFromStackProp","element","chrome","gecko","winjs","lines","reference","isNative","columnNumber","computeStackTraceFromStacktraceProp","stacktrace","opera10Regex","opera11Regex","exc","computeStackTraceFromOperaMultiLineMessage","lineRE1","lineRE2","lineRE3","inlineScriptBlocks","s","item","relativeLine","pos","innerText","midline","stackInfo","initial","unshift","partial","computeStackTraceByWalkingCallerChain","depth","functionName","funcs","recursion","curr","caller","toString","input","description","sourceURL","fileName","lineNumber","debug","computeStackTraceOfCaller","Error","ofCaller","extendToAsynchronousCallbacks","_helper","fnName","originalFn","originalCallback","global","root","factory","define","amd","exports","module","require","SettingsManager.constructor","SettingsManager.onChanged","BrowserStorage.constructor","BrowserStorage","BrowserStorage.isAvailable","value","processUnhandledException","Utils","parseQueryString","pop","stackTrace","options","builder","ExceptionlessClient","createUnhandledException","status","pluginContextData","submit","SettingsManager","__extends","SettingsManager.applySavedServerSettings","d","SettingsManager.checkVersion","DefaultLastReferenceIdManager.setLast","SettingsManager.updateSettings","_this","config","SettingsManager.changed","SettingsManager.getSavedServerSettings","changed","_handlers","DefaultLastReferenceIdManager","DefaultLastReferenceIdManager.getLast","DefaultLastReferenceIdManager.clearLast","ConsoleLog","ConsoleLog.info","ConsoleLog.warn","ConsoleLog.error","ConsoleLog.log","info","log","NullLog","NullLog.constructor","level","console","EventPluginContext.constructor","EventPluginContext","EventPluginContext.log","warn","error","client","contextData","EventPluginManager","EventPluginManager.constructor","defineProperty","get","enumerable","configurable","run","callback","EventPluginManager.run","EventPluginManager.addDefaultPlugins","plugins","wrappedPlugins","HeartbeatPlugin","HeartbeatPlugin.constructor","HeartbeatPlugin.run","addPlugin","clearHeartbeatInterval","_heartbeatIntervalId","clearInterval","type","user","identity","submitHeartbeatFn","createSessionHeartbeat","setUserIdentity","ReferenceIdPlugin.constructor","ReferenceIdPlugin","ReferenceIdPlugin.run","DefaultEventQueue","DefaultEventQueue.constructor","DefaultEventQueue.enqueue","next","DefaultSubmissionClient.constructor","DefaultEventQueue.process","DefaultEventQueue.suspendProcessing","DefaultEventQueue.areQueuedItemsDiscarded","DefaultEventQueue.ensureQueueTimer","DefaultEventQueue.isQueueProcessingSuspended","DefaultEventQueue.onProcessQueue","DefaultEventQueue.processSubmissionResponse","response","DefaultEventQueue.removeEvents","removeEvents","events","InMemoryStorageProvider.constructor","_config","storage","queue","remove","timestamp","DefaultSubmissionClient.postEvents","InMemoryStorageProvider","DefaultSubmissionClient","DefaultSubmissionClient.postUserDescription","DefaultSubmissionClient.getSettings","DefaultSubmissionClient.createRequest","DefaultSubmissionClient.createSubmissionCallback","data","serverUrl","apiKey","Utils.addRange","settingsVersion","headers","parseInt","configurationVersionHeader","Utils.getHashCode","Utils.getCookies","Utils.guid.s4","Utils.guid","Utils.merge","guid","Utils.parseVersion","Utils.parseQueryString","Utils.randomNumber","Utils.isMatch","randomNumber","isMatch","Utils.isEmpty","Utils.stringify.stringifyImpl","pattern","endsWithWildcard","isEmpty","keys","Utils.stringify","flattened","prop","Configuration","Configuration.constructor","Configuration.apiKey","submissionAdapter","inject","configSettings","submissionClient","Configuration.isValid","EventBuilder.setType","set","Configuration.serverUrl","Configuration.dataExclusions","Configuration.addDataExclusions","Configuration.userAgentBotPatterns","Configuration.addUserAgentBotPatterns","Configuration.plugins","Configuration.addPlugin","plugin","Configuration.removePlugin","Configuration.setVersion","Configuration.setUserIdentity","Configuration.userAgent","USER_KEY","userInfo","userInfoOrIdentity","Configuration.useSessions","Configuration.useReferenceIds","Configuration.useLocalStorage","Configuration.useDebugLogger","Configuration.defaults","sendHeartbeats","useReferenceIds","useDebugLogger","EventBuilder","EventBuilder.constructor","EventBuilder.setSource","EventBuilder.setReferenceId","EventBuilder.setEventReference","EventBuilder.setMessage","EventBuilder.setGeo","EventBuilder.setUserIdentity","EventBuilder.setUserDescription","EventBuilder.setManualStackingKey","EventBuilder.setValue","EventBuilder.addTags","manualStackingKey","EventBuilder.setProperty","EventBuilder.markAsCritical","EventBuilder.addRequestInfo","EventBuilder.submit","EventBuilder.isValidIdentifier","ContextData","ContextData.constructor","ContextData.setException","ContextData.hasException","ContextData.getException","ContextData.markAsUnhandledError","ContextData.isUnhandledError","ContextData.setSubmissionMethod","ContextData.getSubmissionMethod","SubmissionResponse","SubmissionResponse.constructor","paymentRequired","unableToAuthenticate","notFound","ExceptionlessClient.constructor","ExceptionlessClient.createException","ExceptionlessClient.submitException","ExceptionlessClient.createUnhandledException","ExceptionlessClient.submitUnhandledException","ExceptionlessClient.createFeatureUsage","ExceptionlessClient.submitFeatureUsage","ExceptionlessClient.createLog","ExceptionlessClient.submitLog","ExceptionlessClient.createNotFound","ExceptionlessClient.submitNotFound","ExceptionlessClient.createSessionStart","ExceptionlessClient.submitSessionStart","ExceptionlessClient.createSessionEnd","ExceptionlessClient.submitSessionEnd","ExceptionlessClient.createSessionHeartbeat","ExceptionlessClient.submitSessionHeartbeat","ExceptionlessClient.createEvent","ExceptionlessClient.submitEvent","ExceptionlessClient.submitEvent.cancelled","enabled","tags","ctx","ev","ExceptionlessClient.updateUserEmailAndDescription","cancelled","ExceptionlessClient.getLastReferenceId","ExceptionlessClient.default","referenceId","statusCode","getLastReferenceId","lastReferenceIdManager","getLast","ConfigurationDefaultsPlugin","ConfigurationDefaultsPlugin.constructor","ConfigurationDefaultsPlugin.run","priority","tag","ErrorPlugin","ErrorPlugin.constructor","ErrorPlugin.run","additionalData","JSON","parse","stringify","dataExclusions","ignoredProperties","ModuleInfoPlugin","ModuleInfoPlugin.constructor","ModuleInfoPlugin.run","RequestInfoPlugin","RequestInfoPlugin.constructor","RequestInfoPlugin.run","REQUEST_KEY","collector","requestInfo","getRequestInfo","EnvironmentInfoPlugin","EnvironmentInfoPlugin.constructor","EnvironmentInfoPlugin.run","SubmissionMethodPlugin","SubmissionMethodPlugin.constructor","SubmissionMethodPlugin.run","DuplicateCheckerPlugin.constructor","DuplicateCheckerPlugin.run","ERROR_KEY","WINDOW_MILLISECONDS","MAX_QUEUE_LENGTH","DuplicateCheckerPlugin","DuplicateCheckerPlugin.getNow","SettingsResponse.constructor","DuplicateCheckerPlugin.checkDuplicate","DuplicateCheckerPlugin.checkDuplicate.getHashCodeForError","Date","now","hashCode","recentlyProcessedErrors","some","h","hash","repeatWindow","SettingsResponse","success","settings","InMemoryStorage","InMemoryStorage.constructor","InMemoryStorage.save","InMemoryStorage.get","InMemoryStorage.remove","InMemoryStorage.clear","items","limit","KeyValueStorageBase.constructor","KeyValueStorageBase","KeyValueStorageBase.save","maxItems","KeyValueStorageBase.get","KeyValueStorageBase.remove","KeyValueStorageBase.clear","KeyValueStorageBase.ensureIndex","KeyValueStorageBase.safeDelete","KeyValueStorageBase.createIndex","getTimestamp","parseDate","BrowserStorage.write","BrowserStorage.read","BrowserStorage.readAllKeys","BrowserStorage.delete","BrowserStorage.getKey","BrowserStorage.getTimestamp","readAllKeys","localStorage","DefaultErrorParser","DefaultErrorParser.parse","DefaultErrorParser.parse.getParameters","DefaultErrorParser.parse.getStackFrames","getParameters","params","TRACEKIT_STACK_TRACE_KEY","DefaultModuleCollector","DefaultModuleCollector.constructor","DefaultModuleCollector.getModules","modules","version","parseVersion","DefaultRequestInfoCollector","DefaultRequestInfoCollector.constructor","DefaultRequestInfoCollector.getRequestInfo","user_agent","navigator","userAgent","is_secure","protocol","DefaultSubmissionAdapter","DefaultSubmissionAdapter.constructor","DefaultSubmissionAdapter.sendRequest","DefaultSubmissionAdapter.sendRequest.complete","DefaultSubmissionAdapter.sendRequest.complete.parseResponseHeaders","getDefaultsSettingsFromScriptTag","isCompleted","DefaultSubmissionAdapter.sendRequest.createRequest","xhr","TIMEOUT","LOADED","WITH_CREDENTIALS","useSetTimeout","complete","BrowserStorageProvider","BrowserStorageProvider.constructor","useLocalStorage","isAvailable","applySavedServerSettings","defaults","errorParser","moduleCollector","requestInfoCollector","stackTraceLimit","Infinity"],"mappings":"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","file":"exceptionless.min.js","sourcesContent":["/*\n TraceKit - Cross browser stack traces - github.com/csnover/TraceKit\n MIT license\n*/\n\n(function(window, undefined) {\nif (!window) {\n    return;\n}\n\nvar TraceKit = {};\nvar _oldTraceKit = window.TraceKit;\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n\n/**\n * _has, a better form of hasOwnProperty\n * Example: _has(MainHostObject, property) === true/false\n *\n * @param {Object} object to check property\n * @param {string} key to check\n */\nfunction _has(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\n\nfunction _isUndefined(what) {\n    return typeof what === 'undefined';\n}\n\n/**\n * TraceKit.noConflict: Export TraceKit out to another variable\n * Example: var TK = TraceKit.noConflict()\n */\nTraceKit.noConflict = function noConflict() {\n    window.TraceKit = _oldTraceKit;\n    return TraceKit;\n};\n\n/**\n * TraceKit.wrap: Wrap any function in a TraceKit reporter\n * Example: func = TraceKit.wrap(func);\n *\n * @param {Function} func Function to be wrapped\n * @return {Function} The wrapped func\n */\nTraceKit.wrap = function traceKitWrapper(func) {\n    function wrapped() {\n        try {\n            return func.apply(this, arguments);\n        } catch (e) {\n            TraceKit.report(e);\n            throw e;\n        }\n    }\n    return wrapped;\n};\n\n/**\n * TraceKit.report: cross-browser processing of unhandled exceptions\n *\n * Syntax:\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *              on top frame; column number is not guaranteed\n *   - Opera:   full stack trace with line and column numbers\n *   - Chrome:  full stack trace with line and column numbers\n *   - Safari:  line and column number for the top frame only; some frames\n *              may be missing, and column number is not guaranteed\n *   - IE:      line and column number for the top frame only; some frames\n *              may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a stackInfo object as described in the\n * TraceKit.computeStackTrace docs.\n */\nTraceKit.report = (function reportModuleWrapper() {\n    var handlers = [],\n        lastArgs = null,\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {Object.<string, *>} stack\n     */\n    function notifyHandlers(stack, isWindowError) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n          return;\n        }\n        for (var i in handlers) {\n            if (_has(handlers, i)) {\n                try {\n                    handlers[i].apply(null, [stack].concat(_slice.call(arguments, 2)));\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error\n     * occurred.\n     * @param {?(number|string)} columnNo The column number at which the error\n     * occurred.\n     * @param {?Error} errorObj The actual Error object.\n     */\n    function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {\n        var stack = null;\n\n        if (lastExceptionStack) {\n            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n    \t    processLastException();\n\t    } else if (errorObj) {\n            stack = TraceKit.computeStackTrace(errorObj);\n            notifyHandlers(stack, true);\n        } else {\n            var location = {\n              'url': url,\n              'line': lineNo,\n              'column': columnNo\n            };\n            location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);\n            location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);\n            stack = {\n              'mode': 'onerror',\n              'message': message,\n              'stack': [location]\n            };\n\n            notifyHandlers(stack, true);\n        }\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    function installGlobalHandler () {\n        if (_onErrorHandlerInstalled === true) {\n            return;\n        }\n        _oldOnerrorHandler = window.onerror;\n        window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    function processLastException() {\n        var _lastExceptionStack = lastExceptionStack,\n            _lastArgs = lastArgs;\n        lastArgs = null;\n        lastExceptionStack = null;\n        lastException = null;\n        notifyHandlers.apply(null, [_lastExceptionStack, false].concat(_lastArgs));\n    }\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     */\n    function report(ex) {\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n              processLastException();\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n        lastArgs = _slice.call(arguments, 1);\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        window.setTimeout(function () {\n            if (lastException === ex) {\n                processLastException();\n            }\n        }, (stack.incomplete ? 2000 : 0));\n\n        throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    return report;\n}());\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   s = TraceKit.computeStackTrace.ofCaller([depth])\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n * Returns:\n *   s.name              - exception name\n *   s.message           - exception message\n *   s.stack[i].url      - JavaScript or HTML file URL\n *   s.stack[i].func     - function name, or empty for anonymous functions (if guessing did not work)\n *   s.stack[i].args     - arguments passed to the function, if known\n *   s.stack[i].line     - line number, if known\n *   s.stack[i].column   - column number, if known\n *   s.stack[i].context  - an array of source code lines; the middle element corresponds to the correct line#\n *   s.mode              - 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n * Tracing example:\n *     function trace(message) {\n *         var stackInfo = TraceKit.computeStackTrace.ofCaller();\n *         var data = message + \"\\n\";\n *         for(var i in stackInfo.stack) {\n *             var item = stackInfo.stack[i];\n *             data += (item.func || '[anonymous]') + \"() in \" + item.url + \":\" + (item.line || '0') + \"\\n\";\n *         }\n *         if (window.console)\n *             console.info(data);\n *         else\n *             alert(data);\n *     }\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n    var debug = false,\n        sourceCache = {};\n\n    /**\n     * Attempts to retrieve source code via XMLHttpRequest, which is used\n     * to look up anonymous function names.\n     * @param {string} url URL of source code.\n     * @return {string} Source contents.\n     */\n    function loadSource(url) {\n        if (!TraceKit.remoteFetching) { //Only attempt request if remoteFetching is on.\n            return '';\n        }\n        try {\n            var getXHR = function() {\n                try {\n                    return new window.XMLHttpRequest();\n                } catch (e) {\n                    // explicitly bubble up the exception if not found\n                    return new window.ActiveXObject('Microsoft.XMLHTTP');\n                }\n            };\n\n            var request = getXHR();\n            request.open('GET', url, false);\n            request.send('');\n            return request.responseText;\n        } catch (e) {\n            return '';\n        }\n    }\n\n    /**\n     * Retrieves source code from the source code cache.\n     * @param {string} url URL of source code.\n     * @return {Array.<string>} Source contents.\n     */\n    function getSource(url) {\n        if (typeof url !== 'string') {\n            return [];\n        }\n\n        if (!_has(sourceCache, url)) {\n            // URL needs to be able to fetched within the acceptable domain.  Otherwise,\n            // cross-domain errors will be triggered.\n            var source = '';\n            var domain = '';\n            try { domain = document.domain; } catch (e) {}\n            if (url.indexOf(domain) !== -1) {\n                source = loadSource(url);\n            }\n            sourceCache[url] = source ? source.split('\\n') : [];\n        }\n\n        return sourceCache[url];\n    }\n\n    /**\n     * Tries to use an externally loaded copy of source code to determine\n     * the name of a function by looking at the name of the variable it was\n     * assigned to, if any.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} lineNo Line number in source code.\n     * @return {string} The function name, if discoverable.\n     */\n    function guessFunctionName(url, lineNo) {\n        var reFunctionArgNames = /function ([^(]*)\\(([^)]*)\\)/,\n            reGuessFunction = /['\"]?([0-9A-Za-z$_]+)['\"]?\\s*[:=]\\s*(function|eval|new Function)/,\n            line = '',\n            maxLines = 10,\n            source = getSource(url),\n            m;\n\n        if (!source.length) {\n            return UNKNOWN_FUNCTION;\n        }\n\n        // Walk backwards from the first line in the function until we find the line which\n        // matches the pattern above, which is the function definition\n        for (var i = 0; i < maxLines; ++i) {\n            line = source[lineNo - i] + line;\n\n            if (!_isUndefined(line)) {\n                if ((m = reGuessFunction.exec(line))) {\n                    return m[1];\n                } else if ((m = reFunctionArgNames.exec(line))) {\n                    return m[1];\n                }\n            }\n        }\n\n        return UNKNOWN_FUNCTION;\n    }\n\n    /**\n     * Retrieves the surrounding lines from where an exception occurred.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} line Line number in source code to centre\n     * around for context.\n     * @return {?Array.<string>} Lines of source code.\n     */\n    function gatherContext(url, line) {\n        var source = getSource(url);\n\n        if (!source.length) {\n            return null;\n        }\n\n        var context = [],\n            // linesBefore & linesAfter are inclusive with the offending line.\n            // if linesOfContext is even, there will be one extra line\n            //   *before* the offending line.\n            linesBefore = Math.floor(TraceKit.linesOfContext / 2),\n            // Add one extra line if linesOfContext is odd\n            linesAfter = linesBefore + (TraceKit.linesOfContext % 2),\n            start = Math.max(0, line - linesBefore - 1),\n            end = Math.min(source.length, line + linesAfter - 1);\n\n        line -= 1; // convert to 0-based index\n\n        for (var i = start; i < end; ++i) {\n            if (!_isUndefined(source[i])) {\n                context.push(source[i]);\n            }\n        }\n\n        return context.length > 0 ? context : null;\n    }\n\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    /**\n     * Determines where a code fragment occurs in the source code.\n     * @param {RegExp} re The function definition.\n     * @param {Array.<string>} urls A list of URLs to search.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     */\n    function findSourceInUrls(re, urls) {\n        var source, m;\n        for (var i = 0, j = urls.length; i < j; ++i) {\n            // console.log('searching', urls[i]);\n            if ((source = getSource(urls[i])).length) {\n                source = source.join('\\n');\n                if ((m = re.exec(source))) {\n                    // console.log('Found function in ' + urls[i]);\n\n                    return {\n                        'url': urls[i],\n                        'line': source.substring(0, m.index).split('\\n').length,\n                        'column': m.index - source.lastIndexOf('\\n', m.index) - 1\n                    };\n                }\n            }\n        }\n\n        // console.log('no match');\n\n        return null;\n    }\n\n    /**\n     * Determines at which column a code fragment occurs on a line of the\n     * source code.\n     * @param {string} fragment The code fragment.\n     * @param {string} url The URL to search.\n     * @param {(string|number)} line The line number to examine.\n     * @return {?number} The column number.\n     */\n    function findSourceInLine(fragment, url, line) {\n        var source = getSource(url),\n            re = new RegExp('\\\\b' + escapeRegExp(fragment) + '\\\\b'),\n            m;\n\n        line -= 1;\n\n        if (source && source.length > line && (m = re.exec(source[line]))) {\n            return m.index;\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines where a function was defined within the source code.\n     * @param {(Function|string)} func A function reference or serialized\n     * function definition.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     */\n    function findSourceByFunctionBody(func) {\n        if (_isUndefined(document)) {\n            return;\n        }\n\n        var urls = [window.location.href],\n            scripts = document.getElementsByTagName('script'),\n            body,\n            code = '' + func,\n            codeRE = /^function(?:\\s+([\\w$]+))?\\s*\\(([\\w\\s,]*)\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            eventRE = /^function on([\\w$]+)\\s*\\(event\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            re,\n            parts,\n            result;\n\n        for (var i = 0; i < scripts.length; ++i) {\n            var script = scripts[i];\n            if (script.src) {\n                urls.push(script.src);\n            }\n        }\n\n        if (!(parts = codeRE.exec(code))) {\n            re = new RegExp(escapeRegExp(code).replace(/\\s+/g, '\\\\s+'));\n        }\n\n        // not sure if this is really necessary, but I don’t have a test\n        // corpus large enough to confirm that and it was in the original.\n        else {\n            var name = parts[1] ? '\\\\s+' + parts[1] : '',\n                args = parts[2].split(',').join('\\\\s*,\\\\s*');\n\n            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\\s+/g, '\\\\s+');\n            re = new RegExp('function' + name + '\\\\s*\\\\(\\\\s*' + args + '\\\\s*\\\\)\\\\s*{\\\\s*' + body + '\\\\s*}');\n        }\n\n        // look for a normal function definition\n        if ((result = findSourceInUrls(re, urls))) {\n            return result;\n        }\n\n        // look for an old-school event handler function\n        if ((parts = eventRE.exec(code))) {\n            var event = parts[1];\n            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);\n\n            // look for a function defined in HTML as an onXXX handler\n            re = new RegExp('on' + event + '=[\\\\\\'\"]\\\\s*' + body + '\\\\s*[\\\\\\'\"]', 'i');\n\n            if ((result = findSourceInUrls(re, urls[0]))) {\n                return result;\n            }\n\n            // look for ???\n            re = new RegExp(body);\n\n            if ((result = findSourceInUrls(re, urls))) {\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (!ex.stack) {\n            return null;\n        }\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?@?((?:file|https?|blob|chrome|\\[).*?)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:ms-appx|https?|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if ((parts = chrome.exec(lines[i]))) {\n                var isNative = parts[2] && parts[2].indexOf('native') !== -1;\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ( parts = winjs.exec(lines[i]) ) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = gecko.exec(lines[i]))) {\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = guessFunctionName(element.url, element.line);\n            }\n\n            if (element.line) {\n                element.context = gatherContext(element.url, element.line);\n            }\n\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        if (stack[0] && stack[0].line && !stack[0].column && reference) {\n            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);\n        } else if (!stack[0].column && !_isUndefined(ex.columnNumber)) {\n            // FireFox uses this awesome columnNumber property for its top frame\n            // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n            // so adding 1\n            stack[0].column = ex.columnNumber + 1;\n        }\n\n        return {\n            'mode': 'stack',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * Computes stack trace information from the stacktrace property.\n     * Opera 10+ uses this property.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceFromStacktraceProp(ex) {\n        // Access and store the stacktrace property before doing ANYTHING\n        // else to it because Opera is not very good at providing it\n        // reliably in other circumstances.\n        var stacktrace = ex.stacktrace;\n        if (!stacktrace) {\n            return;\n        }\n\n        var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i,\n            opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i,\n            lines = stacktrace.split('\\n'),\n            stack = [],\n            parts;\n\n        for (var line = 0; line < lines.length; line += 2) {\n            var element = null;\n            if ((parts = opera10Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[2],\n                    'line': +parts[1],\n                    'column': null,\n                    'func': parts[3],\n                    'args':[]\n                };\n            } else if ((parts = opera11Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[6],\n                    'line': +parts[1],\n                    'column': +parts[2],\n                    'func': parts[3] || parts[4],\n                    'args': parts[5] ? parts[5].split(',') : []\n                };\n            }\n\n            if (element) {\n                if (!element.func && element.line) {\n                    element.func = guessFunctionName(element.url, element.line);\n                }\n                if (element.line) {\n                    try {\n                        element.context = gatherContext(element.url, element.line);\n                    } catch (exc) {}\n                }\n\n                if (!element.context) {\n                    element.context = [lines[line + 1]];\n                }\n\n                stack.push(element);\n            }\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        return {\n            'mode': 'stacktrace',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * NOT TESTED.\n     * Computes stack trace information from an error message that includes\n     * the stack trace.\n     * Opera 9 and earlier use this method if the option to show stack\n     * traces is turned on in opera:config.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack information.\n     */\n    function computeStackTraceFromOperaMultiLineMessage(ex) {\n        // TODO: Clean this function up\n        // Opera includes a stack trace into the exception message. An example is:\n        //\n        // Statement on line 3: Undefined variable: undefinedFunc\n        // Backtrace:\n        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz\n        //         undefinedFunc(a);\n        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy\n        //           zzz(x, y, z);\n        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx\n        //           yyy(a, a, a);\n        //   Line 1 of function script\n        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }\n        //   ...\n\n        var lines = ex.message.split('\\n');\n        if (lines.length < 4) {\n            return null;\n        }\n\n        var lineRE1 = /^\\s*Line (\\d+) of linked script ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE2 = /^\\s*Line (\\d+) of inline#(\\d+) script in ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE3 = /^\\s*Line (\\d+) of function script\\s*$/i,\n            stack = [],\n            scripts = document.getElementsByTagName('script'),\n            inlineScriptBlocks = [],\n            parts;\n\n        for (var s in scripts) {\n            if (_has(scripts, s) && !scripts[s].src) {\n                inlineScriptBlocks.push(scripts[s]);\n            }\n        }\n\n        for (var line = 2; line < lines.length; line += 2) {\n            var item = null;\n            if ((parts = lineRE1.exec(lines[line]))) {\n                item = {\n                    'url': parts[2],\n                    'func': parts[3],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null\n                };\n            } else if ((parts = lineRE2.exec(lines[line]))) {\n                item = {\n                    'url': parts[3],\n                    'func': parts[4],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.\n                };\n                var relativeLine = (+parts[1]); // relative to the start of the <SCRIPT> block\n                var script = inlineScriptBlocks[parts[2] - 1];\n                if (script) {\n                    var source = getSource(item.url);\n                    if (source) {\n                        source = source.join('\\n');\n                        var pos = source.indexOf(script.innerText);\n                        if (pos >= 0) {\n                            item.line = relativeLine + source.substring(0, pos).split('\\n').length;\n                        }\n                    }\n                }\n            } else if ((parts = lineRE3.exec(lines[line]))) {\n                var url = window.location.href.replace(/#.*$/, '');\n                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));\n                var src = findSourceInUrls(re, [url]);\n                item = {\n                    'url': url,\n                    'func': '',\n                    'args': [],\n                    'line': src ? src.line : parts[1],\n                    'column': null\n                };\n            }\n\n            if (item) {\n                if (!item.func) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n                var context = gatherContext(item.url, item.line);\n                var midline = (context ? context[Math.floor(context.length / 2)] : null);\n                if (context && midline.replace(/^\\s*/, '') === lines[line + 1].replace(/^\\s*/, '')) {\n                    item.context = context;\n                } else {\n                    // if (context) alert(\"Context mismatch. Correct midline:\\n\" + lines[i+1] + \"\\n\\nMidline:\\n\" + midline + \"\\n\\nContext:\\n\" + context.join(\"\\n\") + \"\\n\\nURL:\\n\" + item.url);\n                    item.context = [lines[line + 1]];\n                }\n                stack.push(item);\n            }\n        }\n        if (!stack.length) {\n            return null; // could not parse multiline exception message as Opera stack trace\n        }\n\n        return {\n            'mode': 'multiline',\n            'name': ex.name,\n            'message': lines[0],\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {Object.<string, *>} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = guessFunctionName(initial.url, initial.line);\n            }\n\n            if (!initial.context) {\n                initial.context = gatherContext(initial.url, initial.line);\n            }\n\n            var reference = / '([^']+)' /.exec(message);\n            if (reference) {\n                initial.column = findSourceInLine(reference[1], initial.url, initial.line);\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        stackInfo.stack[0].context = initial.context;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                // console.log('skipping internal function');\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'args': [],\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if ((parts = functionName.exec(curr.toString()))) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n              try {\n                item.func = parts.input.substring(0, parts.input.indexOf('{'));\n              } catch (e) { }\n            }\n\n            if ((source = findSourceByFunctionBody(curr))) {\n                item.url = source.url;\n                item.line = source.line;\n\n                if (item.func === UNKNOWN_FUNCTION) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n\n                var reference = / '([^']+)' /.exec(ex.message || ex.description);\n                if (reference) {\n                    item.column = findSourceInLine(reference[1], source.url, source.line);\n                }\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            }else{\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            // console.log('depth is ' + depth);\n            // console.log('stack is ' + stack.length);\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'mode': 'callers',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = (depth == null ? 0 : +depth);\n\n        try {\n            // This must be tried first because Opera 10 *destroys*\n            // its stacktrace property if you try to access the stack\n            // property first!!\n            stack = computeStackTraceFromStacktraceProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromOperaMultiLineMessage(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        return {\n            'mode': 'failed'\n        };\n    }\n\n    /**\n     * Logs a stacktrace starting from the previous call and working down.\n     * @param {(number|string)=} depth How many frames deep to trace.\n     * @return {Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceOfCaller(depth) {\n        depth = (depth == null ? 0 : +depth) + 1; // \"+ 1\" because \"ofCaller\" should drop one frame\n        try {\n            throw new Error();\n        } catch (ex) {\n            return computeStackTrace(ex, depth + 1);\n        }\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.guessFunctionName = guessFunctionName;\n    computeStackTrace.gatherContext = gatherContext;\n    computeStackTrace.ofCaller = computeStackTraceOfCaller;\n    computeStackTrace.getSource = getSource;\n\n    return computeStackTrace;\n}());\n\n/**\n * Extends support for global error handling for asynchronous browser\n * functions. Adopted from Closure Library's errorhandler.js\n */\nTraceKit.extendToAsynchronousCallbacks = function () {\n    var _helper = function _helper(fnName) {\n        var originalFn = window[fnName];\n        window[fnName] = function traceKitAsyncExtension() {\n            // Make a copy of the arguments\n            var args = _slice.call(arguments);\n            var originalCallback = args[0];\n            if (typeof (originalCallback) === 'function') {\n                args[0] = TraceKit.wrap(originalCallback);\n            }\n            // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n            // also only supports 2 argument and doesn't care what \"this\" is, so we\n            // can just call the original function directly.\n            if (originalFn.apply) {\n                return originalFn.apply(this, args);\n            } else {\n                return originalFn(args[0], args[1]);\n            }\n        };\n    };\n\n    _helper('setTimeout');\n    _helper('setInterval');\n};\n\n//Default options:\nif (!TraceKit.remoteFetching) {\n  TraceKit.remoteFetching = true;\n}\nif (!TraceKit.collectWindowErrors) {\n  TraceKit.collectWindowErrors = true;\n}\nif (!TraceKit.linesOfContext || TraceKit.linesOfContext < 1) {\n  // 5 lines before, the offending line, 5 lines after\n  TraceKit.linesOfContext = 11;\n}\n\n\n\n// Export to global object\nwindow.TraceKit = TraceKit;\n\n}(typeof window !== 'undefined' ? window : global));\n","/*\n TraceKit - Cross browser stack traces - github.com/csnover/TraceKit\n MIT license\n*/\n\n(function(window, undefined) {\nif (!window) {\n    return;\n}\n\nvar TraceKit = {};\nvar _oldTraceKit = window.TraceKit;\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n\n/**\n * _has, a better form of hasOwnProperty\n * Example: _has(MainHostObject, property) === true/false\n *\n * @param {Object} object to check property\n * @param {string} key to check\n */\nfunction _has(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\n\nfunction _isUndefined(what) {\n    return typeof what === 'undefined';\n}\n\n/**\n * TraceKit.noConflict: Export TraceKit out to another variable\n * Example: var TK = TraceKit.noConflict()\n */\nTraceKit.noConflict = function noConflict() {\n    window.TraceKit = _oldTraceKit;\n    return TraceKit;\n};\n\n/**\n * TraceKit.wrap: Wrap any function in a TraceKit reporter\n * Example: func = TraceKit.wrap(func);\n *\n * @param {Function} func Function to be wrapped\n * @return {Function} The wrapped func\n */\nTraceKit.wrap = function traceKitWrapper(func) {\n    function wrapped() {\n        try {\n            return func.apply(this, arguments);\n        } catch (e) {\n            TraceKit.report(e);\n            throw e;\n        }\n    }\n    return wrapped;\n};\n\n/**\n * TraceKit.report: cross-browser processing of unhandled exceptions\n *\n * Syntax:\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *              on top frame; column number is not guaranteed\n *   - Opera:   full stack trace with line and column numbers\n *   - Chrome:  full stack trace with line and column numbers\n *   - Safari:  line and column number for the top frame only; some frames\n *              may be missing, and column number is not guaranteed\n *   - IE:      line and column number for the top frame only; some frames\n *              may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a stackInfo object as described in the\n * TraceKit.computeStackTrace docs.\n */\nTraceKit.report = (function reportModuleWrapper() {\n    var handlers = [],\n        lastArgs = null,\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {Object.<string, *>} stack\n     */\n    function notifyHandlers(stack, isWindowError) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n          return;\n        }\n        for (var i in handlers) {\n            if (_has(handlers, i)) {\n                try {\n                    handlers[i].apply(null, [stack].concat(_slice.call(arguments, 2)));\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error\n     * occurred.\n     * @param {?(number|string)} columnNo The column number at which the error\n     * occurred.\n     * @param {?Error} errorObj The actual Error object.\n     */\n    function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {\n        var stack = null;\n\n        if (lastExceptionStack) {\n            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n    \t    processLastException();\n\t    } else if (errorObj) {\n            stack = TraceKit.computeStackTrace(errorObj);\n            notifyHandlers(stack, true);\n        } else {\n            var location = {\n              'url': url,\n              'line': lineNo,\n              'column': columnNo\n            };\n            location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);\n            location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);\n            stack = {\n              'mode': 'onerror',\n              'message': message,\n              'stack': [location]\n            };\n\n            notifyHandlers(stack, true);\n        }\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    function installGlobalHandler () {\n        if (_onErrorHandlerInstalled === true) {\n            return;\n        }\n        _oldOnerrorHandler = window.onerror;\n        window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    function processLastException() {\n        var _lastExceptionStack = lastExceptionStack,\n            _lastArgs = lastArgs;\n        lastArgs = null;\n        lastExceptionStack = null;\n        lastException = null;\n        notifyHandlers.apply(null, [_lastExceptionStack, false].concat(_lastArgs));\n    }\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     */\n    function report(ex) {\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n              processLastException();\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n        lastArgs = _slice.call(arguments, 1);\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        window.setTimeout(function () {\n            if (lastException === ex) {\n                processLastException();\n            }\n        }, (stack.incomplete ? 2000 : 0));\n\n        throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    return report;\n}());\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   s = TraceKit.computeStackTrace.ofCaller([depth])\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n * Returns:\n *   s.name              - exception name\n *   s.message           - exception message\n *   s.stack[i].url      - JavaScript or HTML file URL\n *   s.stack[i].func     - function name, or empty for anonymous functions (if guessing did not work)\n *   s.stack[i].args     - arguments passed to the function, if known\n *   s.stack[i].line     - line number, if known\n *   s.stack[i].column   - column number, if known\n *   s.stack[i].context  - an array of source code lines; the middle element corresponds to the correct line#\n *   s.mode              - 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n * Tracing example:\n *     function trace(message) {\n *         var stackInfo = TraceKit.computeStackTrace.ofCaller();\n *         var data = message + \"\\n\";\n *         for(var i in stackInfo.stack) {\n *             var item = stackInfo.stack[i];\n *             data += (item.func || '[anonymous]') + \"() in \" + item.url + \":\" + (item.line || '0') + \"\\n\";\n *         }\n *         if (window.console)\n *             console.info(data);\n *         else\n *             alert(data);\n *     }\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n    var debug = false,\n        sourceCache = {};\n\n    /**\n     * Attempts to retrieve source code via XMLHttpRequest, which is used\n     * to look up anonymous function names.\n     * @param {string} url URL of source code.\n     * @return {string} Source contents.\n     */\n    function loadSource(url) {\n        if (!TraceKit.remoteFetching) { //Only attempt request if remoteFetching is on.\n            return '';\n        }\n        try {\n            var getXHR = function() {\n                try {\n                    return new window.XMLHttpRequest();\n                } catch (e) {\n                    // explicitly bubble up the exception if not found\n                    return new window.ActiveXObject('Microsoft.XMLHTTP');\n                }\n            };\n\n            var request = getXHR();\n            request.open('GET', url, false);\n            request.send('');\n            return request.responseText;\n        } catch (e) {\n            return '';\n        }\n    }\n\n    /**\n     * Retrieves source code from the source code cache.\n     * @param {string} url URL of source code.\n     * @return {Array.<string>} Source contents.\n     */\n    function getSource(url) {\n        if (typeof url !== 'string') {\n            return [];\n        }\n\n        if (!_has(sourceCache, url)) {\n            // URL needs to be able to fetched within the acceptable domain.  Otherwise,\n            // cross-domain errors will be triggered.\n            var source = '';\n            var domain = '';\n            try { domain = document.domain; } catch (e) {}\n            if (url.indexOf(domain) !== -1) {\n                source = loadSource(url);\n            }\n            sourceCache[url] = source ? source.split('\\n') : [];\n        }\n\n        return sourceCache[url];\n    }\n\n    /**\n     * Tries to use an externally loaded copy of source code to determine\n     * the name of a function by looking at the name of the variable it was\n     * assigned to, if any.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} lineNo Line number in source code.\n     * @return {string} The function name, if discoverable.\n     */\n    function guessFunctionName(url, lineNo) {\n        var reFunctionArgNames = /function ([^(]*)\\(([^)]*)\\)/,\n            reGuessFunction = /['\"]?([0-9A-Za-z$_]+)['\"]?\\s*[:=]\\s*(function|eval|new Function)/,\n            line = '',\n            maxLines = 10,\n            source = getSource(url),\n            m;\n\n        if (!source.length) {\n            return UNKNOWN_FUNCTION;\n        }\n\n        // Walk backwards from the first line in the function until we find the line which\n        // matches the pattern above, which is the function definition\n        for (var i = 0; i < maxLines; ++i) {\n            line = source[lineNo - i] + line;\n\n            if (!_isUndefined(line)) {\n                if ((m = reGuessFunction.exec(line))) {\n                    return m[1];\n                } else if ((m = reFunctionArgNames.exec(line))) {\n                    return m[1];\n                }\n            }\n        }\n\n        return UNKNOWN_FUNCTION;\n    }\n\n    /**\n     * Retrieves the surrounding lines from where an exception occurred.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} line Line number in source code to centre\n     * around for context.\n     * @return {?Array.<string>} Lines of source code.\n     */\n    function gatherContext(url, line) {\n        var source = getSource(url);\n\n        if (!source.length) {\n            return null;\n        }\n\n        var context = [],\n            // linesBefore & linesAfter are inclusive with the offending line.\n            // if linesOfContext is even, there will be one extra line\n            //   *before* the offending line.\n            linesBefore = Math.floor(TraceKit.linesOfContext / 2),\n            // Add one extra line if linesOfContext is odd\n            linesAfter = linesBefore + (TraceKit.linesOfContext % 2),\n            start = Math.max(0, line - linesBefore - 1),\n            end = Math.min(source.length, line + linesAfter - 1);\n\n        line -= 1; // convert to 0-based index\n\n        for (var i = start; i < end; ++i) {\n            if (!_isUndefined(source[i])) {\n                context.push(source[i]);\n            }\n        }\n\n        return context.length > 0 ? context : null;\n    }\n\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    /**\n     * Determines where a code fragment occurs in the source code.\n     * @param {RegExp} re The function definition.\n     * @param {Array.<string>} urls A list of URLs to search.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     */\n    function findSourceInUrls(re, urls) {\n        var source, m;\n        for (var i = 0, j = urls.length; i < j; ++i) {\n            // console.log('searching', urls[i]);\n            if ((source = getSource(urls[i])).length) {\n                source = source.join('\\n');\n                if ((m = re.exec(source))) {\n                    // console.log('Found function in ' + urls[i]);\n\n                    return {\n                        'url': urls[i],\n                        'line': source.substring(0, m.index).split('\\n').length,\n                        'column': m.index - source.lastIndexOf('\\n', m.index) - 1\n                    };\n                }\n            }\n        }\n\n        // console.log('no match');\n\n        return null;\n    }\n\n    /**\n     * Determines at which column a code fragment occurs on a line of the\n     * source code.\n     * @param {string} fragment The code fragment.\n     * @param {string} url The URL to search.\n     * @param {(string|number)} line The line number to examine.\n     * @return {?number} The column number.\n     */\n    function findSourceInLine(fragment, url, line) {\n        var source = getSource(url),\n            re = new RegExp('\\\\b' + escapeRegExp(fragment) + '\\\\b'),\n            m;\n\n        line -= 1;\n\n        if (source && source.length > line && (m = re.exec(source[line]))) {\n            return m.index;\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines where a function was defined within the source code.\n     * @param {(Function|string)} func A function reference or serialized\n     * function definition.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     */\n    function findSourceByFunctionBody(func) {\n        if (_isUndefined(document)) {\n            return;\n        }\n\n        var urls = [window.location.href],\n            scripts = document.getElementsByTagName('script'),\n            body,\n            code = '' + func,\n            codeRE = /^function(?:\\s+([\\w$]+))?\\s*\\(([\\w\\s,]*)\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            eventRE = /^function on([\\w$]+)\\s*\\(event\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            re,\n            parts,\n            result;\n\n        for (var i = 0; i < scripts.length; ++i) {\n            var script = scripts[i];\n            if (script.src) {\n                urls.push(script.src);\n            }\n        }\n\n        if (!(parts = codeRE.exec(code))) {\n            re = new RegExp(escapeRegExp(code).replace(/\\s+/g, '\\\\s+'));\n        }\n\n        // not sure if this is really necessary, but I don’t have a test\n        // corpus large enough to confirm that and it was in the original.\n        else {\n            var name = parts[1] ? '\\\\s+' + parts[1] : '',\n                args = parts[2].split(',').join('\\\\s*,\\\\s*');\n\n            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\\s+/g, '\\\\s+');\n            re = new RegExp('function' + name + '\\\\s*\\\\(\\\\s*' + args + '\\\\s*\\\\)\\\\s*{\\\\s*' + body + '\\\\s*}');\n        }\n\n        // look for a normal function definition\n        if ((result = findSourceInUrls(re, urls))) {\n            return result;\n        }\n\n        // look for an old-school event handler function\n        if ((parts = eventRE.exec(code))) {\n            var event = parts[1];\n            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);\n\n            // look for a function defined in HTML as an onXXX handler\n            re = new RegExp('on' + event + '=[\\\\\\'\"]\\\\s*' + body + '\\\\s*[\\\\\\'\"]', 'i');\n\n            if ((result = findSourceInUrls(re, urls[0]))) {\n                return result;\n            }\n\n            // look for ???\n            re = new RegExp(body);\n\n            if ((result = findSourceInUrls(re, urls))) {\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (!ex.stack) {\n            return null;\n        }\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?@?((?:file|https?|blob|chrome|\\[).*?)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:ms-appx|https?|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if ((parts = chrome.exec(lines[i]))) {\n                var isNative = parts[2] && parts[2].indexOf('native') !== -1;\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ( parts = winjs.exec(lines[i]) ) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = gecko.exec(lines[i]))) {\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = guessFunctionName(element.url, element.line);\n            }\n\n            if (element.line) {\n                element.context = gatherContext(element.url, element.line);\n            }\n\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        if (stack[0] && stack[0].line && !stack[0].column && reference) {\n            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);\n        } else if (!stack[0].column && !_isUndefined(ex.columnNumber)) {\n            // FireFox uses this awesome columnNumber property for its top frame\n            // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n            // so adding 1\n            stack[0].column = ex.columnNumber + 1;\n        }\n\n        return {\n            'mode': 'stack',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * Computes stack trace information from the stacktrace property.\n     * Opera 10+ uses this property.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceFromStacktraceProp(ex) {\n        // Access and store the stacktrace property before doing ANYTHING\n        // else to it because Opera is not very good at providing it\n        // reliably in other circumstances.\n        var stacktrace = ex.stacktrace;\n        if (!stacktrace) {\n            return;\n        }\n\n        var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i,\n            opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i,\n            lines = stacktrace.split('\\n'),\n            stack = [],\n            parts;\n\n        for (var line = 0; line < lines.length; line += 2) {\n            var element = null;\n            if ((parts = opera10Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[2],\n                    'line': +parts[1],\n                    'column': null,\n                    'func': parts[3],\n                    'args':[]\n                };\n            } else if ((parts = opera11Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[6],\n                    'line': +parts[1],\n                    'column': +parts[2],\n                    'func': parts[3] || parts[4],\n                    'args': parts[5] ? parts[5].split(',') : []\n                };\n            }\n\n            if (element) {\n                if (!element.func && element.line) {\n                    element.func = guessFunctionName(element.url, element.line);\n                }\n                if (element.line) {\n                    try {\n                        element.context = gatherContext(element.url, element.line);\n                    } catch (exc) {}\n                }\n\n                if (!element.context) {\n                    element.context = [lines[line + 1]];\n                }\n\n                stack.push(element);\n            }\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        return {\n            'mode': 'stacktrace',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * NOT TESTED.\n     * Computes stack trace information from an error message that includes\n     * the stack trace.\n     * Opera 9 and earlier use this method if the option to show stack\n     * traces is turned on in opera:config.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack information.\n     */\n    function computeStackTraceFromOperaMultiLineMessage(ex) {\n        // TODO: Clean this function up\n        // Opera includes a stack trace into the exception message. An example is:\n        //\n        // Statement on line 3: Undefined variable: undefinedFunc\n        // Backtrace:\n        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz\n        //         undefinedFunc(a);\n        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy\n        //           zzz(x, y, z);\n        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx\n        //           yyy(a, a, a);\n        //   Line 1 of function script\n        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }\n        //   ...\n\n        var lines = ex.message.split('\\n');\n        if (lines.length < 4) {\n            return null;\n        }\n\n        var lineRE1 = /^\\s*Line (\\d+) of linked script ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE2 = /^\\s*Line (\\d+) of inline#(\\d+) script in ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE3 = /^\\s*Line (\\d+) of function script\\s*$/i,\n            stack = [],\n            scripts = document.getElementsByTagName('script'),\n            inlineScriptBlocks = [],\n            parts;\n\n        for (var s in scripts) {\n            if (_has(scripts, s) && !scripts[s].src) {\n                inlineScriptBlocks.push(scripts[s]);\n            }\n        }\n\n        for (var line = 2; line < lines.length; line += 2) {\n            var item = null;\n            if ((parts = lineRE1.exec(lines[line]))) {\n                item = {\n                    'url': parts[2],\n                    'func': parts[3],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null\n                };\n            } else if ((parts = lineRE2.exec(lines[line]))) {\n                item = {\n                    'url': parts[3],\n                    'func': parts[4],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.\n                };\n                var relativeLine = (+parts[1]); // relative to the start of the <SCRIPT> block\n                var script = inlineScriptBlocks[parts[2] - 1];\n                if (script) {\n                    var source = getSource(item.url);\n                    if (source) {\n                        source = source.join('\\n');\n                        var pos = source.indexOf(script.innerText);\n                        if (pos >= 0) {\n                            item.line = relativeLine + source.substring(0, pos).split('\\n').length;\n                        }\n                    }\n                }\n            } else if ((parts = lineRE3.exec(lines[line]))) {\n                var url = window.location.href.replace(/#.*$/, '');\n                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));\n                var src = findSourceInUrls(re, [url]);\n                item = {\n                    'url': url,\n                    'func': '',\n                    'args': [],\n                    'line': src ? src.line : parts[1],\n                    'column': null\n                };\n            }\n\n            if (item) {\n                if (!item.func) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n                var context = gatherContext(item.url, item.line);\n                var midline = (context ? context[Math.floor(context.length / 2)] : null);\n                if (context && midline.replace(/^\\s*/, '') === lines[line + 1].replace(/^\\s*/, '')) {\n                    item.context = context;\n                } else {\n                    // if (context) alert(\"Context mismatch. Correct midline:\\n\" + lines[i+1] + \"\\n\\nMidline:\\n\" + midline + \"\\n\\nContext:\\n\" + context.join(\"\\n\") + \"\\n\\nURL:\\n\" + item.url);\n                    item.context = [lines[line + 1]];\n                }\n                stack.push(item);\n            }\n        }\n        if (!stack.length) {\n            return null; // could not parse multiline exception message as Opera stack trace\n        }\n\n        return {\n            'mode': 'multiline',\n            'name': ex.name,\n            'message': lines[0],\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {Object.<string, *>} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = guessFunctionName(initial.url, initial.line);\n            }\n\n            if (!initial.context) {\n                initial.context = gatherContext(initial.url, initial.line);\n            }\n\n            var reference = / '([^']+)' /.exec(message);\n            if (reference) {\n                initial.column = findSourceInLine(reference[1], initial.url, initial.line);\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        stackInfo.stack[0].context = initial.context;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                // console.log('skipping internal function');\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'args': [],\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if ((parts = functionName.exec(curr.toString()))) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n              try {\n                item.func = parts.input.substring(0, parts.input.indexOf('{'));\n              } catch (e) { }\n            }\n\n            if ((source = findSourceByFunctionBody(curr))) {\n                item.url = source.url;\n                item.line = source.line;\n\n                if (item.func === UNKNOWN_FUNCTION) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n\n                var reference = / '([^']+)' /.exec(ex.message || ex.description);\n                if (reference) {\n                    item.column = findSourceInLine(reference[1], source.url, source.line);\n                }\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            }else{\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            // console.log('depth is ' + depth);\n            // console.log('stack is ' + stack.length);\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'mode': 'callers',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = (depth == null ? 0 : +depth);\n\n        try {\n            // This must be tried first because Opera 10 *destroys*\n            // its stacktrace property if you try to access the stack\n            // property first!!\n            stack = computeStackTraceFromStacktraceProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromOperaMultiLineMessage(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        return {\n            'mode': 'failed'\n        };\n    }\n\n    /**\n     * Logs a stacktrace starting from the previous call and working down.\n     * @param {(number|string)=} depth How many frames deep to trace.\n     * @return {Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceOfCaller(depth) {\n        depth = (depth == null ? 0 : +depth) + 1; // \"+ 1\" because \"ofCaller\" should drop one frame\n        try {\n            throw new Error();\n        } catch (ex) {\n            return computeStackTrace(ex, depth + 1);\n        }\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.guessFunctionName = guessFunctionName;\n    computeStackTrace.gatherContext = gatherContext;\n    computeStackTrace.ofCaller = computeStackTraceOfCaller;\n    computeStackTrace.getSource = getSource;\n\n    return computeStackTrace;\n}());\n\n/**\n * Extends support for global error handling for asynchronous browser\n * functions. Adopted from Closure Library's errorhandler.js\n */\nTraceKit.extendToAsynchronousCallbacks = function () {\n    var _helper = function _helper(fnName) {\n        var originalFn = window[fnName];\n        window[fnName] = function traceKitAsyncExtension() {\n            // Make a copy of the arguments\n            var args = _slice.call(arguments);\n            var originalCallback = args[0];\n            if (typeof (originalCallback) === 'function') {\n                args[0] = TraceKit.wrap(originalCallback);\n            }\n            // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n            // also only supports 2 argument and doesn't care what \"this\" is, so we\n            // can just call the original function directly.\n            if (originalFn.apply) {\n                return originalFn.apply(this, args);\n            } else {\n                return originalFn(args[0], args[1]);\n            }\n        };\n    };\n\n    _helper('setTimeout');\n    _helper('setInterval');\n};\n\n//Default options:\nif (!TraceKit.remoteFetching) {\n  TraceKit.remoteFetching = true;\n}\nif (!TraceKit.collectWindowErrors) {\n  TraceKit.collectWindowErrors = true;\n}\nif (!TraceKit.linesOfContext || TraceKit.linesOfContext < 1) {\n  // 5 lines before, the offending line, 5 lines after\n  TraceKit.linesOfContext = 11;\n}\n\n\n\n// Export to global object\nwindow.TraceKit = TraceKit;\n\n}(typeof window !== 'undefined' ? window : global));\n\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory(require, exports, module);\n  } else {\n    root.exceptionless = factory();\n  }\n}(this, function(require, exports, module) {\nif (!exports) {\n\tvar exports = {};\n}\n\n\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar SettingsManager = (function () {\n    function SettingsManager() {\n    }\n    SettingsManager.onChanged = function (handler) {\n        !!handler && this._handlers.push(handler);\n    };\n    SettingsManager.applySavedServerSettings = function (config) {\n        var savedSettings = this.getSavedServerSettings(config);\n        config.log.info('Applying saved settings.');\n        config.settings = Utils.merge(config.settings, savedSettings.settings);\n        this.changed(config);\n    };\n    SettingsManager.checkVersion = function (version, config) {\n        if (version) {\n            var savedSettings = this.getSavedServerSettings(config);\n            var savedVersion = savedSettings.version;\n            if (version > savedVersion) {\n                config.log.info(\"Updating settings from v\" + savedVersion + \" to v\" + version);\n                this.updateSettings(config);\n            }\n        }\n    };\n    SettingsManager.updateSettings = function (config) {\n        var _this = this;\n        if (!config.isValid) {\n            config.log.error('Unable to update settings: ApiKey is not set.');\n            return;\n        }\n        config.submissionClient.getSettings(config, function (response) {\n            if (!response || !response.success || !response.settings) {\n                return;\n            }\n            config.settings = Utils.merge(config.settings, response.settings);\n            var savedServerSettings = SettingsManager.getSavedServerSettings(config);\n            for (var key in savedServerSettings) {\n                if (response.settings[key]) {\n                    continue;\n                }\n                delete config.settings[key];\n            }\n            var newSettings = {\n                version: response.settingsVersion,\n                settings: response.settings\n            };\n            config.storage.settings.save(newSettings);\n            config.log.info('Updated settings');\n            _this.changed(config);\n        });\n    };\n    SettingsManager.changed = function (config) {\n        var handlers = this._handlers;\n        for (var index = 0; index < handlers.length; index++) {\n            handlers[index](config);\n        }\n    };\n    SettingsManager.getSavedServerSettings = function (config) {\n        var item = config.storage.settings.get()[0];\n        if (item && item.value && item.value.version && item.value.settings) {\n            return item.value;\n        }\n        return { version: 0, settings: {} };\n    };\n    SettingsManager._handlers = [];\n    return SettingsManager;\n})();\nexports.SettingsManager = SettingsManager;\nvar DefaultLastReferenceIdManager = (function () {\n    function DefaultLastReferenceIdManager() {\n        this._lastReferenceId = null;\n    }\n    DefaultLastReferenceIdManager.prototype.getLast = function () {\n        return this._lastReferenceId;\n    };\n    DefaultLastReferenceIdManager.prototype.clearLast = function () {\n        this._lastReferenceId = null;\n    };\n    DefaultLastReferenceIdManager.prototype.setLast = function (eventId) {\n        this._lastReferenceId = eventId;\n    };\n    return DefaultLastReferenceIdManager;\n})();\nexports.DefaultLastReferenceIdManager = DefaultLastReferenceIdManager;\nvar ConsoleLog = (function () {\n    function ConsoleLog() {\n    }\n    ConsoleLog.prototype.info = function (message) {\n        this.log('info', message);\n    };\n    ConsoleLog.prototype.warn = function (message) {\n        this.log('warn', message);\n    };\n    ConsoleLog.prototype.error = function (message) {\n        this.log('error', message);\n    };\n    ConsoleLog.prototype.log = function (level, message) {\n        if (console && console[level]) {\n            console[level](\"[\" + level + \"] Exceptionless: \" + message);\n        }\n    };\n    return ConsoleLog;\n})();\nexports.ConsoleLog = ConsoleLog;\nvar NullLog = (function () {\n    function NullLog() {\n    }\n    NullLog.prototype.info = function (message) { };\n    NullLog.prototype.warn = function (message) { };\n    NullLog.prototype.error = function (message) { };\n    return NullLog;\n})();\nexports.NullLog = NullLog;\nvar EventPluginContext = (function () {\n    function EventPluginContext(client, event, contextData) {\n        this.client = client;\n        this.event = event;\n        this.contextData = contextData ? contextData : new ContextData();\n    }\n    Object.defineProperty(EventPluginContext.prototype, \"log\", {\n        get: function () {\n            return this.client.config.log;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return EventPluginContext;\n})();\nexports.EventPluginContext = EventPluginContext;\nvar EventPluginManager = (function () {\n    function EventPluginManager() {\n    }\n    EventPluginManager.run = function (context, callback) {\n        var wrap = function (plugin, next) {\n            return function () {\n                try {\n                    if (!context.cancelled) {\n                        plugin.run(context, next);\n                    }\n                }\n                catch (ex) {\n                    context.cancelled = true;\n                    context.log.error(\"Error running plugin '\" + plugin.name + \"': \" + ex.message + \". Discarding Event.\");\n                }\n                if (context.cancelled && !!callback) {\n                    callback(context);\n                }\n            };\n        };\n        var plugins = context.client.config.plugins;\n        var wrappedPlugins = [];\n        if (!!callback) {\n            wrappedPlugins[plugins.length] = wrap({ name: 'cb', priority: 9007199254740992, run: callback }, null);\n        }\n        for (var index = plugins.length - 1; index > -1; index--) {\n            wrappedPlugins[index] = wrap(plugins[index], !!callback || (index < plugins.length - 1) ? wrappedPlugins[index + 1] : null);\n        }\n        wrappedPlugins[0]();\n    };\n    EventPluginManager.addDefaultPlugins = function (config) {\n        config.addPlugin(new ConfigurationDefaultsPlugin());\n        config.addPlugin(new ErrorPlugin());\n        config.addPlugin(new DuplicateCheckerPlugin());\n        config.addPlugin(new ModuleInfoPlugin());\n        config.addPlugin(new RequestInfoPlugin());\n        config.addPlugin(new EnvironmentInfoPlugin());\n        config.addPlugin(new SubmissionMethodPlugin());\n    };\n    return EventPluginManager;\n})();\nexports.EventPluginManager = EventPluginManager;\nvar HeartbeatPlugin = (function () {\n    function HeartbeatPlugin() {\n        this.priority = 100;\n        this.name = 'HeartbeatPlugin';\n    }\n    HeartbeatPlugin.prototype.run = function (context, next) {\n        var _this = this;\n        var clearHeartbeatInterval = function () {\n            if (_this._heartbeatIntervalId) {\n                clearInterval(_this._heartbeatIntervalId);\n                _this._heartbeatIntervalId = 0;\n            }\n        };\n        var type = context.event.type;\n        if (type !== 'heartbeat') {\n            if (type === 'sessionend') {\n                clearHeartbeatInterval();\n            }\n            else {\n                var user = context.event.data['@user'];\n                if (user && user.identity) {\n                    var submitHeartbeatFn = function () { return context.client.createSessionHeartbeat().setUserIdentity(user).submit(); };\n                    if (!this._heartbeatIntervalId) {\n                        this._lastUser = user;\n                    }\n                    else {\n                        clearHeartbeatInterval();\n                    }\n                    this._heartbeatIntervalId = setInterval(submitHeartbeatFn, 30000);\n                }\n            }\n        }\n        next && next();\n    };\n    return HeartbeatPlugin;\n})();\nexports.HeartbeatPlugin = HeartbeatPlugin;\nvar ReferenceIdPlugin = (function () {\n    function ReferenceIdPlugin() {\n        this.priority = 20;\n        this.name = 'ReferenceIdPlugin';\n    }\n    ReferenceIdPlugin.prototype.run = function (context, next) {\n        if ((!context.event.reference_id || context.event.reference_id.length === 0) && context.event.type === 'error') {\n            context.event.reference_id = Utils.guid().replace('-', '').substring(0, 10);\n        }\n        next && next();\n    };\n    return ReferenceIdPlugin;\n})();\nexports.ReferenceIdPlugin = ReferenceIdPlugin;\nvar DefaultEventQueue = (function () {\n    function DefaultEventQueue(config) {\n        this._processingQueue = false;\n        this._config = config;\n    }\n    DefaultEventQueue.prototype.enqueue = function (event) {\n        var config = this._config;\n        this.ensureQueueTimer();\n        if (this.areQueuedItemsDiscarded()) {\n            config.log.info('Queue items are currently being discarded. The event will not be queued.');\n            return;\n        }\n        var timestamp = config.storage.queue.save(event);\n        var logText = \"type=\" + event.type + \" \" + (!!event.reference_id ? 'refid=' + event.reference_id : '');\n        if (timestamp) {\n            config.log.info(\"Enqueuing event: \" + timestamp + \" \" + logText);\n        }\n        else {\n            config.log.error(\"Could not enqueue event \" + logText);\n        }\n    };\n    DefaultEventQueue.prototype.process = function (isAppExiting) {\n        var _this = this;\n        var queueNotProcessed = 'The queue will not be processed.';\n        var config = this._config;\n        var log = config.log;\n        this.ensureQueueTimer();\n        if (this._processingQueue) {\n            return;\n        }\n        log.info('Processing queue...');\n        if (!config.enabled) {\n            log.info(\"Configuration is disabled. \" + queueNotProcessed);\n            return;\n        }\n        if (!config.isValid) {\n            log.info(\"Invalid Api Key. \" + queueNotProcessed);\n            return;\n        }\n        this._processingQueue = true;\n        try {\n            var events = config.storage.queue.get(config.submissionBatchSize);\n            if (!events || events.length === 0) {\n                this._processingQueue = false;\n                return;\n            }\n            log.info(\"Sending \" + events.length + \" events to \" + config.serverUrl + \".\");\n            config.submissionClient.postEvents(events.map(function (e) { return e.value; }), config, function (response) {\n                _this.processSubmissionResponse(response, events);\n                log.info('Finished processing queue.');\n                _this._processingQueue = false;\n            }, isAppExiting);\n        }\n        catch (ex) {\n            log.error(\"Error processing queue: \" + ex);\n            this.suspendProcessing();\n            this._processingQueue = false;\n        }\n    };\n    DefaultEventQueue.prototype.suspendProcessing = function (durationInMinutes, discardFutureQueuedItems, clearQueue) {\n        var config = this._config;\n        if (!durationInMinutes || durationInMinutes <= 0) {\n            durationInMinutes = 5;\n        }\n        config.log.info(\"Suspending processing for \" + durationInMinutes + \" minutes.\");\n        this._suspendProcessingUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\n        if (discardFutureQueuedItems) {\n            this._discardQueuedItemsUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\n        }\n        if (clearQueue) {\n            config.storage.queue.clear();\n        }\n    };\n    DefaultEventQueue.prototype.areQueuedItemsDiscarded = function () {\n        return this._discardQueuedItemsUntil && this._discardQueuedItemsUntil > new Date();\n    };\n    DefaultEventQueue.prototype.ensureQueueTimer = function () {\n        var _this = this;\n        if (!this._queueTimer) {\n            this._queueTimer = setInterval(function () { return _this.onProcessQueue(); }, 10000);\n        }\n    };\n    DefaultEventQueue.prototype.isQueueProcessingSuspended = function () {\n        return this._suspendProcessingUntil && this._suspendProcessingUntil > new Date();\n    };\n    DefaultEventQueue.prototype.onProcessQueue = function () {\n        if (!this.isQueueProcessingSuspended() && !this._processingQueue) {\n            this.process();\n        }\n    };\n    DefaultEventQueue.prototype.processSubmissionResponse = function (response, events) {\n        var noSubmission = 'The event will not be submitted.';\n        var config = this._config;\n        var log = config.log;\n        if (response.success) {\n            log.info(\"Sent \" + events.length + \" events.\");\n            this.removeEvents(events);\n            return;\n        }\n        if (response.serviceUnavailable) {\n            log.error('Server returned service unavailable.');\n            this.suspendProcessing();\n            return;\n        }\n        if (response.paymentRequired) {\n            log.info('Too many events have been submitted, please upgrade your plan.');\n            this.suspendProcessing(null, true, true);\n            return;\n        }\n        if (response.unableToAuthenticate) {\n            log.info(\"Unable to authenticate, please check your configuration. \" + noSubmission);\n            this.suspendProcessing(15);\n            this.removeEvents(events);\n            return;\n        }\n        if (response.notFound || response.badRequest) {\n            log.error(\"Error while trying to submit data: \" + response.message);\n            this.suspendProcessing(60 * 4);\n            this.removeEvents(events);\n            return;\n        }\n        if (response.requestEntityTooLarge) {\n            var message = 'Event submission discarded for being too large.';\n            if (config.submissionBatchSize > 1) {\n                log.error(message + \" Retrying with smaller batch size.\");\n                config.submissionBatchSize = Math.max(1, Math.round(config.submissionBatchSize / 1.5));\n            }\n            else {\n                log.error(message + \" \" + noSubmission);\n                this.removeEvents(events);\n            }\n            return;\n        }\n        if (!response.success) {\n            log.error(\"Error submitting events: \" + (response.message || 'Please check the network tab for more info.'));\n            this.suspendProcessing();\n        }\n    };\n    DefaultEventQueue.prototype.removeEvents = function (events) {\n        for (var index = 0; index < (events || []).length; index++) {\n            this._config.storage.queue.remove(events[index].timestamp);\n        }\n    };\n    return DefaultEventQueue;\n})();\nexports.DefaultEventQueue = DefaultEventQueue;\nvar InMemoryStorageProvider = (function () {\n    function InMemoryStorageProvider(maxQueueItems) {\n        if (maxQueueItems === void 0) { maxQueueItems = 250; }\n        this.queue = new InMemoryStorage(maxQueueItems);\n        this.settings = new InMemoryStorage(1);\n    }\n    return InMemoryStorageProvider;\n})();\nexports.InMemoryStorageProvider = InMemoryStorageProvider;\nvar DefaultSubmissionClient = (function () {\n    function DefaultSubmissionClient() {\n        this.configurationVersionHeader = 'x-exceptionless-configversion';\n    }\n    DefaultSubmissionClient.prototype.postEvents = function (events, config, callback, isAppExiting) {\n        var data = JSON.stringify(events);\n        var request = this.createRequest(config, 'POST', '/api/v2/events', data);\n        var cb = this.createSubmissionCallback(config, callback);\n        return config.submissionAdapter.sendRequest(request, cb, isAppExiting);\n    };\n    DefaultSubmissionClient.prototype.postUserDescription = function (referenceId, description, config, callback) {\n        var path = \"/api/v2/events/by-ref/\" + encodeURIComponent(referenceId) + \"/user-description\";\n        var data = JSON.stringify(description);\n        var request = this.createRequest(config, 'POST', path, data);\n        var cb = this.createSubmissionCallback(config, callback);\n        return config.submissionAdapter.sendRequest(request, cb);\n    };\n    DefaultSubmissionClient.prototype.getSettings = function (config, callback) {\n        var request = this.createRequest(config, 'GET', '/api/v2/projects/config');\n        var cb = function (status, message, data, headers) {\n            if (status !== 200) {\n                return callback(new SettingsResponse(false, null, -1, null, message));\n            }\n            var settings;\n            try {\n                settings = JSON.parse(data);\n            }\n            catch (e) {\n                config.log.error(\"Unable to parse settings: '\" + data + \"'\");\n            }\n            if (!settings || isNaN(settings.version)) {\n                return callback(new SettingsResponse(false, null, -1, null, 'Invalid configuration settings.'));\n            }\n            callback(new SettingsResponse(true, settings.settings || {}, settings.version));\n        };\n        return config.submissionAdapter.sendRequest(request, cb);\n    };\n    DefaultSubmissionClient.prototype.createRequest = function (config, method, path, data) {\n        if (data === void 0) { data = null; }\n        return {\n            method: method,\n            path: path,\n            data: data,\n            serverUrl: config.serverUrl,\n            apiKey: config.apiKey,\n            userAgent: config.userAgent\n        };\n    };\n    DefaultSubmissionClient.prototype.createSubmissionCallback = function (config, callback) {\n        var _this = this;\n        return function (status, message, data, headers) {\n            var settingsVersion = headers && parseInt(headers[_this.configurationVersionHeader], 10);\n            SettingsManager.checkVersion(settingsVersion, config);\n            callback(new SubmissionResponse(status, message));\n        };\n    };\n    return DefaultSubmissionClient;\n})();\nexports.DefaultSubmissionClient = DefaultSubmissionClient;\nvar Utils = (function () {\n    function Utils() {\n    }\n    Utils.addRange = function (target) {\n        var values = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n        }\n        if (!target) {\n            target = [];\n        }\n        if (!values || values.length === 0) {\n            return target;\n        }\n        for (var index = 0; index < values.length; index++) {\n            if (values[index] && target.indexOf(values[index]) < 0) {\n                target.push(values[index]);\n            }\n        }\n        return target;\n    };\n    Utils.getHashCode = function (source) {\n        if (!source || source.length === 0) {\n            return 0;\n        }\n        var hash = 0;\n        for (var index = 0; index < source.length; index++) {\n            var character = source.charCodeAt(index);\n            hash = ((hash << 5) - hash) + character;\n            hash |= 0;\n        }\n        return hash;\n    };\n    Utils.getCookies = function (cookies, exclusions) {\n        var result = {};\n        var parts = (cookies || '').split('; ');\n        for (var index = 0; index < parts.length; index++) {\n            var cookie = parts[index].split('=');\n            if (!Utils.isMatch(cookie[0], exclusions)) {\n                result[cookie[0]] = cookie[1];\n            }\n        }\n        return !Utils.isEmpty(result) ? result : null;\n    };\n    Utils.guid = function () {\n        function s4() {\n            return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n        }\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n    };\n    Utils.merge = function (defaultValues, values) {\n        var result = {};\n        for (var key in defaultValues || {}) {\n            if (!!defaultValues[key]) {\n                result[key] = defaultValues[key];\n            }\n        }\n        for (var key in values || {}) {\n            if (!!values[key]) {\n                result[key] = values[key];\n            }\n        }\n        return result;\n    };\n    Utils.parseVersion = function (source) {\n        if (!source) {\n            return null;\n        }\n        var versionRegex = /(v?((\\d+)\\.(\\d+)(\\.(\\d+))?)(?:-([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?(?:\\+([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?)/;\n        var matches = versionRegex.exec(source);\n        if (matches && matches.length > 0) {\n            return matches[0];\n        }\n        return null;\n    };\n    Utils.parseQueryString = function (query, exclusions) {\n        if (!query || query.length === 0) {\n            return null;\n        }\n        var pairs = query.split('&');\n        if (pairs.length === 0) {\n            return null;\n        }\n        var result = {};\n        for (var index = 0; index < pairs.length; index++) {\n            var pair = pairs[index].split('=');\n            if (!Utils.isMatch(pair[0], exclusions)) {\n                result[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n            }\n        }\n        return !Utils.isEmpty(result) ? result : null;\n    };\n    Utils.randomNumber = function () {\n        return Math.floor(Math.random() * 9007199254740992);\n    };\n    Utils.isMatch = function (input, patterns) {\n        if (!input || typeof input !== 'string') {\n            return false;\n        }\n        var trim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n        return (patterns || []).some(function (pattern) {\n            if (!pattern) {\n                return false;\n            }\n            pattern = pattern.toLowerCase().replace(trim, '');\n            input = input.toLowerCase().replace(trim, '');\n            if (pattern.length <= 0) {\n                return false;\n            }\n            var startsWithWildcard = pattern[0] === '*';\n            if (startsWithWildcard) {\n                pattern = pattern.slice(1);\n            }\n            var endsWithWildcard = pattern[pattern.length - 1] === '*';\n            if (endsWithWildcard) {\n                pattern = pattern.substring(0, pattern.length - 1);\n            }\n            if (startsWithWildcard && endsWithWildcard) {\n                return input.indexOf(pattern) !== -1;\n            }\n            if (startsWithWildcard) {\n                var lastIndexOf = input.lastIndexOf(pattern);\n                return lastIndexOf !== -1 && lastIndexOf === (input.length - pattern.length);\n            }\n            if (endsWithWildcard) {\n                return input.indexOf(pattern) === 0;\n            }\n            return input === pattern;\n        });\n    };\n    Utils.isEmpty = function (input) {\n        return input === null || (typeof (input) === 'object' && Object.keys(input).length === 0);\n    };\n    Utils.stringify = function (data, exclusions, maxDepth) {\n        function stringifyImpl(obj, excludedKeys) {\n            var cache = [];\n            return JSON.stringify(obj, function (key, value) {\n                if (Utils.isMatch(key, excludedKeys)) {\n                    return;\n                }\n                if (typeof value === 'object' && !!value) {\n                    if (cache.indexOf(value) !== -1) {\n                        return;\n                    }\n                    cache.push(value);\n                }\n                return value;\n            });\n        }\n        if (({}).toString.call(data) === '[object Object]') {\n            var flattened = {};\n            for (var prop in data) {\n                var value = data[prop];\n                if (value === data) {\n                    continue;\n                }\n                flattened[prop] = data[prop];\n            }\n            return stringifyImpl(flattened, exclusions);\n        }\n        if (({}).toString.call(data) === '[object Array]') {\n            var result = [];\n            for (var index = 0; index < data.length; index++) {\n                result[index] = JSON.parse(stringifyImpl(data[index], exclusions));\n            }\n            return JSON.stringify(result);\n        }\n        return stringifyImpl(data, exclusions);\n    };\n    return Utils;\n})();\nexports.Utils = Utils;\nvar Configuration = (function () {\n    function Configuration(configSettings) {\n        this.defaultTags = [];\n        this.defaultData = {};\n        this.enabled = true;\n        this.lastReferenceIdManager = new DefaultLastReferenceIdManager();\n        this.settings = {};\n        this._plugins = [];\n        this._serverUrl = 'https://collector.exceptionless.io';\n        this._dataExclusions = [];\n        this._userAgentBotPatterns = [];\n        function inject(fn) {\n            return typeof fn === 'function' ? fn(this) : fn;\n        }\n        configSettings = Utils.merge(Configuration.defaults, configSettings);\n        this.log = inject(configSettings.log) || new NullLog();\n        this.apiKey = configSettings.apiKey;\n        this.serverUrl = configSettings.serverUrl;\n        this.environmentInfoCollector = inject(configSettings.environmentInfoCollector);\n        this.errorParser = inject(configSettings.errorParser);\n        this.lastReferenceIdManager = inject(configSettings.lastReferenceIdManager) || new DefaultLastReferenceIdManager();\n        this.moduleCollector = inject(configSettings.moduleCollector);\n        this.requestInfoCollector = inject(configSettings.requestInfoCollector);\n        this.submissionBatchSize = inject(configSettings.submissionBatchSize) || 50;\n        this.submissionAdapter = inject(configSettings.submissionAdapter);\n        this.submissionClient = inject(configSettings.submissionClient) || new DefaultSubmissionClient();\n        this.storage = inject(configSettings.storage) || new InMemoryStorageProvider();\n        this.queue = inject(configSettings.queue) || new DefaultEventQueue(this);\n        SettingsManager.applySavedServerSettings(this);\n        EventPluginManager.addDefaultPlugins(this);\n    }\n    Object.defineProperty(Configuration.prototype, \"apiKey\", {\n        get: function () {\n            return this._apiKey;\n        },\n        set: function (value) {\n            this._apiKey = value || null;\n            this.log.info(\"apiKey: \" + this._apiKey);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Configuration.prototype, \"isValid\", {\n        get: function () {\n            return !!this.apiKey && this.apiKey.length >= 10;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Configuration.prototype, \"serverUrl\", {\n        get: function () {\n            return this._serverUrl;\n        },\n        set: function (value) {\n            if (!!value) {\n                this._serverUrl = value;\n                this.log.info(\"serverUrl: \" + this._serverUrl);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Configuration.prototype, \"dataExclusions\", {\n        get: function () {\n            var exclusions = this.settings['@@DataExclusions'];\n            return this._dataExclusions.concat(exclusions && exclusions.split(',') || []);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Configuration.prototype.addDataExclusions = function () {\n        var exclusions = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            exclusions[_i - 0] = arguments[_i];\n        }\n        this._dataExclusions = Utils.addRange.apply(Utils, [this._dataExclusions].concat(exclusions));\n    };\n    Object.defineProperty(Configuration.prototype, \"userAgentBotPatterns\", {\n        get: function () {\n            var patterns = this.settings['@@UserAgentBotPatterns'];\n            return this._userAgentBotPatterns.concat(patterns && patterns.split(',') || []);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Configuration.prototype.addUserAgentBotPatterns = function () {\n        var userAgentBotPatterns = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            userAgentBotPatterns[_i - 0] = arguments[_i];\n        }\n        this._userAgentBotPatterns = Utils.addRange.apply(Utils, [this._userAgentBotPatterns].concat(userAgentBotPatterns));\n    };\n    Object.defineProperty(Configuration.prototype, \"plugins\", {\n        get: function () {\n            return this._plugins.sort(function (p1, p2) {\n                return (p1.priority < p2.priority) ? -1 : (p1.priority > p2.priority) ? 1 : 0;\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Configuration.prototype.addPlugin = function (pluginOrName, priority, pluginAction) {\n        var plugin = !!pluginAction ? { name: pluginOrName, priority: priority, run: pluginAction } : pluginOrName;\n        if (!plugin || !plugin.run) {\n            this.log.error('Add plugin failed: Run method not defined');\n            return;\n        }\n        if (!plugin.name) {\n            plugin.name = Utils.guid();\n        }\n        if (!plugin.priority) {\n            plugin.priority = 0;\n        }\n        var pluginExists = false;\n        var plugins = this._plugins;\n        for (var index = 0; index < plugins.length; index++) {\n            if (plugins[index].name === plugin.name) {\n                pluginExists = true;\n                break;\n            }\n        }\n        if (!pluginExists) {\n            plugins.push(plugin);\n        }\n    };\n    Configuration.prototype.removePlugin = function (pluginOrName) {\n        var name = typeof pluginOrName === 'string' ? pluginOrName : pluginOrName.name;\n        if (!name) {\n            this.log.error('Remove plugin failed: Plugin name not defined');\n            return;\n        }\n        var plugins = this._plugins;\n        for (var index = 0; index < plugins.length; index++) {\n            if (plugins[index].name === name) {\n                plugins.splice(index, 1);\n                break;\n            }\n        }\n    };\n    Configuration.prototype.setVersion = function (version) {\n        if (!!version) {\n            this.defaultData['@version'] = version;\n        }\n    };\n    Configuration.prototype.setUserIdentity = function (userInfoOrIdentity, name) {\n        var USER_KEY = '@user';\n        var userInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name: name };\n        var shouldRemove = !userInfo || (!userInfo.identity && !userInfo.name);\n        if (shouldRemove) {\n            delete this.defaultData[USER_KEY];\n        }\n        else {\n            this.defaultData[USER_KEY] = userInfo;\n        }\n        this.log.info(\"user identity: \" + (shouldRemove ? 'null' : userInfo.identity));\n    };\n    Object.defineProperty(Configuration.prototype, \"userAgent\", {\n        get: function () {\n            return 'exceptionless-js/1.3.1';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Configuration.prototype.useSessions = function (sendHeartbeats) {\n        if (sendHeartbeats === void 0) { sendHeartbeats = true; }\n        if (sendHeartbeats) {\n            this.addPlugin(new HeartbeatPlugin());\n        }\n    };\n    Configuration.prototype.useReferenceIds = function () {\n        this.addPlugin(new ReferenceIdPlugin());\n    };\n    Configuration.prototype.useLocalStorage = function () {\n    };\n    Configuration.prototype.useDebugLogger = function () {\n        this.log = new ConsoleLog();\n    };\n    Object.defineProperty(Configuration, \"defaults\", {\n        get: function () {\n            if (Configuration._defaultSettings === null) {\n                Configuration._defaultSettings = {};\n            }\n            return Configuration._defaultSettings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Configuration._defaultSettings = null;\n    return Configuration;\n})();\nexports.Configuration = Configuration;\nvar EventBuilder = (function () {\n    function EventBuilder(event, client, pluginContextData) {\n        this._validIdentifierErrorMessage = 'must contain between 8 and 100 alphanumeric or \\'-\\' characters.';\n        this.target = event;\n        this.client = client;\n        this.pluginContextData = pluginContextData || new ContextData();\n    }\n    EventBuilder.prototype.setType = function (type) {\n        if (!!type) {\n            this.target.type = type;\n        }\n        return this;\n    };\n    EventBuilder.prototype.setSource = function (source) {\n        if (!!source) {\n            this.target.source = source;\n        }\n        return this;\n    };\n    EventBuilder.prototype.setReferenceId = function (referenceId) {\n        if (!this.isValidIdentifier(referenceId)) {\n            throw new Error(\"ReferenceId \" + this._validIdentifierErrorMessage);\n        }\n        this.target.reference_id = referenceId;\n        return this;\n    };\n    EventBuilder.prototype.setEventReference = function (name, id) {\n        if (!name) {\n            throw new Error('Invalid name');\n        }\n        if (!id || !this.isValidIdentifier(id)) {\n            throw new Error(\"Id \" + this._validIdentifierErrorMessage);\n        }\n        this.setProperty('@ref:' + name, id);\n        return this;\n    };\n    EventBuilder.prototype.setMessage = function (message) {\n        if (!!message) {\n            this.target.message = message;\n        }\n        return this;\n    };\n    EventBuilder.prototype.setGeo = function (latitude, longitude) {\n        if (latitude < -90.0 || latitude > 90.0) {\n            throw new Error('Must be a valid latitude value between -90.0 and 90.0.');\n        }\n        if (longitude < -180.0 || longitude > 180.0) {\n            throw new Error('Must be a valid longitude value between -180.0 and 180.0.');\n        }\n        this.target.geo = latitude + \",\" + longitude;\n        return this;\n    };\n    EventBuilder.prototype.setUserIdentity = function (userInfoOrIdentity, name) {\n        var userInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name: name };\n        if (!userInfo || (!userInfo.identity && !userInfo.name)) {\n            return this;\n        }\n        this.setProperty('@user', userInfo);\n        return this;\n    };\n    EventBuilder.prototype.setUserDescription = function (emailAddress, description) {\n        if (emailAddress && description) {\n            this.setProperty('@user_description', { email_address: emailAddress, description: description });\n        }\n        return this;\n    };\n    EventBuilder.prototype.setManualStackingKey = function (manualStackingKey) {\n        if (manualStackingKey) {\n            this.setProperty('@stack', manualStackingKey);\n        }\n        return this;\n    };\n    EventBuilder.prototype.setValue = function (value) {\n        if (!!value) {\n            this.target.value = value;\n        }\n        return this;\n    };\n    EventBuilder.prototype.addTags = function () {\n        var tags = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            tags[_i - 0] = arguments[_i];\n        }\n        this.target.tags = Utils.addRange.apply(Utils, [this.target.tags].concat(tags));\n        return this;\n    };\n    EventBuilder.prototype.setProperty = function (name, value, maxDepth, excludedPropertyNames) {\n        if (!name || (value === undefined || value == null)) {\n            return this;\n        }\n        if (!this.target.data) {\n            this.target.data = {};\n        }\n        var result = JSON.parse(Utils.stringify(value, this.client.config.dataExclusions.concat(excludedPropertyNames || []), maxDepth));\n        if (!Utils.isEmpty(result)) {\n            this.target.data[name] = result;\n        }\n        return this;\n    };\n    EventBuilder.prototype.markAsCritical = function (critical) {\n        if (critical) {\n            this.addTags('Critical');\n        }\n        return this;\n    };\n    EventBuilder.prototype.addRequestInfo = function (request) {\n        if (!!request) {\n            this.pluginContextData['@request'] = request;\n        }\n        return this;\n    };\n    EventBuilder.prototype.submit = function (callback) {\n        this.client.submitEvent(this.target, this.pluginContextData, callback);\n    };\n    EventBuilder.prototype.isValidIdentifier = function (value) {\n        if (!value) {\n            return true;\n        }\n        if (value.length < 8 || value.length > 100) {\n            return false;\n        }\n        for (var index = 0; index < value.length; index++) {\n            var code = value.charCodeAt(index);\n            var isDigit = (code >= 48) && (code <= 57);\n            var isLetter = ((code >= 65) && (code <= 90)) || ((code >= 97) && (code <= 122));\n            var isMinus = code === 45;\n            if (!(isDigit || isLetter) && !isMinus) {\n                return false;\n            }\n        }\n        return true;\n    };\n    return EventBuilder;\n})();\nexports.EventBuilder = EventBuilder;\nvar ContextData = (function () {\n    function ContextData() {\n    }\n    ContextData.prototype.setException = function (exception) {\n        if (exception) {\n            this['@@_Exception'] = exception;\n        }\n    };\n    Object.defineProperty(ContextData.prototype, \"hasException\", {\n        get: function () {\n            return !!this['@@_Exception'];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ContextData.prototype.getException = function () {\n        return this['@@_Exception'] || null;\n    };\n    ContextData.prototype.markAsUnhandledError = function () {\n        this['@@_IsUnhandledError'] = true;\n    };\n    Object.defineProperty(ContextData.prototype, \"isUnhandledError\", {\n        get: function () {\n            return !!this['@@_IsUnhandledError'];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ContextData.prototype.setSubmissionMethod = function (method) {\n        if (method) {\n            this['@@_SubmissionMethod'] = method;\n        }\n    };\n    ContextData.prototype.getSubmissionMethod = function () {\n        return this['@@_SubmissionMethod'] || null;\n    };\n    return ContextData;\n})();\nexports.ContextData = ContextData;\nvar SubmissionResponse = (function () {\n    function SubmissionResponse(statusCode, message) {\n        this.success = false;\n        this.badRequest = false;\n        this.serviceUnavailable = false;\n        this.paymentRequired = false;\n        this.unableToAuthenticate = false;\n        this.notFound = false;\n        this.requestEntityTooLarge = false;\n        this.statusCode = statusCode;\n        this.message = message;\n        this.success = statusCode >= 200 && statusCode <= 299;\n        this.badRequest = statusCode === 400;\n        this.serviceUnavailable = statusCode === 503;\n        this.paymentRequired = statusCode === 402;\n        this.unableToAuthenticate = statusCode === 401 || statusCode === 403;\n        this.notFound = statusCode === 404;\n        this.requestEntityTooLarge = statusCode === 413;\n    }\n    return SubmissionResponse;\n})();\nexports.SubmissionResponse = SubmissionResponse;\nvar ExceptionlessClient = (function () {\n    function ExceptionlessClient(settingsOrApiKey, serverUrl) {\n        if (typeof settingsOrApiKey !== 'object') {\n            this.config = new Configuration(settingsOrApiKey);\n        }\n        else {\n            this.config = new Configuration({ apiKey: settingsOrApiKey, serverUrl: serverUrl });\n        }\n    }\n    ExceptionlessClient.prototype.createException = function (exception) {\n        var pluginContextData = new ContextData();\n        pluginContextData.setException(exception);\n        return this.createEvent(pluginContextData).setType('error');\n    };\n    ExceptionlessClient.prototype.submitException = function (exception, callback) {\n        this.createException(exception).submit(callback);\n    };\n    ExceptionlessClient.prototype.createUnhandledException = function (exception, submissionMethod) {\n        var builder = this.createException(exception);\n        builder.pluginContextData.markAsUnhandledError();\n        builder.pluginContextData.setSubmissionMethod(submissionMethod);\n        return builder;\n    };\n    ExceptionlessClient.prototype.submitUnhandledException = function (exception, submissionMethod, callback) {\n        this.createUnhandledException(exception, submissionMethod).submit(callback);\n    };\n    ExceptionlessClient.prototype.createFeatureUsage = function (feature) {\n        return this.createEvent().setType('usage').setSource(feature);\n    };\n    ExceptionlessClient.prototype.submitFeatureUsage = function (feature, callback) {\n        this.createFeatureUsage(feature).submit(callback);\n    };\n    ExceptionlessClient.prototype.createLog = function (sourceOrMessage, message, level) {\n        var builder = this.createEvent().setType('log');\n        if (message && level) {\n            builder = builder.setSource(sourceOrMessage).setMessage(message).setProperty('@level', level);\n        }\n        else if (message) {\n            builder = builder.setSource(sourceOrMessage).setMessage(message);\n        }\n        else {\n            var caller = arguments.callee.caller;\n            builder = builder.setSource(caller && caller.name).setMessage(sourceOrMessage);\n        }\n        return builder;\n    };\n    ExceptionlessClient.prototype.submitLog = function (sourceOrMessage, message, level, callback) {\n        this.createLog(sourceOrMessage, message, level).submit(callback);\n    };\n    ExceptionlessClient.prototype.createNotFound = function (resource) {\n        return this.createEvent().setType('404').setSource(resource);\n    };\n    ExceptionlessClient.prototype.submitNotFound = function (resource, callback) {\n        this.createNotFound(resource).submit(callback);\n    };\n    ExceptionlessClient.prototype.createSessionStart = function () {\n        return this.createEvent().setType('session');\n    };\n    ExceptionlessClient.prototype.submitSessionStart = function (callback) {\n        this.createSessionStart().submit(callback);\n    };\n    ExceptionlessClient.prototype.createSessionEnd = function () {\n        return this.createEvent().setType('sessionend');\n    };\n    ExceptionlessClient.prototype.submitSessionEnd = function (callback) {\n        this.createSessionEnd().submit(callback);\n    };\n    ExceptionlessClient.prototype.createSessionHeartbeat = function () {\n        return this.createEvent().setType('heartbeat');\n    };\n    ExceptionlessClient.prototype.submitSessionHeartbeat = function (callback) {\n        this.createSessionHeartbeat().submit(callback);\n    };\n    ExceptionlessClient.prototype.createEvent = function (pluginContextData) {\n        return new EventBuilder({ date: new Date() }, this, pluginContextData);\n    };\n    ExceptionlessClient.prototype.submitEvent = function (event, pluginContextData, callback) {\n        function cancelled(context) {\n            if (!!context) {\n                context.cancelled = true;\n            }\n            return !!callback && callback(context);\n        }\n        var context = new EventPluginContext(this, event, pluginContextData);\n        if (!event) {\n            return cancelled(context);\n        }\n        if (!this.config.enabled) {\n            this.config.log.info('Event submission is currently disabled.');\n            return cancelled(context);\n        }\n        if (!event.data) {\n            event.data = {};\n        }\n        if (!event.tags || !event.tags.length) {\n            event.tags = [];\n        }\n        EventPluginManager.run(context, function (ctx) {\n            var ev = ctx.event;\n            if (!ctx.cancelled) {\n                if (!ev.type || ev.type.length === 0) {\n                    ev.type = 'log';\n                }\n                if (!ev.date) {\n                    ev.date = new Date();\n                }\n                var config = ctx.client.config;\n                config.queue.enqueue(ev);\n                if (ev.reference_id && ev.reference_id.length > 0) {\n                    ctx.log.info(\"Setting last reference id '\" + ev.reference_id + \"'\");\n                    config.lastReferenceIdManager.setLast(ev.reference_id);\n                }\n            }\n            !!callback && callback(ctx);\n        });\n    };\n    ExceptionlessClient.prototype.updateUserEmailAndDescription = function (referenceId, email, description, callback) {\n        var _this = this;\n        if (!referenceId || !email || !description || !this.config.enabled) {\n            return !!callback && callback(new SubmissionResponse(500, 'cancelled'));\n        }\n        var userDescription = { email_address: email, description: description };\n        this.config.submissionClient.postUserDescription(referenceId, userDescription, this.config, function (response) {\n            if (!response.success) {\n                _this.config.log.error(\"Failed to submit user email and description for event '\" + referenceId + \"': \" + response.statusCode + \" \" + response.message);\n            }\n            !!callback && callback(response);\n        });\n    };\n    ExceptionlessClient.prototype.getLastReferenceId = function () {\n        return this.config.lastReferenceIdManager.getLast();\n    };\n    Object.defineProperty(ExceptionlessClient, \"default\", {\n        get: function () {\n            if (ExceptionlessClient._instance === null) {\n                ExceptionlessClient._instance = new ExceptionlessClient(null);\n            }\n            return ExceptionlessClient._instance;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ExceptionlessClient._instance = null;\n    return ExceptionlessClient;\n})();\nexports.ExceptionlessClient = ExceptionlessClient;\nvar ConfigurationDefaultsPlugin = (function () {\n    function ConfigurationDefaultsPlugin() {\n        this.priority = 10;\n        this.name = 'ConfigurationDefaultsPlugin';\n    }\n    ConfigurationDefaultsPlugin.prototype.run = function (context, next) {\n        var config = context.client.config;\n        var defaultTags = config.defaultTags || [];\n        for (var index = 0; index < defaultTags.length; index++) {\n            var tag = defaultTags[index];\n            if (!!tag && context.event.tags.indexOf(tag) < 0) {\n                context.event.tags.push(tag);\n            }\n        }\n        var defaultData = config.defaultData || {};\n        for (var key in defaultData) {\n            if (!!defaultData[key]) {\n                var result = JSON.parse(Utils.stringify(defaultData[key], config.dataExclusions));\n                if (!Utils.isEmpty(result)) {\n                    context.event.data[key] = result;\n                }\n            }\n        }\n        next && next();\n    };\n    return ConfigurationDefaultsPlugin;\n})();\nexports.ConfigurationDefaultsPlugin = ConfigurationDefaultsPlugin;\nvar ErrorPlugin = (function () {\n    function ErrorPlugin() {\n        this.priority = 30;\n        this.name = 'ErrorPlugin';\n    }\n    ErrorPlugin.prototype.run = function (context, next) {\n        var ERROR_KEY = '@error';\n        var ignoredProperties = [\n            'arguments',\n            'column',\n            'columnNumber',\n            'description',\n            'fileName',\n            'message',\n            'name',\n            'number',\n            'line',\n            'lineNumber',\n            'opera#sourceloc',\n            'sourceId',\n            'sourceURL',\n            'stack',\n            'stackArray',\n            'stacktrace'\n        ];\n        var exception = context.contextData.getException();\n        if (!!exception) {\n            context.event.type = 'error';\n            if (!context.event.data[ERROR_KEY]) {\n                var config = context.client.config;\n                var parser = config.errorParser;\n                if (!parser) {\n                    throw new Error('No error parser was defined.');\n                }\n                var result = parser.parse(context, exception);\n                if (!!result) {\n                    var additionalData = JSON.parse(Utils.stringify(exception, config.dataExclusions.concat(ignoredProperties)));\n                    if (!Utils.isEmpty(additionalData)) {\n                        if (!result.data) {\n                            result.data = {};\n                        }\n                        result.data['@ext'] = additionalData;\n                    }\n                    context.event.data[ERROR_KEY] = result;\n                }\n            }\n        }\n        next && next();\n    };\n    return ErrorPlugin;\n})();\nexports.ErrorPlugin = ErrorPlugin;\nvar ModuleInfoPlugin = (function () {\n    function ModuleInfoPlugin() {\n        this.priority = 50;\n        this.name = 'ModuleInfoPlugin';\n    }\n    ModuleInfoPlugin.prototype.run = function (context, next) {\n        var ERROR_KEY = '@error';\n        var collector = context.client.config.moduleCollector;\n        if (context.event.data[ERROR_KEY] && !context.event.data['@error'].modules && !!collector) {\n            var modules = collector.getModules(context);\n            if (modules && modules.length > 0) {\n                context.event.data[ERROR_KEY].modules = modules;\n            }\n        }\n        next && next();\n    };\n    return ModuleInfoPlugin;\n})();\nexports.ModuleInfoPlugin = ModuleInfoPlugin;\nvar RequestInfoPlugin = (function () {\n    function RequestInfoPlugin() {\n        this.priority = 70;\n        this.name = 'RequestInfoPlugin';\n    }\n    RequestInfoPlugin.prototype.run = function (context, next) {\n        var REQUEST_KEY = '@request';\n        var config = context.client.config;\n        var collector = config.requestInfoCollector;\n        if (!context.event.data[REQUEST_KEY] && !!collector) {\n            var requestInfo = collector.getRequestInfo(context);\n            if (!!requestInfo) {\n                if (Utils.isMatch(requestInfo.user_agent, config.userAgentBotPatterns)) {\n                    context.log.info('Cancelling event as the request user agent matches a known bot pattern');\n                    context.cancelled = true;\n                }\n                else {\n                    context.event.data[REQUEST_KEY] = requestInfo;\n                }\n            }\n        }\n        next && next();\n    };\n    return RequestInfoPlugin;\n})();\nexports.RequestInfoPlugin = RequestInfoPlugin;\nvar EnvironmentInfoPlugin = (function () {\n    function EnvironmentInfoPlugin() {\n        this.priority = 80;\n        this.name = 'EnvironmentInfoPlugin';\n    }\n    EnvironmentInfoPlugin.prototype.run = function (context, next) {\n        var ENVIRONMENT_KEY = '@environment';\n        var collector = context.client.config.environmentInfoCollector;\n        if (!context.event.data[ENVIRONMENT_KEY] && collector) {\n            var environmentInfo = collector.getEnvironmentInfo(context);\n            if (!!environmentInfo) {\n                context.event.data[ENVIRONMENT_KEY] = environmentInfo;\n            }\n        }\n        next && next();\n    };\n    return EnvironmentInfoPlugin;\n})();\nexports.EnvironmentInfoPlugin = EnvironmentInfoPlugin;\nvar SubmissionMethodPlugin = (function () {\n    function SubmissionMethodPlugin() {\n        this.priority = 100;\n        this.name = 'SubmissionMethodPlugin';\n    }\n    SubmissionMethodPlugin.prototype.run = function (context, next) {\n        var submissionMethod = context.contextData.getSubmissionMethod();\n        if (!!submissionMethod) {\n            context.event.data['@submission_method'] = submissionMethod;\n        }\n        next && next();\n    };\n    return SubmissionMethodPlugin;\n})();\nexports.SubmissionMethodPlugin = SubmissionMethodPlugin;\nvar ERROR_KEY = '@error';\nvar WINDOW_MILLISECONDS = 2000;\nvar MAX_QUEUE_LENGTH = 10;\nvar DuplicateCheckerPlugin = (function () {\n    function DuplicateCheckerPlugin() {\n        this.priority = 40;\n        this.name = 'DuplicateCheckerPlugin';\n        this.recentlyProcessedErrors = [];\n    }\n    DuplicateCheckerPlugin.prototype.run = function (context, next) {\n        if (context.event.type === 'error') {\n            var error = context.event.data[ERROR_KEY];\n            var isDuplicate = this.checkDuplicate(error, context.log);\n            if (isDuplicate) {\n                context.cancelled = true;\n                return;\n            }\n        }\n        next && next();\n    };\n    DuplicateCheckerPlugin.prototype.getNow = function () {\n        return Date.now();\n    };\n    DuplicateCheckerPlugin.prototype.checkDuplicate = function (error, log) {\n        function getHashCodeForError(err) {\n            if (!err.stack_trace) {\n                return null;\n            }\n            return Utils.getHashCode(JSON.stringify(err.stack_trace));\n        }\n        var now = this.getNow();\n        var repeatWindow = now - WINDOW_MILLISECONDS;\n        var hashCode;\n        while (error) {\n            hashCode = getHashCodeForError(error);\n            if (hashCode && this.recentlyProcessedErrors.some(function (h) {\n                return h.hash === hashCode && h.timestamp >= repeatWindow;\n            })) {\n                log.info(\"Ignoring duplicate error event: hash=\" + hashCode);\n                return true;\n            }\n            this.recentlyProcessedErrors.push({ hash: hashCode, timestamp: now });\n            while (this.recentlyProcessedErrors.length > MAX_QUEUE_LENGTH) {\n                this.recentlyProcessedErrors.shift();\n            }\n            error = error.inner;\n        }\n        return false;\n    };\n    return DuplicateCheckerPlugin;\n})();\nexports.DuplicateCheckerPlugin = DuplicateCheckerPlugin;\nvar SettingsResponse = (function () {\n    function SettingsResponse(success, settings, settingsVersion, exception, message) {\n        if (settingsVersion === void 0) { settingsVersion = -1; }\n        if (exception === void 0) { exception = null; }\n        if (message === void 0) { message = null; }\n        this.success = false;\n        this.settingsVersion = -1;\n        this.success = success;\n        this.settings = settings;\n        this.settingsVersion = settingsVersion;\n        this.exception = exception;\n        this.message = message;\n    }\n    return SettingsResponse;\n})();\nexports.SettingsResponse = SettingsResponse;\nvar InMemoryStorage = (function () {\n    function InMemoryStorage(maxItems) {\n        this.items = [];\n        this.maxItems = maxItems;\n    }\n    InMemoryStorage.prototype.save = function (value) {\n        if (!value) {\n            return null;\n        }\n        var items = this.items;\n        var timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n        var item = { timestamp: timestamp, value: value };\n        if (items.push(item) > this.maxItems) {\n            items.shift();\n        }\n        this.lastTimestamp = timestamp;\n        return item.timestamp;\n    };\n    InMemoryStorage.prototype.get = function (limit) {\n        return this.items.slice(0, limit);\n    };\n    InMemoryStorage.prototype.remove = function (timestamp) {\n        var items = this.items;\n        for (var i = 0; i < items.length; i++) {\n            if (items[i].timestamp === timestamp) {\n                items.splice(i, 1);\n                return;\n            }\n        }\n    };\n    InMemoryStorage.prototype.clear = function () {\n        this.items = [];\n    };\n    return InMemoryStorage;\n})();\nexports.InMemoryStorage = InMemoryStorage;\nvar KeyValueStorageBase = (function () {\n    function KeyValueStorageBase(maxItems) {\n        this.items = [];\n        this.maxItems = maxItems;\n    }\n    KeyValueStorageBase.prototype.save = function (value, single) {\n        if (!value) {\n            return null;\n        }\n        this.ensureIndex();\n        var items = this.items;\n        var timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n        var key = this.getKey(timestamp);\n        var json = JSON.stringify(value);\n        try {\n            this.write(key, json);\n            this.lastTimestamp = timestamp;\n            if (items.push(timestamp) > this.maxItems) {\n                this.delete(this.getKey(items.shift()));\n            }\n        }\n        catch (e) {\n            return null;\n        }\n        return timestamp;\n    };\n    KeyValueStorageBase.prototype.get = function (limit) {\n        var _this = this;\n        this.ensureIndex();\n        return this.items.slice(0, limit)\n            .map(function (timestamp) {\n            var key = _this.getKey(timestamp);\n            try {\n                var json = _this.read(key);\n                var value = JSON.parse(json, parseDate);\n                return { timestamp: timestamp, value: value };\n            }\n            catch (error) {\n                _this.safeDelete(key);\n                return null;\n            }\n        })\n            .filter(function (item) { return item != null; });\n    };\n    KeyValueStorageBase.prototype.remove = function (timestamp) {\n        this.ensureIndex();\n        var items = this.items;\n        var index = items.indexOf(timestamp);\n        if (index >= 0) {\n            var key = this.getKey(timestamp);\n            this.safeDelete(key);\n            items.splice(index, 1);\n        }\n        ;\n    };\n    KeyValueStorageBase.prototype.clear = function () {\n        var _this = this;\n        this.items.forEach(function (item) { return _this.safeDelete(_this.getKey(item)); });\n        this.items = [];\n    };\n    KeyValueStorageBase.prototype.ensureIndex = function () {\n        if (!this.items) {\n            this.items = this.createIndex();\n            this.lastTimestamp = Math.max.apply(Math, [0].concat(this.items)) + 1;\n        }\n    };\n    KeyValueStorageBase.prototype.safeDelete = function (key) {\n        try {\n            this.delete(key);\n        }\n        catch (error) {\n        }\n    };\n    KeyValueStorageBase.prototype.createIndex = function () {\n        var _this = this;\n        try {\n            var keys = this.readAllKeys();\n            return keys.map(function (key) {\n                try {\n                    return _this.getTimestamp(key);\n                }\n                catch (error) {\n                    _this.safeDelete(key);\n                    return null;\n                }\n            }).filter(function (timestamp) { return timestamp != null; })\n                .sort(function (a, b) { return a - b; });\n        }\n        catch (error) {\n            return [];\n        }\n    };\n    return KeyValueStorageBase;\n})();\nexports.KeyValueStorageBase = KeyValueStorageBase;\nfunction parseDate(key, value) {\n    var dateRegx = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/g;\n    if (typeof value === 'string') {\n        var a = dateRegx.exec(value);\n        if (a) {\n            return new Date(value);\n        }\n    }\n    return value;\n}\n;\nvar BrowserStorage = (function (_super) {\n    __extends(BrowserStorage, _super);\n    function BrowserStorage(namespace, prefix, maxItems) {\n        if (prefix === void 0) { prefix = 'com.exceptionless.'; }\n        if (maxItems === void 0) { maxItems = 20; }\n        _super.call(this, maxItems);\n        this.prefix = prefix + namespace + '-';\n    }\n    BrowserStorage.isAvailable = function () {\n        try {\n            var storage = window.localStorage, x = '__storage_test__';\n            storage.setItem(x, x);\n            storage.removeItem(x);\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n    };\n    BrowserStorage.prototype.write = function (key, value) {\n        window.localStorage.setItem(key, value);\n    };\n    BrowserStorage.prototype.read = function (key) {\n        return window.localStorage.getItem(key);\n    };\n    BrowserStorage.prototype.readAllKeys = function () {\n        var _this = this;\n        return Object.keys(window.localStorage)\n            .filter(function (key) { return key.indexOf(_this.prefix) === 0; });\n    };\n    BrowserStorage.prototype.delete = function (key) {\n        window.localStorage.removeItem(key);\n    };\n    BrowserStorage.prototype.getKey = function (timestamp) {\n        return this.prefix + timestamp;\n    };\n    BrowserStorage.prototype.getTimestamp = function (key) {\n        return parseInt(key.substr(this.prefix.length), 10);\n    };\n    return BrowserStorage;\n})(KeyValueStorageBase);\nexports.BrowserStorage = BrowserStorage;\nvar DefaultErrorParser = (function () {\n    function DefaultErrorParser() {\n    }\n    DefaultErrorParser.prototype.parse = function (context, exception) {\n        function getParameters(parameters) {\n            var params = (typeof parameters === 'string' ? [parameters] : parameters) || [];\n            var result = [];\n            for (var index = 0; index < params.length; index++) {\n                result.push({ name: params[index] });\n            }\n            return result;\n        }\n        function getStackFrames(stackFrames) {\n            var ANONYMOUS = '<anonymous>';\n            var frames = [];\n            for (var index = 0; index < stackFrames.length; index++) {\n                var frame = stackFrames[index];\n                frames.push({\n                    name: (frame.func || ANONYMOUS).replace('?', ANONYMOUS),\n                    parameters: getParameters(frame.args),\n                    file_name: frame.url,\n                    line_number: frame.line || 0,\n                    column: frame.column || 0\n                });\n            }\n            return frames;\n        }\n        var TRACEKIT_STACK_TRACE_KEY = '@@_TraceKit.StackTrace';\n        var stackTrace = !!context.contextData[TRACEKIT_STACK_TRACE_KEY]\n            ? context.contextData[TRACEKIT_STACK_TRACE_KEY]\n            : TraceKit.computeStackTrace(exception, 25);\n        if (!stackTrace) {\n            throw new Error('Unable to parse the exceptions stack trace.');\n        }\n        return {\n            type: stackTrace.name,\n            message: stackTrace.message || exception.message,\n            stack_trace: getStackFrames(stackTrace.stack || [])\n        };\n    };\n    return DefaultErrorParser;\n})();\nexports.DefaultErrorParser = DefaultErrorParser;\nvar DefaultModuleCollector = (function () {\n    function DefaultModuleCollector() {\n    }\n    DefaultModuleCollector.prototype.getModules = function (context) {\n        if (document && document.getElementsByTagName) {\n            return null;\n        }\n        var modules = [];\n        var scripts = document.getElementsByTagName('script');\n        if (scripts && scripts.length > 0) {\n            for (var index = 0; index < scripts.length; index++) {\n                if (scripts[index].src) {\n                    modules.push({\n                        module_id: index,\n                        name: scripts[index].src,\n                        version: Utils.parseVersion(scripts[index].src)\n                    });\n                }\n                else if (!!scripts[index].innerHTML) {\n                    modules.push({\n                        module_id: index,\n                        name: 'Script Tag',\n                        version: Utils.getHashCode(scripts[index].innerHTML).toString()\n                    });\n                }\n            }\n        }\n        return modules;\n    };\n    return DefaultModuleCollector;\n})();\nexports.DefaultModuleCollector = DefaultModuleCollector;\nvar DefaultRequestInfoCollector = (function () {\n    function DefaultRequestInfoCollector() {\n    }\n    DefaultRequestInfoCollector.prototype.getRequestInfo = function (context) {\n        if (!document || !navigator || !location) {\n            return null;\n        }\n        var exclusions = context.client.config.dataExclusions;\n        var requestInfo = {\n            user_agent: navigator.userAgent,\n            is_secure: location.protocol === 'https:',\n            host: location.hostname,\n            port: location.port && location.port !== '' ? parseInt(location.port, 10) : 80,\n            path: location.pathname,\n            cookies: Utils.getCookies(document.cookie, exclusions),\n            query_string: Utils.parseQueryString(location.search.substring(1), exclusions)\n        };\n        if (document.referrer && document.referrer !== '') {\n            requestInfo.referrer = document.referrer;\n        }\n        return requestInfo;\n    };\n    return DefaultRequestInfoCollector;\n})();\nexports.DefaultRequestInfoCollector = DefaultRequestInfoCollector;\nvar DefaultSubmissionAdapter = (function () {\n    function DefaultSubmissionAdapter() {\n    }\n    DefaultSubmissionAdapter.prototype.sendRequest = function (request, callback, isAppExiting) {\n        var TIMEOUT = 'timeout';\n        var LOADED = 'loaded';\n        var WITH_CREDENTIALS = 'withCredentials';\n        var isCompleted = false;\n        var useSetTimeout = false;\n        function complete(mode, xhr) {\n            function parseResponseHeaders(headerStr) {\n                function trim(value) {\n                    return value.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n                }\n                var headers = {};\n                var headerPairs = (headerStr || '').split('\\u000d\\u000a');\n                for (var index = 0; index < headerPairs.length; index++) {\n                    var headerPair = headerPairs[index];\n                    var separator = headerPair.indexOf('\\u003a\\u0020');\n                    if (separator > 0) {\n                        headers[trim(headerPair.substring(0, separator).toLowerCase())] = headerPair.substring(separator + 2);\n                    }\n                }\n                return headers;\n            }\n            if (isCompleted) {\n                return;\n            }\n            isCompleted = true;\n            var message = xhr.statusText;\n            var responseText = xhr.responseText;\n            var status = xhr.status;\n            if (mode === TIMEOUT || status === 0) {\n                message = 'Unable to connect to server.';\n                status = 0;\n            }\n            else if (mode === LOADED && !status) {\n                status = request.method === 'POST' ? 202 : 200;\n            }\n            else if (status < 200 || status > 299) {\n                var responseBody = xhr.responseBody;\n                if (!!responseBody && !!responseBody.message) {\n                    message = responseBody.message;\n                }\n                else if (!!responseText && responseText.indexOf('message') !== -1) {\n                    try {\n                        message = JSON.parse(responseText).message;\n                    }\n                    catch (e) {\n                        message = responseText;\n                    }\n                }\n            }\n            callback(status || 500, message || '', responseText, parseResponseHeaders(xhr.getAllResponseHeaders && xhr.getAllResponseHeaders()));\n        }\n        function createRequest(userAgent, method, url) {\n            var xhr = new XMLHttpRequest();\n            if (WITH_CREDENTIALS in xhr) {\n                xhr.open(method, url, true);\n                xhr.setRequestHeader('X-Exceptionless-Client', userAgent);\n                if (method === 'POST') {\n                    xhr.setRequestHeader('Content-Type', 'application/json');\n                }\n            }\n            else if (typeof XDomainRequest !== 'undefined') {\n                useSetTimeout = true;\n                xhr = new XDomainRequest();\n                xhr.open(method, location.protocol === 'http:' ? url.replace('https:', 'http:') : url);\n            }\n            else {\n                xhr = null;\n            }\n            if (xhr) {\n                xhr.timeout = 10000;\n            }\n            return xhr;\n        }\n        var url = \"\" + request.serverUrl + request.path + \"?access_token=\" + encodeURIComponent(request.apiKey);\n        var xhr = createRequest(request.userAgent, request.method || 'POST', url);\n        if (!xhr) {\n            return callback(503, 'CORS not supported.');\n        }\n        if (WITH_CREDENTIALS in xhr) {\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState !== 4) {\n                    return;\n                }\n                complete(LOADED, xhr);\n            };\n        }\n        xhr.onprogress = function () { };\n        xhr.ontimeout = function () { return complete(TIMEOUT, xhr); };\n        xhr.onerror = function () { return complete('error', xhr); };\n        xhr.onload = function () { return complete(LOADED, xhr); };\n        if (useSetTimeout) {\n            setTimeout(function () { return xhr.send(request.data); }, 500);\n        }\n        else {\n            xhr.send(request.data);\n        }\n    };\n    return DefaultSubmissionAdapter;\n})();\nexports.DefaultSubmissionAdapter = DefaultSubmissionAdapter;\nvar BrowserStorageProvider = (function () {\n    function BrowserStorageProvider(prefix, maxQueueItems) {\n        if (maxQueueItems === void 0) { maxQueueItems = 250; }\n        this.queue = new BrowserStorage('q', prefix, maxQueueItems);\n        this.settings = new BrowserStorage('settings', prefix, 1);\n    }\n    return BrowserStorageProvider;\n})();\nexports.BrowserStorageProvider = BrowserStorageProvider;\nfunction getDefaultsSettingsFromScriptTag() {\n    if (!document || !document.getElementsByTagName) {\n        return null;\n    }\n    var scripts = document.getElementsByTagName('script');\n    for (var index = 0; index < scripts.length; index++) {\n        if (scripts[index].src && scripts[index].src.indexOf('/exceptionless') > -1) {\n            return Utils.parseQueryString(scripts[index].src.split('?').pop());\n        }\n    }\n    return null;\n}\nfunction processUnhandledException(stackTrace, options) {\n    var builder = ExceptionlessClient.default.createUnhandledException(new Error(stackTrace.message || (options || {}).status || 'Script error'), 'onerror');\n    builder.pluginContextData['@@_TraceKit.StackTrace'] = stackTrace;\n    builder.submit();\n}\nConfiguration.prototype.useLocalStorage = function () {\n    if (BrowserStorage.isAvailable()) {\n        this.storage = new BrowserStorageProvider();\n        SettingsManager.applySavedServerSettings(this);\n    }\n};\nvar defaults = Configuration.defaults;\nvar settings = getDefaultsSettingsFromScriptTag();\nif (settings && (settings.apiKey || settings.serverUrl)) {\n    defaults.apiKey = settings.apiKey;\n    defaults.serverUrl = settings.serverUrl;\n}\ndefaults.errorParser = new DefaultErrorParser();\ndefaults.moduleCollector = new DefaultModuleCollector();\ndefaults.requestInfoCollector = new DefaultRequestInfoCollector();\ndefaults.submissionAdapter = new DefaultSubmissionAdapter();\nTraceKit.report.subscribe(processUnhandledException);\nTraceKit.extendToAsynchronousCallbacks();\nError.stackTraceLimit = Infinity;\n\nreturn exports;\n\n}));\n\n\n","export interface IEvent {\n  type?: string;\n  source?: string;\n  date?: Date;\n  tags?: string[];\n  message?: string;\n  geo?: string;\n  value?: number;\n  data?: any;\n  reference_id?: string;\n}\n\nexport interface ILastReferenceIdManager {\n  getLast(): string;\n  clearLast(): void;\n  setLast(eventId: string): void;\n}\n\nexport interface ILog {\n  info(message: string): void;\n  warn(message: string): void;\n  error(message: string): void;\n}\n\n                                          \n\nexport interface IEventQueue {\n  enqueue(event: IEvent): void;\n  process(isAppExiting?: boolean): void;\n  suspendProcessing(durationInMinutes?: number, discardFutureQueuedItems?: boolean, clearQueue?: boolean): void;\n}\n\n                                                                                                                                  \n\nexport interface IEnvironmentInfoCollector {\n  getEnvironmentInfo(context: EventPluginContext): IEnvironmentInfo;\n}\n\n                                                                                                              \n\nexport interface IErrorParser {\n  parse(context: EventPluginContext, exception: Error): IError;\n}\n\n                                                                                                                \n\nexport interface IModuleCollector {\n  getModules(context: EventPluginContext): IModule[];\n}\n\n                                                                                                                          \n\nexport interface IRequestInfoCollector {\n  getRequestInfo(context: EventPluginContext): IRequestInfo;\n}\n\n                                      \n\nexport interface IStorageProvider {\n  queue: IStorage;\n  settings: IStorage;\n}\n\n                                                                                                                   \n\nexport interface ISubmissionAdapter {\n  sendRequest(request: SubmissionRequest, callback: SubmissionCallback, isAppExiting?: boolean): void;\n}\n\n                                                                                                                                                                                                                                                                                           \n\nexport interface ISubmissionClient {\n  postEvents(events: IEvent[], config: Configuration, callback: (response: SubmissionResponse) => void, isAppExiting?: boolean): void;\n  postUserDescription(referenceId: string, description: IUserDescription, config: Configuration, callback: (response: SubmissionResponse) => void): void;\n  getSettings(config: Configuration, callback: (response: SettingsResponse) => void): void;\n}\n\nn\nexport interface IConfigurationSettings {\n  apiKey?: string;\n  serverUrl?: string;\n  environmentInfoCollector?: IEnvironmentInfoCollector;\n  errorParser?: IErrorParser;\n  lastReferenceIdManager?: ILastReferenceIdManager;\n  log?: ILog;\n  moduleCollector?: IModuleCollector;\n  requestInfoCollector?: IRequestInfoCollector;\n  submissionBatchSize?: number;\n  submissionClient?: ISubmissionClient;\n  submissionAdapter?: ISubmissionAdapter;\n  storage?: IStorageProvider;\n  queue?: IEventQueue;\n}\n\n                                                                                                                                                     \n\ninterface ISettingsWithVersion {\n  version: number;\n  settings: { [key: string]: string };\n}\n\nexport class SettingsManager {\n  /**\n   * A list of handlers that will be fired when the settings change.\n   * @type {Array}\n   * @private\n   */\n  private static _handlers: { (config: Configuration): void }[] = [];\n\n  public static onChanged(handler: (config: Configuration) => void) {\n    !!handler && this._handlers.push(handler);\n  }\n\n  public static applySavedServerSettings(config: Configuration): void {\n    let savedSettings = this.getSavedServerSettings(config);\n    config.log.info('Applying saved settings.');\n    config.settings = Utils.merge(config.settings, savedSettings.settings);\n    this.changed(config);\n  }\n\n  public static checkVersion(version: number, config: Configuration): void {\n    if (version) {\n      let savedSettings = this.getSavedServerSettings(config);\n      let savedVersion = savedSettings.version;\n      if (version > savedVersion) {\n        config.log.info(`Updating settings from v${savedVersion} to v${version}`);\n        this.updateSettings(config);\n      }\n    }\n  }\n\n  public static updateSettings(config: Configuration): void {\n    if (!config.isValid) {\n      config.log.error('Unable to update settings: ApiKey is not set.');\n      return;\n    }\n\n    config.submissionClient.getSettings(config, (response: SettingsResponse) => {\n      if (!response || !response.success || !response.settings) {\n        return;\n      }\n\n      config.settings = Utils.merge(config.settings, response.settings);\n\n      // TODO: Store snapshot of settings after reading from config and attributes and use that to revert to defaults.\n      // Remove any existing server settings that are not in the new server settings.\n      let savedServerSettings = SettingsManager.getSavedServerSettings(config);\n      for (let key in savedServerSettings) {\n        if (response.settings[key]) {\n          continue;\n        }\n\n        delete config.settings[key];\n      }\n\n      let newSettings = <ISettingsWithVersion>{\n        version: response.settingsVersion,\n        settings: response.settings\n      };\n\n      config.storage.settings.save(newSettings);\n\n      config.log.info('Updated settings');\n      this.changed(config);\n    });\n  }\n\n  private static changed(config: Configuration) {\n    let handlers = this._handlers; // optimization for minifier.\n    for (let index = 0; index < handlers.length; index++) {\n      handlers[index](config);\n    }\n  }\n\n  private static getSavedServerSettings(config: Configuration): ISettingsWithVersion {\n    let item = config.storage.settings.get()[0];\n    if (item && item.value && item.value.version && item.value.settings) {\n      return item.value;\n    }\n\n    return { version: 0, settings: {} };\n  }\n}\n\n                                                                    \n\nexport class DefaultLastReferenceIdManager implements ILastReferenceIdManager {\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @type {string}\n   * @private\n   */\n  private _lastReferenceId: string = null;\n\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @returns {string}\n   */\n  getLast(): string {\n    return this._lastReferenceId;\n  }\n\n  /**\n   * Clears the last event's reference id.\n   */\n  clearLast(): void {\n    this._lastReferenceId = null;\n  }\n\n  /**\n   * Sets the last event's reference id.\n   * @param eventId\n   */\n  setLast(eventId: string): void {\n    this._lastReferenceId = eventId;\n  }\n}\n\n                              \n\nexport class ConsoleLog implements ILog {\n  public info(message: string): void {\n    this.log('info', message);\n  }\n\n  public warn(message: string): void {\n    this.log('warn', message);\n  }\n\n  public error(message: string): void {\n    this.log('error', message);\n  }\n\n  private log(level: string, message: string) {\n    if (console && console[level]) {\n      console[level](`[${level}] Exceptionless: ${message}`);\n    }\n  }\n}\n\n                              \n\nexport class NullLog implements ILog {\n  public info(message: string): void { }\n  public warn(message: string): void { }\n  public error(message: string): void { }\n}\n\nexport interface IUserInfo {\n  identity?: string;\n  name?: string;\n  data?: any;\n}\n\n                                                                                                         \n\nexport interface IEventPlugin {\n  priority?: number;\n  name?: string;\n  run(context: EventPluginContext, next?: () => void): void;\n}\n\n                                                                                                                                                                                             \n\nexport class EventPluginContext {\n  public cancelled: boolean;\n  public client: ExceptionlessClient;\n  public event: IEvent;\n  public contextData: ContextData;\n\n  constructor(client: ExceptionlessClient, event: IEvent, contextData?: ContextData) {\n    this.client = client;\n    this.event = event;\n    this.contextData = contextData ? contextData : new ContextData();\n  }\n\n  public get log(): ILog {\n    return this.client.config.log;\n  }\n}\n\nn\nexport class EventPluginManager {\n  public static run(context: EventPluginContext, callback: (context?: EventPluginContext) => void): void {\n    let wrap = function(plugin: IEventPlugin, next?: () => void): () => void {\n      return () => {\n        try {\n          if (!context.cancelled) {\n            plugin.run(context, next);\n          }\n        } catch (ex) {\n          context.cancelled = true;\n          context.log.error(`Error running plugin '${plugin.name}': ${ex.message}. Discarding Event.`);\n        }\n\n        if (context.cancelled && !!callback) {\n          callback(context);\n        }\n      };\n    };\n\n    let plugins: IEventPlugin[] = context.client.config.plugins; // optimization for minifier.\n    let wrappedPlugins: { (): void }[] = [];\n    if (!!callback) {\n      wrappedPlugins[plugins.length] = wrap({ name: 'cb', priority: 9007199254740992, run: callback }, null);\n    }\n\n    for (let index = plugins.length - 1; index > -1; index--) {\n      wrappedPlugins[index] = wrap(plugins[index], !!callback || (index < plugins.length - 1) ? wrappedPlugins[index + 1] : null);\n    }\n\n    wrappedPlugins[0]();\n  }\n\n  public static addDefaultPlugins(config: Configuration): void {\n    config.addPlugin(new ConfigurationDefaultsPlugin());\n    config.addPlugin(new ErrorPlugin());\n    config.addPlugin(new DuplicateCheckerPlugin());\n    config.addPlugin(new ModuleInfoPlugin());\n    config.addPlugin(new RequestInfoPlugin());\n    config.addPlugin(new EnvironmentInfoPlugin());\n    config.addPlugin(new SubmissionMethodPlugin());\n  }\n}\n\n                                                                                                                                                               \n\nexport class HeartbeatPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = 'HeartbeatPlugin';\n\n  private _heartbeatIntervalId: any;\n  private _lastUser: IUserInfo;\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    let clearHeartbeatInterval = () => {\n      if (this._heartbeatIntervalId) {\n        clearInterval(this._heartbeatIntervalId);\n        this._heartbeatIntervalId = 0;\n      }\n    };\n\n    let type = context.event.type;\n    if (type !== 'heartbeat') {\n      if (type === 'sessionend') {\n        clearHeartbeatInterval();\n      } else {\n        let user: IUserInfo = context.event.data['@user'];\n        if (user && user.identity) {\n          let submitHeartbeatFn = () => context.client.createSessionHeartbeat().setUserIdentity(user).submit();\n\n          if (!this._heartbeatIntervalId) {\n            this._lastUser = user;\n          } else {\n            clearHeartbeatInterval();\n          }\n\n          this._heartbeatIntervalId = setInterval(submitHeartbeatFn, 30000);\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                \n\nexport class ReferenceIdPlugin implements IEventPlugin {\n  public priority: number = 20;\n  public name: string = 'ReferenceIdPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    if ((!context.event.reference_id || context.event.reference_id.length === 0) && context.event.type === 'error') {\n      context.event.reference_id = Utils.guid().replace('-', '').substring(0, 10);\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                                     \n\nexport class DefaultEventQueue implements IEventQueue {\n  /**\n   * The configuration object.\n   * @type {Configuration}\n   * @private\n   */\n  private _config: Configuration;\n\n  /**\n   * Suspends processing until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _suspendProcessingUntil: Date;\n\n  /**\n   * Discards queued items until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _discardQueuedItemsUntil: Date;\n\n  /**\n   * Returns true if the queue is processing.\n   * @type {boolean}\n   * @private\n   */\n  private _processingQueue: boolean = false;\n\n  /**\n   * Processes the queue every xx seconds.\n   * @type {Timer}\n   * @private\n   */\n  private _queueTimer: any;\n\n  constructor(config: Configuration) {\n    this._config = config;\n  }\n\n  public enqueue(event: IEvent): void {\n    let config: Configuration = this._config; // Optimization for minifier.\n    this.ensureQueueTimer();\n\n    if (this.areQueuedItemsDiscarded()) {\n      config.log.info('Queue items are currently being discarded. The event will not be queued.');\n      return;\n    }\n\n    let timestamp = config.storage.queue.save(event);\n    let logText = `type=${event.type} ${!!event.reference_id ? 'refid=' + event.reference_id : ''}`;\n    if (timestamp) {\n      config.log.info(`Enqueuing event: ${timestamp} ${logText}`);\n    } else {\n      config.log.error(`Could not enqueue event ${logText}`);\n    }\n  }\n\n  public process(isAppExiting?: boolean): void {\n    const queueNotProcessed: string = 'The queue will not be processed.'; // optimization for minifier.\n    let config: Configuration = this._config; // Optimization for minifier.\n    let log: ILog = config.log; // Optimization for minifier.\n\n    this.ensureQueueTimer();\n\n    if (this._processingQueue) {\n      return;\n    }\n\n    log.info('Processing queue...');\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${queueNotProcessed}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${queueNotProcessed}`);\n      return;\n    }\n\n    this._processingQueue = true;\n\n    try {\n      let events = config.storage.queue.get(config.submissionBatchSize);\n      if (!events || events.length === 0) {\n        this._processingQueue = false;\n        return;\n      }\n\n      log.info(`Sending ${events.length} events to ${config.serverUrl}.`);\n      config.submissionClient.postEvents(events.map(e => e.value), config, (response: SubmissionResponse) => {\n        this.processSubmissionResponse(response, events);\n        log.info('Finished processing queue.');\n        this._processingQueue = false;\n      }, isAppExiting);\n    } catch (ex) {\n      log.error(`Error processing queue: ${ex}`);\n      this.suspendProcessing();\n      this._processingQueue = false;\n    }\n  }\n\n  public suspendProcessing(durationInMinutes?: number, discardFutureQueuedItems?: boolean, clearQueue?: boolean): void {\n    let config: Configuration = this._config; // Optimization for minifier.\n\n    if (!durationInMinutes || durationInMinutes <= 0) {\n      durationInMinutes = 5;\n    }\n\n    config.log.info(`Suspending processing for ${durationInMinutes} minutes.`);\n    this._suspendProcessingUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\n\n    if (discardFutureQueuedItems) {\n      this._discardQueuedItemsUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\n    }\n\n    if (clearQueue) {\n      // Account is over the limit and we want to ensure that the sample size being sent in will contain newer errors.\n      config.storage.queue.clear();\n    }\n  }\n\n  private areQueuedItemsDiscarded(): boolean {\n    return this._discardQueuedItemsUntil && this._discardQueuedItemsUntil > new Date();\n  }\n\n  private ensureQueueTimer(): void {\n    if (!this._queueTimer) {\n      this._queueTimer = setInterval(() => this.onProcessQueue(), 10000);\n    }\n  }\n\n  private isQueueProcessingSuspended(): boolean {\n    return this._suspendProcessingUntil && this._suspendProcessingUntil > new Date();\n  }\n\n  private onProcessQueue(): void {\n    if (!this.isQueueProcessingSuspended() && !this._processingQueue) {\n      this.process();\n    }\n  }\n\n  private processSubmissionResponse(response: SubmissionResponse, events: IStorageItem[]): void {\n    const noSubmission: string = 'The event will not be submitted.'; // Optimization for minifier.\n    let config: Configuration = this._config; // Optimization for minifier.\n    let log: ILog = config.log; // Optimization for minifier.\n\n    if (response.success) {\n      log.info(`Sent ${events.length} events.`);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.serviceUnavailable) {\n      // You are currently over your rate limit or the servers are under stress.\n      log.error('Server returned service unavailable.');\n      this.suspendProcessing();\n      return;\n    }\n\n    if (response.paymentRequired) {\n      // If the organization over the rate limit then discard the event.\n      log.info('Too many events have been submitted, please upgrade your plan.');\n      this.suspendProcessing(null, true, true);\n      return;\n    }\n\n    if (response.unableToAuthenticate) {\n      // The api key was suspended or could not be authorized.\n      log.info(`Unable to authenticate, please check your configuration. ${noSubmission}`);\n      this.suspendProcessing(15);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.notFound || response.badRequest) {\n      // The service end point could not be found.\n      log.error(`Error while trying to submit data: ${response.message}`);\n      this.suspendProcessing(60 * 4);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.requestEntityTooLarge) {\n      let message = 'Event submission discarded for being too large.';\n      if (config.submissionBatchSize > 1) {\n        log.error(`${message} Retrying with smaller batch size.`);\n        config.submissionBatchSize = Math.max(1, Math.round(config.submissionBatchSize / 1.5));\n      } else {\n        log.error(`${message} ${noSubmission}`);\n        this.removeEvents(events);\n      }\n\n      return;\n    }\n\n    if (!response.success) {\n      log.error(`Error submitting events: ${response.message || 'Please check the network tab for more info.'}`);\n      this.suspendProcessing();\n    }\n  }\n\n  private removeEvents(events: IStorageItem[]) {\n    for (let index = 0; index < (events || []).length; index++) {\n      this._config.storage.queue.remove(events[index].timestamp);\n    }\n  }\n}\n\n                                                                                                                                                   \n\nexport class InMemoryStorageProvider implements IStorageProvider {\n\n  queue: IStorage;\n  settings: IStorage;\n\n  constructor(maxQueueItems: number = 250) {\n    this.queue = new InMemoryStorage(maxQueueItems);\n    this.settings = new InMemoryStorage(1);\n  }\n\n}\n\nn\ndeclare var XDomainRequest: { new (); create(); };\n\nexport class DefaultSubmissionClient implements ISubmissionClient {\n  public configurationVersionHeader: string = 'x-exceptionless-configversion';\n\n  public postEvents(events: IEvent[], config: Configuration, callback: (response: SubmissionResponse) => void, isAppExiting?: boolean): void {\n    let data = JSON.stringify(events);\n    let request = this.createRequest(config, 'POST', '/api/v2/events', data);\n    let cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb, isAppExiting);\n  }\n\n  public postUserDescription(referenceId: string, description: IUserDescription, config: Configuration, callback: (response: SubmissionResponse) => void): void {\n    let path = `/api/v2/events/by-ref/${encodeURIComponent(referenceId)}/user-description`;\n    let data = JSON.stringify(description);\n    let request = this.createRequest(config, 'POST', path, data);\n    let cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public getSettings(config: Configuration, callback: (response: SettingsResponse) => void): void {\n    let request = this.createRequest(config, 'GET', '/api/v2/projects/config');\n    let cb = (status, message, data?, headers?) => {\n      if (status !== 200) {\n        return callback(new SettingsResponse(false, null, -1, null, message));\n      }\n\n      let settings: IClientConfiguration;\n      try {\n        settings = JSON.parse(data);\n      } catch (e) {\n        config.log.error(`Unable to parse settings: '${data}'`);\n      }\n\n      if (!settings || isNaN(settings.version)) {\n        return callback(new SettingsResponse(false, null, -1, null, 'Invalid configuration settings.'));\n      }\n\n      callback(new SettingsResponse(true, settings.settings || {}, settings.version));\n    };\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  private createRequest(config: Configuration, method: string, path: string, data: string = null): SubmissionRequest {\n    return {\n      method,\n      path,\n      data,\n      serverUrl: config.serverUrl,\n      apiKey: config.apiKey,\n      userAgent: config.userAgent\n    };\n  }\n\n  private createSubmissionCallback(config: Configuration, callback: (response: SubmissionResponse) => void) {\n    return (status, message, data?, headers?) => {\n      let settingsVersion: number = headers && parseInt(headers[this.configurationVersionHeader], 10);\n      SettingsManager.checkVersion(settingsVersion, config);\n\n      callback(new SubmissionResponse(status, message));\n    };\n  }\n}\n\nexport class Utils {\n  public static addRange<T>(target: T[], ...values: T[]) {\n    if (!target) {\n      target = [];\n    }\n\n    if (!values || values.length === 0) {\n      return target;\n    }\n\n    for (let index = 0; index < values.length; index++) {\n      if (values[index] && target.indexOf(values[index]) < 0) {\n        target.push(values[index]);\n      }\n    }\n\n    return target;\n  }\n\n  public static getHashCode(source: string): number {\n    if (!source || source.length === 0) {\n      return 0;\n    }\n\n    let hash: number = 0;\n    for (let index = 0; index < source.length; index++) {\n      let character = source.charCodeAt(index);\n      hash = ((hash << 5) - hash) + character;\n      hash |= 0;\n    }\n\n    return hash;\n  }\n\n  public static getCookies(cookies: string, exclusions?: string[]): Object {\n    let result: Object = {};\n\n    let parts: string[] = (cookies || '').split('; ');\n    for (let index = 0; index < parts.length; index++) {\n      let cookie: string[] = parts[index].split('=');\n      if (!Utils.isMatch(cookie[0], exclusions)) {\n        result[cookie[0]] = cookie[1];\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static guid(): string {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    }\n\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n  }\n\n  public static merge(defaultValues: Object, values: Object) {\n    let result: Object = {};\n\n    for (let key in defaultValues || {}) {\n      if (!!defaultValues[key]) {\n        result[key] = defaultValues[key];\n      }\n    }\n\n    for (let key in values || {}) {\n      if (!!values[key]) {\n        result[key] = values[key];\n      }\n    }\n\n    return result;\n  }\n\n  public static parseVersion(source: string): string {\n    if (!source) {\n      return null;\n    }\n\n    let versionRegex = /(v?((\\d+)\\.(\\d+)(\\.(\\d+))?)(?:-([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?(?:\\+([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?)/;\n    let matches = versionRegex.exec(source);\n    if (matches && matches.length > 0) {\n      return matches[0];\n    }\n\n    return null;\n  }\n\n  public static parseQueryString(query: string, exclusions?: string[]) {\n    if (!query || query.length === 0) {\n      return null;\n    }\n\n    let pairs: string[] = query.split('&');\n    if (pairs.length === 0) {\n      return null;\n    }\n\n    let result: Object = {};\n    for (let index = 0; index < pairs.length; index++) {\n      let pair = pairs[index].split('=');\n      if (!Utils.isMatch(pair[0], exclusions)) {\n        result[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static randomNumber(): number {\n    return Math.floor(Math.random() * 9007199254740992);\n  }\n\n  /**\n   * Checks to see if a value matches a pattern.\n   * @param input the value to check against the @pattern.\n   * @param pattern The pattern to check, supports wild cards (*).\n   */\n  public static isMatch(input: string, patterns: string[]): boolean {\n    if (!input || typeof input !== 'string') {\n      return false;\n    }\n\n    let trim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n    return (patterns || []).some(pattern => {\n      if (!pattern) {\n        return false;\n      }\n\n      pattern = pattern.toLowerCase().replace(trim, '');\n      input = input.toLowerCase().replace(trim, '');\n\n      if (pattern.length <= 0) {\n        return false;\n      }\n\n      let startsWithWildcard: boolean = pattern[0] === '*';\n      if (startsWithWildcard) {\n        pattern = pattern.slice(1);\n      }\n\n      let endsWithWildcard: boolean = pattern[pattern.length - 1] === '*';\n      if (endsWithWildcard) {\n        pattern = pattern.substring(0, pattern.length - 1);\n      }\n\n      if (startsWithWildcard && endsWithWildcard) {\n        return input.indexOf(pattern) !== -1;\n      }\n\n      if (startsWithWildcard) {\n        let lastIndexOf = input.lastIndexOf(pattern);\n        return lastIndexOf !== -1 && lastIndexOf === (input.length - pattern.length);\n      }\n\n      if (endsWithWildcard) {\n        return input.indexOf(pattern) === 0;\n      }\n\n      return input === pattern;\n    });\n  }\n\n  public static isEmpty(input: Object) {\n    return input === null || (typeof (input) === 'object' && Object.keys(input).length === 0);\n  }\n\n  /**\n   * Stringifys an object with optional exclusions and max depth.\n   * @param data The data object to add.\n   * @param exclusions Any property names that should be excluded.\n   * @param maxDepth The max depth of the object to include.\n   */\n  public static stringify(data: any, exclusions?: string[], maxDepth?: number): string {\n    function stringifyImpl(obj: any, excludedKeys: string[]): string {\n      let cache: string[] = [];\n      return JSON.stringify(obj, function(key: string, value: any) {\n        if (Utils.isMatch(key, excludedKeys)) {\n          return;\n        }\n\n        if (typeof value === 'object' && !!value) {\n          if (cache.indexOf(value) !== -1) {\n            // Circular reference found, discard key\n            return;\n          }\n\n          cache.push(value);\n        }\n\n        return value;\n      });\n    }\n\n    if (({}).toString.call(data) === '[object Object]') {\n      let flattened = {};\n      /* tslint:disable:forin */\n      for (let prop in data) {\n        let value = data[prop];\n        if (value === data) {\n          continue;\n        }\n        flattened[prop] = data[prop];\n      }\n      /* tslint:enable:forin */\n\n      return stringifyImpl(flattened, exclusions);\n    }\n\n    if (({}).toString.call(data) === '[object Array]') {\n      let result = [];\n      for (let index = 0; index < data.length; index++) {\n        result[index] = JSON.parse(stringifyImpl(data[index], exclusions));\n      }\n\n      return JSON.stringify(result);\n    }\n\n    return stringifyImpl(data, exclusions);\n  }\n}\n\nn\nexport class Configuration implements IConfigurationSettings {\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @type {IConfigurationSettings}\n   * @private\n   */\n  private static _defaultSettings: IConfigurationSettings = null;\n\n  /**\n   * A default list of tags that will automatically be added to every\n   * report submitted to the server.\n   *\n   * @type {Array}\n   */\n  public defaultTags: string[] = [];\n\n  /**\n   * A default list of of extended data objects that will automatically\n   * be added to every report submitted to the server.\n   *\n   * @type {{}}\n   */\n  public defaultData: Object = {};\n\n  /**\n   * Whether the client is currently enabled or not. If it is disabled,\n   * submitted errors will be discarded and no data will be sent to the server.\n   *\n   * @returns {boolean}\n   */\n  public enabled: boolean = true;\n\n  public environmentInfoCollector: IEnvironmentInfoCollector;\n  public errorParser: IErrorParser;\n  public lastReferenceIdManager: ILastReferenceIdManager = new DefaultLastReferenceIdManager();\n  public log: ILog;\n  public moduleCollector: IModuleCollector;\n  public requestInfoCollector: IRequestInfoCollector;\n\n  /**\n   * Maximum number of events that should be sent to the server together in a batch. (Defaults to 50)\n   */\n  public submissionBatchSize: number;\n  public submissionAdapter: ISubmissionAdapter;\n  public submissionClient: ISubmissionClient;\n\n  /**\n   * Contains a dictionary of custom settings that can be used to control\n   * the client and will be automatically updated from the server.\n   */\n  public settings: Object = {};\n\n  public storage: IStorageProvider;\n\n  public queue: IEventQueue;\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @type {Array}\n   * @private\n   */\n  private _plugins: IEventPlugin[] = [];\n\n  constructor(configSettings?: IConfigurationSettings) {\n    function inject(fn: any) {\n      return typeof fn === 'function' ? fn(this) : fn;\n    }\n\n    configSettings = Utils.merge(Configuration.defaults, configSettings);\n\n    this.log = inject(configSettings.log) || new NullLog();\n    this.apiKey = configSettings.apiKey;\n    this.serverUrl = configSettings.serverUrl;\n\n    this.environmentInfoCollector = inject(configSettings.environmentInfoCollector);\n    this.errorParser = inject(configSettings.errorParser);\n    this.lastReferenceIdManager = inject(configSettings.lastReferenceIdManager) || new DefaultLastReferenceIdManager();\n    this.moduleCollector = inject(configSettings.moduleCollector);\n    this.requestInfoCollector = inject(configSettings.requestInfoCollector);\n    this.submissionBatchSize = inject(configSettings.submissionBatchSize) || 50;\n    this.submissionAdapter = inject(configSettings.submissionAdapter);\n    this.submissionClient = inject(configSettings.submissionClient) || new DefaultSubmissionClient();\n    this.storage = inject(configSettings.storage) || new InMemoryStorageProvider();\n    this.queue = inject(configSettings.queue) || new DefaultEventQueue(this);\n\n    SettingsManager.applySavedServerSettings(this);\n    EventPluginManager.addDefaultPlugins(this);\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @type {string}\n   * @private\n   */\n  private _apiKey: string;\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @returns {string}\n   */\n  public get apiKey(): string {\n    return this._apiKey;\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @param value\n   */\n  public set apiKey(value: string) {\n    this._apiKey = value || null;\n    this.log.info(`apiKey: ${this._apiKey}`);\n  }\n\n  /**\n   * Returns true if the apiKey is valid.\n   * @returns {boolean}\n   */\n  public get isValid(): boolean {\n    return !!this.apiKey && this.apiKey.length >= 10;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _serverUrl: string = 'https://collector.exceptionless.io';\n\n  /**\n   * The server url that all events will be sent to.\n   * @returns {string}\n   */\n  public get serverUrl(): string {\n    return this._serverUrl;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @param value\n   */\n  public set serverUrl(value: string) {\n    if (!!value) {\n      this._serverUrl = value;\n      this.log.info(`serverUrl: ${this._serverUrl}`);\n    }\n  }\n\n  /**\n   * A list of exclusion patterns.\n   * @type {Array}\n   * @private\n   */\n  private _dataExclusions: string[] = [];\n\n  /**\n   * A list of user agent patterns.\n   * @type {Array}\n   * @private\n   */\n  private _userAgentBotPatterns: string[] = [];\n\n  /**\n   *  A list of exclusion patterns that will automatically remove any data that\n   *  matches them from any data submitted to the server.\n   *\n   *  For example, entering CreditCard will remove any extended data properties,\n   *  form fields, cookies and query parameters from the report.\n   *\n   * @returns {string[]}\n   */\n  public get dataExclusions(): string[] {\n    let exclusions: string = this.settings['@@DataExclusions'];\n    return this._dataExclusions.concat(exclusions && exclusions.split(',') || []);\n  }\n\n  /**\n   * Add items to the list of exclusion patterns that will automatically remove any\n   * data that matches them from any data submitted to the server.\n   *\n   * For example, entering CreditCard will remove any extended data properties, form\n   * fields, cookies and query parameters from the report.\n   *\n   * @param exclusions\n   */\n  public addDataExclusions(...exclusions: string[]) {\n    this._dataExclusions = Utils.addRange<string>(this._dataExclusions, ...exclusions);\n  }\n\n  /**\n   * A list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @returns {string[]}\n   */\n  public get userAgentBotPatterns(): string[] {\n    let patterns: string = this.settings['@@UserAgentBotPatterns'];\n    return this._userAgentBotPatterns.concat(patterns && patterns.split(',') || []);\n  }\n\n  /**\n   * Add items to the list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @param userAgentBotPatterns\n   */\n  public addUserAgentBotPatterns(...userAgentBotPatterns: string[]) {\n    this._userAgentBotPatterns = Utils.addRange<string>(this._userAgentBotPatterns, ...userAgentBotPatterns);\n  }\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @returns {IEventPlugin[]}\n   */\n  public get plugins(): IEventPlugin[] {\n    return this._plugins.sort((p1: IEventPlugin, p2: IEventPlugin) => {\n      return (p1.priority < p2.priority) ? -1 : (p1.priority > p2.priority) ? 1 : 0;\n    });\n  }\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param plugin\n   */\n  public addPlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param name The name used to identify the plugin.\n   * @param priority Used to determine plugins priority.\n   * @param pluginAction A function that is run.\n   */\n  public addPlugin(name: string, priority: number, pluginAction: (context: EventPluginContext, next?: () => void) => void): void;\n  public addPlugin(pluginOrName: IEventPlugin | string, priority?: number, pluginAction?: (context: EventPluginContext, next?: () => void) => void): void {\n    let plugin: IEventPlugin = !!pluginAction ? { name: <string>pluginOrName, priority: priority, run: pluginAction } : <IEventPlugin>pluginOrName;\n    if (!plugin || !plugin.run) {\n      this.log.error('Add plugin failed: Run method not defined');\n      return;\n    }\n\n    if (!plugin.name) {\n      plugin.name = Utils.guid();\n    }\n\n    if (!plugin.priority) {\n      plugin.priority = 0;\n    }\n\n    let pluginExists: boolean = false;\n    let plugins = this._plugins; // optimization for minifier.\n    for (let index = 0; index < plugins.length; index++) {\n      if (plugins[index].name === plugin.name) {\n        pluginExists = true;\n        break;\n      }\n    }\n\n    if (!pluginExists) {\n      plugins.push(plugin);\n    }\n  }\n\n  /**\n   * Remove the plugin from this configuration.\n   * @param plugin\n   */\n  public removePlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Remove an plugin by key from this configuration.\n   * @param name\n   */\n  public removePlugin(name: string): void;\n  public removePlugin(pluginOrName: IEventPlugin | string): void {\n    let name: string = typeof pluginOrName === 'string' ? pluginOrName : pluginOrName.name;\n    if (!name) {\n      this.log.error('Remove plugin failed: Plugin name not defined');\n      return;\n    }\n\n    let plugins = this._plugins; // optimization for minifier.\n    for (let index = 0; index < plugins.length; index++) {\n      if (plugins[index].name === name) {\n        plugins.splice(index, 1);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Automatically set the application version for events.\n   * @param version\n   */\n  public setVersion(version: string): void {\n    if (!!version) {\n      this.defaultData['@version'] = version;\n    }\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): void;\n  public setUserIdentity(identity: string): void;\n  public setUserIdentity(identity: string, name: string): void;\n  public setUserIdentity(userInfoOrIdentity: IUserInfo | string, name?: string): void {\n    const USER_KEY: string = '@user'; // optimization for minifier.\n    let userInfo: IUserInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name: name };\n\n    let shouldRemove: boolean = !userInfo || (!userInfo.identity && !userInfo.name);\n    if (shouldRemove) {\n      delete this.defaultData[USER_KEY];\n    } else {\n      this.defaultData[USER_KEY] = userInfo;\n    }\n\n    this.log.info(`user identity: ${shouldRemove ? 'null' : userInfo.identity}`);\n  }\n\n  /**\n   * Used to identify the client that sent the events to the server.\n   * @returns {string}\n   */\n  public get userAgent(): string {\n    return 'exceptionless-js/1.0.0.0';\n  }\n\n  /**\n   * Automatically send a heartbeat to keep the session alive.\n   */\n  public useSessions(sendHeartbeats: boolean = true): void {\n    if (sendHeartbeats) {\n      this.addPlugin(new HeartbeatPlugin());\n    }\n  }\n\n  /**\n   * Automatically set a reference id for error events.\n   */\n  public useReferenceIds(): void {\n    this.addPlugin(new ReferenceIdPlugin());\n  }\n\n  public useLocalStorage(): void {\n    // This method will be injected via the prototype.\n  }\n\n  // TODO: Support a min log level.\n  public useDebugLogger(): void {\n    this.log = new ConsoleLog();\n  }\n\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @returns {IConfigurationSettings}\n   */\n  public static get defaults() {\n    if (Configuration._defaultSettings === null) {\n      Configuration._defaultSettings = {};\n    }\n\n    return Configuration._defaultSettings;\n  }\n}\n\n                                                                                                                                                                                                                                                                                                               \n\nexport class EventBuilder {\n  public target: IEvent;\n  public client: ExceptionlessClient;\n  public pluginContextData: ContextData;\n\n  private _validIdentifierErrorMessage: string = 'must contain between 8 and 100 alphanumeric or \\'-\\' characters.'; // optimization for minifier.\n\n  constructor(event: IEvent, client: ExceptionlessClient, pluginContextData?: ContextData) {\n    this.target = event;\n    this.client = client;\n    this.pluginContextData = pluginContextData || new ContextData();\n  }\n\n  public setType(type: string): EventBuilder {\n    if (!!type) {\n      this.target.type = type;\n    }\n\n    return this;\n  }\n\n  public setSource(source: string): EventBuilder {\n    if (!!source) {\n      this.target.source = source;\n    }\n\n    return this;\n  }\n\n  public setReferenceId(referenceId: string): EventBuilder {\n    if (!this.isValidIdentifier(referenceId)) {\n      throw new Error(`ReferenceId ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.target.reference_id = referenceId;\n    return this;\n  }\n\n  /**\n   * Allows you to reference a parent event by its ReferenceId property. This allows you to have parent and child relationships.\n   * @param name Reference name\n   * @param id The reference id that points to a specific event\n   * @returns {EventBuilder}\n     */\n  public setEventReference(name: string, id: string): EventBuilder {\n    if (!name) {\n      throw new Error('Invalid name');\n    }\n\n    if (!id || !this.isValidIdentifier(id)) {\n      throw new Error(`Id ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.setProperty('@ref:' + name, id);\n    return this;\n  }\n\n  public setMessage(message: string): EventBuilder {\n    if (!!message) {\n      this.target.message = message;\n    }\n\n    return this;\n  }\n\n  public setGeo(latitude: number, longitude: number): EventBuilder {\n    if (latitude < -90.0 || latitude > 90.0) {\n      throw new Error('Must be a valid latitude value between -90.0 and 90.0.');\n    }\n\n    if (longitude < -180.0 || longitude > 180.0) {\n      throw new Error('Must be a valid longitude value between -180.0 and 180.0.');\n    }\n\n    this.target.geo = `${latitude},${longitude}`;\n    return this;\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): EventBuilder;\n  public setUserIdentity(identity: string): EventBuilder;\n  public setUserIdentity(identity: string, name: string): EventBuilder;\n  public setUserIdentity(userInfoOrIdentity: IUserInfo | string, name?: string): EventBuilder {\n    let userInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name: name };\n    if (!userInfo || (!userInfo.identity && !userInfo.name)) {\n      return this;\n    }\n\n    this.setProperty('@user', userInfo);\n    return this;\n  }\n\n  /**\n   * Sets the user's description of the event.\n   *\n   * @param emailAddress The email address\n   * @param description The user's description of the event.\n   * @returns {EventBuilder}\n     */\n  public setUserDescription(emailAddress: string, description: string): EventBuilder {\n    if (emailAddress && description) {\n      this.setProperty('@user_description', { email_address: emailAddress, description: description });\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting the stacking key.\n   * @param manualStackingKey The manual stacking key.\n   * @returns {EventBuilder}\n     */\n  public setManualStackingKey(manualStackingKey: string): EventBuilder {\n    if (manualStackingKey) {\n      this.setProperty('@stack', manualStackingKey);\n    }\n\n    return this;\n  }\n\n  public setValue(value: number): EventBuilder {\n    if (!!value) {\n      this.target.value = value;\n    }\n\n    return this;\n  }\n\n  public addTags(...tags: string[]): EventBuilder {\n    this.target.tags = Utils.addRange<string>(this.target.tags, ...tags);\n    return this;\n  }\n\n  /**\n   * Adds the object to extended data. Uses @excludedPropertyNames\n   * to exclude data from being included in the event.\n   * @param name The data object to add.\n   * @param value The name of the object to add.\n   * @param maxDepth The max depth of the object to include.\n   * @param excludedPropertyNames Any property names that should be excluded.\n   */\n  public setProperty(name: string, value: any, maxDepth?: number, excludedPropertyNames?: string[]): EventBuilder {\n    if (!name || (value === undefined || value == null)) {\n      return this;\n    }\n\n    if (!this.target.data) {\n      this.target.data = {};\n    }\n\n    let result = JSON.parse(Utils.stringify(value, this.client.config.dataExclusions.concat(excludedPropertyNames || []), maxDepth));\n    if (!Utils.isEmpty(result)) {\n      this.target.data[name] = result;\n    }\n\n    return this;\n  }\n\n  public markAsCritical(critical: boolean): EventBuilder {\n    if (critical) {\n      this.addTags('Critical');\n    }\n\n    return this;\n  }\n\n  public addRequestInfo(request: Object): EventBuilder {\n    if (!!request) {\n      this.pluginContextData['@request'] = request;\n    }\n\n    return this;\n  }\n\n  public submit(callback?: (context: EventPluginContext) => void): void {\n    this.client.submitEvent(this.target, this.pluginContextData, callback);\n  }\n\n  private isValidIdentifier(value: string): boolean {\n    if (!value) {\n      return true;\n    }\n\n    if (value.length < 8 || value.length > 100) {\n      return false;\n    }\n\n    for (let index = 0; index < value.length; index++) {\n      let code = value.charCodeAt(index);\n      let isDigit = (code >= 48) && (code <= 57);\n      let isLetter = ((code >= 65) && (code <= 90)) || ((code >= 97) && (code <= 122));\n      let isMinus = code === 45;\n\n      if (!(isDigit || isLetter) && !isMinus) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nexport interface IUserDescription {\n  email_address?: string;\n  description?: string;\n  data?: any;\n}\n\nexport class ContextData {\n  public setException(exception: Error): void {\n    if (exception) {\n      this['@@_Exception'] = exception;\n    }\n  }\n\n  public get hasException(): boolean {\n    return !!this['@@_Exception'];\n  }\n\n  public getException(): Error {\n    return this['@@_Exception'] || null;\n  }\n\n  public markAsUnhandledError(): void {\n    this['@@_IsUnhandledError'] = true;\n  }\n\n  public get isUnhandledError(): boolean {\n    return !!this['@@_IsUnhandledError'];\n  }\n\n  public setSubmissionMethod(method: string): void {\n    if (method) {\n      this['@@_SubmissionMethod'] = method;\n    }\n  }\n\n  public getSubmissionMethod(): string {\n    return this['@@_SubmissionMethod'] || null;\n  }\n}\n\nexport class SubmissionResponse {\n  success: boolean = false;\n  badRequest: boolean = false;\n  serviceUnavailable: boolean = false;\n  paymentRequired: boolean = false;\n  unableToAuthenticate: boolean = false;\n  notFound: boolean = false;\n  requestEntityTooLarge: boolean = false;\n  statusCode: number;\n  message: string;\n\n  constructor(statusCode: number, message?: string) {\n    this.statusCode = statusCode;\n    this.message = message;\n\n    this.success = statusCode >= 200 && statusCode <= 299;\n    this.badRequest = statusCode === 400;\n    this.serviceUnavailable = statusCode === 503;\n    this.paymentRequired = statusCode === 402;\n    this.unableToAuthenticate = statusCode === 401 || statusCode === 403;\n    this.notFound = statusCode === 404;\n    this.requestEntityTooLarge = statusCode === 413;\n  }\n}\n\nn\nexport class ExceptionlessClient {\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   * @private\n   */\n  private static _instance: ExceptionlessClient = null;\n\n  public config: Configuration;\n\n  constructor();\n  constructor(settings: IConfigurationSettings);\n  constructor(apiKey: string, serverUrl?: string);\n  constructor(settingsOrApiKey?: IConfigurationSettings | string, serverUrl?: string) {\n    if (typeof settingsOrApiKey !== 'object') {\n      this.config = new Configuration(settingsOrApiKey);\n    } else {\n      this.config = new Configuration({ apiKey: <string>settingsOrApiKey, serverUrl: serverUrl });\n    }\n  }\n\n  public createException(exception: Error): EventBuilder {\n    let pluginContextData = new ContextData();\n    pluginContextData.setException(exception);\n    return this.createEvent(pluginContextData).setType('error');\n  }\n\n  public submitException(exception: Error, callback?: (context: EventPluginContext) => void): void {\n    this.createException(exception).submit(callback);\n  }\n\n  public createUnhandledException(exception: Error, submissionMethod?: string): EventBuilder {\n    let builder = this.createException(exception);\n    builder.pluginContextData.markAsUnhandledError();\n    builder.pluginContextData.setSubmissionMethod(submissionMethod);\n\n    return builder;\n  }\n\n  public submitUnhandledException(exception: Error, submissionMethod?: string, callback?: (context: EventPluginContext) => void) {\n    this.createUnhandledException(exception, submissionMethod).submit(callback);\n  }\n\n  public createFeatureUsage(feature: string): EventBuilder {\n    return this.createEvent().setType('usage').setSource(feature);\n  }\n\n  public submitFeatureUsage(feature: string, callback?: (context: EventPluginContext) => void): void {\n    this.createFeatureUsage(feature).submit(callback);\n  }\n\n  public createLog(message: string): EventBuilder;\n  public createLog(source: string, message: string): EventBuilder;\n  public createLog(source: string, message: string, level: string): EventBuilder;\n  public createLog(sourceOrMessage: string, message?: string, level?: string): EventBuilder {\n    let builder = this.createEvent().setType('log');\n\n    if (message && level) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message).setProperty('@level', level);\n    } else if (message) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message);\n    } else {\n      // TODO: Look into using https://www.stevefenton.co.uk/Content/Blog/Date/201304/Blog/Obtaining-A-Class-Name-At-Runtime-In-TypeScript/\n      let caller: any = arguments.callee.caller;\n      builder = builder.setSource(caller && caller.name).setMessage(sourceOrMessage);\n    }\n\n    return builder;\n  }\n\n  public submitLog(message: string): void;\n  public submitLog(source: string, message: string): void;\n  public submitLog(source: string, message: string, level: string, callback?: (context: EventPluginContext) => void): void;\n  public submitLog(sourceOrMessage: string, message?: string, level?: string, callback?: (context: EventPluginContext) => void): void {\n    this.createLog(sourceOrMessage, message, level).submit(callback);\n  }\n\n  public createNotFound(resource: string): EventBuilder {\n    return this.createEvent().setType('404').setSource(resource);\n  }\n\n  public submitNotFound(resource: string, callback?: (context: EventPluginContext) => void): void {\n    this.createNotFound(resource).submit(callback);\n  }\n\n  public createSessionStart(): EventBuilder {\n    return this.createEvent().setType('session');\n  }\n\n  public submitSessionStart(callback?: (context: EventPluginContext) => void): void {\n    this.createSessionStart().submit(callback);\n  }\n\n  public createSessionEnd(): EventBuilder {\n    return this.createEvent().setType('sessionend');\n  }\n\n  public submitSessionEnd(callback?: (context: EventPluginContext) => void): void {\n    this.createSessionEnd().submit(callback);\n  }\n\n  public createSessionHeartbeat(): EventBuilder {\n    return this.createEvent().setType('heartbeat');\n  }\n\n  public submitSessionHeartbeat(callback?: (context: EventPluginContext) => void): void {\n    this.createSessionHeartbeat().submit(callback);\n  }\n\n  public createEvent(pluginContextData?: ContextData): EventBuilder {\n    return new EventBuilder({ date: new Date() }, this, pluginContextData);\n  }\n\n  /**\n   * Submits the event to be sent to the server.\n   * @param event The event data.\n   * @param pluginContextData Any contextual data objects to be used by Exceptionless plugins to gather default information for inclusion in the report information.\n   * @param callback\n   */\n  public submitEvent(event: IEvent, pluginContextData?: ContextData, callback?: (context: EventPluginContext) => void): void {\n    function cancelled(context: EventPluginContext) {\n      if (!!context) {\n        context.cancelled = true;\n      }\n\n      return !!callback && callback(context);\n    }\n\n    let context = new EventPluginContext(this, event, pluginContextData);\n    if (!event) {\n      return cancelled(context);\n    }\n\n    if (!this.config.enabled) {\n      this.config.log.info('Event submission is currently disabled.');\n      return cancelled(context);\n    }\n\n    if (!event.data) {\n      event.data = {};\n    }\n\n    if (!event.tags || !event.tags.length) {\n      event.tags = [];\n    }\n\n    EventPluginManager.run(context, function(ctx: EventPluginContext) {\n      let ev = ctx.event;\n      if (!ctx.cancelled) {\n        // ensure all required data\n        if (!ev.type || ev.type.length === 0) {\n          ev.type = 'log';\n        }\n\n        if (!ev.date) {\n          ev.date = new Date();\n        }\n\n        let config = ctx.client.config;\n        config.queue.enqueue(ev);\n\n        if (ev.reference_id && ev.reference_id.length > 0) {\n          ctx.log.info(`Setting last reference id '${ev.reference_id}'`);\n          config.lastReferenceIdManager.setLast(ev.reference_id);\n        }\n      }\n\n      !!callback && callback(ctx);\n    });\n  }\n\n  /**\n   * Updates the user's email address and description of an event for the specified reference id.\n   * @param referenceId The reference id of the event to update.\n   * @param email The user's email address to set on the event.\n   * @param description The user's description of the event.\n   * @param callback The submission response.\n   */\n  public updateUserEmailAndDescription(referenceId: string, email: string, description: string, callback?: (response: SubmissionResponse) => void) {\n    if (!referenceId || !email || !description || !this.config.enabled) {\n      return !!callback && callback(new SubmissionResponse(500, 'cancelled'));\n    }\n\n    let userDescription: IUserDescription = { email_address: email, description: description };\n    this.config.submissionClient.postUserDescription(referenceId, userDescription, this.config, (response: SubmissionResponse) => {\n      if (!response.success) {\n        this.config.log.error(`Failed to submit user email and description for event '${referenceId}': ${response.statusCode} ${response.message}`);\n      }\n\n      !!callback && callback(response);\n    });\n  }\n\n  /**\n   * Gets the last event client id that was submitted to the server.\n   * @returns {string} The event client id.\n   */\n  public getLastReferenceId(): string {\n    return this.config.lastReferenceIdManager.getLast();\n  }\n\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   */\n  public static get default() {\n    if (ExceptionlessClient._instance === null) {\n      ExceptionlessClient._instance = new ExceptionlessClient(null);\n    }\n\n    return ExceptionlessClient._instance;\n  }\n}\n\nexport interface IModule {\n  data?: any;\n\n  module_id?: number;\n  name?: string;\n  version?: string;\n  is_entry?: boolean;\n  created_date?: Date;\n  modified_date?: Date;\n}\n\nexport interface IRequestInfo {\n  user_agent?: string;\n  http_method?: string;\n  is_secure?: boolean;\n  host?: string;\n  port?: number;\n  path?: string;\n  referrer?: string;\n  client_ip_address?: string;\n  cookies?: any;\n  post_data?: any;\n  query_string?: any;\n  data?: any;\n}\n\nexport interface IEnvironmentInfo {\n  processor_count?: number;\n  total_physical_memory?: number;\n  available_physical_memory?: number;\n  command_line?: string;\n  process_name?: string;\n  process_id?: string;\n  process_memory_size?: number;\n  thread_id?: string;\n  architecture?: string;\n  o_s_name?: string;\n  o_s_version?: string;\n  ip_address?: string;\n  machine_name?: string;\n  install_id?: string;\n  runtime_version?: string;\n  data?: any;\n}\n\nexport interface IParameter {\n  data?: any;\n  generic_arguments?: string[];\n\n  name?: string;\n  type?: string;\n  type_namespace?: string;\n}\n\n                                          \n\nexport interface IMethod {\n  data?: any;\n  generic_arguments?: string[];\n  parameters?: IParameter[];\n\n  is_signature_target?: boolean;\n  declaring_namespace?: string;\n  declaring_type?: string;\n  name?: string;\n  module_id?: number;\n}\n\n                                    \n\nexport interface IStackFrame extends IMethod {\n  file_name?: string;\n  line_number?: number;\n  column?: number;\n}\n\n                                                                                 \n\nexport interface IInnerError {\n  message?: string;\n  type?: string;\n  code?: string;\n  data?: any;\n  inner?: IInnerError;\n  stack_trace?: IStackFrame[];\n  target_method?: IMethod;\n}\n\n                                                                                                                                                \n\nexport class ConfigurationDefaultsPlugin implements IEventPlugin {\n  public priority: number = 10;\n  public name: string = 'ConfigurationDefaultsPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    let config = context.client.config;\n    let defaultTags: string[] = config.defaultTags || [];\n    for (let index = 0; index < defaultTags.length; index++) {\n      let tag = defaultTags[index];\n      if (!!tag && context.event.tags.indexOf(tag) < 0) {\n        context.event.tags.push(tag);\n      }\n    }\n\n    let defaultData: Object = config.defaultData || {};\n    for (let key in defaultData) {\n      if (!!defaultData[key]) {\n        let result = JSON.parse(Utils.stringify(defaultData[key], config.dataExclusions));\n        if (!Utils.isEmpty(result)) {\n          context.event.data[key] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                \n\nexport class ErrorPlugin implements IEventPlugin {\n  public priority: number = 30;\n  public name: string = 'ErrorPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\n    let ignoredProperties: string[] = [\n      'arguments',\n      'column',\n      'columnNumber',\n      'description',\n      'fileName',\n      'message',\n      'name',\n      'number',\n      'line',\n      'lineNumber',\n      'opera#sourceloc',\n      'sourceId',\n      'sourceURL',\n      'stack',\n      'stackArray',\n      'stacktrace'\n    ];\n\n    let exception = context.contextData.getException();\n    if (!!exception) {\n      context.event.type = 'error';\n\n      if (!context.event.data[ERROR_KEY]) {\n        let config = context.client.config;\n        let parser = config.errorParser;\n        if (!parser) {\n          throw new Error('No error parser was defined.');\n        }\n\n        let result = parser.parse(context, exception);\n        if (!!result) {\n          let additionalData = JSON.parse(Utils.stringify(exception, config.dataExclusions.concat(ignoredProperties)));\n          if (!Utils.isEmpty(additionalData)) {\n            if (!result.data) {\n              result.data = {};\n            }\n            result.data['@ext'] = additionalData;\n          }\n\n          context.event.data[ERROR_KEY] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                           \n\nexport class ModuleInfoPlugin implements IEventPlugin {\n  public priority: number = 50;\n  public name: string = 'ModuleInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\n\n    let collector = context.client.config.moduleCollector;\n    if (context.event.data[ERROR_KEY] && !context.event.data['@error'].modules && !!collector) {\n      let modules: IModule[] = collector.getModules(context);\n      if (modules && modules.length > 0) {\n        context.event.data[ERROR_KEY].modules = modules;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                          \n\nexport class RequestInfoPlugin implements IEventPlugin {\n  public priority: number = 70;\n  public name: string = 'RequestInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const REQUEST_KEY: string = '@request'; // optimization for minifier.\n\n    let config = context.client.config;\n    let collector = config.requestInfoCollector;\n    if (!context.event.data[REQUEST_KEY] && !!collector) {\n      let requestInfo: IRequestInfo = collector.getRequestInfo(context);\n      if (!!requestInfo) {\n        if (Utils.isMatch(requestInfo.user_agent, config.userAgentBotPatterns)) {\n          context.log.info('Cancelling event as the request user agent matches a known bot pattern');\n          context.cancelled = true;\n        } else {\n          context.event.data[REQUEST_KEY] = requestInfo;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                             \n\nexport class EnvironmentInfoPlugin implements IEventPlugin {\n  public priority: number = 80;\n  public name: string = 'EnvironmentInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ENVIRONMENT_KEY: string = '@environment'; // optimization for minifier.\n\n    let collector = context.client.config.environmentInfoCollector;\n    if (!context.event.data[ENVIRONMENT_KEY] && collector) {\n      let environmentInfo: IEnvironmentInfo = collector.getEnvironmentInfo(context);\n      if (!!environmentInfo) {\n        context.event.data[ENVIRONMENT_KEY] = environmentInfo;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                           \n\nexport class SubmissionMethodPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = 'SubmissionMethodPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    let submissionMethod: string = context.contextData.getSubmissionMethod();\n    if (!!submissionMethod) {\n      context.event.data['@submission_method'] = submissionMethod;\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                                                                   \n\nconst ERROR_KEY: string = '@error';\nconst WINDOW_MILLISECONDS = 2000;\nconst MAX_QUEUE_LENGTH = 10;\n\nexport class DuplicateCheckerPlugin implements IEventPlugin {\n  public priority: number = 40;\n  public name: string = 'DuplicateCheckerPlugin';\n\n  private recentlyProcessedErrors: TimestampedHash[] = [];\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    if (context.event.type === 'error') {\n      let error = context.event.data[ERROR_KEY];\n      let isDuplicate = this.checkDuplicate(error, context.log);\n      if (isDuplicate) {\n        context.cancelled = true;\n        return;\n      }\n    }\n\n    next && next();\n  }\n\n  private getNow() {\n    return Date.now();\n  }\n\n  private checkDuplicate(error: IInnerError, log: ILog): boolean {\n    function getHashCodeForError(err: IInnerError): number {\n      if (!err.stack_trace) {\n        return null;\n      }\n\n      return Utils.getHashCode(JSON.stringify(err.stack_trace));\n    }\n\n    let now = this.getNow();\n    let repeatWindow = now - WINDOW_MILLISECONDS;\n    let hashCode: number;\n    while (error) {\n      hashCode = getHashCodeForError(error);\n\n      // make sure that we don't process the same error multiple times within the repeat window\n      if (hashCode && this.recentlyProcessedErrors.some(h =>\n        h.hash === hashCode && h.timestamp >= repeatWindow)) {\n        log.info(`Ignoring duplicate error event: hash=${hashCode}`);\n        return true;\n      }\n\n      // add this exception to our list of recent errors that we have processed\n      this.recentlyProcessedErrors.push({ hash: hashCode, timestamp: now });\n\n      // only keep the last 10 recent errors\n      while (this.recentlyProcessedErrors.length > MAX_QUEUE_LENGTH) {\n        this.recentlyProcessedErrors.shift();\n      }\n\n      error = error.inner;\n    }\n\n    return false;\n  }\n}\n\ninterface TimestampedHash {\n  hash: number;\n  timestamp: number;\n}\n\n                                                                                 \n\nexport interface IError extends IInnerError {\n  modules?: IModule[];\n}\n\nexport interface IStorageItem {\n  timestamp: number;\n  value: any;\n}\n\n                                              \n\nexport interface IStorage {\n  save(value: any): number;\n  get(limit?: number): IStorageItem[];\n  remove(timestamp: number): void;\n  clear(): void;\n}\n\nexport interface SubmissionCallback {\n  (status: number, message: string, data?: string, headers?: Object): void;\n}\n\nexport interface SubmissionRequest {\n  serverUrl: string;\n  apiKey: string;\n  userAgent: string;\n  method: string;\n  path: string;\n  data: string;\n}\n\nexport class SettingsResponse {\n  success: boolean = false;\n  settings: any;\n  settingsVersion: number = -1;\n  message: string;\n  exception: any;\n\n  constructor(success: boolean, settings: any, settingsVersion: number = -1, exception: any = null, message: string = null) {\n    this.success = success;\n    this.settings = settings;\n    this.settingsVersion = settingsVersion;\n    this.exception = exception;\n    this.message = message;\n  }\n}\n\n                                                                                     \n\nexport class InMemoryStorage implements IStorage {\n  private maxItems: number;\n  private items: IStorageItem[] = [];\n  private lastTimestamp: number;\n\n  constructor(maxItems: number) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any): number {\n    if (!value) {\n      return null;\n    }\n\n    let items = this.items;\n    let timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    let item = { timestamp, value };\n\n    if (items.push(item) > this.maxItems) {\n      items.shift();\n    }\n\n    this.lastTimestamp = timestamp;\n    return item.timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    return this.items.slice(0, limit);\n  }\n\n  public remove(timestamp: number): void {\n    let items = this.items;\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].timestamp === timestamp) {\n        items.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  public clear(): void {\n    this.items = [];\n  }\n}\n\nexport interface IClientConfiguration {\n  settings: Object;\n  version: number;\n}\n\n                                                                                     \n\nexport abstract class KeyValueStorageBase implements IStorage {\n  private maxItems: number;\n  private items: number[] = [];\n  private lastTimestamp: number;\n\n  constructor(maxItems) {\n    this.maxItems = maxItems;\n  }\n\n  save(value: any, single?: boolean): number {\n    if (!value) {\n      return null;\n    }\n\n    this.ensureIndex();\n\n    let items = this.items;\n    let timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    let key = this.getKey(timestamp);\n    let json = JSON.stringify(value);\n\n    try {\n      this.write(key, json);\n      this.lastTimestamp = timestamp;\n      if (items.push(timestamp) > this.maxItems) {\n        this.delete(this.getKey(items.shift()));\n      }\n    } catch (e) {\n      return null;\n    }\n\n    return timestamp;\n  }\n\n  get(limit?: number): IStorageItem[] {\n    this.ensureIndex();\n\n    return this.items.slice(0, limit)\n      .map(timestamp => {\n        // Read and parse item for this timestamp\n        let key = this.getKey(timestamp);\n        try {\n          let json = this.read(key);\n          let value = JSON.parse(json, parseDate);\n          return { timestamp, value };\n        } catch (error) {\n          // Something went wrong - try to delete the cause.\n          this.safeDelete(key);\n          return null;\n        }\n      })\n      .filter(item => item != null);\n  }\n\n  remove(timestamp: number): void {\n    this.ensureIndex();\n\n    let items = this.items;\n    let index = items.indexOf(timestamp);\n    if (index >= 0) {\n      let key = this.getKey(timestamp);\n      this.safeDelete(key);\n      items.splice(index, 1);\n    };\n  }\n\n  clear(): void {\n    this.items.forEach(item => this.safeDelete(this.getKey(item)));\n    this.items = [];\n  }\n\n  protected abstract write(key: string, value: string): void;\n  protected abstract read(key: string): string;\n  protected abstract readAllKeys(): string[];\n  protected abstract delete(key: string);\n  protected abstract getKey(timestamp: number): string;\n  protected abstract getTimestamp(key: string): number;\n\n  private ensureIndex() {\n    if (!this.items) {\n      this.items = this.createIndex();\n      this.lastTimestamp = Math.max(0, ...this.items) + 1;\n    }\n  }\n\n  private safeDelete(key: string): void {\n    try {\n      this.delete(key);\n    } catch (error) {\n    }\n  }\n\n  private createIndex() {\n    try {\n      let keys = this.readAllKeys();\n      return keys.map(key => {\n        try {\n          return this.getTimestamp(key);\n        } catch (error) {\n          this.safeDelete(key);\n          return null;\n        }\n      }).filter(timestamp => timestamp != null)\n        .sort((a, b) => a - b);\n    } catch (error) {\n      return [];\n    }\n  }\n}\n\nfunction parseDate(key, value) {\n  let dateRegx = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/g;\n  if (typeof value === 'string') {\n    let a = dateRegx.exec(value);\n    if (a) {\n      return new Date(value);\n    }\n  }\n  return value;\n};\n\n                                                            \n\nexport class BrowserStorage extends KeyValueStorageBase {\n  private prefix: string;\n\n  static isAvailable(): boolean {\n    try {\n      let storage = window.localStorage,\n        x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  constructor(namespace: string, prefix: string = 'com.exceptionless.', maxItems: number = 20) {\n    super(maxItems);\n\n    this.prefix = prefix + namespace + '-';\n  }\n\n  write(key: string, value: string) {\n    window.localStorage.setItem(key, value);\n  }\n\n  read(key: string) {\n    return window.localStorage.getItem(key);\n  }\n\n  readAllKeys() {\n    return Object.keys(window.localStorage)\n      .filter(key => key.indexOf(this.prefix) === 0);\n  }\n\n  delete(key: string) {\n    window.localStorage.removeItem(key);\n  }\n\n  getKey(timestamp) {\n    return this.prefix + timestamp;\n  }\n\n  getTimestamp(key) {\n    return parseInt(key.substr(this.prefix.length), 10);\n  }\n}\n\n                                                                                                                                                                                                                                                                     \n\nexport class DefaultErrorParser implements IErrorParser {\n  public parse(context: EventPluginContext, exception: Error): IError {\n    function getParameters(parameters: string | string[]): IParameter[] {\n      let params: string[] = (typeof parameters === 'string' ? [parameters] : parameters) || [];\n\n      let result: IParameter[] = [];\n      for (let index = 0; index < params.length; index++) {\n        result.push({ name: params[index] });\n      }\n\n      return result;\n    }\n\n    function getStackFrames(stackFrames: TraceKit.StackFrame[]): IStackFrame[] {\n      const ANONYMOUS: string = '<anonymous>';\n      let frames: IStackFrame[] = [];\n\n      for (let index = 0; index < stackFrames.length; index++) {\n        let frame = stackFrames[index];\n        frames.push({\n          name: (frame.func || ANONYMOUS).replace('?', ANONYMOUS),\n          parameters: getParameters(frame.args),\n          file_name: frame.url,\n          line_number: frame.line || 0,\n          column: frame.column || 0\n        });\n      }\n\n      return frames;\n    }\n\n    const TRACEKIT_STACK_TRACE_KEY: string = '@@_TraceKit.StackTrace'; // optimization for minifier.\n\n    let stackTrace: TraceKit.StackTrace = !!context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      ? context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      : TraceKit.computeStackTrace(exception, 25);\n\n    if (!stackTrace) {\n      throw new Error('Unable to parse the exceptions stack trace.');\n    }\n\n    return {\n      type: stackTrace.name,\n      message: stackTrace.message || exception.message,\n      stack_trace: getStackFrames(stackTrace.stack || [])\n    };\n  }\n}\n\n                                                                                                                                                                                                         \n\nexport class DefaultModuleCollector implements IModuleCollector {\n  public getModules(context: EventPluginContext): IModule[] {\n    if (document && document.getElementsByTagName) {\n      return null;\n    }\n\n    let modules: IModule[] = [];\n    let scripts: NodeListOf<HTMLScriptElement> = document.getElementsByTagName('script');\n    if (scripts && scripts.length > 0) {\n      for (let index = 0; index < scripts.length; index++) {\n        if (scripts[index].src) {\n          modules.push({\n            module_id: index,\n            name: scripts[index].src,\n            version: Utils.parseVersion(scripts[index].src)\n          });\n        } else if (!!scripts[index].innerHTML) {\n          modules.push({\n            module_id: index,\n            name: 'Script Tag',\n            version: Utils.getHashCode(scripts[index].innerHTML).toString()\n          });\n        }\n      }\n    }\n\n    return modules;\n  }\n}\n\n                                                                                                                                                                                                                             \n\nexport class DefaultRequestInfoCollector implements IRequestInfoCollector {\n  public getRequestInfo(context: EventPluginContext): IRequestInfo {\n    if (!document || !navigator || !location) {\n      return null;\n    }\n\n    let exclusions = context.client.config.dataExclusions;\n    let requestInfo: IRequestInfo = {\n      user_agent: navigator.userAgent,\n      is_secure: location.protocol === 'https:',\n      host: location.hostname,\n      port: location.port && location.port !== '' ? parseInt(location.port, 10) : 80,\n      path: location.pathname,\n      // client_ip_address: 'TODO',\n      cookies: Utils.getCookies(document.cookie, exclusions),\n      query_string: Utils.parseQueryString(location.search.substring(1), exclusions)\n    };\n\n    if (document.referrer && document.referrer !== '') {\n      requestInfo.referrer = document.referrer;\n    }\n\n    return requestInfo;\n  }\n}\n\n                                                                                                                                                                              \n\ndeclare var XDomainRequest: { new (); create(); };\n\nexport class DefaultSubmissionAdapter implements ISubmissionAdapter {\n  public sendRequest(request: SubmissionRequest, callback: SubmissionCallback, isAppExiting?: boolean) {\n    // TODO: Handle sending events when app is exiting with send beacon.\n    const TIMEOUT: string = 'timeout';  // optimization for minifier.\n    const LOADED: string = 'loaded';  // optimization for minifier.\n    const WITH_CREDENTIALS: string = 'withCredentials';  // optimization for minifier.\n\n    let isCompleted: boolean = false;\n    let useSetTimeout: boolean = false;\n    function complete(mode: string, xhr: XMLHttpRequest) {\n      function parseResponseHeaders(headerStr) {\n        function trim(value) {\n          return value.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n        }\n\n        let headers = {};\n        let headerPairs = (headerStr || '').split('\\u000d\\u000a');\n        for (let index: number = 0; index < headerPairs.length; index++) {\n          let headerPair = headerPairs[index];\n          // Can't use split() here because it does the wrong thing\n          // if the header value has the string \": \" in it.\n          let separator = headerPair.indexOf('\\u003a\\u0020');\n          if (separator > 0) {\n            headers[trim(headerPair.substring(0, separator).toLowerCase())] = headerPair.substring(separator + 2);\n          }\n        }\n\n        return headers;\n      }\n\n      if (isCompleted) {\n        return;\n      }\n\n      isCompleted = true;\n\n      let message: string = xhr.statusText;\n      let responseText: string = xhr.responseText;\n      let status: number = xhr.status;\n\n      if (mode === TIMEOUT || status === 0) {\n        message = 'Unable to connect to server.';\n        status = 0;\n      } else if (mode === LOADED && !status) {\n        status = request.method === 'POST' ? 202 : 200;\n      } else if (status < 200 || status > 299) {\n        let responseBody: any = xhr.responseBody;\n        if (!!responseBody && !!responseBody.message) {\n          message = responseBody.message;\n        } else if (!!responseText && responseText.indexOf('message') !== -1) {\n          try {\n            message = JSON.parse(responseText).message;\n          } catch (e) {\n            message = responseText;\n          }\n        }\n      }\n\n      callback(status || 500, message || '', responseText, parseResponseHeaders(xhr.getAllResponseHeaders && xhr.getAllResponseHeaders()));\n    }\n\n    function createRequest(userAgent: string, method: string, url: string): XMLHttpRequest {\n      let xhr: any = new XMLHttpRequest();\n      if (WITH_CREDENTIALS in xhr) {\n        xhr.open(method, url, true);\n\n        xhr.setRequestHeader('X-Exceptionless-Client', userAgent);\n        if (method === 'POST') {\n          xhr.setRequestHeader('Content-Type', 'application/json');\n        }\n      } else if (typeof XDomainRequest !== 'undefined') {\n        useSetTimeout = true;\n        xhr = new XDomainRequest();\n        xhr.open(method, location.protocol === 'http:' ? url.replace('https:', 'http:') : url);\n      } else {\n        xhr = null;\n      }\n\n      if (xhr) {\n        xhr.timeout = 10000;\n      }\n\n      return xhr;\n    }\n\n    let url = `${request.serverUrl}${request.path}?access_token=${encodeURIComponent(request.apiKey)}`;\n    let xhr = createRequest(request.userAgent, request.method || 'POST', url);\n    if (!xhr) {\n      return callback(503, 'CORS not supported.');\n    }\n\n    if (WITH_CREDENTIALS in xhr) {\n      xhr.onreadystatechange = () => {\n        // xhr not ready.\n        if (xhr.readyState !== 4) {\n          return;\n        }\n\n        complete(LOADED, xhr);\n      };\n    }\n\n    xhr.onprogress = () => { };\n    xhr.ontimeout = () => complete(TIMEOUT, xhr);\n    xhr.onerror = () => complete('error', xhr);\n    xhr.onload = () => complete(LOADED, xhr);\n\n    if (useSetTimeout) {\n      setTimeout(() => xhr.send(request.data), 500);\n    } else {\n      xhr.send(request.data);\n    }\n  }\n}\n\n                                                                                                                                                 \n\nexport class BrowserStorageProvider implements IStorageProvider {\n\n  queue: IStorage;\n  settings: IStorage;\n\n  constructor(prefix?: string, maxQueueItems: number = 250) {\n    this.queue = new BrowserStorage('q', prefix, maxQueueItems);\n    this.settings = new BrowserStorage('settings', prefix, 1);\n  }\n\n}\n\nn\nfunction getDefaultsSettingsFromScriptTag(): IConfigurationSettings {\n  if (!document || !document.getElementsByTagName) {\n    return null;\n  }\n\n  let scripts = document.getElementsByTagName('script');\n  for (let index = 0; index < scripts.length; index++) {\n    if (scripts[index].src && scripts[index].src.indexOf('/exceptionless') > -1) {\n      return Utils.parseQueryString(scripts[index].src.split('?').pop());\n    }\n  }\n  return null;\n}\n\nfunction processUnhandledException(stackTrace: TraceKit.StackTrace, options?: any): void {\n  let builder = ExceptionlessClient.default.createUnhandledException(new Error(stackTrace.message || (options || {}).status || 'Script error'), 'onerror');\n  builder.pluginContextData['@@_TraceKit.StackTrace'] = stackTrace;\n  builder.submit();\n}\n\n/*\nTODO: We currently are unable to parse string exceptions.\nfunction processJQueryAjaxError(event, xhr, settings, error:string): void {\n  let client = ExceptionlessClient.default;\n  if (xhr.status === 404) {\n    client.submitNotFound(settings.url);\n  } else if (xhr.status !== 401) {\n    client.createUnhandledException(error, 'JQuery.ajaxError')\n      .setSource(settings.url)\n      .setProperty('status', xhr.status)\n      .setProperty('request', settings.data)\n      .setProperty('response', xhr.responseText && xhr.responseText.slice && xhr.responseText.slice(0, 1024))\n      .submit();\n  }\n}\n*/\n\nConfiguration.prototype.useLocalStorage = function() {\n  if (BrowserStorage.isAvailable()) {\n    this.storage = new BrowserStorageProvider();\n    SettingsManager.applySavedServerSettings(this);\n  }\n};\n\nlet defaults = Configuration.defaults;\nlet settings = getDefaultsSettingsFromScriptTag();\nif (settings && (settings.apiKey || settings.serverUrl)) {\n  defaults.apiKey = settings.apiKey;\n  defaults.serverUrl = settings.serverUrl;\n}\n\ndefaults.errorParser = new DefaultErrorParser();\ndefaults.moduleCollector = new DefaultModuleCollector();\ndefaults.requestInfoCollector = new DefaultRequestInfoCollector();\ndefaults.submissionAdapter = new DefaultSubmissionAdapter();\n\nTraceKit.report.subscribe(processUnhandledException);\nTraceKit.extendToAsynchronousCallbacks();\n\n// window && window.addEventListener && window.addEventListener('beforeunload', function () {\n//   ExceptionlessClient.default.config.queue.process(true);\n// });\n\n// if (typeof $ !== 'undefined' && $(document)) {\n//   $(document).ajaxError(processJQueryAjaxError);\n// }\n\n(<any>Error).stackTraceLimit = Infinity;\n\ndeclare var $;\n\n"],"sourceRoot":"/source/"}