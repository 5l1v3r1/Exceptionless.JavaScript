{"version":3,"sources":["tracekit.js","exceptionless.ts"],"names":["window","undefined","_has","object","key","Object","prototype","hasOwnProperty","call","_isUndefined","what","TraceKit","_oldTraceKit","_slice","slice","UNKNOWN_FUNCTION","ERROR_TYPES_RE","noConflict","wrap","func","apply","this","arguments","e","report","notifyHandlers","stack","isWindowError","error","exception","collectWindowErrors","i","handlers","inner","traceKitWindowOnError","message","url","lineNo","columnNo","errorObj","lastExceptionStack","computeStackTrace","augmentStackTraceWithInitialElement","processLastException","name","location","line","column","msg","toString","groups","match","guessFunctionName","context","gatherContext","mode","_oldOnerrorHandler","installGlobalHandler","_onErrorHandlerInstalled","onerror","_lastExceptionStack","_lastException","lastException","ex","setTimeout","incomplete","subscribe","handler","push","unsubscribe","length","splice","loadSource","remoteFetching","request","XMLHttpRequest","ActiveXObject","open","send","responseText","getSource","sourceCache","source","domain","document","exec","split","m","reFunctionArgNames","reGuessFunction","linesBefore","Math","floor","linesOfContext","linesAfter","start","max","end","min","escapeRegExp","text","replace","escapeCodeAsRegExpForMatchingInsideHTML","body","findSourceInUrls","re","urls","j","join","substring","index","lastIndexOf","findSourceInLine","fragment","RegExp","findSourceByFunctionBody","parts","result","href","scripts","getElementsByTagName","code","codeRE","eventRE","script","src","args","event","computeStackTraceFromStackProp","submatch","element","chrome","gecko","winjs","geckoEval","chromeEval","lines","reference","isNative","indexOf","columnNumber","computeStackTraceFromStacktraceProp","stacktrace","opera10Regex","opera11Regex","exc","computeStackTraceFromOperaMultiLineMessage","lineRE1","lineRE2","lineRE3","inlineScriptBlocks","s","item","relativeLine","pos","innerText","midline","stackInfo","initial","unshift","partial","computeStackTraceByWalkingCallerChain","depth","functionName","funcs","recursion","curr","caller","input","description","sourceURL","fileName","lineNumber","debug","ofCaller","Error","extendToAsynchronousCallbacks","_helper","fnName","originalFn","originalCallback","define","amd","module","exports","global","parseDate","value","dateRegx","browserInit","Configuration","useLocalStorage","BrowserStorage","isAvailable","storage","BrowserStorageProvider","SettingsManager","applySavedServerSettings","changed","defaults","settings","Utils","parseQueryString","pop","apiKey","serverUrl","stackTrace","options","builder","ExceptionlessClient","default","createUnhandledException","status","pluginContextData","submit","__extends","extendStatics","setPrototypeOf","__proto__","Array","d","b","p","__","constructor","create","DefaultLastReferenceIdManager","_lastReferenceId","getLast","clearLast","setLast","eventId","ConsoleLog","trace","log","info","warn","level","console","NullLog","HeartbeatPlugin","heartbeatInterval","priority","_interval","run","next","clearInterval","_intervalId","user","data","identity","setInterval","client","submitSessionHeartbeat","ReferenceIdPlugin","reference_id","type","guid","EventPluginContext","contextData","ContextData","defineProperty","get","config","callback","plugin","cancelled","plugins","wrappedPlugins","EventPluginManager","addDefaultPlugins","addPlugin","ConfigurationDefaultsPlugin","ErrorPlugin","DuplicateCheckerPlugin","EventExclusionPlugin","ModuleInfoPlugin","RequestInfoPlugin","EnvironmentInfoPlugin","SubmissionMethodPlugin","DefaultEventQueue","_handlers","_processingQueue","_config","enqueue","enabled","isValid","areQueuedItemsDiscarded","ensureQueueTimer","timestamp","queue","save","logText","process","isAppExiting","_this","events_1","submissionBatchSize","submissionClient","postEvents","map","response","processSubmissionResponse","eventsPosted","suspendProcessing","durationInMinutes","discardFutureQueuedItems","clearQueue","_suspendProcessingUntil","Date","getTime","_discardQueuedItemsUntil","clear","onEventsPosted","events","_i","handlers_1","_queueTimer","onProcessQueue","isQueueProcessingSuspended","success","removeEvents","serviceUnavailable","paymentRequired","unableToAuthenticate","notFound","badRequest","requestEntityTooLarge","round","remove","InMemoryStorageProvider","maxQueueItems","InMemoryStorage","DefaultSubmissionClient","configurationVersionHeader","JSON","stringify","createRequest","cb","createSubmissionCallback","submissionAdapter","sendRequest","postUserDescription","referenceId","path","encodeURIComponent","getSettings","version","headers","SettingsResponse","parse","isNaN","sendHeartbeat","sessionIdOrUserId","closeSession","heartbeatServerUrl","method","userAgent","settingsVersion","parseInt","checkVersion","SubmissionResponse","target","values","_a","values_1","getHashCode","hash","charCodeAt","getCookies","cookies","exclusions","parts_1","cookie","isMatch","isEmpty","s4","random","merge","defaultValues","parseVersion","matches","query","pairs","pairs_1","decodeURIComponent","patterns","ignoreCase","toLowerCase","trim","some","pattern","startsWithWildcard","endsWithWildcard","endsWith","startsWith","keys","prefix","suffix","maxDepth","stringifyImpl","obj","excludedKeys","cache","flattened","prop","defaultValue","onChanged","savedSettings","getSavedServerSettings","getVersion","currentVersion","updateSettings","savedServerSettings","newSettings","unableToUpdateMessage","handlers_2","statusCode","settingsOrApiKey","updateSettingsTimer","_timeoutId","createException","setException","createEvent","setType","submitException","submissionMethod","markAsUnhandledError","setSubmissionMethod","submitUnhandledException","createFeatureUsage","feature","setSource","submitFeatureUsage","createLog","sourceOrMessage","setMessage","setProperty","submitLog","createNotFound","resource","submitNotFound","createSessionStart","submitSessionStart","submitSessionEnd","EventBuilder","date","submitEvent","tags","ctx","ev","lastReferenceIdManager","updateUserEmailAndDescription","email","userDescription","email_address","getLastReferenceId","initialDelay","clearTimeout","updateSettingsWhenIdleInterval","interval","_instance","configurable","enumerable","getException","getSubmissionMethod","configSettings","inject","fn","defaultTags","defaultData","_serverUrl","_heartbeatServerUrl","_updateSettingsWhenIdleInterval","_dataExclusions","_userAgentBotPatterns","_plugins","environmentInfoCollector","errorParser","moduleCollector","requestInfoCollector","_apiKey","concat","addRange","addUserAgentBotPatterns","userAgentBotPatterns","sort","p1","p2","pluginOrName","pluginAction","pluginExists","plugins_1","removePlugin","setVersion","setUserIdentity","userInfoOrIdentity","userInfo","shouldRemove","useSessions","sendHeartbeats","useReferenceIds","useDebugLogger","handlers_3","_defaultSettings","_validIdentifierErrorMessage","setReferenceId","isValidIdentifier","setEventReference","id","setGeo","latitude","longitude","geo","setUserDescription","emailAddress","setManualStackingInfo","signatureData","title","signature_data","setManualStackingKey","manualStackingKey","ManualStackingKey","setValue","addTags","excludedPropertyNames","dataExclusions","markAsCritical","critical","addRequestInfo","isDigit","isLetter","isMinus","defaultTags_1","tag","getCurrentTime","now","_mergedEvents","_processedHashcodes","_getCurrentTime","shift","resubmit","hashCode","stack_trace","count","now_1","merged","filter","incrementCount","updateDate","h","MergedEvent","_context","_count","collector","environmentInfo","getEnvironmentInfo","ignoredProperties","parser","additionalData","getTypeAndSourceSetting","isLog","sourcePrefix","toBoolean","loggerName","getLogLevel","logLevel","minLogLevel","modules","getModules","requestInfo","getRequestInfo","user_agent","maxItems","items","lastTimestamp","limit","KeyValueStorageBase","single","ensureIndex","getKey","json","write","delete","read","safeDelete","forEach","createIndex","readAllKeys","getTimestamp","a","_super","namespace","localStorage","x","setItem","removeItem","getItem","substr","DefaultErrorParser","getParameters","parameters","params_1","param","stackFrames","frames","stackFrames_1","frame","file_name","line_number","module_id","innerHTML","DefaultModuleCollector","DefaultRequestInfoCollector","navigator","is_secure","protocol","host","hostname","port","pathname","query_string","search","referrer","xhr","isCompleted","statusText","TIMEOUT","LOADED","responseBody","headerStr","headerPairs_1","headerPair","separator","getAllResponseHeaders","WITH_CREDENTIALS","setRequestHeader","XDomainRequest","useSetTimeout","timeout","onreadystatechange","readyState","complete","onprogress","ontimeout","onload","DefaultSubmissionAdapter","isBrowser"],"mappings":"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","file":"exceptionless.min.js","sourcesContent":["/**\n * https://github.com/csnover/TraceKit\n * @license MIT\n * @namespace TraceKit\n */\n(function(window, undefined) {\nif (!window) {\n    return;\n}\n\nvar TraceKit = {};\nvar _oldTraceKit = window.TraceKit;\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\nvar ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/;\n\n/**\n * A better form of hasOwnProperty<br/>\n * Example: `_has(MainHostObject, property) === true/false`\n *\n * @param {Object} object to check property\n * @param {string} key to check\n * @return {Boolean} true if the object has the key and it is not inherited\n */\nfunction _has(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\n\n/**\n * Returns true if the parameter is undefined<br/>\n * Example: `_isUndefined(val) === true/false`\n *\n * @param {*} what Value to check\n * @return {Boolean} true if undefined and false otherwise\n */\nfunction _isUndefined(what) {\n    return typeof what === 'undefined';\n}\n\n/**\n * Export TraceKit out to another variable<br/>\n * Example: `var TK = TraceKit.noConflict()`\n * @return {Object} The TraceKit object\n * @memberof TraceKit\n */\nTraceKit.noConflict = function noConflict() {\n    window.TraceKit = _oldTraceKit;\n    return TraceKit;\n};\n\n/**\n * Wrap any function in a TraceKit reporter<br/>\n * Example: `func = TraceKit.wrap(func);`\n *\n * @param {Function} func Function to be wrapped\n * @return {Function} The wrapped func\n * @memberof TraceKit\n */\nTraceKit.wrap = function traceKitWrapper(func) {\n    function wrapped() {\n        try {\n            return func.apply(this, arguments);\n        } catch (e) {\n            TraceKit.report(e);\n            throw e;\n        }\n    }\n    return wrapped;\n};\n\n/**\n * Cross-browser processing of unhandled exceptions\n *\n * Syntax:\n * ```js\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n * ```\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *     on top frame; column number is not guaranteed\n *   - Opera: full stack trace with line and column numbers\n *   - Chrome: full stack trace with line and column numbers\n *   - Safari: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *   - IE: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a TraceKit.StackTrace object as described in the\n * TraceKit.computeStackTrace docs.\n *\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.report = (function reportModuleWrapper() {\n    var handlers = [],\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n\n        if (handlers.length === 0) {\n            window.onerror = _oldOnerrorHandler;\n            _onErrorHandlerInstalled = false;\n        }\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {TraceKit.StackTrace} stack\n     * @param {boolean} isWindowError Is this a top-level window error?\n     * @param {Error=} error The error that's being handled (if available, null otherwise)\n     * @memberof TraceKit.report\n     * @throws An exception if an error occurs while calling an handler.\n     */\n    function notifyHandlers(stack, isWindowError, error) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n          return;\n        }\n        for (var i in handlers) {\n            if (_has(handlers, i)) {\n                try {\n                    handlers[i](stack, isWindowError, error);\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error occurred.\n     * @param {(number|string)=} columnNo The column number at which the error occurred.\n     * @param {Error=} errorObj The actual Error object.\n     * @memberof TraceKit.report\n     */\n    function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {\n        var stack = null;\n\n        if (lastExceptionStack) {\n            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n    \t    processLastException();\n        } else if (errorObj) {\n            stack = TraceKit.computeStackTrace(errorObj);\n            notifyHandlers(stack, true, errorObj);\n        } else {\n            var location = {\n              'url': url,\n              'line': lineNo,\n              'column': columnNo\n            };\n\n            var name;\n            var msg = message; // must be new var or will modify original `arguments`\n            if ({}.toString.call(message) === '[object String]') {\n                var groups = message.match(ERROR_TYPES_RE);\n                if (groups) {\n                    name = groups[1];\n                    msg = groups[2];\n                }\n            }\n\n            location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);\n            location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);\n            stack = {\n                'name': name,\n                'message': msg,\n                'mode': 'onerror',\n                'stack': [location]\n            };\n\n            notifyHandlers(stack, true, null);\n        }\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    /**\n     * Install a global onerror handler\n     * @memberof TraceKit.report\n     */\n    function installGlobalHandler() {\n        if (_onErrorHandlerInstalled === true) {\n            return;\n        }\n\n        _oldOnerrorHandler = window.onerror;\n        window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    /**\n     * Process the most recent exception\n     * @memberof TraceKit.report\n     */\n    function processLastException() {\n        var _lastExceptionStack = lastExceptionStack,\n            _lastException = lastException;\n        lastExceptionStack = null;\n        lastException = null;\n        notifyHandlers(_lastExceptionStack, false, _lastException);\n    }\n\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     * @memberof TraceKit.report\n     * @throws An exception if an incomplete stack trace is detected (old IE browsers).\n     */\n    function report(ex) {\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n              processLastException();\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        setTimeout(function () {\n            if (lastException === ex) {\n                processLastException();\n            }\n        }, (stack.incomplete ? 2000 : 0));\n\n        throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    return report;\n}());\n\n/**\n * An object representing a single stack frame.\n * @typedef {Object} StackFrame\n * @property {string} url The JavaScript or HTML file URL.\n * @property {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * @property {string[]?} args The arguments passed to the function, if known.\n * @property {number=} line The line number, if known.\n * @property {number=} column The column number, if known.\n * @property {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n * @memberof TraceKit\n */\n\n/**\n * An object representing a JavaScript stack trace.\n * @typedef {Object} StackTrace\n * @property {string} name The name of the thrown exception.\n * @property {string} message The exception error message.\n * @property {TraceKit.StackFrame[]} stack An array of stack frames.\n * @property {string} mode 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace.\n * @memberof TraceKit\n */\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   ```js\n *   s = TraceKit.computeStackTrace.ofCaller([depth])\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n *   ```\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n * Tracing example:\n *  ```js\n *     function trace(message) {\n *         var stackInfo = TraceKit.computeStackTrace.ofCaller();\n *         var data = message + \"\\n\";\n *         for(var i in stackInfo.stack) {\n *             var item = stackInfo.stack[i];\n *             data += (item.func || '[anonymous]') + \"() in \" + item.url + \":\" + (item.line || '0') + \"\\n\";\n *         }\n *         if (window.console)\n *             console.info(data);\n *         else\n *             alert(data);\n *     }\n * ```\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n    var debug = false,\n        sourceCache = {};\n\n    /**\n     * Attempts to retrieve source code via XMLHttpRequest, which is used\n     * to look up anonymous function names.\n     * @param {string} url URL of source code.\n     * @return {string} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function loadSource(url) {\n        if (!TraceKit.remoteFetching) { //Only attempt request if remoteFetching is on.\n            return '';\n        }\n        try {\n            var getXHR = function() {\n                try {\n                    return new window.XMLHttpRequest();\n                } catch (e) {\n                    // explicitly bubble up the exception if not found\n                    return new window.ActiveXObject('Microsoft.XMLHTTP');\n                }\n            };\n\n            var request = getXHR();\n            request.open('GET', url, false);\n            request.send('');\n            return request.responseText;\n        } catch (e) {\n            return '';\n        }\n    }\n\n    /**\n     * Retrieves source code from the source code cache.\n     * @param {string} url URL of source code.\n     * @return {Array.<string>} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function getSource(url) {\n        if (typeof url !== 'string') {\n            return [];\n        }\n\n        if (!_has(sourceCache, url)) {\n            // URL needs to be able to fetched within the acceptable domain.  Otherwise,\n            // cross-domain errors will be triggered.\n            /*\n                Regex matches:\n                0 - Full Url\n                1 - Protocol\n                2 - Domain\n                3 - Port (Useful for internal applications)\n                4 - Path\n            */\n            var source = '';\n            var domain = '';\n            try { domain = window.document.domain; } catch (e) { }\n            var match = /(.*)\\:\\/\\/([^:\\/]+)([:\\d]*)\\/{0,1}([\\s\\S]*)/.exec(url);\n            if (match && match[2] === domain) {\n                source = loadSource(url);\n            }\n            sourceCache[url] = source ? source.split('\\n') : [];\n        }\n\n        return sourceCache[url];\n    }\n\n    /**\n     * Tries to use an externally loaded copy of source code to determine\n     * the name of a function by looking at the name of the variable it was\n     * assigned to, if any.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} lineNo Line number in source code.\n     * @return {string} The function name, if discoverable.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function guessFunctionName(url, lineNo) {\n        var reFunctionArgNames = /function ([^(]*)\\(([^)]*)\\)/,\n            reGuessFunction = /['\"]?([0-9A-Za-z$_]+)['\"]?\\s*[:=]\\s*(function|eval|new Function)/,\n            line = '',\n            maxLines = 10,\n            source = getSource(url),\n            m;\n\n        if (!source.length) {\n            return UNKNOWN_FUNCTION;\n        }\n\n        // Walk backwards from the first line in the function until we find the line which\n        // matches the pattern above, which is the function definition\n        for (var i = 0; i < maxLines; ++i) {\n            line = source[lineNo - i] + line;\n\n            if (!_isUndefined(line)) {\n                if ((m = reGuessFunction.exec(line))) {\n                    return m[1];\n                } else if ((m = reFunctionArgNames.exec(line))) {\n                    return m[1];\n                }\n            }\n        }\n\n        return UNKNOWN_FUNCTION;\n    }\n\n    /**\n     * Retrieves the surrounding lines from where an exception occurred.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} line Line number in source code to center around for context.\n     * @return {?Array.<string>} Lines of source code.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function gatherContext(url, line) {\n        var source = getSource(url);\n\n        if (!source.length) {\n            return null;\n        }\n\n        var context = [],\n            // linesBefore & linesAfter are inclusive with the offending line.\n            // if linesOfContext is even, there will be one extra line\n            //   *before* the offending line.\n            linesBefore = Math.floor(TraceKit.linesOfContext / 2),\n            // Add one extra line if linesOfContext is odd\n            linesAfter = linesBefore + (TraceKit.linesOfContext % 2),\n            start = Math.max(0, line - linesBefore - 1),\n            end = Math.min(source.length, line + linesAfter - 1);\n\n        line -= 1; // convert to 0-based index\n\n        for (var i = start; i < end; ++i) {\n            if (!_isUndefined(source[i])) {\n                context.push(source[i]);\n            }\n        }\n\n        return context.length > 0 ? context : null;\n    }\n\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    /**\n     * Determines where a code fragment occurs in the source code.\n     * @param {RegExp} re The function definition.\n     * @param {Array.<string>} urls A list of URLs to search.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInUrls(re, urls) {\n        var source, m;\n        for (var i = 0, j = urls.length; i < j; ++i) {\n            if ((source = getSource(urls[i])).length) {\n                source = source.join('\\n');\n                if ((m = re.exec(source))) {\n\n                    return {\n                        'url': urls[i],\n                        'line': source.substring(0, m.index).split('\\n').length,\n                        'column': m.index - source.lastIndexOf('\\n', m.index) - 1\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines at which column a code fragment occurs on a line of the\n     * source code.\n     * @param {string} fragment The code fragment.\n     * @param {string} url The URL to search.\n     * @param {(string|number)} line The line number to examine.\n     * @return {?number} The column number.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInLine(fragment, url, line) {\n        var source = getSource(url),\n            re = new RegExp('\\\\b' + escapeRegExp(fragment) + '\\\\b'),\n            m;\n\n        line -= 1;\n\n        if (source && source.length > line && (m = re.exec(source[line]))) {\n            return m.index;\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines where a function was defined within the source code.\n     * @param {(Function|string)} func A function reference or serialized\n     * function definition.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceByFunctionBody(func) {\n        if (_isUndefined(window && window.document)) {\n            return;\n        }\n\n        var urls = [window.location.href],\n            scripts = window.document.getElementsByTagName('script'),\n            body,\n            code = '' + func,\n            codeRE = /^function(?:\\s+([\\w$]+))?\\s*\\(([\\w\\s,]*)\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            eventRE = /^function on([\\w$]+)\\s*\\(event\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            re,\n            parts,\n            result;\n\n        for (var i = 0; i < scripts.length; ++i) {\n            var script = scripts[i];\n            if (script.src) {\n                urls.push(script.src);\n            }\n        }\n\n        if (!(parts = codeRE.exec(code))) {\n            re = new RegExp(escapeRegExp(code).replace(/\\s+/g, '\\\\s+'));\n        }\n\n        // not sure if this is really necessary, but I don’t have a test\n        // corpus large enough to confirm that and it was in the original.\n        else {\n            var name = parts[1] ? '\\\\s+' + parts[1] : '',\n                args = parts[2].split(',').join('\\\\s*,\\\\s*');\n\n            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\\s+/g, '\\\\s+');\n            re = new RegExp('function' + name + '\\\\s*\\\\(\\\\s*' + args + '\\\\s*\\\\)\\\\s*{\\\\s*' + body + '\\\\s*}');\n        }\n\n        // look for a normal function definition\n        if ((result = findSourceInUrls(re, urls))) {\n            return result;\n        }\n\n        // look for an old-school event handler function\n        if ((parts = eventRE.exec(code))) {\n            var event = parts[1];\n            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);\n\n            // look for a function defined in HTML as an onXXX handler\n            re = new RegExp('on' + event + '=[\\\\\\'\"]\\\\s*' + body + '\\\\s*[\\\\\\'\"]', 'i');\n\n            if ((result = findSourceInUrls(re, urls[0]))) {\n                return result;\n            }\n\n            // look for ???\n            re = new RegExp(body);\n\n            if ((result = findSourceInUrls(re, urls))) {\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (!ex.stack) {\n            return null;\n        }\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\\[native).*?|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n\n            // Used to additionally parse URL/line/column from eval frames\n            isEval,\n            geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i,\n            chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/,\n\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            submatch,\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if ((parts = chrome.exec(lines[i]))) {\n                var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n                isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n                if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n                    // throw out eval line/column and use top-most line/column number\n                    parts[2] = submatch[1]; // url\n                    parts[3] = submatch[2]; // line\n                    parts[4] = submatch[3]; // column\n                }\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ( parts = winjs.exec(lines[i]) ) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = gecko.exec(lines[i]))) {\n                isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n                if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n                    // throw out eval line/column and use top-most line number\n                    parts[3] = submatch[1];\n                    parts[4] = submatch[2];\n                    parts[5] = null; // no column when eval\n                } else if (i === 0 && !parts[5] && !_isUndefined(ex.columnNumber)) {\n                    // FireFox uses this awesome columnNumber property for its top frame\n                    // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n                    // so adding 1\n                    // NOTE: this hack doesn't work if top-most frame is eval\n                    stack[0].column = ex.columnNumber + 1;\n                }\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = guessFunctionName(element.url, element.line);\n            }\n\n            element.context = element.line ? gatherContext(element.url, element.line) : null;\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        if (stack[0] && stack[0].line && !stack[0].column && reference) {\n            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);\n        }\n\n        return {\n            'mode': 'stack',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * Computes stack trace information from the stacktrace property.\n     * Opera 10+ uses this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStacktraceProp(ex) {\n        // Access and store the stacktrace property before doing ANYTHING\n        // else to it because Opera is not very good at providing it\n        // reliably in other circumstances.\n        var stacktrace = ex.stacktrace;\n        if (!stacktrace) {\n            return;\n        }\n\n        var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i,\n            opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i,\n            lines = stacktrace.split('\\n'),\n            stack = [],\n            parts;\n\n        for (var line = 0; line < lines.length; line += 2) {\n            var element = null;\n            if ((parts = opera10Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[2],\n                    'line': +parts[1],\n                    'column': null,\n                    'func': parts[3],\n                    'args':[]\n                };\n            } else if ((parts = opera11Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[6],\n                    'line': +parts[1],\n                    'column': +parts[2],\n                    'func': parts[3] || parts[4],\n                    'args': parts[5] ? parts[5].split(',') : []\n                };\n            }\n\n            if (element) {\n                if (!element.func && element.line) {\n                    element.func = guessFunctionName(element.url, element.line);\n                }\n                if (element.line) {\n                    try {\n                        element.context = gatherContext(element.url, element.line);\n                    } catch (exc) {}\n                }\n\n                if (!element.context) {\n                    element.context = [lines[line + 1]];\n                }\n\n                stack.push(element);\n            }\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        return {\n            'mode': 'stacktrace',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * NOT TESTED.\n     * Computes stack trace information from an error message that includes\n     * the stack trace.\n     * Opera 9 and earlier use this method if the option to show stack\n     * traces is turned on in opera:config.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromOperaMultiLineMessage(ex) {\n        // TODO: Clean this function up\n        // Opera includes a stack trace into the exception message. An example is:\n        //\n        // Statement on line 3: Undefined variable: undefinedFunc\n        // Backtrace:\n        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz\n        //         undefinedFunc(a);\n        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy\n        //           zzz(x, y, z);\n        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx\n        //           yyy(a, a, a);\n        //   Line 1 of function script\n        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }\n        //   ...\n\n        var lines = ex.message.split('\\n');\n        if (lines.length < 4) {\n            return null;\n        }\n\n        var lineRE1 = /^\\s*Line (\\d+) of linked script ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE2 = /^\\s*Line (\\d+) of inline#(\\d+) script in ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE3 = /^\\s*Line (\\d+) of function script\\s*$/i,\n            stack = [],\n            scripts = (window && window.document && window.document.getElementsByTagName('script')),\n            inlineScriptBlocks = [],\n            parts;\n\n        for (var s in scripts) {\n            if (_has(scripts, s) && !scripts[s].src) {\n                inlineScriptBlocks.push(scripts[s]);\n            }\n        }\n\n        for (var line = 2; line < lines.length; line += 2) {\n            var item = null;\n            if ((parts = lineRE1.exec(lines[line]))) {\n                item = {\n                    'url': parts[2],\n                    'func': parts[3],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null\n                };\n            } else if ((parts = lineRE2.exec(lines[line]))) {\n                item = {\n                    'url': parts[3],\n                    'func': parts[4],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.\n                };\n                var relativeLine = (+parts[1]); // relative to the start of the <SCRIPT> block\n                var script = inlineScriptBlocks[parts[2] - 1];\n                if (script) {\n                    var source = getSource(item.url);\n                    if (source) {\n                        source = source.join('\\n');\n                        var pos = source.indexOf(script.innerText);\n                        if (pos >= 0) {\n                            item.line = relativeLine + source.substring(0, pos).split('\\n').length;\n                        }\n                    }\n                }\n            } else if ((parts = lineRE3.exec(lines[line]))) {\n                var url = window.location.href.replace(/#.*$/, '');\n                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));\n                var src = findSourceInUrls(re, [url]);\n                item = {\n                    'url': url,\n                    'func': '',\n                    'args': [],\n                    'line': src ? src.line : parts[1],\n                    'column': null\n                };\n            }\n\n            if (item) {\n                if (!item.func) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n                var context = gatherContext(item.url, item.line);\n                var midline = (context ? context[Math.floor(context.length / 2)] : null);\n                if (context && midline.replace(/^\\s*/, '') === lines[line + 1].replace(/^\\s*/, '')) {\n                    item.context = context;\n                } else {\n                    // if (context) alert(\"Context mismatch. Correct midline:\\n\" + lines[i+1] + \"\\n\\nMidline:\\n\" + midline + \"\\n\\nContext:\\n\" + context.join(\"\\n\") + \"\\n\\nURL:\\n\" + item.url);\n                    item.context = [lines[line + 1]];\n                }\n                stack.push(item);\n            }\n        }\n        if (!stack.length) {\n            return null; // could not parse multiline exception message as Opera stack trace\n        }\n\n        return {\n            'mode': 'multiline',\n            'name': ex.name,\n            'message': lines[0],\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {TraceKit.StackTrace} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = guessFunctionName(initial.url, initial.line);\n            }\n\n            if (!initial.context) {\n                initial.context = gatherContext(initial.url, initial.line);\n            }\n\n            var reference = / '([^']+)' /.exec(message);\n            if (reference) {\n                initial.column = findSourceInLine(reference[1], initial.url, initial.line);\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        stackInfo.stack[0].context = initial.context;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {TraceKit.StackTrace=} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'args': [],\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if ((parts = functionName.exec(curr.toString()))) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n              try {\n                item.func = parts.input.substring(0, parts.input.indexOf('{'));\n              } catch (e) { }\n            }\n\n            if ((source = findSourceByFunctionBody(curr))) {\n                item.url = source.url;\n                item.line = source.line;\n\n                if (item.func === UNKNOWN_FUNCTION) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n\n                var reference = / '([^']+)' /.exec(ex.message || ex.description);\n                if (reference) {\n                    item.column = findSourceInLine(reference[1], source.url, source.line);\n                }\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            }else{\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'mode': 'callers',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = (depth == null ? 0 : +depth);\n\n        try {\n            // This must be tried first because Opera 10 *destroys*\n            // its stacktrace property if you try to access the stack\n            // property first!!\n            stack = computeStackTraceFromStacktraceProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromOperaMultiLineMessage(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        return {\n            'name': ex.name,\n            'message': ex.message,\n            'mode': 'failed'\n        };\n    }\n\n    /**\n     * Logs a stacktrace starting from the previous call and working down.\n     * @param {(number|string)=} depth How many frames deep to trace.\n     * @return {TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceOfCaller(depth) {\n        depth = (depth == null ? 0 : +depth) + 1; // \"+ 1\" because \"ofCaller\" should drop one frame\n        try {\n            throw new Error();\n        } catch (ex) {\n            return computeStackTrace(ex, depth + 1);\n        }\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.computeStackTraceFromStackProp = computeStackTraceFromStackProp;\n    computeStackTrace.guessFunctionName = guessFunctionName;\n    computeStackTrace.gatherContext = gatherContext;\n    computeStackTrace.ofCaller = computeStackTraceOfCaller;\n    computeStackTrace.getSource = getSource;\n\n    return computeStackTrace;\n}());\n\n/**\n * Extends support for global error handling for asynchronous browser\n * functions. Adopted from Closure Library's errorhandler.js\n * @memberof TraceKit\n */\nTraceKit.extendToAsynchronousCallbacks = function () {\n    var _helper = function _helper(fnName) {\n        var originalFn = window[fnName];\n        window[fnName] = function traceKitAsyncExtension() {\n            // Make a copy of the arguments\n            var args = _slice.call(arguments);\n            var originalCallback = args[0];\n            if (typeof (originalCallback) === 'function') {\n                args[0] = TraceKit.wrap(originalCallback);\n            }\n            // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n            // also only supports 2 argument and doesn't care what \"this\" is, so we\n            // can just call the original function directly.\n            if (originalFn.apply) {\n                return originalFn.apply(this, args);\n            } else {\n                return originalFn(args[0], args[1]);\n            }\n        };\n    };\n\n    _helper('setTimeout');\n    _helper('setInterval');\n};\n\n//Default options:\nif (!TraceKit.remoteFetching) {\n    TraceKit.remoteFetching = true;\n}\nif (!TraceKit.collectWindowErrors) {\n    TraceKit.collectWindowErrors = true;\n}\nif (!TraceKit.linesOfContext || TraceKit.linesOfContext < 1) {\n    // 5 lines before, the offending line, 5 lines after\n    TraceKit.linesOfContext = 11;\n}\n\n// UMD export\nif (typeof define === 'function' && define.amd) {\n    define('TraceKit', [], TraceKit);\n} else if (typeof module !== 'undefined' && module.exports && window.module !== module) {\n    module.exports = TraceKit;\n} else {\n    window.TraceKit = TraceKit;\n}\n\n}(typeof window !== 'undefined' ? window : global));\n","import * as TraceKit from 'TraceKit';\nexport interface ILastReferenceIdManager {\n  getLast(): string;\n  clearLast(): void;\n  setLast(eventId: string): void;\n}\n\nexport interface ILog {\n  trace(message: string): void;\n  info(message: string): void;\n  warn(message: string): void;\n  error(message: string): void;\n}\n\n                                                                    \n\nexport class DefaultLastReferenceIdManager implements ILastReferenceIdManager {\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @type {string}\n   * @private\n   */\n  private _lastReferenceId: string = null;\n\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @returns {string}\n   */\n  public getLast(): string {\n    return this._lastReferenceId;\n  }\n\n  /**\n   * Clears the last event's reference id.\n   */\n  public clearLast(): void {\n    this._lastReferenceId = null;\n  }\n\n  /**\n   * Sets the last event's reference id.\n   * @param eventId\n   */\n  public setLast(eventId: string): void {\n    this._lastReferenceId = eventId;\n  }\n}\n\n                              \n\nexport class ConsoleLog implements ILog {\n  public trace(message: string): void {\n    this.log('debug', message);\n  }\n\n  public info(message: string): void {\n    this.log('info', message);\n  }\n\n  public warn(message: string): void {\n    this.log('warn', message);\n  }\n\n  public error(message: string): void {\n    this.log('error', message);\n  }\n\n  private log(level: string, message: string) {\n    if (console) {\n      const msg = `[${level}] Exceptionless: ${message}`;\n\n      if (console[level]) {\n        console[level](msg);\n      } else if (console.log) {\n        console[`log`](msg);\n      }\n    }\n  }\n}\n\n                              \n\nexport class NullLog implements ILog {\n  public trace(message: string): void { }\n  public info(message: string): void { }\n  public warn(message: string): void { }\n  public error(message: string): void { }\n}\n\nexport interface IUserInfo {\n  identity?: string;\n  name?: string;\n  data?: any;\n}\n\n                                                                                                                                                               \n\nexport class HeartbeatPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = 'HeartbeatPlugin';\n\n  private _interval: number;\n  private _intervalId: any;\n\n  constructor(heartbeatInterval: number = 30000) {\n    this._interval = heartbeatInterval;\n  }\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    clearInterval(this._intervalId);\n\n    const user: IUserInfo = context.event.data['@user'];\n    if (user && user.identity) {\n      this._intervalId = setInterval(() => context.client.submitSessionHeartbeat(user.identity), this._interval);\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                \n\nexport class ReferenceIdPlugin implements IEventPlugin {\n  public priority: number = 20;\n  public name: string = 'ReferenceIdPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    if ((!context.event.reference_id || context.event.reference_id.length === 0) && context.event.type === 'error') {\n      context.event.reference_id = Utils.guid().replace('-', '').substring(0, 10);\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                             \n\nexport class EventPluginContext {\n  public cancelled: boolean;\n  public client: ExceptionlessClient;\n  public event: IEvent;\n  public contextData: ContextData;\n\n  constructor(client: ExceptionlessClient, event: IEvent, contextData?: ContextData) {\n    this.client = client;\n    this.event = event;\n    this.contextData = contextData ? contextData : new ContextData();\n  }\n\n  public get log(): ILog {\n    return this.client.config.log;\n  }\n}\n\nn\nexport class EventPluginManager {\n  public static run(context: EventPluginContext, callback: (context?: EventPluginContext) => void): void {\n    const wrap = (plugin: IEventPlugin, next?: () => void): () => void => {\n      return () => {\n        try {\n          if (!context.cancelled) {\n            plugin.run(context, next);\n          }\n        } catch (ex) {\n          context.cancelled = true;\n          context.log.error(`Error running plugin '${plugin.name}': ${ex.message}. Discarding Event.`);\n        }\n\n        if (context.cancelled && !!callback) {\n          callback(context);\n        }\n      };\n    };\n\n    const plugins: IEventPlugin[] = context.client.config.plugins; // optimization for minifier.\n    const wrappedPlugins: Array<() => void> = [];\n    if (!!callback) {\n      wrappedPlugins[plugins.length] = wrap({ name: 'cb', priority: 9007199254740992, run: callback }, null);\n    }\n\n    for (let index = plugins.length - 1; index > -1; index--) {\n      wrappedPlugins[index] = wrap(plugins[index], !!callback || (index < plugins.length - 1) ? wrappedPlugins[index + 1] : null);\n    }\n\n    wrappedPlugins[0]();\n  }\n\n  public static addDefaultPlugins(config: Configuration): void {\n    config.addPlugin(new ConfigurationDefaultsPlugin());\n    config.addPlugin(new ErrorPlugin());\n    config.addPlugin(new DuplicateCheckerPlugin());\n    config.addPlugin(new EventExclusionPlugin());\n    config.addPlugin(new ModuleInfoPlugin());\n    config.addPlugin(new RequestInfoPlugin());\n    config.addPlugin(new EnvironmentInfoPlugin());\n    config.addPlugin(new SubmissionMethodPlugin());\n  }\n}\n\n                                                                                                         \n\nexport interface IEventPlugin {\n  priority?: number;\n  name?: string;\n  run(context: EventPluginContext, next?: () => void): void;\n}\n\n                                                                                                                                                                                                                                                                                                                                     \n\nexport class DefaultEventQueue implements IEventQueue {\n  /**\n   * The configuration object.\n   * @type {Configuration}\n   * @private\n   */\n  private _config: Configuration;\n\n  /**\n   * A list of handlers that will be fired when events are submitted.\n   * @type {Array}\n   * @private\n   */\n  private _handlers: Array<(events: IEvent[], response: SubmissionResponse) => void> = [];\n\n  /**\n   * Suspends processing until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _suspendProcessingUntil: Date;\n\n  /**\n   * Discards queued items until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _discardQueuedItemsUntil: Date;\n\n  /**\n   * Returns true if the queue is processing.\n   * @type {boolean}\n   * @private\n   */\n  private _processingQueue: boolean = false;\n\n  /**\n   * Processes the queue every xx seconds.\n   * @type {Timer}\n   * @private\n   */\n  private _queueTimer: any;\n\n  constructor(config: Configuration) {\n    this._config = config;\n  }\n\n  public enqueue(event: IEvent): void {\n    const eventWillNotBeQueued: string = 'The event will not be queued.'; // optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    if (this.areQueuedItemsDiscarded()) {\n      log.info(`Queue items are currently being discarded. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    this.ensureQueueTimer();\n\n    const timestamp = config.storage.queue.save(event);\n    const logText = `type=${event.type} ${!!event.reference_id ? 'refid=' + event.reference_id : ''}`;\n    if (timestamp) {\n      log.info(`Enqueuing event: ${timestamp} ${logText}`);\n    } else {\n      log.error(`Could not enqueue event ${logText}`);\n    }\n  }\n\n  public process(isAppExiting?: boolean): void {\n    const queueNotProcessed: string = 'The queue will not be processed.'; // optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (this._processingQueue) {\n      return;\n    }\n\n    log.info('Processing queue...');\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${queueNotProcessed}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${queueNotProcessed}`);\n      return;\n    }\n\n    this._processingQueue = true;\n    this.ensureQueueTimer();\n\n    try {\n      const events = config.storage.queue.get(config.submissionBatchSize);\n      if (!events || events.length === 0) {\n        this._processingQueue = false;\n        return;\n      }\n\n      log.info(`Sending ${events.length} events to ${config.serverUrl}.`);\n      config.submissionClient.postEvents(events.map((e) => e.value), config, (response: SubmissionResponse) => {\n        this.processSubmissionResponse(response, events);\n        this.eventsPosted(events.map((e) => e.value), response);\n        log.info('Finished processing queue.');\n        this._processingQueue = false;\n      }, isAppExiting);\n    } catch (ex) {\n      log.error(`Error processing queue: ${ex}`);\n      this.suspendProcessing();\n      this._processingQueue = false;\n    }\n  }\n\n  public suspendProcessing(durationInMinutes?: number, discardFutureQueuedItems?: boolean, clearQueue?: boolean): void {\n    const config: Configuration = this._config; // Optimization for minifier.\n\n    if (!durationInMinutes || durationInMinutes <= 0) {\n      durationInMinutes = 5;\n    }\n\n    config.log.info(`Suspending processing for ${durationInMinutes} minutes.`);\n    this._suspendProcessingUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\n\n    if (discardFutureQueuedItems) {\n      this._discardQueuedItemsUntil = this._suspendProcessingUntil;\n    }\n\n    if (clearQueue) {\n      // Account is over the limit and we want to ensure that the sample size being sent in will contain newer errors.\n      config.storage.queue.clear();\n    }\n  }\n\n  public onEventsPosted(handler: (events: IEvent[], response: SubmissionResponse) => void): void {\n    !!handler && this._handlers.push(handler);\n  }\n\n  private eventsPosted(events: IEvent[], response: SubmissionResponse) {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(events, response);\n      } catch (ex) {\n        this._config.log.error(`Error calling onEventsPosted handler: ${ex}`);\n      }\n    }\n  }\n\n  private areQueuedItemsDiscarded(): boolean {\n    return this._discardQueuedItemsUntil && this._discardQueuedItemsUntil > new Date();\n  }\n\n  private ensureQueueTimer(): void {\n    if (!this._queueTimer) {\n      this._queueTimer = setInterval(() => this.onProcessQueue(), 10000);\n    }\n  }\n\n  private isQueueProcessingSuspended(): boolean {\n    return this._suspendProcessingUntil && this._suspendProcessingUntil > new Date();\n  }\n\n  private onProcessQueue(): void {\n    if (!this.isQueueProcessingSuspended() && !this._processingQueue) {\n      this.process();\n    }\n  }\n\n  private processSubmissionResponse(response: SubmissionResponse, events: IStorageItem[]): void {\n    const noSubmission: string = 'The event will not be submitted.'; // Optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (response.success) {\n      log.info(`Sent ${events.length} events.`);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.serviceUnavailable) {\n      // You are currently over your rate limit or the servers are under stress.\n      log.error('Server returned service unavailable.');\n      this.suspendProcessing();\n      return;\n    }\n\n    if (response.paymentRequired) {\n      // If the organization over the rate limit then discard the event.\n      log.info('Too many events have been submitted, please upgrade your plan.');\n      this.suspendProcessing(null, true, true);\n      return;\n    }\n\n    if (response.unableToAuthenticate) {\n      // The api key was suspended or could not be authorized.\n      log.info(`Unable to authenticate, please check your configuration. ${noSubmission}`);\n      this.suspendProcessing(15);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.notFound || response.badRequest) {\n      // The service end point could not be found.\n      log.error(`Error while trying to submit data: ${response.message}`);\n      this.suspendProcessing(60 * 4);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.requestEntityTooLarge) {\n      const message = 'Event submission discarded for being too large.';\n      if (config.submissionBatchSize > 1) {\n        log.error(`${message} Retrying with smaller batch size.`);\n        config.submissionBatchSize = Math.max(1, Math.round(config.submissionBatchSize / 1.5));\n      } else {\n        log.error(`${message} ${noSubmission}`);\n        this.removeEvents(events);\n      }\n\n      return;\n    }\n\n    if (!response.success) {\n      log.error(`Error submitting events: ${response.message || 'Please check the network tab for more info.'}`);\n      this.suspendProcessing();\n    }\n  }\n\n  private removeEvents(events: IStorageItem[]) {\n    for (let index = 0; index < (events || []).length; index++) {\n      this._config.storage.queue.remove(events[index].timestamp);\n    }\n  }\n}\n\n                                                                                                                 \n\nexport interface IEventQueue {\n  enqueue(event: IEvent): void;\n  process(isAppExiting?: boolean): void;\n  suspendProcessing(durationInMinutes?: number, discardFutureQueuedItems?: boolean, clearQueue?: boolean): void;\n  onEventsPosted(handler: (events: IEvent[], response: SubmissionResponse) => void): void;\n}\n\n                                                                                                                                  \n\nexport interface IEnvironmentInfoCollector {\n  getEnvironmentInfo(context: EventPluginContext): IEnvironmentInfo;\n}\n\n                                                                                                              \n\nexport interface IErrorParser {\n  parse(context: EventPluginContext, exception: Error): IError;\n}\n\n                                                                                                                \n\nexport interface IModuleCollector {\n  getModules(context: EventPluginContext): IModule[];\n}\n\n                                                                                                                          \n\nexport interface IRequestInfoCollector {\n  getRequestInfo(context: EventPluginContext): IRequestInfo;\n}\n\n                                                                                                                                                  \n\nexport class InMemoryStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(maxQueueItems: number = 250) {\n    this.queue = new InMemoryStorage(maxQueueItems);\n    this.settings = new InMemoryStorage(1);\n  }\n\n}\n\n                                      \n\nexport interface IStorageProvider {\n  queue: IStorage;\n  settings: IStorage;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n\n// tslint:disable-next-line:prefer-const\ndeclare var XDomainRequest: { new (); create(); };\n\nexport class DefaultSubmissionClient implements ISubmissionClient {\n  public configurationVersionHeader: string = 'x-exceptionless-configversion';\n\n  public postEvents(events: IEvent[], config: Configuration, callback: (response: SubmissionResponse) => void, isAppExiting?: boolean): void {\n    const data = JSON.stringify(events);\n    const request = this.createRequest(config, 'POST',  `${config.serverUrl}/api/v2/events`, data);\n    const cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb, isAppExiting);\n  }\n\n  public postUserDescription(referenceId: string, description: IUserDescription, config: Configuration, callback: (response: SubmissionResponse) => void): void {\n    const path = `${config.serverUrl}/api/v2/events/by-ref/${encodeURIComponent(referenceId)}/user-description`;\n    const data = JSON.stringify(description);\n    const request = this.createRequest(config, 'POST', path, data);\n    const cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public getSettings(config: Configuration, version: number, callback: (response: SettingsResponse) => void): void {\n    const request = this.createRequest(config, 'GET', `${config.serverUrl}/api/v2/projects/config?v=${version}`);\n    const cb = (status, message, data?, headers?) => {\n      if (status !== 200) {\n        return callback(new SettingsResponse(false, null, -1, null, message));\n      }\n\n      let settings: IClientConfiguration;\n      try {\n        settings = JSON.parse(data);\n      } catch (e) {\n        config.log.error(`Unable to parse settings: '${data}'`);\n      }\n\n      if (!settings || isNaN(settings.version)) {\n        return callback(new SettingsResponse(false, null, -1, null, 'Invalid configuration settings.'));\n      }\n\n      callback(new SettingsResponse(true, settings.settings || {}, settings.version));\n    };\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public sendHeartbeat(sessionIdOrUserId: string, closeSession: boolean, config: Configuration): void {\n    const request = this.createRequest(config, 'GET', `${config.heartbeatServerUrl}/api/v2/events/session/heartbeat?id=${sessionIdOrUserId}&close=${closeSession}`);\n    config.submissionAdapter.sendRequest(request);\n  }\n\n  private createRequest(config: Configuration, method: string, url: string, data: string = null): SubmissionRequest {\n    return {\n      method,\n      url,\n      data,\n      apiKey: config.apiKey,\n      userAgent: config.userAgent\n    };\n  }\n\n  private createSubmissionCallback(config: Configuration, callback: (response: SubmissionResponse) => void) {\n    return (status, message, data?, headers?) => {\n      const settingsVersion: number = headers && parseInt(headers[this.configurationVersionHeader], 10);\n      SettingsManager.checkVersion(settingsVersion, config);\n\n      callback(new SubmissionResponse(status, message));\n    };\n  }\n}\n\n                                                                                                                   \n\nexport interface ISubmissionAdapter {\n  sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean): void;\n}\n\n                                                                                                                                                                                                                                                                                           \n\nexport interface ISubmissionClient {\n  postEvents(events: IEvent[], config: Configuration, callback: (response: SubmissionResponse) => void, isAppExiting?: boolean): void;\n  postUserDescription(referenceId: string, description: IUserDescription, config: Configuration, callback: (response: SubmissionResponse) => void): void;\n  getSettings(config: Configuration, version: number, callback: (response: SettingsResponse) => void): void;\n  sendHeartbeat(sessionIdOrUserId: string, closeSession: boolean, config: Configuration): void;\n}\n\nexport class Utils {\n  public static addRange<T>(target: T[], ...values: T[]) {\n    if (!target) {\n      target = [];\n    }\n\n    if (!values || values.length === 0) {\n      return target;\n    }\n\n    for (const value of values) {\n      if (value && target.indexOf(value) < 0) {\n        target.push(value);\n      }\n    }\n\n    return target;\n  }\n\n  public static getHashCode(source: string): number {\n    if (!source || source.length === 0) {\n      return 0;\n    }\n\n    let hash: number = 0;\n    for (let index = 0; index < source.length; index++) {\n      const character = source.charCodeAt(index);\n      hash = ((hash << 5) - hash) + character;\n      hash |= 0;\n    }\n\n    return hash;\n  }\n\n  public static getCookies(cookies: string, exclusions?: string[]): object {\n    const result: object = {};\n\n    const parts: string[] = (cookies || '').split('; ');\n    for (const part of parts) {\n      const cookie: string[] = part.split('=');\n      if (!Utils.isMatch(cookie[0], exclusions)) {\n        result[cookie[0]] = cookie[1];\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static guid(): string {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    }\n\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n  }\n\n  // tslint:disable-next-line:ban-types\n  public static merge(defaultValues: Object, values: Object) {\n    const result: object = {};\n\n    for (const key in defaultValues || {}) {\n      if (!!defaultValues[key]) {\n        result[key] = defaultValues[key];\n      }\n    }\n\n    for (const key in values || {}) {\n      if (!!values[key]) {\n        result[key] = values[key];\n      }\n    }\n\n    return result;\n  }\n\n  public static parseVersion(source: string): string {\n    if (!source) {\n      return null;\n    }\n\n    const versionRegex = /(v?((\\d+)\\.(\\d+)(\\.(\\d+))?)(?:-([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?(?:\\+([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?)/;\n    const matches = versionRegex.exec(source);\n    if (matches && matches.length > 0) {\n      return matches[0];\n    }\n\n    return null;\n  }\n\n  public static parseQueryString(query: string, exclusions?: string[]) {\n    if (!query || query.length === 0) {\n      return null;\n    }\n\n    const pairs: string[] = query.split('&');\n    if (pairs.length === 0) {\n      return null;\n    }\n\n    const result: object = {};\n    for (const pair of pairs) {\n      const parts = pair.split('=');\n      if (!Utils.isMatch(parts[0], exclusions)) {\n        result[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static randomNumber(): number {\n    return Math.floor(Math.random() * 9007199254740992);\n  }\n\n  /**\n   * Checks to see if a value matches a pattern.\n   * @param input the value to check against the @pattern.\n   * @param pattern The pattern to check, supports wild cards (*).\n   */\n  public static isMatch(input: string, patterns: string[], ignoreCase: boolean = true): boolean {\n    if (!input || typeof input !== 'string') {\n      return false;\n    }\n\n    const trim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n    input = (ignoreCase ? input.toLowerCase() : input).replace(trim, '');\n\n    return (patterns || []).some((pattern) => {\n      if (typeof pattern !== 'string') {\n        return false;\n      }\n\n      pattern = (ignoreCase ? pattern.toLowerCase() : pattern).replace(trim, '');\n      if (pattern.length <= 0) {\n        return false;\n      }\n\n      const startsWithWildcard: boolean = pattern[0] === '*';\n      if (startsWithWildcard) {\n        pattern = pattern.slice(1);\n      }\n\n      const endsWithWildcard: boolean = pattern[pattern.length - 1] === '*';\n      if (endsWithWildcard) {\n        pattern = pattern.substring(0, pattern.length - 1);\n      }\n\n      if (startsWithWildcard && endsWithWildcard) {\n        return pattern.length <= input.length && input.indexOf(pattern, 0) !== -1;\n      }\n\n      if (startsWithWildcard) {\n        return Utils.endsWith(input, pattern);\n      }\n\n      if (endsWithWildcard) {\n        return Utils.startsWith(input, pattern);\n      }\n\n      return input === pattern;\n    });\n  }\n\n  public static isEmpty(input: object) {\n    return input === null || (typeof (input) === 'object' && Object.keys(input).length === 0);\n  }\n\n  public static startsWith(input: string, prefix: string): boolean {\n    return input.substring(0, prefix.length) === prefix;\n  }\n\n  public static endsWith(input: string, suffix: string): boolean {\n    return input.indexOf(suffix, input.length - suffix.length) !== -1;\n  }\n\n  /**\n   * Stringifys an object with optional exclusions and max depth.\n   * @param data The data object to add.\n   * @param exclusions Any property names that should be excluded.\n   * @param maxDepth The max depth of the object to include.\n   */\n  public static stringify(data: any, exclusions?: string[], maxDepth?: number): string {\n    function stringifyImpl(obj: any, excludedKeys: string[]): string {\n      const cache: string[] = [];\n      return JSON.stringify(obj, (key: string, value: any) => {\n        if (Utils.isMatch(key, excludedKeys)) {\n          return;\n        }\n\n        if (typeof value === 'object' && !!value) {\n          if (cache.indexOf(value) !== -1) {\n            // Circular reference found, discard key\n            return;\n          }\n\n          cache.push(value);\n        }\n\n        return value;\n      });\n    }\n\n    if (({}).toString.call(data) === '[object Object]') {\n      const flattened = {};\n      /* tslint:disable:forin */\n      for (const prop in data) {\n        const value = data[prop];\n        if (value === data) {\n          continue;\n        }\n        flattened[prop] = data[prop];\n      }\n      /* tslint:enable:forin */\n\n      return stringifyImpl(flattened, exclusions);\n    }\n\n    if (({}).toString.call(data) === '[object Array]') {\n      const result = [];\n      for (let index = 0; index < data.length; index++) {\n        result[index] = JSON.parse(stringifyImpl(data[index], exclusions));\n      }\n\n      return JSON.stringify(result);\n    }\n\n    return stringifyImpl(data, exclusions);\n  }\n\n  public static toBoolean(input, defaultValue: boolean = false): boolean {\n    if (typeof input === 'boolean') {\n      return input;\n    }\n\n    if (input === null || typeof input !== 'number' && typeof input !== 'string') {\n      return defaultValue;\n    }\n\n    switch ((input + '').toLowerCase().trim()) {\n      case 'true': case 'yes': case '1': return true;\n      case 'false': case 'no': case '0': case null: return false;\n    }\n\n    return defaultValue;\n  }\n}\n\nn\nexport interface IConfigurationSettings {\n  apiKey?: string;\n  serverUrl?: string;\n  heartbeatServerUrl?: string;\n  updateSettingsWhenIdleInterval?: number;\n  environmentInfoCollector?: IEnvironmentInfoCollector;\n  errorParser?: IErrorParser;\n  lastReferenceIdManager?: ILastReferenceIdManager;\n  log?: ILog;\n  moduleCollector?: IModuleCollector;\n  requestInfoCollector?: IRequestInfoCollector;\n  submissionBatchSize?: number;\n  submissionClient?: ISubmissionClient;\n  submissionAdapter?: ISubmissionAdapter;\n  storage?: IStorageProvider;\n  queue?: IEventQueue;\n}\n\n                                                                                                                                                     \n\ninterface ISettingsWithVersion {\n  version: number;\n  settings: { [key: string]: string };\n}\n\nexport class SettingsManager {\n  /**\n   * A list of handlers that will be fired when the settings change.\n   * @type {Array}\n   * @private\n   */\n  private static _handlers: Array<(config: Configuration) => void> = [];\n\n  public static onChanged(handler: (config: Configuration) => void) {\n    !!handler && this._handlers.push(handler);\n  }\n\n  public static applySavedServerSettings(config: Configuration): void {\n    if (!config || !config.isValid) {\n      return;\n    }\n\n    const savedSettings = this.getSavedServerSettings(config);\n    config.log.info(`Applying saved settings: v${savedSettings.version}`);\n    config.settings = Utils.merge(config.settings, savedSettings.settings);\n    this.changed(config);\n  }\n\n  public static getVersion(config: Configuration): number {\n    if (!config || !config.isValid) {\n      return 0;\n    }\n\n    const savedSettings = this.getSavedServerSettings(config);\n    return savedSettings.version || 0;\n  }\n\n  public static checkVersion(version: number, config: Configuration): void {\n    const currentVersion: number = this.getVersion(config);\n    if (version <= currentVersion) {\n      return;\n    }\n\n    config.log.info(`Updating settings from v${currentVersion} to v${version}`);\n    this.updateSettings(config, currentVersion);\n  }\n\n  public static updateSettings(config: Configuration, version?: number): void {\n    if (!config || !config.enabled) {\n      return;\n    }\n\n    const unableToUpdateMessage = 'Unable to update settings';\n    if (!config.isValid) {\n      config.log.error(`${unableToUpdateMessage}: ApiKey is not set.`);\n      return;\n    }\n\n    if (!version || version < 0) {\n      version = this.getVersion(config);\n    }\n\n    config.log.info(`Checking for updated settings from: v${version}.`);\n    config.submissionClient.getSettings(config, version, (response: SettingsResponse) => {\n      if (!config || !response || !response.success || !response.settings) {\n        config.log.warn(`${unableToUpdateMessage}: ${response.message}`);\n        return;\n      }\n\n      config.settings = Utils.merge(config.settings, response.settings);\n\n      // TODO: Store snapshot of settings after reading from config and attributes and use that to revert to defaults.\n      // Remove any existing server settings that are not in the new server settings.\n      const savedServerSettings = SettingsManager.getSavedServerSettings(config);\n      for (const key in savedServerSettings) {\n        if (response.settings[key]) {\n          continue;\n        }\n\n        delete config.settings[key];\n      }\n\n      const newSettings: ISettingsWithVersion = {\n        version: response.settingsVersion,\n        settings: response.settings\n      };\n\n      config.storage.settings.save(newSettings);\n\n      config.log.info(`Updated settings: v${newSettings.version}`);\n      this.changed(config);\n    });\n  }\n\n  private static changed(config: Configuration) {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(config);\n      } catch (ex) {\n        config.log.error(`Error calling onChanged handler: ${ex}`);\n      }\n    }\n  }\n\n  private static getSavedServerSettings(config: Configuration): ISettingsWithVersion {\n    const item = config.storage.settings.get()[0];\n    if (item && item.value && item.value.version && item.value.settings) {\n      return item.value;\n    }\n\n    return { version: 0, settings: {} };\n  }\n}\n\nexport interface IEvent {\n  type?: string;\n  source?: string;\n  date?: Date;\n  tags?: string[];\n  message?: string;\n  geo?: string;\n  value?: number;\n  data?: any;\n  reference_id?: string;\n  count?: number;\n}\n\nexport class SubmissionResponse {\n  public success: boolean = false;\n  public badRequest: boolean = false;\n  public serviceUnavailable: boolean = false;\n  public paymentRequired: boolean = false;\n  public unableToAuthenticate: boolean = false;\n  public notFound: boolean = false;\n  public requestEntityTooLarge: boolean = false;\n  public statusCode: number;\n  public message: string;\n\n  constructor(statusCode: number, message?: string) {\n    this.statusCode = statusCode;\n    this.message = message;\n\n    this.success = statusCode >= 200 && statusCode <= 299;\n    this.badRequest = statusCode === 400;\n    this.serviceUnavailable = statusCode === 503;\n    this.paymentRequired = statusCode === 402;\n    this.unableToAuthenticate = statusCode === 401 || statusCode === 403;\n    this.notFound = statusCode === 404;\n    this.requestEntityTooLarge = statusCode === 413;\n  }\n}\n\nn\nexport class ExceptionlessClient {\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   * @private\n   */\n  private static _instance: ExceptionlessClient = null;\n\n  public config: Configuration;\n\n  private _intervalId: any;\n  private _timeoutId: any;\n\n  constructor();\n  constructor(settings: IConfigurationSettings);\n  constructor(apiKey: string, serverUrl?: string);\n  constructor(settingsOrApiKey?: IConfigurationSettings | string, serverUrl?: string) {\n    this.config = typeof settingsOrApiKey === 'object'\n      ? new Configuration(settingsOrApiKey)\n      : new Configuration({ apiKey:  settingsOrApiKey as string, serverUrl });\n\n    this.updateSettingsTimer(5000);\n    this.config.onChanged((config) => this.updateSettingsTimer(this._timeoutId > 0 ? 5000 : 0));\n    this.config.queue.onEventsPosted((events, response) =>  this.updateSettingsTimer());\n  }\n\n  public createException(exception: Error): EventBuilder {\n    const pluginContextData = new ContextData();\n    pluginContextData.setException(exception);\n    return this.createEvent(pluginContextData).setType('error');\n  }\n\n  public submitException(exception: Error, callback?: (context: EventPluginContext) => void): void {\n    this.createException(exception).submit(callback);\n  }\n\n  public createUnhandledException(exception: Error, submissionMethod?: string): EventBuilder {\n    const builder = this.createException(exception);\n    builder.pluginContextData.markAsUnhandledError();\n    builder.pluginContextData.setSubmissionMethod(submissionMethod);\n\n    return builder;\n  }\n\n  public submitUnhandledException(exception: Error, submissionMethod?: string, callback?: (context: EventPluginContext) => void) {\n    this.createUnhandledException(exception, submissionMethod).submit(callback);\n  }\n\n  public createFeatureUsage(feature: string): EventBuilder {\n    return this.createEvent().setType('usage').setSource(feature);\n  }\n\n  public submitFeatureUsage(feature: string, callback?: (context: EventPluginContext) => void): void {\n    this.createFeatureUsage(feature).submit(callback);\n  }\n\n  public createLog(message: string): EventBuilder;\n  public createLog(source: string, message: string): EventBuilder;\n  public createLog(source: string, message: string, level: string): EventBuilder;\n  public createLog(sourceOrMessage: string, message?: string, level?: string): EventBuilder {\n    let builder = this.createEvent().setType('log');\n\n    if (message && level) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message).setProperty('@level', level);\n    } else if (message) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message);\n    } else {\n      builder = builder.setMessage(sourceOrMessage);\n\n      try {\n        // TODO: Look into using https: //www.stevefenton.co.uk/Content/Blog/Date/201304/Blog/Obtaining-A-Class-Name-At-Runtime-In-TypeScript/\n        const caller: any = this.createLog.caller;\n        builder = builder.setSource(caller && caller.caller && caller.caller.name);\n      } catch (e) {\n        this.config.log.trace('Unable to resolve log source: ' + e.message);\n      }\n    }\n\n    return builder;\n  }\n\n  public submitLog(message: string): void;\n  public submitLog(source: string, message: string): void;\n  public submitLog(source: string, message: string, level: string, callback?: (context: EventPluginContext) => void): void;\n  public submitLog(sourceOrMessage: string, message?: string, level?: string, callback?: (context: EventPluginContext) => void): void {\n    this.createLog(sourceOrMessage, message, level).submit(callback);\n  }\n\n  public createNotFound(resource: string): EventBuilder {\n    return this.createEvent().setType('404').setSource(resource);\n  }\n\n  public submitNotFound(resource: string, callback?: (context: EventPluginContext) => void): void {\n    this.createNotFound(resource).submit(callback);\n  }\n\n  public createSessionStart(): EventBuilder {\n    return this.createEvent().setType('session');\n  }\n\n  public submitSessionStart(callback?: (context: EventPluginContext) => void): void {\n    this.createSessionStart().submit(callback);\n  }\n\n  public submitSessionEnd(sessionIdOrUserId: string): void {\n    if (sessionIdOrUserId) {\n      this.config.log.info(`Submitting session end: ${sessionIdOrUserId}`);\n      this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, true, this.config);\n    }\n  }\n\n  public submitSessionHeartbeat(sessionIdOrUserId: string): void {\n    if (sessionIdOrUserId) {\n      this.config.log.info(`Submitting session heartbeat: ${sessionIdOrUserId}`);\n      this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, false, this.config);\n    }\n  }\n\n  public createEvent(pluginContextData?: ContextData): EventBuilder {\n    return new EventBuilder({ date: new Date() }, this, pluginContextData);\n  }\n\n  /**\n   * Submits the event to be sent to the server.\n   * @param event The event data.\n   * @param pluginContextData Any contextual data objects to be used by Exceptionless plugins to gather default information for inclusion in the report information.\n   * @param callback\n   */\n  public submitEvent(event: IEvent, pluginContextData?: ContextData, callback?: (context: EventPluginContext) => void): void {\n    function cancelled(context: EventPluginContext) {\n      if (!!context) {\n        context.cancelled = true;\n      }\n\n      return !!callback && callback(context);\n    }\n\n    const context = new EventPluginContext(this, event, pluginContextData);\n    if (!event) {\n      return cancelled(context);\n    }\n\n    if (!this.config.enabled) {\n      this.config.log.info('Event submission is currently disabled.');\n      return cancelled(context);\n    }\n\n    if (!event.data) {\n      event.data = {};\n    }\n\n    if (!event.tags || !event.tags.length) {\n      event.tags = [];\n    }\n\n    EventPluginManager.run(context, (ctx: EventPluginContext) => {\n      const config = ctx.client.config;\n      const ev = ctx.event;\n\n      if (!ctx.cancelled) {\n        // ensure all required data\n        if (!ev.type || ev.type.length === 0) {\n          ev.type = 'log';\n        }\n\n        if (!ev.date) {\n          ev.date = new Date();\n        }\n\n        config.queue.enqueue(ev);\n\n        if (ev.reference_id && ev.reference_id.length > 0) {\n          ctx.log.info(`Setting last reference id '${ev.reference_id}'`);\n          config.lastReferenceIdManager.setLast(ev.reference_id);\n        }\n      }\n\n      !!callback && callback(ctx);\n    });\n  }\n\n  /**\n   * Updates the user's email address and description of an event for the specified reference id.\n   * @param referenceId The reference id of the event to update.\n   * @param email The user's email address to set on the event.\n   * @param description The user's description of the event.\n   * @param callback The submission response.\n   */\n  public updateUserEmailAndDescription(referenceId: string, email: string, description: string, callback?: (response: SubmissionResponse) => void) {\n    if (!referenceId || !email || !description || !this.config.enabled) {\n      return !!callback && callback(new SubmissionResponse(500, 'cancelled'));\n    }\n\n    const userDescription: IUserDescription = { email_address: email, description };\n    this.config.submissionClient.postUserDescription(referenceId, userDescription, this.config, (response: SubmissionResponse) => {\n      if (!response.success) {\n        this.config.log.error(`Failed to submit user email and description for event '${referenceId}': ${response.statusCode} ${response.message}`);\n      }\n\n      !!callback && callback(response);\n    });\n  }\n\n  /**\n   * Gets the last event client id that was submitted to the server.\n   * @returns {string} The event client id.\n   */\n  public getLastReferenceId(): string {\n    return this.config.lastReferenceIdManager.getLast();\n  }\n\n  private updateSettingsTimer(initialDelay?: number) {\n    this.config.log.info(`Updating settings timer with delay: ${initialDelay}`);\n\n    this._timeoutId = clearTimeout(this._timeoutId);\n    this._timeoutId = clearInterval(this._intervalId);\n\n    const interval = this.config.updateSettingsWhenIdleInterval;\n    if (interval > 0) {\n      const updateSettings = () => SettingsManager.updateSettings(this.config);\n      if (initialDelay > 0) {\n        this._timeoutId = setTimeout(updateSettings, initialDelay);\n      }\n\n      this._intervalId = setInterval(updateSettings, interval);\n    }\n  }\n\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   */\n  public static get default() {\n    if (ExceptionlessClient._instance === null) {\n      ExceptionlessClient._instance = new ExceptionlessClient(null);\n    }\n\n    return ExceptionlessClient._instance;\n  }\n}\n\nexport class ContextData {\n  public setException(exception: Error): void {\n    if (exception) {\n      this['@@_Exception'] = exception;\n    }\n  }\n\n  public get hasException(): boolean {\n    return !!this['@@_Exception'];\n  }\n\n  public getException(): Error {\n    return this['@@_Exception'] || null;\n  }\n\n  public markAsUnhandledError(): void {\n    this['@@_IsUnhandledError'] = true;\n  }\n\n  public get isUnhandledError(): boolean {\n    return !!this['@@_IsUnhandledError'];\n  }\n\n  public setSubmissionMethod(method: string): void {\n    if (method) {\n      this['@@_SubmissionMethod'] = method;\n    }\n  }\n\n  public getSubmissionMethod(): string {\n    return this['@@_SubmissionMethod'] || null;\n  }\n}\n\nexport interface IEnvironmentInfo {\n  processor_count?: number;\n  total_physical_memory?: number;\n  available_physical_memory?: number;\n  command_line?: string;\n  process_name?: string;\n  process_id?: string;\n  process_memory_size?: number;\n  thread_id?: string;\n  architecture?: string;\n  o_s_name?: string;\n  o_s_version?: string;\n  ip_address?: string;\n  machine_name?: string;\n  install_id?: string;\n  runtime_version?: string;\n  data?: any;\n}\n\nexport interface IParameter {\n  data?: any;\n  generic_arguments?: string[];\n\n  name?: string;\n  type?: string;\n  type_namespace?: string;\n}\n\n                                          \n\nexport interface IMethod {\n  data?: any;\n  generic_arguments?: string[];\n  parameters?: IParameter[];\n\n  is_signature_target?: boolean;\n  declaring_namespace?: string;\n  declaring_type?: string;\n  name?: string;\n  module_id?: number;\n}\n\n                                    \n\nexport interface IStackFrame extends IMethod {\n  file_name?: string;\n  line_number?: number;\n  column?: number;\n}\n\n                                                                                 \n\nexport interface IInnerError {\n  message?: string;\n  type?: string;\n  code?: string;\n  data?: any;\n  inner?: IInnerError;\n  stack_trace?: IStackFrame[];\n  target_method?: IMethod;\n}\n\nexport interface IModule {\n  data?: any;\n\n  module_id?: number;\n  name?: string;\n  version?: string;\n  is_entry?: boolean;\n  created_date?: Date;\n  modified_date?: Date;\n}\n\n                                                                                 \n\nexport interface IError extends IInnerError {\n  modules?: IModule[];\n}\n\nexport interface IRequestInfo {\n  user_agent?: string;\n  http_method?: string;\n  is_secure?: boolean;\n  host?: string;\n  port?: number;\n  path?: string;\n  referrer?: string;\n  client_ip_address?: string;\n  cookies?: any;\n  post_data?: any;\n  query_string?: any;\n  data?: any;\n}\n\nexport interface IStorageItem {\n  timestamp: number;\n  value: any;\n}\n\n                                              \n\nexport interface IStorage {\n  save(value: any): number;\n  get(limit?: number): IStorageItem[];\n  remove(timestamp: number): void;\n  clear(): void;\n}\n\nexport type SubmissionCallback = (status: number, message: string, data?: string, headers?: object) => void;\n\nexport interface SubmissionRequest {\n  apiKey: string;\n  userAgent: string;\n  method: string;\n  url: string;\n  data: string;\n}\n\nn\nexport class Configuration implements IConfigurationSettings {\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @type {IConfigurationSettings}\n   * @private\n   */\n  private static _defaultSettings: IConfigurationSettings = null;\n\n  /**\n   * A default list of tags that will automatically be added to every\n   * report submitted to the server.\n   *\n   * @type {Array}\n   */\n  public defaultTags: string[] = [];\n\n  /**\n   * A default list of of extended data objects that will automatically\n   * be added to every report submitted to the server.\n   *\n   * @type {{}}\n   */\n  public defaultData: object = {};\n\n  /**\n   * Whether the client is currently enabled or not. If it is disabled,\n   * submitted errors will be discarded and no data will be sent to the server.\n   *\n   * @returns {boolean}\n   */\n  public enabled: boolean = true;\n\n  public environmentInfoCollector: IEnvironmentInfoCollector;\n  public errorParser: IErrorParser;\n  public lastReferenceIdManager: ILastReferenceIdManager = new DefaultLastReferenceIdManager();\n  public log: ILog;\n  public moduleCollector: IModuleCollector;\n  public requestInfoCollector: IRequestInfoCollector;\n\n  /**\n   * Maximum number of events that should be sent to the server together in a batch. (Defaults to 50)\n   */\n  public submissionBatchSize: number;\n  public submissionAdapter: ISubmissionAdapter;\n  public submissionClient: ISubmissionClient;\n\n  /**\n   * Contains a dictionary of custom settings that can be used to control\n   * the client and will be automatically updated from the server.\n   */\n  public settings: object = {};\n\n  public storage: IStorageProvider;\n\n  public queue: IEventQueue;\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @type {string}\n   * @private\n   */\n  private _apiKey: string;\n\n  /**\n   * The server url that all events will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _serverUrl: string = 'https://collector.exceptionless.io';\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _heartbeatServerUrl: string = 'https://heartbeat.exceptionless.io';\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @type {number}\n   * @private\n   */\n  private _updateSettingsWhenIdleInterval: number = 120000;\n\n  /**\n   * A list of exclusion patterns.\n   * @type {Array}\n   * @private\n   */\n  private _dataExclusions: string[] = [];\n\n  /**\n   * A list of user agent patterns.\n   * @type {Array}\n   * @private\n   */\n  private _userAgentBotPatterns: string[] = [];\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @type {Array}\n   * @private\n   */\n  private _plugins: IEventPlugin[] = [];\n\n  /**\n   * A list of handlers that will be fired when configuration changes.\n   * @type {Array}\n   * @private\n   */\n  private _handlers: Array<(config: Configuration) => void> = [];\n\n  constructor(configSettings?: IConfigurationSettings) {\n    function inject(fn: any) {\n      return typeof fn === 'function' ? fn(this) : fn;\n    }\n\n    configSettings = Utils.merge(Configuration.defaults, configSettings);\n\n    this.log = inject(configSettings.log) || new NullLog();\n    this.apiKey = configSettings.apiKey;\n    this.serverUrl = configSettings.serverUrl;\n    this.heartbeatServerUrl = configSettings.heartbeatServerUrl;\n    this.updateSettingsWhenIdleInterval = configSettings.updateSettingsWhenIdleInterval;\n\n    this.environmentInfoCollector = inject(configSettings.environmentInfoCollector);\n    this.errorParser = inject(configSettings.errorParser);\n    this.lastReferenceIdManager = inject(configSettings.lastReferenceIdManager) || new DefaultLastReferenceIdManager();\n    this.moduleCollector = inject(configSettings.moduleCollector);\n    this.requestInfoCollector = inject(configSettings.requestInfoCollector);\n    this.submissionBatchSize = inject(configSettings.submissionBatchSize) || 50;\n    this.submissionAdapter = inject(configSettings.submissionAdapter);\n    this.submissionClient = inject(configSettings.submissionClient) || new DefaultSubmissionClient();\n    this.storage = inject(configSettings.storage) || new InMemoryStorageProvider();\n    this.queue = inject(configSettings.queue) || new DefaultEventQueue(this);\n\n    SettingsManager.applySavedServerSettings(this);\n    EventPluginManager.addDefaultPlugins(this);\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @returns {string}\n   */\n  public get apiKey(): string {\n    return this._apiKey;\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @param value\n   */\n  public set apiKey(value: string) {\n    this._apiKey = value || null;\n    this.log.info(`apiKey: ${this._apiKey}`);\n    this.changed();\n  }\n\n  /**\n   * Returns true if the apiKey is valid.\n   * @returns {boolean}\n   */\n  public get isValid(): boolean {\n    return !!this.apiKey && this.apiKey.length >= 10;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @returns {string}\n   */\n  public get serverUrl(): string {\n    return this._serverUrl;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @param value\n   */\n  public set serverUrl(value: string) {\n    if (!!value) {\n      this._serverUrl = value;\n      this._heartbeatServerUrl = value;\n      this.log.info(`serverUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @returns {string}\n   */\n  public get heartbeatServerUrl(): string {\n    return this._heartbeatServerUrl;\n  }\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @param value\n   */\n  public set heartbeatServerUrl(value: string) {\n    if (!!value) {\n      this._heartbeatServerUrl = value;\n      this.log.info(`heartbeatServerUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @returns {number}\n   */\n  public get updateSettingsWhenIdleInterval(): number {\n    return this._updateSettingsWhenIdleInterval;\n  }\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @param value\n   */\n  public set updateSettingsWhenIdleInterval(value: number) {\n    if (typeof value !== 'number') {\n      return;\n    }\n\n    if (value <= 0) {\n      value = -1;\n    } else if (value > 0 && value < 15000) {\n      value = 15000;\n    }\n\n    this._updateSettingsWhenIdleInterval = value;\n    this.log.info(`updateSettingsWhenIdleInterval: ${value}`);\n    this.changed();\n  }\n\n  /**\n   *  A list of exclusion patterns that will automatically remove any data that\n   *  matches them from any data submitted to the server.\n   *\n   *  For example, entering CreditCard will remove any extended data properties,\n   *  form fields, cookies and query parameters from the report.\n   *\n   * @returns {string[]}\n   */\n  public get dataExclusions(): string[] {\n    const exclusions: string = this.settings['@@DataExclusions'];\n    return this._dataExclusions.concat(exclusions && exclusions.split(',') || []);\n  }\n\n  /**\n   * Add items to the list of exclusion patterns that will automatically remove any\n   * data that matches them from any data submitted to the server.\n   *\n   * For example, entering CreditCard will remove any extended data properties, form\n   * fields, cookies and query parameters from the report.\n   *\n   * @param exclusions\n   */\n  public addDataExclusions(...exclusions: string[]) {\n    this._dataExclusions = Utils.addRange<string>(this._dataExclusions, ...exclusions);\n  }\n\n  /**\n   * A list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @returns {string[]}\n   */\n  public get userAgentBotPatterns(): string[] {\n    const patterns: string = this.settings['@@UserAgentBotPatterns'];\n    return this._userAgentBotPatterns.concat(patterns && patterns.split(',') || []);\n  }\n\n  /**\n   * Add items to the list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @param userAgentBotPatterns\n   */\n  public addUserAgentBotPatterns(...userAgentBotPatterns: string[]) {\n    this._userAgentBotPatterns = Utils.addRange<string>(this._userAgentBotPatterns, ...userAgentBotPatterns);\n  }\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @returns {IEventPlugin[]}\n   */\n  public get plugins(): IEventPlugin[] {\n    return this._plugins.sort((p1: IEventPlugin, p2: IEventPlugin) => {\n      return (p1.priority < p2.priority) ? -1 : (p1.priority > p2.priority) ? 1 : 0;\n    });\n  }\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param plugin\n   */\n  public addPlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param name The name used to identify the plugin.\n   * @param priority Used to determine plugins priority.\n   * @param pluginAction A function that is run.\n   */\n  public addPlugin(name: string, priority: number, pluginAction: (context: EventPluginContext, next?: () => void) => void): void;\n  public addPlugin(pluginOrName: IEventPlugin | string, priority?: number, pluginAction?: (context: EventPluginContext, next?: () => void) => void): void {\n    const plugin: IEventPlugin = !!pluginAction ? { name: pluginOrName as string, priority, run: pluginAction } :  pluginOrName as IEventPlugin;\n    if (!plugin || !plugin.run) {\n      this.log.error('Add plugin failed: Run method not defined');\n      return;\n    }\n\n    if (!plugin.name) {\n      plugin.name = Utils.guid();\n    }\n\n    if (!plugin.priority) {\n      plugin.priority = 0;\n    }\n\n    let pluginExists: boolean = false;\n    const plugins = this._plugins; // optimization for minifier.\n    for (const p of plugins) {\n      if (p.name === plugin.name) {\n        pluginExists = true;\n        break;\n      }\n    }\n\n    if (!pluginExists) {\n      plugins.push(plugin);\n    }\n  }\n\n  /**\n   * Remove the plugin from this configuration.\n   * @param plugin\n   */\n  public removePlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Remove an plugin by key from this configuration.\n   * @param name\n   */\n  public removePlugin(pluginOrName: IEventPlugin | string): void {\n    const name: string = typeof pluginOrName === 'string' ? pluginOrName : pluginOrName.name;\n    if (!name) {\n      this.log.error('Remove plugin failed: Plugin name not defined');\n      return;\n    }\n\n    const plugins = this._plugins; // optimization for minifier.\n    for (let index = 0; index < plugins.length; index++) {\n      if (plugins[index].name === name) {\n        plugins.splice(index, 1);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Automatically set the application version for events.\n   * @param version\n   */\n  public setVersion(version: string): void {\n    if (!!version) {\n      this.defaultData['@version'] = version;\n    }\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): void;\n  public setUserIdentity(identity: string): void;\n  public setUserIdentity(identity: string, name: string): void;\n  public setUserIdentity(userInfoOrIdentity: IUserInfo | string, name?: string): void {\n    const USER_KEY: string = '@user'; // optimization for minifier.\n    const userInfo: IUserInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name };\n\n    const shouldRemove: boolean = !userInfo || (!userInfo.identity && !userInfo.name);\n    if (shouldRemove) {\n      delete this.defaultData[USER_KEY];\n    } else {\n      this.defaultData[USER_KEY] = userInfo;\n    }\n\n    this.log.info(`user identity: ${shouldRemove ? 'null' : userInfo.identity}`);\n  }\n\n  /**\n   * Used to identify the client that sent the events to the server.\n   * @returns {string}\n   */\n  public get userAgent(): string {\n    return 'exceptionless-js/1.0.0.0';\n  }\n\n  /**\n   * Automatically send a heartbeat to keep the session alive.\n   */\n  public useSessions(sendHeartbeats: boolean = true, heartbeatInterval: number = 30000): void {\n    if (sendHeartbeats) {\n      this.addPlugin(new HeartbeatPlugin(heartbeatInterval));\n    }\n  }\n\n  /**\n   * Automatically set a reference id for error events.\n   */\n  public useReferenceIds(): void {\n    this.addPlugin(new ReferenceIdPlugin());\n  }\n\n  public useLocalStorage(): void {\n    // This method will be injected via the prototype.\n  }\n\n  // TODO: Support a min log level.\n  public useDebugLogger(): void {\n    this.log = new ConsoleLog();\n  }\n\n  public onChanged(handler: (config: Configuration) => void) {\n    !!handler && this._handlers.push(handler);\n  }\n\n  private changed() {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(this);\n      } catch (ex) {\n        this.log.error(`Error calling onChanged handler: ${ex}`);\n      }\n    }\n  }\n\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @returns {IConfigurationSettings}\n   */\n  public static get defaults() {\n    if (Configuration._defaultSettings === null) {\n      Configuration._defaultSettings = {};\n    }\n\n    return Configuration._defaultSettings;\n  }\n}\n\nexport interface IUserDescription {\n  email_address?: string;\n  description?: string;\n  data?: any;\n}\n\nexport class SettingsResponse {\n  public success: boolean = false;\n  public settings: any;\n  public settingsVersion: number = -1;\n  public message: string;\n  public exception: any;\n\n  constructor(success: boolean, settings: any, settingsVersion: number = -1, exception: any = null, message: string = null) {\n    this.success = success;\n    this.settings = settings;\n    this.settingsVersion = settingsVersion;\n    this.exception = exception;\n    this.message = message;\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                   \n\nexport class EventBuilder {\n  public target: IEvent;\n  public client: ExceptionlessClient;\n  public pluginContextData: ContextData;\n\n  private _validIdentifierErrorMessage: string = 'must contain between 8 and 100 alphanumeric or \\'-\\' characters.'; // optimization for minifier.\n\n  constructor(event: IEvent, client: ExceptionlessClient, pluginContextData?: ContextData) {\n    this.target = event;\n    this.client = client;\n    this.pluginContextData = pluginContextData || new ContextData();\n  }\n\n  public setType(type: string): EventBuilder {\n    if (!!type) {\n      this.target.type = type;\n    }\n\n    return this;\n  }\n\n  public setSource(source: string): EventBuilder {\n    if (!!source) {\n      this.target.source = source;\n    }\n\n    return this;\n  }\n\n  public setReferenceId(referenceId: string): EventBuilder {\n    if (!this.isValidIdentifier(referenceId)) {\n      throw new Error(`ReferenceId ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.target.reference_id = referenceId;\n    return this;\n  }\n\n  /**\n   * Allows you to reference a parent event by its ReferenceId property. This allows you to have parent and child relationships.\n   * @param name Reference name\n   * @param id The reference id that points to a specific event\n   * @returns {EventBuilder}\n   */\n  public setEventReference(name: string, id: string): EventBuilder {\n    if (!name) {\n      throw new Error('Invalid name');\n    }\n\n    if (!id || !this.isValidIdentifier(id)) {\n      throw new Error(`Id ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.setProperty('@ref:' + name, id);\n    return this;\n  }\n\n  public setMessage(message: string): EventBuilder {\n    if (!!message) {\n      this.target.message = message;\n    }\n\n    return this;\n  }\n\n  public setGeo(latitude: number, longitude: number): EventBuilder {\n    if (latitude < -90.0 || latitude > 90.0) {\n      throw new Error('Must be a valid latitude value between -90.0 and 90.0.');\n    }\n\n    if (longitude < -180.0 || longitude > 180.0) {\n      throw new Error('Must be a valid longitude value between -180.0 and 180.0.');\n    }\n\n    this.target.geo = `${latitude},${longitude}`;\n    return this;\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): EventBuilder;\n  public setUserIdentity(identity: string): EventBuilder;\n  public setUserIdentity(identity: string, name: string): EventBuilder;\n  public setUserIdentity(userInfoOrIdentity: IUserInfo | string, name?: string): EventBuilder {\n    const userInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name };\n    if (!userInfo || (!userInfo.identity && !userInfo.name)) {\n      return this;\n    }\n\n    this.setProperty('@user', userInfo);\n    return this;\n  }\n\n  /**\n   * Sets the user's description of the event.\n   *\n   * @param emailAddress The email address\n   * @param description The user's description of the event.\n   * @returns {EventBuilder}\n   */\n  public setUserDescription(emailAddress: string, description: string): EventBuilder {\n    if (emailAddress && description) {\n      this.setProperty('@user_description', { email_address: emailAddress, description });\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting manual\n   * stacking information.\n   * @param signatureData A dictionary of strings to use for stacking.\n   * @param title An optional title for the stacking information.\n   * @returns {EventBuilder}\n   */\n  public setManualStackingInfo(signatureData: any, title?: string) {\n    if (signatureData) {\n      const stack: IManualStackingInfo = { signature_data: signatureData };\n      if (title) {\n        stack.title = title;\n      }\n\n      this.setProperty('@stack', stack);\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting the stacking key.\n   * @param manualStackingKey The manual stacking key.\n   * @param title An optional title for the stacking information.\n   * @returns {EventBuilder}\n   */\n  public setManualStackingKey(manualStackingKey: string, title?: string): EventBuilder {\n    if (manualStackingKey) {\n      const data = { ManualStackingKey: manualStackingKey };\n      this.setManualStackingInfo(data, title);\n    }\n\n    return this;\n  }\n\n  public setValue(value: number): EventBuilder {\n    if (!!value) {\n      this.target.value = value;\n    }\n\n    return this;\n  }\n\n  public addTags(...tags: string[]): EventBuilder {\n    this.target.tags = Utils.addRange<string>(this.target.tags, ...tags);\n    return this;\n  }\n\n  /**\n   * Adds the object to extended data. Uses @excludedPropertyNames\n   * to exclude data from being included in the event.\n   * @param name The data object to add.\n   * @param value The name of the object to add.\n   * @param maxDepth The max depth of the object to include.\n   * @param excludedPropertyNames Any property names that should be excluded.\n   */\n  public setProperty(name: string, value: any, maxDepth?: number, excludedPropertyNames?: string[]): EventBuilder {\n    if (!name || (value === undefined || value == null)) {\n      return this;\n    }\n\n    if (!this.target.data) {\n      this.target.data = {};\n    }\n\n    const result = JSON.parse(Utils.stringify(value, this.client.config.dataExclusions.concat(excludedPropertyNames || []), maxDepth));\n    if (!Utils.isEmpty(result)) {\n      this.target.data[name] = result;\n    }\n\n    return this;\n  }\n\n  public markAsCritical(critical: boolean): EventBuilder {\n    if (critical) {\n      this.addTags('Critical');\n    }\n\n    return this;\n  }\n\n  public addRequestInfo(request: object): EventBuilder {\n    if (!!request) {\n      this.pluginContextData['@request'] = request;\n    }\n\n    return this;\n  }\n\n  public submit(callback?: (context: EventPluginContext) => void): void {\n    this.client.submitEvent(this.target, this.pluginContextData, callback);\n  }\n\n  private isValidIdentifier(value: string): boolean {\n    if (!value) {\n      return true;\n    }\n\n    if (value.length < 8 || value.length > 100) {\n      return false;\n    }\n\n    for (let index = 0; index < value.length; index++) {\n      const code = value.charCodeAt(index);\n      const isDigit = (code >= 48) && (code <= 57);\n      const isLetter = ((code >= 65) && (code <= 90)) || ((code >= 97) && (code <= 122));\n      const isMinus = code === 45;\n\n      if (!(isDigit || isLetter) && !isMinus) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nexport interface IManualStackingInfo {\n  title?: string;\n  signature_data?: any;\n}\n\n                                                                                                                                                \n\nexport class ConfigurationDefaultsPlugin implements IEventPlugin {\n  public priority: number = 10;\n  public name: string = 'ConfigurationDefaultsPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const config = context.client.config;\n    const defaultTags: string[] = config.defaultTags || [];\n    for (const tag of defaultTags) {\n      if (!!tag && context.event.tags.indexOf(tag) < 0) {\n        context.event.tags.push(tag);\n      }\n    }\n\n    // tslint:disable-next-line:ban-types\n    const defaultData: Object = config.defaultData || {};\n    for (const key in defaultData) {\n      if (!!defaultData[key]) {\n        const result = JSON.parse(Utils.stringify(defaultData[key], config.dataExclusions));\n        if (!Utils.isEmpty(result)) {\n          context.event.data[key] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                        \n\nexport class DuplicateCheckerPlugin implements IEventPlugin {\n  public priority: number = 1010;\n  public name: string = 'DuplicateCheckerPlugin';\n\n  private _mergedEvents: MergedEvent[] = [];\n  private _processedHashcodes: TimestampedHash[] = [];\n  private _getCurrentTime: () => number;\n  private _interval: number;\n\n  constructor(getCurrentTime: () => number = () => Date.now(), interval: number = 30000) {\n    this._getCurrentTime = getCurrentTime;\n    this._interval = interval;\n\n    setInterval(() => {\n      while (this._mergedEvents.length > 0) {\n        this._mergedEvents.shift().resubmit();\n      }\n    }, interval);\n  }\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    function getHashCode(error: IInnerError): number {\n      let hashCode = 0;\n      while (error) {\n        if (error.message && error.message.length) {\n          hashCode += (hashCode * 397) ^ Utils.getHashCode(error.message);\n        }\n        if (error.stack_trace && error.stack_trace.length) {\n          hashCode += (hashCode * 397) ^ Utils.getHashCode(JSON.stringify(error.stack_trace));\n        }\n        error = error.inner;\n      }\n\n      return hashCode;\n    }\n\n    const error = context.event.data['@error'];\n    const hashCode = getHashCode(error);\n    if (hashCode) {\n      const count = context.event.count || 1;\n      const now = this._getCurrentTime();\n\n      const merged = this._mergedEvents.filter((s) => s.hashCode === hashCode)[0];\n      if (merged) {\n        merged.incrementCount(count);\n        merged.updateDate(context.event.date);\n        context.log.info('Ignoring duplicate event with hash: ' + hashCode);\n        context.cancelled = true;\n      }\n\n      if (!context.cancelled && this._processedHashcodes.some((h) => h.hash === hashCode && h.timestamp >= (now - this._interval))) {\n        context.log.trace('Adding event with hash: ' + hashCode);\n        this._mergedEvents.push(new MergedEvent(hashCode, context, count));\n        context.cancelled = true;\n      }\n\n      if (!context.cancelled) {\n        context.log.trace('Enqueueing event with hash: ' + hashCode + 'to cache.');\n        this._processedHashcodes.push({ hash: hashCode, timestamp: now });\n\n        // Only keep the last 50 recent errors.\n        while (this._processedHashcodes.length > 50) {\n          this._processedHashcodes.shift();\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\ninterface TimestampedHash {\n  hash: number;\n  timestamp: number;\n}\n\nclass MergedEvent {\n  public hashCode: number;\n  private _count: number;\n  private _context: EventPluginContext;\n\n  constructor(hashCode: number, context: EventPluginContext, count: number) {\n    this.hashCode = hashCode;\n    this._context = context;\n    this._count = count;\n  }\n\n  public incrementCount(count: number) {\n    this._count += count;\n  }\n\n  public resubmit() {\n    this._context.event.count = this._count;\n    this._context.client.config.queue.enqueue(this._context.event);\n  }\n\n  public updateDate(date) {\n    if (date > this._context.event.date) {\n      this._context.event.date = date;\n    }\n  }\n}\n\n                                                                                                                                                                             \n\nexport class EnvironmentInfoPlugin implements IEventPlugin {\n  public priority: number = 80;\n  public name: string = 'EnvironmentInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ENVIRONMENT_KEY: string = '@environment'; // optimization for minifier.\n\n    const collector = context.client.config.environmentInfoCollector;\n    if (!context.event.data[ENVIRONMENT_KEY] && collector) {\n      const environmentInfo: IEnvironmentInfo = collector.getEnvironmentInfo(context);\n      if (!!environmentInfo) {\n        context.event.data[ENVIRONMENT_KEY] = environmentInfo;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                \n\nexport class ErrorPlugin implements IEventPlugin {\n  public priority: number = 30;\n  public name: string = 'ErrorPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\n    const ignoredProperties: string[] = [\n      'arguments',\n      'column',\n      'columnNumber',\n      'description',\n      'fileName',\n      'message',\n      'name',\n      'number',\n      'line',\n      'lineNumber',\n      'opera#sourceloc',\n      'sourceId',\n      'sourceURL',\n      'stack',\n      'stackArray',\n      'stacktrace'\n    ];\n\n    const exception = context.contextData.getException();\n    if (!!exception) {\n      context.event.type = 'error';\n\n      if (!context.event.data[ERROR_KEY]) {\n        const config = context.client.config;\n        const parser = config.errorParser;\n        if (!parser) {\n          throw new Error('No error parser was defined.');\n        }\n\n        const result = parser.parse(context, exception);\n        if (!!result) {\n          const additionalData = JSON.parse(Utils.stringify(exception, config.dataExclusions.concat(ignoredProperties)));\n          if (!Utils.isEmpty(additionalData)) {\n            if (!result.data) {\n              result.data = {};\n            }\n            result.data['@ext'] = additionalData;\n          }\n\n          context.event.data[ERROR_KEY] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                        \n\nexport class EventExclusionPlugin implements IEventPlugin {\n  public priority: number = 45;\n  public name: string = 'EventExclusionPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    function getLogLevel(level: string): number {\n      switch ((level || '').toLowerCase().trim()) {\n        case 'trace':\n        case 'true':\n        case '1':\n        case 'yes':\n          return 0;\n        case 'debug':\n          return 1;\n        case 'info':\n          return 2;\n        case 'warn':\n          return 3;\n        case 'error':\n          return 4;\n        case 'fatal':\n          return 5;\n        case 'off':\n        case 'false':\n        case '0':\n        case 'no':\n          return 6;\n        default:\n          return -1;\n      }\n    }\n\n    function getMinLogLevel(settings: object, loggerName: string = '*'): number {\n      return getLogLevel(getTypeAndSourceSetting(settings, 'log', loggerName, 'Trace') + '');\n    }\n\n    // tslint:disable-next-line:ban-types\n    function getTypeAndSourceSetting(settings: Object = {}, type: string, source: string, defaultValue?: string|boolean): string|boolean {\n      if (!type) {\n        return defaultValue;\n      }\n\n      const isLog = type === 'log';\n      const sourcePrefix =  `@@${type}:`;\n\n      const value = settings[sourcePrefix + source];\n      if (value) {\n        return !isLog ? Utils.toBoolean(value) : value;\n      }\n\n      // check for wildcard match\n      for (const key in settings) {\n        if (Utils.startsWith(key.toLowerCase(), sourcePrefix.toLowerCase()) && Utils.isMatch(source, [key.substring(sourcePrefix.length)])) {\n          return !isLog ? Utils.toBoolean(settings[key]) : settings[key];\n        }\n      }\n\n      return defaultValue;\n    }\n\n    const ev = context.event;\n    const log = context.log;\n    const settings = context.client.config.settings;\n\n    if (ev.type === 'log') {\n      const minLogLevel = getMinLogLevel(settings, ev.source);\n      const logLevel = getLogLevel(ev.data['@level']);\n\n      if (logLevel >= 0 && (logLevel > 5 || logLevel < minLogLevel)) {\n        log.info('Cancelling log event due to minimum log level.');\n        context.cancelled = true;\n      }\n    } else if (ev.type === 'error') {\n      let error: IInnerError = ev.data['@error'];\n      while (!context.cancelled && error) {\n        if (getTypeAndSourceSetting(settings, ev.type, error.type, true) === false) {\n          log.info(`Cancelling error from excluded exception type: ${error.type}`);\n          context.cancelled = true;\n        }\n\n        error = error.inner;\n      }\n    } else if (getTypeAndSourceSetting(settings, ev.type, ev.source, true) === false) {\n      log.info(`Cancelling event from excluded type: ${ev.type} and source: ${ev.source}`);\n      context.cancelled = true;\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                           \n\nexport class ModuleInfoPlugin implements IEventPlugin {\n  public priority: number = 50;\n  public name: string = 'ModuleInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\n\n    const collector = context.client.config.moduleCollector;\n    if (context.event.data[ERROR_KEY] && !context.event.data['@error'].modules && !!collector) {\n      const modules: IModule[] = collector.getModules(context);\n      if (modules && modules.length > 0) {\n        context.event.data[ERROR_KEY].modules = modules;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                          \n\nexport class RequestInfoPlugin implements IEventPlugin {\n  public priority: number = 70;\n  public name: string = 'RequestInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const REQUEST_KEY: string = '@request'; // optimization for minifier.\n\n    const config = context.client.config;\n    const collector = config.requestInfoCollector;\n    if (!context.event.data[REQUEST_KEY] && !!collector) {\n      const requestInfo: IRequestInfo = collector.getRequestInfo(context);\n      if (!!requestInfo) {\n        if (Utils.isMatch(requestInfo.user_agent, config.userAgentBotPatterns)) {\n          context.log.info('Cancelling event as the request user agent matches a known bot pattern');\n          context.cancelled = true;\n        } else {\n          context.event.data[REQUEST_KEY] = requestInfo;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                           \n\nexport class SubmissionMethodPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = 'SubmissionMethodPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const submissionMethod: string = context.contextData.getSubmissionMethod();\n    if (!!submissionMethod) {\n      context.event.data['@submission_method'] = submissionMethod;\n    }\n\n    next && next();\n  }\n}\n\n                                                                                     \n\nexport class InMemoryStorage implements IStorage {\n  private maxItems: number;\n  private items: IStorageItem[] = [];\n  private lastTimestamp: number = 0;\n\n  constructor(maxItems: number) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any): number {\n    if (!value) {\n      return null;\n    }\n\n    const items = this.items;\n    const timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    const item = { timestamp, value };\n\n    if (items.push(item) > this.maxItems) {\n      items.shift();\n    }\n\n    this.lastTimestamp = timestamp;\n    return item.timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    return this.items.slice(0, limit);\n  }\n\n  public remove(timestamp: number): void {\n    const items = this.items;\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].timestamp === timestamp) {\n        items.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  public clear(): void {\n    this.items = [];\n  }\n}\n\nexport interface IClientConfiguration {\n  settings: object;\n  version: number;\n}\n\n                                                                                     \n\nexport abstract class KeyValueStorageBase implements IStorage {\n  private maxItems: number;\n  private items: number[];\n  private lastTimestamp: number = 0;\n\n  constructor(maxItems) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any, single?: boolean): number {\n    if (!value) {\n      return null;\n    }\n\n    this.ensureIndex();\n\n    const items = this.items;\n    const timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    const key = this.getKey(timestamp);\n    const json = JSON.stringify(value);\n\n    try {\n      this.write(key, json);\n      this.lastTimestamp = timestamp;\n      if (items.push(timestamp) > this.maxItems) {\n        this.delete(this.getKey(items.shift()));\n      }\n    } catch (e) {\n      return null;\n    }\n\n    return timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    this.ensureIndex();\n\n    return this.items.slice(0, limit)\n      .map((timestamp) => {\n        // Read and parse item for this timestamp\n        const key = this.getKey(timestamp);\n        try {\n          const json = this.read(key);\n          const value = JSON.parse(json, parseDate);\n          return { timestamp, value };\n        } catch (error) {\n          // Something went wrong - try to delete the cause.\n          this.safeDelete(key);\n          return null;\n        }\n      })\n      .filter((item) => item != null);\n  }\n\n  public remove(timestamp: number): void {\n    this.ensureIndex();\n\n    const items = this.items;\n    const index = items.indexOf(timestamp);\n    if (index >= 0) {\n      const key = this.getKey(timestamp);\n      this.safeDelete(key);\n      items.splice(index, 1);\n    }\n  }\n\n  public clear(): void {\n    this.items.forEach((item) => this.safeDelete(this.getKey(item)));\n    this.items = [];\n  }\n\n  protected abstract write(key: string, value: string): void;\n  protected abstract read(key: string): string;\n  protected abstract readAllKeys(): string[];\n  protected abstract delete(key: string);\n  protected abstract getKey(timestamp: number): string;\n  protected abstract getTimestamp(key: string): number;\n\n  private ensureIndex() {\n    if (!this.items) {\n      this.items = this.createIndex();\n      this.lastTimestamp = Math.max(0, ...this.items) + 1;\n    }\n  }\n\n  private safeDelete(key: string): void {\n    try {\n      this.delete(key);\n    } catch (error) {\n    }\n  }\n\n  private createIndex() {\n    try {\n      const keys = this.readAllKeys();\n      return keys.map((key) => {\n        try {\n          const timestamp = this.getTimestamp(key);\n          if (!timestamp) {\n            this.safeDelete(key);\n            return null;\n          }\n          return timestamp;\n        } catch (error) {\n          this.safeDelete(key);\n          return null;\n        }\n      }).filter((timestamp) => timestamp != null)\n        .sort((a, b) => a - b);\n    } catch (error) {\n      return [];\n    }\n  }\n}\n\nfunction parseDate(key, value) {\n  const dateRegx = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/g;\n  if (typeof value === 'string') {\n    const a = dateRegx.exec(value);\n    if (a) {\n      return new Date(value);\n    }\n  }\n  return value;\n}\n\n                                                            \n\nexport class BrowserStorage extends KeyValueStorageBase {\n  private prefix: string;\n\n  public static isAvailable(): boolean {\n    try {\n      const storage = window.localStorage;\n      const x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  constructor(namespace: string, prefix: string = 'com.exceptionless.', maxItems: number = 20) {\n    super(maxItems);\n\n    this.prefix = prefix + namespace + '-';\n  }\n\n  public write(key: string, value: string) {\n    window.localStorage.setItem(key, value);\n  }\n\n  public read(key: string) {\n    return window.localStorage.getItem(key);\n  }\n\n  public readAllKeys() {\n    return Object.keys(window.localStorage)\n      .filter((key) => key.indexOf(this.prefix) === 0);\n  }\n\n  public delete(key: string) {\n    window.localStorage.removeItem(key);\n  }\n\n  public getKey(timestamp) {\n    return this.prefix + timestamp;\n  }\n\n  public getTimestamp(key) {\n    return parseInt(key.substr(this.prefix.length), 10);\n  }\n}\n\n                                                                                                                                                                                                                                                                                                           \n\nexport class DefaultErrorParser implements IErrorParser {\n  public parse(context: EventPluginContext, exception: Error): IError {\n    function getParameters(parameters: string | string[]): IParameter[] {\n      const params: string[] = (typeof parameters === 'string' ? [parameters] : parameters) || [];\n\n      const result: IParameter[] = [];\n      for (const param of params) {\n        result.push({ name: param });\n      }\n\n      return result;\n    }\n\n    function getStackFrames(stackFrames: TraceKit.StackFrame[]): IStackFrame[] {\n      const ANONYMOUS: string = '<anonymous>';\n      const frames: IStackFrame[] = [];\n\n      for (const frame of stackFrames) {\n        frames.push({\n          name: (frame.func || ANONYMOUS).replace('?', ANONYMOUS),\n          parameters: getParameters(frame.args),\n          file_name: frame.url,\n          line_number: frame.line || 0,\n          column: frame.column || 0\n        });\n      }\n\n      return frames;\n    }\n\n    const TRACEKIT_STACK_TRACE_KEY: string = '@@_TraceKit.StackTrace'; // optimization for minifier.\n\n    const stackTrace: TraceKit.StackTrace = !!context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      ? context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      : TraceKit.computeStackTrace(exception, 25);\n\n    if (!stackTrace) {\n      throw new Error('Unable to parse the exceptions stack trace.');\n    }\n\n    const message = typeof(exception) === 'string' ? exception as any : undefined;\n    return {\n      type: stackTrace.name,\n      message: stackTrace.message || exception.message || message,\n      stack_trace: getStackFrames(stackTrace.stack || [])\n    };\n  }\n}\n\n                                                                                                                                                                                                         \n\nexport class DefaultModuleCollector implements IModuleCollector {\n  public getModules(context: EventPluginContext): IModule[] {\n    if (document && document.getElementsByTagName) {\n      return null;\n    }\n\n    const modules: IModule[] = [];\n    const scripts: NodeListOf<HTMLScriptElement> = document.getElementsByTagName('script');\n    if (scripts && scripts.length > 0) {\n      for (let index = 0; index < scripts.length; index++) {\n        if (scripts[index].src) {\n          modules.push({\n            module_id: index,\n            name: scripts[index].src,\n            version: Utils.parseVersion(scripts[index].src)\n          });\n        } else if (!!scripts[index].innerHTML) {\n          modules.push({\n            module_id: index,\n            name: 'Script Tag',\n            version: Utils.getHashCode(scripts[index].innerHTML).toString()\n          });\n        }\n      }\n    }\n\n    return modules;\n  }\n}\n\n                                                                                                                                                                                                                             \n\nexport class DefaultRequestInfoCollector implements IRequestInfoCollector {\n  public getRequestInfo(context: EventPluginContext): IRequestInfo {\n    if (!document || !navigator || !location) {\n      return null;\n    }\n\n    const exclusions = context.client.config.dataExclusions;\n    const requestInfo: IRequestInfo = {\n      user_agent: navigator.userAgent,\n      is_secure: location.protocol === 'https:',\n      host: location.hostname,\n      port: location.port && location.port !== '' ? parseInt(location.port, 10) : 80,\n      path: location.pathname,\n      // client_ip_address: 'TODO',\n      cookies: Utils.getCookies(document.cookie, exclusions),\n      query_string: Utils.parseQueryString(location.search.substring(1), exclusions)\n    };\n\n    if (document.referrer && document.referrer !== '') {\n      requestInfo.referrer = document.referrer;\n    }\n\n    return requestInfo;\n  }\n}\n\n                                                                                                                                                \n\nexport class BrowserStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(prefix?: string, maxQueueItems: number = 250) {\n    this.queue = new BrowserStorage('q', prefix, maxQueueItems);\n    this.settings = new BrowserStorage('settings', prefix, 1);\n  }\n\n}\n\n                                                                                                                                                                              \n\n// tslint:disable-next-line:prefer-const\ndeclare var XDomainRequest: { new (); create(); };\n\nexport class DefaultSubmissionAdapter implements ISubmissionAdapter {\n  public sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean) {\n    // TODO: Handle sending events when app is exiting with send beacon.\n    const TIMEOUT: string = 'timeout';  // optimization for minifier.\n    const LOADED: string = 'loaded';  // optimization for minifier.\n    const WITH_CREDENTIALS: string = 'withCredentials';  // optimization for minifier.\n\n    let isCompleted: boolean = false;\n    let useSetTimeout: boolean = false;\n    function complete(mode: string, xhr: XMLHttpRequest) {\n      function parseResponseHeaders(headerStr) {\n        function trim(value) {\n          return value.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n        }\n\n        const headers = {};\n        const headerPairs = (headerStr || '').split('\\u000d\\u000a');\n        for (const headerPair of headerPairs) {\n          // Can't use split() here because it does the wrong thing\n          // if the header value has the string \": \" in it.\n          const separator = headerPair.indexOf('\\u003a\\u0020');\n          if (separator > 0) {\n            headers[trim(headerPair.substring(0, separator).toLowerCase())] = headerPair.substring(separator + 2);\n          }\n        }\n\n        return headers;\n      }\n\n      if (isCompleted) {\n        return;\n      }\n\n      isCompleted = true;\n\n      let message: string = xhr.statusText;\n      const responseText: string = xhr.responseText;\n      let status: number = xhr.status;\n\n      if (mode === TIMEOUT || status === 0) {\n        message = 'Unable to connect to server.';\n        status = 0;\n      } else if (mode === LOADED && !status) {\n        status = request.method === 'POST' ? 202 : 200;\n      } else if (status < 200 || status > 299) {\n        const responseBody: any = (xhr as any).responseBody;\n        if (!!responseBody && !!responseBody.message) {\n          message = responseBody.message;\n        } else if (!!responseText && responseText.indexOf('message') !== -1) {\n          try {\n            message = JSON.parse(responseText).message;\n          } catch (e) {\n            message = responseText;\n          }\n        }\n      }\n\n      callback && callback(status || 500, message || '', responseText, parseResponseHeaders(xhr.getAllResponseHeaders && xhr.getAllResponseHeaders()));\n    }\n\n    function createRequest(userAgent: string, method: string, url: string): XMLHttpRequest {\n      let xhr: any = new XMLHttpRequest();\n      if (WITH_CREDENTIALS in xhr) {\n        xhr.open(method, url, true);\n\n        xhr.setRequestHeader('X-Exceptionless-Client', userAgent);\n        if (method === 'POST') {\n          xhr.setRequestHeader('Content-Type', 'application/json');\n        }\n      } else if (typeof XDomainRequest !== 'undefined') {\n        useSetTimeout = true;\n        xhr = new XDomainRequest();\n        xhr.open(method, location.protocol === 'http:' ? url.replace('https:', 'http:') : url);\n      } else {\n        xhr = null;\n      }\n\n      if (xhr) {\n        xhr.timeout = 10000;\n      }\n\n      return xhr;\n    }\n\n    const url = `${request.url}${(request.url.indexOf('?') === -1 ? '?' : '&')}access_token=${encodeURIComponent(request.apiKey)}`;\n    const xhr = createRequest(request.userAgent, request.method || 'POST', url);\n    if (!xhr) {\n      return (callback && callback(503, 'CORS not supported.'));\n    }\n\n    if (WITH_CREDENTIALS in xhr) {\n      xhr.onreadystatechange = () => {\n        // xhr not ready.\n        if (xhr.readyState !== 4) {\n          return;\n        }\n\n        complete(LOADED, xhr);\n      };\n    }\n\n    xhr.onprogress = () => { };\n    xhr.ontimeout = () => complete(TIMEOUT, xhr);\n    xhr.onerror = () => complete('error', xhr);\n    xhr.onload = () => complete(LOADED, xhr);\n\n    if (useSetTimeout) {\n      setTimeout(() => xhr.send(request.data), 500);\n    } else {\n      xhr.send(request.data);\n    }\n  }\n}\n\nn\nexport function isBrowser(): boolean {\n  return typeof document !== 'undefined';\n}\n\nexport function browserInit() {\n  function getDefaultsSettingsFromScriptTag(): IConfigurationSettings {\n    if (!document || !document.getElementsByTagName) {\n      return null;\n    }\n\n    const scripts = document.getElementsByTagName('script');\n    // tslint:disable-next-line:prefer-for-of\n    for (let index = 0; index < scripts.length; index++) {\n      if (scripts[index].src && scripts[index].src.indexOf('/exceptionless') > -1) {\n        return Utils.parseQueryString(scripts[index].src.split('?').pop());\n      }\n    }\n    return null;\n  }\n\n  function processUnhandledException(stackTrace: TraceKit.StackTrace, options?: any): void {\n    const builder = ExceptionlessClient.default.createUnhandledException(new Error(stackTrace.message || (options || {}).status || 'Script error'), 'onerror');\n    builder.pluginContextData['@@_TraceKit.StackTrace'] = stackTrace;\n    builder.submit();\n  }\n\n  /*\n   TODO: We currently are unable to parse string exceptions.\n   function processJQueryAjaxError(event, xhr, settings, error:string): void {\n   let client = ExceptionlessClient.default;\n   if (xhr.status === 404) {\n   client.submitNotFound(settings.url);\n   } else if (xhr.status !== 401) {\n   client.createUnhandledException(error, 'JQuery.ajaxError')\n   .setSource(settings.url)\n   .setProperty('status', xhr.status)\n   .setProperty('request', settings.data)\n   .setProperty('response', xhr.responseText && xhr.responseText.slice && xhr.responseText.slice(0, 1024))\n   .submit();\n   }\n   }\n   */\n\n  Configuration.prototype.useLocalStorage = function() {\n    if (BrowserStorage.isAvailable()) {\n      this.storage = new BrowserStorageProvider();\n      SettingsManager.applySavedServerSettings(this);\n      this.changed();\n    }\n  };\n\n  const defaults = Configuration.defaults;\n  const settings = getDefaultsSettingsFromScriptTag();\n  if (settings && (settings.apiKey || settings.serverUrl)) {\n    defaults.apiKey = settings.apiKey;\n    defaults.serverUrl = settings.serverUrl;\n  }\n\n  defaults.errorParser = new DefaultErrorParser();\n  defaults.moduleCollector = new DefaultModuleCollector();\n  defaults.requestInfoCollector = new DefaultRequestInfoCollector();\n  defaults.submissionAdapter = new DefaultSubmissionAdapter();\n\n  TraceKit.report.subscribe(processUnhandledException);\n  TraceKit.extendToAsynchronousCallbacks();\n\n  // window && window.addEventListener && window.addEventListener('beforeunload', function () {\n  //   ExceptionlessClient.default.config.queue.process(true);\n  // });\n\n  // if (typeof $ !== 'undefined' && $(document)) {\n  //   $(document).ajaxError(processJQueryAjaxError);\n  // }\n\n  (Error as any).stackTraceLimit = Infinity;\n}\n\nif (isBrowser()) {\n  browserInit();\n}\n\n// tslint:disable-next-line:prefer-const\ndeclare var $;\n\n"]}