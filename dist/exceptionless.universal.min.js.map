{"version":3,"sources":["tracekit.js","exceptionless.universal.ts"],"names":["window","undefined","TraceKit","_oldTraceKit","_slice","slice","UNKNOWN_FUNCTION","ERROR_TYPES_RE","noConflict","wrap","func","apply","this","arguments","e","report","_oldOnerrorHandler","_onErrorHandlerInstalled","handlers","lastException","lastExceptionStack","notifyHandlers","stack","isWindowError","error","exception","collectWindowErrors","i","_has","inner","traceKitWindowOnError","message","url","lineNo","columnNo","errorObj","computeStackTrace","augmentStackTraceWithInitialElement","processLastException","name","location","line","column","msg","toString","call","groups","match","guessFunctionName","context","gatherContext","mode","_lastExceptionStack","_lastException","ex","setTimeout","incomplete","subscribe","handler","onerror","push","unsubscribe","length","splice","debug","sourceCache","getSource","source","domain","document","exec","remoteFetching","request","XMLHttpRequest","ActiveXObject","getXHR","open","send","responseText","loadSource","split","m","reFunctionArgNames","reGuessFunction","_isUndefined","linesBefore","Math","floor","linesOfContext","linesAfter","start","max","end","min","escapeRegExp","text","replace","escapeCodeAsRegExpForMatchingInsideHTML","body","findSourceInUrls","re","urls","j","join","substring","index","lastIndexOf","findSourceInLine","fragment","RegExp","findSourceByFunctionBody","parts","result","href","scripts","getElementsByTagName","code","script","src","args","event","computeStackTraceFromStackProp","submatch","element","chrome","gecko","winjs","geckoEval","chromeEval","lines","reference","isNative","indexOf","columnNumber","stackInfo","initial","unshift","partial","computeStackTraceByWalkingCallerChain","depth","item","functionName","funcs","recursion","curr","caller","input","description","sourceURL","fileName","lineNumber","stacktrace","opera10Regex","opera11Regex","exc","computeStackTraceFromStacktraceProp","lineRE1","lineRE2","lineRE3","inlineScriptBlocks","s","relativeLine","pos","innerText","midline","computeStackTraceFromOperaMultiLineMessage","ofCaller","Error","extendToAsynchronousCallbacks","_helper","fnName","originalFn","originalCallback","define","amd","module","exports","object","key","Object","prototype","hasOwnProperty","what","global","extendStatics","__extends","setPrototypeOf","__proto__","Array","d","b","p","__","constructor","create","value","require","process","os","child","path","Path","http","DefaultLastReferenceIdManager","_lastReferenceId","getLast","clearLast","setLast","eventId","ConsoleLog","trace","log","info","warn","level","console","NullLog","HeartbeatPlugin","heartbeatInterval","priority","_interval","run","next","clearInterval","_intervalId","user","data","identity","setInterval","client","submitSessionHeartbeat","ReferenceIdPlugin","reference_id","type","Utils","guid","EventPluginContext","contextData","ContextData","defineProperty","config","callback","plugin","cancelled","plugins","wrappedPlugins","EventPluginManager","addDefaultPlugins","addPlugin","ConfigurationDefaultsPlugin","ErrorPlugin","DuplicateCheckerPlugin","EventExclusionPlugin","ModuleInfoPlugin","RequestInfoPlugin","EnvironmentInfoPlugin","SubmissionMethodPlugin","DefaultEventQueue","_handlers","_processingQueue","_config","enqueue","eventWillNotBeQueued","enabled","isValid","areQueuedItemsDiscarded","ensureQueueTimer","timestamp","storage","queue","save","logText","isAppExiting","_this","queueNotProcessed","events_1","get","submissionBatchSize","serverUrl","submissionClient","postEvents","map","response","processSubmissionResponse","eventsPosted","suspendProcessing","durationInMinutes","discardFutureQueuedItems","clearQueue","_suspendProcessingUntil","Date","getTime","_discardQueuedItemsUntil","clear","onEventsPosted","events","_i","handlers_1","_queueTimer","onProcessQueue","isQueueProcessingSuspended","noSubmission","success","removeEvents","serviceUnavailable","paymentRequired","unableToAuthenticate","notFound","badRequest","requestEntityTooLarge","round","remove","maxQueueItems","InMemoryStorage","settings","InMemoryStorageProvider","DefaultSubmissionClient","configurationVersionHeader","JSON","stringify","createRequest","createSubmissionCallback","submissionAdapter","sendRequest","cb","postUserDescription","referenceId","encodeURIComponent","getSettings","version","configServerUrl","status","headers","SettingsResponse","parse","isNaN","sendHeartbeat","sessionIdOrUserId","closeSession","heartbeatServerUrl","method","apiKey","userAgent","settingsVersion","parseInt","SettingsManager","checkVersion","SubmissionResponse","target","values","_a","values_1","getHashCode","hash","charCodeAt","cookies","exclusions","parts_1","cookie","isMatch","isEmpty","s4","random","merge","defaultValues","parseVersion","matches","query","pairs","pairs_1","decodeURIComponent","patterns","ignoreCase","trim","toLowerCase","some","pattern","startsWithWildcard","endsWithWildcard","endsWith","startsWith","keys","prefix","suffix","maxDepth","stringifyImpl","obj","excludedKeys","cache","flattened","prop","defaultValue","onChanged","applySavedServerSettings","savedSettings","getSavedServerSettings","changed","getVersion","currentVersion","updateSettings","_isUpdatingSettings","unableToUpdateMessage","savedServerSettings","newSettings","handlers_2","statusCode","ExceptionlessClient","settingsOrApiKey","Configuration","updateSettingsTimer","_timeoutId","createException","pluginContextData","setException","createEvent","setType","submitException","submit","createUnhandledException","submissionMethod","builder","markAsUnhandledError","setSubmissionMethod","submitUnhandledException","createFeatureUsage","feature","setSource","submitFeatureUsage","createLog","sourceOrMessage","setMessage","setProperty","submitLog","createNotFound","resource","submitNotFound","createSessionStart","submitSessionStart","submitSessionEnd","EventBuilder","date","submitEvent","eventPluginContext","tags","ctx","ev","lastReferenceIdManager","updateUserEmailAndDescription","email","userDescription","email_address","getLastReferenceId","initialDelay","clearTimeout","interval","updateSettingsWhenIdleInterval","_instance","enumerable","configurable","getException","getSubmissionMethod","configSettings","inject","fn","defaultTags","defaultData","_serverUrl","_configServerUrl","_heartbeatServerUrl","_updateSettingsWhenIdleInterval","_dataExclusions","_userAgentBotPatterns","_plugins","defaults","includePrivateInformation","environmentInfoCollector","errorParser","moduleCollector","requestInfoCollector","set","_apiKey","concat","addDataExclusions","addRange","val","_includePrivateInformation","_includeUserName","_includeMachineName","_includeIpAddress","_includeCookies","_includePostData","_includeQueryString","userAgentBotPatterns","sort","p1","p2","pluginOrName","pluginAction","pluginExists","plugins_1","removePlugin","setVersion","setUserIdentity","userInfoOrIdentity","shouldRemove","userInfo","useSessions","sendHeartbeats","useReferenceIds","useLocalStorage","useDebugLogger","handlers_3","_defaultSettings","_validIdentifierErrorMessage","setReferenceId","isValidIdentifier","setEventReference","id","setGeo","latitude","longitude","geo","setUserDescription","emailAddress","setManualStackingInfo","signatureData","title","signature_data","setManualStackingKey","manualStackingKey","ManualStackingKey","setValue","addTags","excludedPropertyNames","dataExclusions","markAsCritical","critical","addRequestInfo","defaultTags_1","tag","getCurrentTime","now","_mergedEvents","shift","resubmit","stack_trace","hashCode","count","now_1","_getCurrentTime","merged","filter","incrementCount","updateDate","_processedHashcodes","h","MergedEvent","_context","_count","ENVIRONMENT_KEY","collector","environmentInfo","getEnvironmentInfo","parser","additionalData","getTypeAndSourceSetting","isLog","sourcePrefix","toBoolean","loggerName","minLogLevel","getLogLevel","logLevel","modules","getModules","REQUEST_KEY","requestInfo","getRequestInfo","user_agent","maxItems","items","lastTimestamp","limit","KeyValueStorageBase","single","ensureIndex","getKey","json","write","delete","read","parseDate","safeDelete","forEach","createIndex","readAllKeys","getTimestamp","a","_super","BrowserStorage","namespace","isAvailable","localStorage","x","setItem","removeItem","getItem","substr","DefaultErrorParser","getParameters","parameters","params_1","param","TRACEKIT_STACK_TRACE_KEY","stackTrace","stackFrames","ANONYMOUS","frames","stackFrames_1","frame","file_name","line_number","getStackFrames","module_id","innerHTML","DefaultModuleCollector","DefaultRequestInfoCollector","navigator","is_secure","protocol","host","hostname","port","pathname","includeCookies","getCookies","includeQueryString","query_string","parseQueryString","search","referrer","BrowserStorageProvider","complete","xhrRequest","isCompleted","statusText","TIMEOUT","LOADED","responseBody","headerStr","headerPairs_1","headerPair","separator","parseResponseHeaders","getAllResponseHeaders","uri","xmlRequest","xhr","WITH_CREDENTIALS","setRequestHeader","XDomainRequest","useSetTimeout","timeout","onreadystatechange","readyState","onprogress","ontimeout","onload","DefaultSubmissionAdapter","NodeFileStorage","folder","fs","dirname","main","filename","subfolder","directory","resolve","Fs","mkdir","writeFileSync","readFileSync","readdirSync","file","unlinkSync","basename","dirs","sep","root","dir","existsSync","mkdirSync","NodeEnvironmentInfoCollector","ips","interfaces","cpus","totalmem","freemem","command_line","argv","process_name","process_id","pid","process_memory_size","memoryUsage","heapTotal","architecture","arch","o_s_name","o_s_version","release","runtime_version","loadavg","platform","tmpdir","uptime","includeMachineName","machine_name","includeIpAddress","ip_address","networkInterfaces","iface","family","internal","address","endianness","nodestacktrace","frames_1","getMethodName","getFunctionName","getFileName","getLineNumber","getColumnNumber","declaring_type","getTypeName","is_native","NodeErrorParser","NodeModuleCollector","initialized","installedModules","initialize","pathLength","loadedKeys","loadedModules","output","spawnSync","stdout","dependencies","theModule","NodeRequestInfoCollector","secure","http_method","client_ip_address","ip","params","includePostData","post_data","NodeFileStorageProvider","NodeSubmissionAdapter","sendRequestSync","options","auth","parsedHost","Content-Type","Content-Length","Buffer","byteLength","clientRequest","https","setEncoding","on","chunk","responseHeaders","statusMessage","requestJson","out","execPath","stdio","stderr","pop","getDefaultsSettingsFromScriptTag","default","stackTraceLimit","Infinity","addListener","exitCode"],"mappings":"CAKA,SAAAA,EAAAC,GACA,GAAAD,EAAA,CAIA,IAAAE,EAAA,GACAC,EAAAH,EAAAE,SAGAE,EAAA,GAAAC,MACAC,EAAA,IAGAC,EAAA,0GA+BAL,EAAAM,WAAA,WAEA,OADAR,EAAAE,SAAAC,EACAD,GAWAA,EAAAO,KAAA,SAAAC,GASA,OARA,WACA,IACA,OAAAA,EAAAC,MAAAC,KAAAC,WACA,MAAAC,GAEA,MADAZ,EAAAa,OAAAD,GACAA,KAkDAZ,EAAAa,OAAA,WACA,IA4DAC,EAAAC,EA5DAC,EAAA,GACAC,EAAA,KACAC,EAAA,KAsCA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAA,KACA,IAAAF,GAAArB,EAAAwB,oBAAA,CAGA,IAAA,IAAAC,KAAAT,EACA,GAAAU,EAAAV,EAAAS,GACA,IACAT,EAAAS,GAAAL,EAAAC,EAAAC,GACA,MAAAK,GACAJ,EAAAI,EAKA,GAAAJ,EACA,MAAAA,GAgBA,SAAAK,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAGA,GAAAf,EACAlB,EAAAkC,kBAAAC,oCAAAjB,EAAAY,EAAAC,EAAAF,GACAO,SACA,GAAAH,EAEAd,EADAnB,EAAAkC,kBAAAD,IACA,EAAAA,OACA,CACA,IAMAI,EANAC,EAAA,CACAR,IAAAA,EACAS,KAAAR,EACAS,OAAAR,GAIAS,EAAAZ,EACA,GAAA,oBAAA,GAAAa,SAAAC,KAAAd,GAAA,CACA,IAAAe,EAAAf,EAAAgB,MAAAxC,GACAuC,IACAP,EAAAO,EAAA,GACAH,EAAAG,EAAA,IAIAN,EAAA9B,KAAAR,EAAAkC,kBAAAY,kBAAAR,EAAAR,IAAAQ,EAAAC,MACAD,EAAAS,QAAA/C,EAAAkC,kBAAAc,cAAAV,EAAAR,IAAAQ,EAAAC,MAQApB,EAPA,CACAkB,KAAAA,EACAR,QAAAY,EACAQ,KAAA,UACA7B,MAAA,CAAAkB,KAGA,EAAA,MAGA,QAAAxB,GACAA,EAAAL,MAAAC,KAAAC,WAwBA,SAAAyB,IACA,IAAAc,EAAAhC,EACAiC,EAAAlC,EAEAA,EADAC,EAAA,KAEAC,EAAA+B,GAAA,EAAAC,GASA,SAAAtC,EAAAuC,GACA,GAAAlC,EAAA,CACA,GAAAD,IAAAmC,EACA,OAEAhB,IAIA,IAAAhB,EAAApB,EAAAkC,kBAAAkB,GAcA,MAbAlC,EAAAE,EACAH,EAAAmC,EAMAC,WAAA,WACApC,IAAAmC,GACAhB,KAEAhB,EAAAkC,WAAA,IAAA,GAEAF,EAKA,OAFAvC,EAAA0C,UAtKA,SAAAC,IAiHA,IAAAzC,IAIAD,EAAAhB,EAAA2D,QACA3D,EAAA2D,QAAA7B,EACAb,GAAA,GArHAC,EAAA0C,KAAAF,IAqKA3C,EAAA8C,YA7JA,SAAAH,GACA,IAAA,IAAA/B,EAAAT,EAAA4C,OAAA,EAAA,GAAAnC,IAAAA,EACAT,EAAAS,KAAA+B,GACAxC,EAAA6C,OAAApC,EAAA,GAIA,IAAAT,EAAA4C,SACA9D,EAAA2D,QAAA3C,EACAC,GAAA,IAqJAF,EAlLA,GA0QAb,EAAAkC,kBAAA,WACA,IAAA4B,GAAA,EACAC,EAAA,GAsCA,SAAAC,EAAAlC,GACA,GAAA,iBAAAA,EACA,MAAA,GAGA,IAAAJ,EAAAqC,EAAAjC,GAAA,CAWA,IAAAmC,EAAA,GACAC,EAAA,GACA,IAAAA,EAAApE,EAAAqE,SAAAD,OAAA,MAAAtD,IACA,IAAAiC,EAAA,8CAAAuB,KAAAtC,GACAe,GAAAA,EAAA,KAAAqB,IACAD,EAlDA,SAAAnC,GACA,IAAA9B,EAAAqE,eACA,MAAA,GAEA,IACA,IASAC,EATA,WACA,IACA,OAAA,IAAAxE,EAAAyE,eACA,MAAA3D,GAEA,OAAA,IAAAd,EAAA0E,cAAA,sBAIAC,GAGA,OAFAH,EAAAI,KAAA,MAAA5C,GAAA,GACAwC,EAAAK,KAAA,IACAL,EAAAM,aACA,MAAAhE,GACA,MAAA,IA+BAiE,CAAA/C,IAEAiC,EAAAjC,GAAAmC,EAAAA,EAAAa,MAAA,MAAA,GAGA,OAAAf,EAAAjC,GAYA,SAAAgB,EAAAhB,EAAAC,GACA,IAKAgD,EALAC,EAAA,8BACAC,EAAA,mEACA1C,EAAA,GAEA0B,EAAAD,EAAAlC,GAGA,IAAAmC,EAAAL,OACA,OAAAxD,EAKA,IAAA,IAAAqB,EAAA,EAAAA,EAVA,KAUAA,EAGA,IAAAyD,EAFA3C,EAAA0B,EAAAlC,EAAAN,GAAAc,GAEA,CACA,GAAAwC,EAAAE,EAAAb,KAAA7B,GACA,OAAAwC,EAAA,GACA,GAAAA,EAAAC,EAAAZ,KAAA7B,GACA,OAAAwC,EAAA,GAKA,OAAA3E,EAUA,SAAA4C,EAAAlB,EAAAS,GACA,IAAA0B,EAAAD,EAAAlC,GAEA,IAAAmC,EAAAL,OACA,OAAA,KAGA,IAAAb,EAAA,GAIAoC,EAAAC,KAAAC,MAAArF,EAAAsF,eAAA,GAEAC,EAAAJ,EAAAnF,EAAAsF,eAAA,EACAE,EAAAJ,KAAAK,IAAA,EAAAlD,EAAA4C,EAAA,GACAO,EAAAN,KAAAO,IAAA1B,EAAAL,OAAArB,EAAAgD,EAAA,GAEAhD,GAAA,EAEA,IAAA,IAAAd,EAAA+D,EAAA/D,EAAAiE,IAAAjE,EACAyD,EAAAjB,EAAAxC,KACAsB,EAAAW,KAAAO,EAAAxC,IAIA,OAAA,EAAAsB,EAAAa,OAAAb,EAAA,KAUA,SAAA6C,EAAAC,GACA,OAAAA,EAAAC,QAAA,4BAAA,QAWA,SAAAC,EAAAC,GACA,OAAAJ,EAAAI,GAAAF,QAAA,IAAA,cAAAA,QAAA,IAAA,cAAAA,QAAA,IAAA,eAAAA,QAAA,IAAA,gBAAAA,QAAA,OAAA,QAWA,SAAAG,EAAAC,EAAAC,GAEA,IADA,IAAAlC,EAAAc,EACAtD,EAAA,EAAA2E,EAAAD,EAAAvC,OAAAnC,EAAA2E,IAAA3E,EACA,IAAAwC,EAAAD,EAAAmC,EAAA1E,KAAAmC,SACAK,EAAAA,EAAAoC,KAAA,MACAtB,EAAAmB,EAAA9B,KAAAH,IAEA,MAAA,CACAnC,IAAAqE,EAAA1E,GACAc,KAAA0B,EAAAqC,UAAA,EAAAvB,EAAAwB,OAAAzB,MAAA,MAAAlB,OACApB,OAAAuC,EAAAwB,MAAAtC,EAAAuC,YAAA,KAAAzB,EAAAwB,OAAA,GAMA,OAAA,KAYA,SAAAE,EAAAC,EAAA5E,EAAAS,GACA,IAEAwC,EAFAd,EAAAD,EAAAlC,GACAoE,EAAA,IAAAS,OAAA,MAAAf,EAAAc,GAAA,OAKA,OAFAnE,GAAA,EAEA0B,GAAAA,EAAAL,OAAArB,IAAAwC,EAAAmB,EAAA9B,KAAAH,EAAA1B,KACAwC,EAAAwB,MAGA,KAWA,SAAAK,EAAApG,GACA,IAAA0E,EAAApF,GAAAA,EAAAqE,UAAA,CAcA,IAVA,IAEA6B,EAIAE,EACAW,EACAC,EARAX,EAAA,CAAArG,EAAAwC,SAAAyE,MACAC,EAAAlH,EAAAqE,SAAA8C,qBAAA,UAEAC,EAAA,GAAA1G,EAOAiB,EAAA,EAAAA,EAAAuF,EAAApD,SAAAnC,EAAA,CACA,IAAA0F,EAAAH,EAAAvF,GACA0F,EAAAC,KACAjB,EAAAzC,KAAAyD,EAAAC,KAIA,GAAAP,EAbA,2EAaAzC,KAAA8C,GAMA,CACA,IAAA7E,EAAAwE,EAAA,GAAA,OAAAA,EAAA,GAAA,GACAQ,EAAAR,EAAA,GAAA/B,MAAA,KAAAuB,KAAA,aAEAL,EAAAJ,EAAAiB,EAAA,IAAAf,QAAA,KAAA,MACAI,EAAA,IAAAS,OAAA,WAAAtE,EAAA,cAAAgF,EAAA,mBAAArB,EAAA,cAVAE,EAAA,IAAAS,OAAAf,EAAAsB,GAAApB,QAAA,OAAA,SAcA,GAAAgB,EAAAb,EAAAC,EAAAC,GACA,OAAAW,EAIA,GAAAD,EAhCA,iEAgCAzC,KAAA8C,GAAA,CACA,IAAAI,EAAAT,EAAA,GAMA,GALAb,EAAAD,EAAAc,EAAA,IAKAC,EAAAb,EAFAC,EAAA,IAAAS,OAAA,KAAAW,EAAA,eAAAtB,EAAA,cAAA,KAEAG,EAAA,IACA,OAAAW,EAMA,GAAAA,EAAAb,EAFAC,EAAA,IAAAS,OAAAX,GAEAG,GACA,OAAAW,EAIA,OAAA,MA+CA,SAAAS,EAAAnE,GACA,IAAAA,EAAAhC,MACA,OAAA,KAmBA,IAhBA,IAWAoG,EACAX,EACAY,EAbAC,EAAA,8HACAC,EAAA,kIACAC,EAAA,gHAIAC,EAAA,gDACAC,EAAA,gCAEAC,EAAA3E,EAAAhC,MAAA0D,MAAA,MACA1D,EAAA,GAIA4G,EAAA,sBAAA5D,KAAAhB,EAAAvB,SAEAJ,EAAA,EAAA2E,EAAA2B,EAAAnE,OAAAnC,EAAA2E,IAAA3E,EAAA,CACA,GAAAoF,EAAAa,EAAAtD,KAAA2D,EAAAtG,IAAA,CACA,IAAAwG,EAAApB,EAAA,IAAA,IAAAA,EAAA,GAAAqB,QAAA,UACArB,EAAA,IAAA,IAAAA,EAAA,GAAAqB,QAAA,UACAV,EAAAM,EAAA1D,KAAAyC,EAAA,OAEAA,EAAA,GAAAW,EAAA,GACAX,EAAA,GAAAW,EAAA,GACAX,EAAA,GAAAW,EAAA,IAEAC,EAAA,CACA3F,IAAAmG,EAAA,KAAApB,EAAA,GACArG,KAAAqG,EAAA,IAAAzG,EACAiH,KAAAY,EAAA,CAAApB,EAAA,IAAA,GACAtE,KAAAsE,EAAA,IAAAA,EAAA,GAAA,KACArE,OAAAqE,EAAA,IAAAA,EAAA,GAAA,WAEA,GAAAA,EAAAe,EAAAxD,KAAA2D,EAAAtG,IACAgG,EAAA,CACA3F,IAAA+E,EAAA,GACArG,KAAAqG,EAAA,IAAAzG,EACAiH,KAAA,GACA9E,MAAAsE,EAAA,GACArE,OAAAqE,EAAA,IAAAA,EAAA,GAAA,UAEA,CAAA,KAAAA,EAAAc,EAAAvD,KAAA2D,EAAAtG,KAsBA,SArBAoF,EAAA,KAAA,EAAAA,EAAA,GAAAqB,QAAA,aACAV,EAAAK,EAAAzD,KAAAyC,EAAA,MAEAA,EAAA,GAAAW,EAAA,GACAX,EAAA,GAAAW,EAAA,GACAX,EAAA,GAAA,MACA,IAAApF,GAAAoF,EAAA,IAAA3B,EAAA9B,EAAA+E,gBAKA/G,EAAA,GAAAoB,OAAAY,EAAA+E,aAAA,GAEAV,EAAA,CACA3F,IAAA+E,EAAA,GACArG,KAAAqG,EAAA,IAAAzG,EACAiH,KAAAR,EAAA,GAAAA,EAAA,GAAA/B,MAAA,KAAA,GACAvC,KAAAsE,EAAA,IAAAA,EAAA,GAAA,KACArE,OAAAqE,EAAA,IAAAA,EAAA,GAAA,OAMAY,EAAAjH,MAAAiH,EAAAlF,OACAkF,EAAAjH,KAAAsC,EAAA2E,EAAA3F,IAAA2F,EAAAlF,OAGAkF,EAAA1E,QAAA0E,EAAAlF,KAAAS,EAAAyE,EAAA3F,IAAA2F,EAAAlF,MAAA,KACAnB,EAAAsC,KAAA+D,GAGA,OAAArG,EAAAwC,QAIAxC,EAAA,IAAAA,EAAA,GAAAmB,OAAAnB,EAAA,GAAAoB,QAAAwF,IACA5G,EAAA,GAAAoB,OAAAiE,EAAAuB,EAAA,GAAA5G,EAAA,GAAAU,IAAAV,EAAA,GAAAmB,OAGA,CACAU,KAAA,QACAZ,KAAAe,EAAAf,KACAR,QAAAuB,EAAAvB,QACAT,MAAAA,IAXA,KAwNA,SAAAe,EAAAiG,EAAAtG,EAAAC,EAAAF,GACA,IAAAwG,EAAA,CACAvG,IAAAA,EACAS,KAAAR,GAGA,GAAAsG,EAAAvG,KAAAuG,EAAA9F,KAAA,CACA6F,EAAA9E,YAAA,EAEA+E,EAAA7H,OACA6H,EAAA7H,KAAAsC,EAAAuF,EAAAvG,IAAAuG,EAAA9F,OAGA8F,EAAAtF,UACAsF,EAAAtF,QAAAC,EAAAqF,EAAAvG,IAAAuG,EAAA9F,OAGA,IAAAyF,EAAA,cAAA5D,KAAAvC,GAKA,GAJAmG,IACAK,EAAA7F,OAAAiE,EAAAuB,EAAA,GAAAK,EAAAvG,IAAAuG,EAAA9F,OAGA,EAAA6F,EAAAhH,MAAAwC,QACAwE,EAAAhH,MAAA,GAAAU,MAAAuG,EAAAvG,IAAA,CACA,GAAAsG,EAAAhH,MAAA,GAAAmB,OAAA8F,EAAA9F,KACA,OAAA,EACA,IAAA6F,EAAAhH,MAAA,GAAAmB,MAAA6F,EAAAhH,MAAA,GAAAZ,OAAA6H,EAAA7H,KAGA,OAFA4H,EAAAhH,MAAA,GAAAmB,KAAA8F,EAAA9F,KACA6F,EAAAhH,MAAA,GAAA2B,QAAAsF,EAAAtF,SACA,EAOA,OAFAqF,EAAAhH,MAAAkH,QAAAD,GACAD,EAAAG,SAAA,EAMA,QAHAH,EAAA9E,YAAA,GAgBA,SAAAkF,EAAApF,EAAAqF,GASA,IARA,IAIA5B,EACA6B,EACAzE,EANA0E,EAAA,qEACAvH,EAAA,GACAwH,EAAA,GACAC,GAAA,EAKAC,EAAAN,EAAAO,OAAAD,IAAAD,EAAAC,EAAAA,EAAAC,OACA,GAAAD,IAAA5G,GAAA4G,IAAA9I,EAAAa,OAAA,CAkBA,GAdA6H,EAAA,CACA5G,IAAA,KACAtB,KAAAJ,EACAiH,KAAA,GACA9E,KAAA,KACAC,OAAA,MAGAsG,EAAAzG,KACAqG,EAAAlI,KAAAsI,EAAAzG,MACAwE,EAAA8B,EAAAvE,KAAA0E,EAAApG,eACAgG,EAAAlI,KAAAqG,EAAA,SAGA,IAAA6B,EAAAlI,KACA,IACAkI,EAAAlI,KAAAqG,EAAAmC,MAAA1C,UAAA,EAAAO,EAAAmC,MAAAd,QAAA,MACA,MAAAtH,IAGA,GAAAqD,EAAA2C,EAAAkC,GAAA,CACAJ,EAAA5G,IAAAmC,EAAAnC,IACA4G,EAAAnG,KAAA0B,EAAA1B,KAEAmG,EAAAlI,OAAAJ,IACAsI,EAAAlI,KAAAsC,EAAA4F,EAAA5G,IAAA4G,EAAAnG,OAGA,IAAAyF,EAAA,cAAA5D,KAAAhB,EAAAvB,SAAAuB,EAAA6F,aACAjB,IACAU,EAAAlG,OAAAiE,EAAAuB,EAAA,GAAA/D,EAAAnC,IAAAmC,EAAA1B,OAIAqG,EAAA,GAAAE,GACAD,GAAA,EAEAD,EAAA,GAAAE,IAAA,EAGA1H,EAAAsC,KAAAgF,GAGAD,GACArH,EAAAyC,OAAA,EAAA4E,GAGA,IAAA3B,EAAA,CACA7D,KAAA,UACAZ,KAAAe,EAAAf,KACAR,QAAAuB,EAAAvB,QACAT,MAAAA,GAGA,OADAe,EAAA2E,EAAA1D,EAAA8F,WAAA9F,EAAA+F,SAAA/F,EAAAb,MAAAa,EAAAgG,WAAAhG,EAAAvB,SAAAuB,EAAA6F,aACAnC,EASA,SAAA5E,EAAAkB,EAAAqF,GACA,IAAArH,EAAA,KACAqH,EAAA,MAAAA,EAAA,GAAAA,EAEA,IAKA,GADArH,EA7UA,SAAAgC,GAIA,IAAAiG,EAAAjG,EAAAiG,WACA,GAAAA,EAAA,CAUA,IANA,IAIAxC,EAJAyC,EAAA,8DACAC,EAAA,uGACAxB,EAAAsB,EAAAvE,MAAA,MACA1D,EAAA,GAGAmB,EAAA,EAAAA,EAAAwF,EAAAnE,OAAArB,GAAA,EAAA,CACA,IAAAkF,EAAA,KAmBA,IAlBAZ,EAAAyC,EAAAlF,KAAA2D,EAAAxF,KACAkF,EAAA,CACA3F,IAAA+E,EAAA,GACAtE,MAAAsE,EAAA,GACArE,OAAA,KACAhC,KAAAqG,EAAA,GACAQ,KAAA,KAEAR,EAAA0C,EAAAnF,KAAA2D,EAAAxF,OACAkF,EAAA,CACA3F,IAAA+E,EAAA,GACAtE,MAAAsE,EAAA,GACArE,QAAAqE,EAAA,GACArG,KAAAqG,EAAA,IAAAA,EAAA,GACAQ,KAAAR,EAAA,GAAAA,EAAA,GAAA/B,MAAA,KAAA,KAIA2C,EAAA,CAIA,IAHAA,EAAAjH,MAAAiH,EAAAlF,OACAkF,EAAAjH,KAAAsC,EAAA2E,EAAA3F,IAAA2F,EAAAlF,OAEAkF,EAAAlF,KACA,IACAkF,EAAA1E,QAAAC,EAAAyE,EAAA3F,IAAA2F,EAAAlF,MACA,MAAAiH,IAGA/B,EAAA1E,UACA0E,EAAA1E,QAAA,CAAAgF,EAAAxF,EAAA,KAGAnB,EAAAsC,KAAA+D,IAIA,OAAArG,EAAAwC,OAIA,CACAX,KAAA,aACAZ,KAAAe,EAAAf,KACAR,QAAAuB,EAAAvB,QACAT,MAAAA,GAPA,MAuRAqI,CAAArG,GAEA,OAAAhC,EAEA,MAAAR,GACA,GAAAkD,EACA,MAAAlD,EAIA,IAEA,GADAQ,EAAAmG,EAAAnE,GAEA,OAAAhC,EAEA,MAAAR,GACA,GAAAkD,EACA,MAAAlD,EAIA,IAEA,GADAQ,EAxRA,SAAAgC,GAgBA,IAAA2E,EAAA3E,EAAAvB,QAAAiD,MAAA,MACA,GAAAiD,EAAAnE,OAAA,EACA,OAAA,KAGA,IAMAiD,EANA6C,EAAA,yFACAC,EAAA,kGACAC,EAAA,yCACAxI,EAAA,GACA4F,EAAAlH,GAAAA,EAAAqE,UAAArE,EAAAqE,SAAA8C,qBAAA,UACA4C,EAAA,GAGA,IAAA,IAAAC,KAAA9C,EACAtF,EAAAsF,EAAA8C,KAAA9C,EAAA8C,GAAA1C,KACAyC,EAAAnG,KAAAsD,EAAA8C,IAIA,IAAA,IAAAvH,EAAA,EAAAA,EAAAwF,EAAAnE,OAAArB,GAAA,EAAA,CACA,IAAAmG,EAAA,KACA,GAAA7B,EAAA6C,EAAAtF,KAAA2D,EAAAxF,IACAmG,EAAA,CACA5G,IAAA+E,EAAA,GACArG,KAAAqG,EAAA,GACAQ,KAAA,GACA9E,MAAAsE,EAAA,GACArE,OAAA,WAEA,GAAAqE,EAAA8C,EAAAvF,KAAA2D,EAAAxF,IAAA,CACAmG,EAAA,CACA5G,IAAA+E,EAAA,GACArG,KAAAqG,EAAA,GACAQ,KAAA,GACA9E,MAAAsE,EAAA,GACArE,OAAA,MAEA,IAAAuH,GAAAlD,EAAA,GACAM,EAAA0C,EAAAhD,EAAA,GAAA,GACA,GAAAM,EAAA,CACA,IAAAlD,EAAAD,EAAA0E,EAAA5G,KACA,GAAAmC,EAAA,CAEA,IAAA+F,GADA/F,EAAAA,EAAAoC,KAAA,OACA6B,QAAAf,EAAA8C,WACA,GAAAD,IACAtB,EAAAnG,KAAAwH,EAAA9F,EAAAqC,UAAA,EAAA0D,GAAAlF,MAAA,MAAAlB,eAIA,GAAAiD,EAAA+C,EAAAxF,KAAA2D,EAAAxF,IAAA,CACA,IAAAT,EAAAhC,EAAAwC,SAAAyE,KAAAjB,QAAA,OAAA,IAEAsB,EAAAnB,EADA,IAAAU,OAAAZ,EAAAgC,EAAAxF,EAAA,KACA,CAAAT,IACA4G,EAAA,CACA5G,IAAAA,EACAtB,KAAA,GACA6G,KAAA,GACA9E,KAAA6E,EAAAA,EAAA7E,KAAAsE,EAAA,GACArE,OAAA,MAIA,GAAAkG,EAAA,CACAA,EAAAlI,OACAkI,EAAAlI,KAAAsC,EAAA4F,EAAA5G,IAAA4G,EAAAnG,OAEA,IAAAQ,EAAAC,EAAA0F,EAAA5G,IAAA4G,EAAAnG,MACA2H,EAAAnH,EAAAA,EAAAqC,KAAAC,MAAAtC,EAAAa,OAAA,IAAA,KACAb,GAAAmH,EAAApE,QAAA,OAAA,MAAAiC,EAAAxF,EAAA,GAAAuD,QAAA,OAAA,IACA4C,EAAA3F,QAAAA,EAGA2F,EAAA3F,QAAA,CAAAgF,EAAAxF,EAAA,IAEAnB,EAAAsC,KAAAgF,IAGA,OAAAtH,EAAAwC,OAIA,CACAX,KAAA,YACAZ,KAAAe,EAAAf,KACAR,QAAAkG,EAAA,GACA3G,MAAAA,GAPA,KA0LA+I,CAAA/G,GAEA,OAAAhC,EAEA,MAAAR,GACA,GAAAkD,EACA,MAAAlD,EAIA,IAEA,GADAQ,EAAAoH,EAAApF,EAAAqF,EAAA,GAEA,OAAArH,EAEA,MAAAR,GACA,GAAAkD,EACA,MAAAlD,EAIA,MAAA,CACAyB,KAAAe,EAAAf,KACAR,QAAAuB,EAAAvB,QACAoB,KAAA,UA0BA,OAPAf,EAAAC,oCAAAA,EACAD,EAAAqF,+BAAAA,EACArF,EAAAY,kBAAAA,EACAZ,EAAAc,cAAAA,EACAd,EAAAkI,SAbA,SAAA3B,GACAA,EAAA,GAAA,MAAAA,EAAA,GAAAA,GACA,IACA,MAAA,IAAA4B,MACA,MAAAjH,GACA,OAAAlB,EAAAkB,EAAAqF,EAAA,KASAvG,EAAA8B,UAAAA,EAEA9B,EAt0BA,GA80BAlC,EAAAsK,8BAAA,WACA,IAAAC,EAAA,SAAAC,GACA,IAAAC,EAAA3K,EAAA0K,GACA1K,EAAA0K,GAAA,WAEA,IAAAnD,EAAAnH,EAAAyC,KAAAhC,WACA+J,EAAArD,EAAA,GAOA,MANA,mBAAA,IACAA,EAAA,GAAArH,EAAAO,KAAAmK,IAKAD,EAAAhK,MACAgK,EAAAhK,MAAAC,KAAA2G,GAEAoD,EAAApD,EAAA,GAAAA,EAAA,MAKAkD,EAAA,cACAA,EAAA,gBAIAvK,EAAAqE,iBACArE,EAAAqE,gBAAA,GAEArE,EAAAwB,sBACAxB,EAAAwB,qBAAA,KAEAxB,EAAAsF,gBAAAtF,EAAAsF,eAAA,KAEAtF,EAAAsF,eAAA,IAIA,mBAAAqF,QAAAA,OAAAC,IACAD,OAAA,WAAA,GAAA3K,GACA,oBAAA6K,QAAAA,OAAAC,SAAAhL,EAAA+K,SAAAA,OACAA,OAAAC,QAAA9K,EAEAF,EAAAE,SAAAA,EA7tCA,SAAA0B,EAAAqJ,EAAAC,GACA,OAAAC,OAAAC,UAAAC,eAAAxI,KAAAoI,EAAAC,GAUA,SAAA9F,EAAAkG,GACA,YAAA,IAAAA,GAnCA,CAuvCA,oBAAAtL,OAAAA,OAAAuL,kMC1vCA,IACAC,EADAC,EAAA7K,MAAAA,KAAA6K,YACAD,EAAAL,OAAAO,gBACA,CAAAC,UAAA,cAA8BC,OAAA,SAAAC,EAAAC,GAAAD,EAAAF,UAAAG,IAC9B,SAAAD,EAAAC,GAAyB,IAAA,IAAAC,KAAAD,EAAAA,EAAAT,eAAAU,KAAAF,EAAAE,GAAAD,EAAAC,KACzB,SAAAF,EAAAC,GAEA,SAAAE,IAAApL,KAAgCqL,YAAAJ,EADhCL,EAAAK,EAAAC,GAEAD,EAAAT,UAA4B,OAA5BU,EAA4BX,OAAAe,OAAAJ,IAAAE,EAAAZ,UAAAU,EAAAV,UAAA,IAAAY,8BAsBlBhB,EAAgB,aAAgB,CAAAmB,OAAA,IAwB1CC,GAAC,oBAAAC,YAlBQC,EAAAF,EAAA,QACOA,EAAA,eACdG,EAACH,EAAA,iBAKMI,EAAAJ,EAAA,UACLA,EAAK,MACPK,EAACL,EAAA,QAMMM,EAAAN,EAAA,UACDA,EAAC,SACPpK,EAACoK,EAAA,OACH,IA9BAO,EA8BC,WA9BY,SAAAA,IAkCb/L,KAAAgM,iBAAA,KAWE,OAiBFD,EAACvB,UAAAyB,QAAA,WA3BQ,OAAAjM,KAAAgM,kBAEPD,EAACvB,UAAA0B,UAAA,WAEMlM,KAAAgM,iBAAP,MAEAD,EAACvB,UAAA2B,QAAA,SAAAC,GAEMpM,KAAAgM,iBAAPI,GAECL,EAfF,KAkBGA,8BAA2BA,MAC7BM,EAAC,WAEO,SAAAA,KAqCR,SAnCI7B,UAAY8B,MAAS,SAAAnL,QAErBoL,IAAI,QAAQpL,MAEXqJ,UAAAgC,KAAA,SAAArL,QAACoL,IAAK,OAAIpL,MAEVqJ,UAAAiC,KAAA,SAAAtL,GACHnB,KAACuM,IAAA,OAAApL,IAELkL,EAAA7B,UAAC5J,MAAA,SAAAO,GAAAnB,KAAAuM,IAAA,QAAApL,IAIDkL,EAAA7B,UAAA+B,IAAA,SAAAG,EAAAvL,GAAA,GAAAwL,QAAA,CAKC,IAAA5K,EAAA,IAAA2K,EAAA,oBAAAvL,EAJQwL,QAAAD,GACAC,QAAAD,GAAP3K,GAEO4K,QAAKJ,KACdI,QAAC,IAAA5K,KAiBCsK,EAvCC,KAiCMA,WAAQA,QACR,oBAMAO,YAGAA,EAAApC,UAAA8B,MAAA,SAAPnL,OACEqJ,UAAcgC,KAAK,SAAYrL,OAEzBqJ,UAAkBiC,KAAQ,SAAWtL,OACvCqJ,UAAQ5J,MAAK,SAAWO,OAbvB,KAiBLyL,QAAQA,MACVC,EAAC,WACH,SAAAA,EAACC,QAAA,IAAAA,IAAAA,EAAA,KArBY9M,KAAA+M,SAAA,IAyBb/M,KAAA2B,KAAA,kBAAA3B,KAAAgN,UAAA,KAAAF,EAAAA,EAAA,IAWA,SATwBtC,UAAAyC,IAAA,SAAoB5K,EAAA6K,GAS3CC,cAAAnN,KAAAoN,aAPQ,IAAAC,EAAAhL,EAAAuE,MAAA0G,KAAP,SACMD,GAAEA,EAAQE,WACZvN,KAAAoN,YAAcI,YAAe,WAAa,OAAQnL,EAASoL,OAAAC,uBAAiBL,EAAAE,WAAAvN,KAAAgN,YAG9EE,GAAQA,KAEZL,EAhBG,GAKUzC,EAAAyC,gBAAAA,EAeb,IAAAc,EAAA,WAME,SAAAA,IACE3N,KAAK+M,SAAS,GACd/M,KAAK2B,KAAK,2BAEZgM,EAACnD,UAAAyC,IAAA,SAAA5K,EAAA6K,GAED7K,EAAAuE,MAAWgH,cAAG,IAAHvL,EAAAuE,MAAAgH,aAAG1K,QAAA,UAAAb,EAAAuE,MAAAiH,SAAdjH,MAAAgH,aAAAE,EAAAC,OAAA3I,QAAA,IAAA,IAAAQ,UAAA,EAAA,KAEAsH,GAACA,OAdH,KAeAS,kBAAAA,EAAA,IAfAK,EAeC,WAfY,SAAAA,EAAAP,EAAA7G,EAAAqH,GAmBbjO,KAAAyN,OAAAA,EAAAzN,KAAA4G,MAAAA,EA0CC5G,KAAAiO,YAAAA,GAAA,IAAAC,gBAxCGC,eAAaH,EAAwCxD,UAAA,MAAA,KACnD,kBACExK,KAAKyN,OAAAW,OAAA7B,iCAGF,MAXV,wBAciByB,QACT,kCAIAf,IAAA,SAAA5K,EAAAgM,OACHxO,EAAE,SAAAyO,EAAApB,GACF,OAAA,WAEI,IACA7K,EAAuCkM,WAC7BD,EAACrB,IAAA5K,EAAA6K,GAIZ,MAASxK,GACZL,EAAekM,WAAa,EAC7BlM,EAAAkK,IAAA3L,MAAA,yBAAA0N,EAAA3M,KAAA,MAAAe,EAAAvB,QAAA,uBAGFkB,EAAAkM,WAAAF,GAEaA,EAAAhM,KAIZmM,EAAOnM,EAAcoL,OAAAW,OAAAI,QACrBC,EAAqB,GACfJ,IACNI,EAAiBD,EAAItL,QAAArD,EAAqB,CAAE8B,KAAE,KAAAoL,SAAA,iBAAAE,IAAAoB,GAAA,OAE/C,IAAA,IAAAxI,EAAA2I,EAAAtL,OAAA,GAAA,EAAA2C,EAAAA,IACH4I,EAAA5I,GAAChG,EAAA2O,EAAA3I,GAAAwI,GAAAxI,EAAA2I,EAAAtL,OAAA,EAAAuL,EAAA5I,EAAA,GAAA,MA1CY4I,EAAA,MAiGXC,EAAAC,kBAAiC,SAAAP,GA9BzBA,EAAAQ,UAA6E,IAAGC,GAqBhFT,EAAAQ,UAAA,IAAgBE,GAUtBV,EAAKQ,UAAU,IAAMG,GACtBX,EAAAQ,UAAA,IAAAI,GAEMZ,EAAAQ,UAAA,IAAAK,GACLb,EAAMQ,UAAA,IAAAM,GACNd,EAAMQ,UAA4B,IAACO,GACnCf,EAASQ,UAAgB,IAAIQ,MA7FxB,KAkGLV,mBAACA,QAEW,oBACVW,EAASjB,QACTkB,UAAO,GACTtP,KAACuP,kBAAA,EAEDvP,KAAIwP,QAAKpB,WAEA5D,UAAAiF,QAAA,SAAA7I,GACT,IAAC8I,EAAA,gCAEGtB,EAACpO,KAAAwP,QAECjD,EAAA6B,EAAY7B,IAClB,GAAM6B,EAAOuB,QAGX,GAAKvB,EAACwB,QAKH,GAAA5P,KAAA6P,0BAAPtD,EAAAC,KAAA,8CA0CCkD,OA1CM,CAGL1P,KAAM8P,mBAEN,IAAIC,EAAK3B,EAAA4B,QAAmBC,MAAAC,KAAAtJ,GAC1BuJ,EAAO,QAAAvJ,EAAAiH,KAAA,KAAAjH,EAAAgH,aAAA,SAAAhH,EAAAgH,aAAA,IACRmC,EAEGxD,EAAIC,KAAC,oBAAuBuD,EAAA,IAAAI,GAG9B5D,EAAA3L,MAAO,2BAAAuP,QAhBP5D,EAAIC,KAAK,oBAACkD,QAHRnD,EAAAC,KAAS,8BAAGkD,MAuBLlF,UAAAiB,QAAA,SAAoB2E,OAC7BC,EAAOrQ,KACRsQ,EAAA,mCAEGlC,EAACpO,KAAAwP,QACDjD,EAAC6B,EAAA7B,IAEL,IAAIvM,KAACuP,2BAGD,yBACAI,aAKAC,cAIDL,kBAAgB,EACnBvP,KAAC8P,mBAAC,IACA,IAAIS,EAAMnC,EAAA4B,QAAAC,MAAAO,IAA2BpC,EAAMqC,qBAC3C,IAAKF,GAAoB,IAApBA,EAAoBrN,OAE1B,YADKlD,KAACuP,kBAAmB,GAIrBhD,EAAAC,KAAA,WAAA+D,EAAArN,OAAP,cAAyBkL,EAAAsC,UAA4B,KAC7CtC,EAAMuC,iBAA+BC,WAAAL,EAAAM,IAAA,SAAA3Q,GAAA,OAAAA,EAAAqL,QAAA6C,EAAA,SAAA0C,GAEtCT,EAAAU,0BAAqBD,EAAwBP,GAChDF,EAAAW,aAAsBT,EAAAM,IAAA,SAAA3Q,GAAA,OAAAA,EAAAqL,QAAAuF,GACvBvE,EAAAC,KAAA,8BAEM6D,EAAId,kBAAK,GACXa,SAGH1N,GACD6J,EAAA3L,MAAA,2BAAA8B,GAEG1C,KAAAiR,oBAEFjR,KAAAuP,kBAAqB,UA3BnB/C,KAAI,oBAAoB8D,QAL1B/D,EAACC,KAAA,8BAAA8D,IAoCEjB,EAAA7E,UAAAyG,kBAAP,SAAsBC,EAAiEC,EAAAC,GACrF,IAAEhD,EAAWpO,KAAKwP,UACnB0B,GAAAA,GAAA,KAEOA,EAAA,GAEN9C,EAAsB7B,IAAAC,KAAQ,6BAAR0E,EAAA,kBAAjBG,wBAAa,IAAAC,MAAA,IAAAA,MAAAC,UAAA,IAAAL,GAChBC,SACEK,yBAA0BxR,KAAAqR,yBAC1BD,KACApB,QAAKC,MAAYwB,SAGvBpC,EAAC7E,UAAAkH,eAAA,SAAA5O,GAEOA,GAAA9C,KAAAsP,UAAAtM,KAAAF,IAERuM,EAAC7E,UAAAwG,aAAA,SAAAW,EAAAb,GAED,IAAQ,IAARc,EAAA,EAICC,EAJO7R,KAAAsP,UAIPsC,EAAAC,EAAA3O,OAAA0O,IAAA,CAHK,IAAC9O,EAAK+O,EAAcD,GACtB,IACD9O,EAAA6O,EAAAb,GAGK,MAAApO,GACC1C,KAAKwP,QAAAjD,IAAA3L,MAAA,yCAA8D8B,QAKnE8H,UAAUqF,wBAAA,WACjB,OAAC7P,KAAAwR,0BAAAxR,KAAAwR,yBAAA,IAAAF,MAGKjC,EAAA7E,UAAAsF,iBAAA,WACN,IAAMO,EAAArQ,KACAA,KAAM8R,cACN9R,KAAG8R,YAAoBtE,YAAA,WAAA,OAAA6C,EAAA0B,kBAAA,SAItBvH,UAAawH,2BAAQ,kBAC1BhS,KAAOqR,yBAAArR,KAAAqR,wBAAA,IAAAC,QAGI9G,UAAAuH,eAAqB,WAEhC/R,KAAIgS,8BAAMhS,KAAAuP,kBACVvP,KAAKyL,aAIMjB,UAAAuG,0BAAkB,SAAAD,EAAAa,OAE7BM,EAAS,mCACT7D,EAAKpO,KAAAwP,QACLjD,EAAM6B,EAAC7B,IACT,GAACuE,EAAAoB,QAKC,OAHE3F,EAAAC,KAAS,QAAAmF,EAAAzO,OAAuB,iBAElClD,KAAImS,aAAKR,MAGTb,EAAOsB,mBAKP,OAJD7F,EAAA3L,MAAA,6CAEGZ,KAAAiR,uBAIFH,EAAKuB,gBAIH,OAHF9F,EAAAC,KAAO,uEACRxM,KAAAiR,kBAAA,MAAA,GAAA,MAICH,EAAIwB,qBAGF,SAFA9F,KAAI,4DAAsDyF,QAC1DhB,kBAAO,SACTjR,KAACmS,aAAAR,QAEMY,UAAYzB,EAAS0B,WAM1B,OALFjG,EAAC3L,MAAA,sCAAAkQ,EAAA3P,SAEDnB,KAAAiR,kBAAO,UACRjR,KAAAmS,aAAAR,MAICb,EAAK2B,uBACN,IAAAtR,EAAA,kDACF,EAAAiN,EAAAqC,qBAEOlE,EAAA3L,MAAAO,EAAA,sCACDiN,EAASqC,oBAAqB/L,KAAOK,IAAC,EAAML,KAAEgO,MAAStE,EAACqC,oBAAA,QAG9DlE,EAAA3L,MAAAO,EAAA,IAAA8Q,GACHjS,KAAAmS,aAACR,SAyCCb,EAAAoB,UAAY3F,EAAA3L,MAAA,6BAAAkQ,EAA2B3P,SAAA,gDACjCnB,KAACiR,sBAIT5B,EAAA7E,UAAA2H,aAAC,SAAAR,GAAA,IAAA,IAAA9L,EAAA,EAAAA,GAAA8L,GAAA,IAAAzO,OAAA2C,IATY7F,KAAAwP,QAAAQ,QAAAC,MAAA0C,OAAAhB,EAAA9L,GAAuBkK,YAwB3BV,EAtPO,KAwPPA,kBAAAA,iBAEgBuD,QACL,IAAVA,IAAUA,EAAiC,KAEjD5S,KAAAiQ,MAAa,IAAC4C,EAAkBD,GACjC5S,KAAA8S,SAAA,IAAAD,EAAA,MAKCE,wBAAqBA,QACL,oBAEhBC,IACDhT,KAAAiT,2BAAA,yCAGsBzI,UAAAoG,WAAsB,SAAUe,EAAOvD,EAAAC,EAAe+B,GAC3E,IAAM9C,EAAK4F,KAAAC,UAAOxB,GAChB/N,EAAU5D,KAAKoT,cAAMhF,EAAA,OAAAA,EAAAsC,UAAA,iBAAApD,KACnBtN,KAAMqT,yBAAcjF,EAAiBC,UACtCD,EAAAkF,kBAAAC,YAAA3P,EAAA4P,EAAApD,MAGI5F,UAAAiJ,oBAAA,SAAAC,EAAAnL,EAAA6F,EAAAC,SACHD,EAAQsC,UAAc,yBAAMiD,mBAAAD,GAAA,oBAC9BpG,EAAC4F,KAAAC,UAAA5K,GAAC3E,EAAU5D,KAACoT,cAAAhF,EAAA,OAAAxC,EAAA0B,KACXtN,KAAMqT,yBAAWjF,EAAAC,UAClBD,EAAAkF,kBAAAC,YAAA3P,EAAA4P,MAGQhJ,UAAaoJ,YAAgB,SAAQxF,EAAUyF,EAAMxF,OAC9DzK,EAAC5D,KAAAoT,cAAAhF,EAAA,MAAAA,EAAA0F,gBAAA,6BAAAD,UAoBDzF,EAAAkF,kBAAAC,YAAA3P,EAlBA,SAAamQ,EAAA5S,EAAiBmM,EAAM0G,GACpC,GAAA,MAAAD,EAEK,OAAO1F,EAAA,IAAA4F,GAA8B,EAAO,MAAM,EAAA,KAAA9S,IAGpD,IAAA2R,EACC,IACCA,EAAAI,KAAiBgB,MAAC5G,GAGnB,MAAApN,GAAkEkO,EAAA7B,IAAA3L,MAAA,8BAAmB0M,EAAA,KAEzF,IAAAwF,GAAMqB,MAAArB,EAAAe,SACH,OAAAxF,EAAA,IAAA4F,GAAA,EAAA,MAAA,EAAA,KAAA,oCAEH5F,EAAQ,IAAA4F,GAAa,EAAAnB,EAAAA,UAAA,GAAAA,EAAAe,aAKjBb,EAAAxI,UAAA4J,cAAA,SAAwBC,EAAwBC,EAAgDlG,GAAxG,IAAAxK,EAAA5D,KAWCoT,cAAAhF,EAAA,MAAAA,EAAAmG,mBAAA,uCAAAF,EAAA,UAAAC,GAVClG,EAAOkF,kBAASC,YAAS3P,MAEZ4G,UAAe4I,cAAI,SAAAhF,EAAAoG,EAAApT,EAAAkM,eAC5B,QAAeA,EAAC,MACjB,CAACkH,OAAMA,MACNpT,EACFkM,KAACA,EAEDmH,OAAQrG,EAAKqG,OACbC,UAAAtG,EAAAsG,YArEN1B,EAuECxI,UAAA6I,yBAAA,SAAAjF,EAAAC,GAvEY,IAAAgC,EAAArQ,KAwFb,OAAA,SAAA+T,EAAA5S,EAAAmM,EAAA0G,GAAA,IAAAW,EAAAX,GAAAY,SAAAZ,EAAA3D,EAAA4C,4BAAA,IAqPCkB,MAAAQ,GApPwCvG,EAAA7B,IAAA3L,MAAA,0CAAzBiU,EAAYC,aAAWH,EAAAvG,GAC/BC,EAAS,IAAC0G,EAAAhB,EAAA5S,MAIX6R,EA/Ea,KAiFhBA,wBAACA,QAEmB,oBAAflF,uBAED,SAAYkH,WACdC,EAAC,GACFrD,EAAA,EAAAA,EAAA3R,UAAAiD,OAAA0O,IAEDqD,EAAOrD,EAAO,GAAA3R,UAAA2R,GAMd,GAHYoD,IACRA,EAAO,KAEVC,GAAA,IAAAA,EAAA/R,OAEG,OAAe8R,MAEjB,IAAME,EAAA,EAASC,EAAUF,EAAAC,EAAWC,EAAOjS,OAAAgS,IAAA,CAC3C,IAAI3J,EAAK4J,EAAUD,GACf3J,GAAMyJ,EAAAxN,QAAA+D,GAAA,GACXyJ,EAAAhS,KAAAuI,GAKW,OAAAyJ,KAGZI,YAAyB,SAAa7R,GACtC,IAAmBA,GAAK,IAAAA,EAALL,OAAd,OAAM,UAETmS,EAAK,EACHxP,EAAO,EAAAA,EAAatC,EAAOL,OAAG2C,IAAA,CAEjCwP,GAAAA,GAAA,GAAAA,EADE9R,EAAA+R,WAAAzP,GAGHwP,GAAQ,EAGI,OAAIA,gBAEH,SAASE,EAAQC,GAI/B,IAHC,IAACpP,EAAA,GAGFwL,EAAA,EAAA6D,GADYF,GAAa,IAAGnR,MAAO,MACnCwN,EAAA6D,EAAAvS,OAAA0O,IAAA,CAGa,IACN8D,EADRD,EAAoB7D,GACQxN,MAAA,KAEf0J,EAAG6H,QAAID,EAAa,GAAIF,KAC7BpP,EAAAsP,EAAc,IAAIA,EAAK,IAG7B,OAAC5H,EAAA8H,QAAAxP,GAAA,KAAAA,UAGK,oBACFyP,IACF,OAACnR,KAAAC,MAAA,OAAA,EAAAD,KAAAoR,WAAA9T,SAAA,IAAA4D,UAAA,GAGH,OAAOiQ,IAAOA,IAAA,IAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAAA,IAAAA,KAGF/H,EAAAiI,MAAA,SAAdC,EAAyCf,GACvC,IAAI7O,EAAS,OACX,IAAAkE,KAAY0L,GAAA,QACb3W,IAAA2W,EAAA1L,IAAA,OAAA0L,EAAA1L,KAEKlE,EAAAkE,GAAe0L,EAAA1L,QAGnB,IAAAA,KAAO2K,GAAW,QACnB5V,IAAA4V,EAAA3K,IAAA,OAAA2K,EAAA3K,KAEMlE,EAAKkE,GAAA2K,EAAA3K,IAIZ,OAAKlE,KAEJ6P,aAAA,SAAA1S,GAED,IAAMA,EACF,OAAM,KAEV,IAEM2S,EAFL,kHAEyBxS,KAAAH,GAC1B,OAAI2S,GAAoB,EAAAA,EAALhT,OAARgT,EAAI,GAEV,yBAEF,SAAAC,EAAAX,OACFW,GAAA,IAAAA,EAAAjT,OAED,OAAQ,KAGI,IAAAkT,EAAAD,EAAd/R,MAAA,KACE,GAAkB,IAAlBgS,EAAOlT,OACR,OAAA,KAQC,IADuD,IAAAkD,EAAA,GAClDwL,EAAS,EAAAyE,EAAYD,EAAKxE,EAAQyE,EAAGnT,OAAA0O,IAAA,CACxC,IACDzL,EADQkQ,EAAMzE,GACdxN,MAAA,KAES0J,EAAG6H,QAAAxP,EAAA,GAAAqP,KACLpP,EAACkQ,mBAAmBnQ,EAAW,KAAKmQ,mBAAqBnQ,EAAI,YAIjE2H,EAAM8H,QAAOxP,GAAA,KAAAA,kBAGJ,kBACR1B,KAACC,MAAsB,iBAAdD,KAAMoR,qBAEjB,SAAAxN,EAAAiO,EAAAC,WAEK,IAANA,IAAoCA,GAAU,IAC9ClO,GAAyB,iBAArBA,SACF,MAGFmO,EAAM,+CACFD,EAAAlO,EAAmBoO,cAAApO,GAAAlD,QAAAqR,EAAA,KACrBF,GAAU,IAAAI,KAAQ,SAAaC,GACjC,GAAC,iBAAAA,EAEG,OAAA,EAIJ,IAFAA,GAACJ,EAAAI,EAAAF,cAAAE,GAAAxR,QAAAqR,EAAA,KAEGvT,QAAkB,EACpB,OAAO,EAGT,IAAI2T,EAAmB,MAAAD,EAAA,GACrBC,IACDD,EAAAA,EAAAnX,MAAA,IAGA,IAAAqX,EAAA,MAAAF,EAAAA,EAAA1T,OAAA,GAKJ,OAJA4T,IAEaF,EAAdA,EAAsBhR,UAAa,EAAAgR,EAAA1T,OAAA,IAElC2T,GAAAC,EAEDF,EAAA1T,QAAwCoF,EAAcpF,SAAA,IAAAoF,EAAAd,QAAAoP,EAAA,GAErDC,EAED/I,EAAAiJ,SAAsCzO,EAAcsO,GAEnDE,EAQDhJ,EAAAkJ,WAAmC1O,EAAAsO,GAEzBtO,IAAqBsO,eAGvB,SAAOtO,UACR,UAAA,iBAAA,GAAA,IAAAiC,OAAA0M,KAAA3O,GAAApF,qBAGI,SAAOoF,EAAQ4O,sBAET,EAAAA,EAAAhU,UAAAgU,cAGT,SAAW5O,EAAO6O,UACnB,MAAA3P,QAAA2P,EAAA7O,EAAApF,OAAAiU,EAAAjU,qBAGA,SAAAoK,EAAAkI,EAAA4B,GACL,SAACC,EAAAC,EAAAC,GAEG,IAAIC,EAAC,GACP,OAAMtE,KAAAC,UAAemE,EAAA,SAAAhN,EAAAiB,GAEjB,IAACuC,EAAU6H,QAASrL,EAAEiN,GAAtB,IAGS,iBAAThM,GAASA,EAAA,CACV,IAAA,IAAAiM,EAAAhQ,QAAA+D,GACD,OAIKiM,EAAAxU,KAAAuI,GAGD,OAACA,QAGgB,uBAArBvJ,SAAOC,KAAMqL,GAA4B,CAC3C,IAACmK,EAAA,GAED,IAAA,IAAOC,KAAKpK,EAAU,CACvBA,EAAAoK,KAEoBpK,IAGQmK,EAAAC,GAAApK,EAAAoK,IAE3B,OAAOL,EAAMI,EAAAjC,GAGf,GAA6B,mBAAzB,GAAKxT,SAASC,KAAIqL,UAMpB+J,EAAa/J,EAAAkI,GAJd,IADC,IAAApP,EAAO,GACRP,EAAA,EAAAA,EAAAyH,EAAApK,OAAA2C,IAEOO,EAAMP,GAAOqN,KAAAgB,MAAcmD,EAAS/J,EAAAzH,GAAA2P,IAC7B,OAAKtC,KAAMC,UAAA/M,gBACU,SAAAkC,EAAAqP,GACpC,QADsD,IAAjBA,IAAwBA,GAAA,GAC5D,kBAAArP,EAED,OAAOA,EAEX,GAAC,OAADA,GAAC,iBAAAA,GAAA,iBAAAA,EAAA,OAAAqP,EA+BD,QAAArP,EAAA,IAAAoO,cAAAD,QAAA,IAAA,OAmHC,IAAA,MAzGe,IAAA,IAAA,OAAS,EACnB,IAAO,QACV,IAAA,KAEa,IAAA,IACR,KAAC,KAAU,OAAO,EAEtB,OAACkB,GAGD7J,EA9RI,KAgSJA,MAAKA,MACP+G,EAAC,WAEa,SAAAA,cAEF+C,UAAC,SAAA9U,GACVA,GAAA9C,KAAAsP,UAAAtM,KAAAF,MAGM+U,yBAA2B,SAAAzJ,GACnC,GAAAA,GAAAA,EAAAwB,QAAA,CAIC,IAAIkI,EAAW9X,KAAA+X,uBAAiB3J,KAC9B7B,IAAOC,KAAA,6BAAAsL,EAAAjE,SACTzF,EAAC0E,SAAAhF,EAAAiI,MAAA3H,EAAA0E,SAAAgF,EAAAhF,UAED9S,KAAAgY,QAAW5J,KAEbyG,EAACoD,WAAA,SAAA7J,GAEa,OAAAA,GAAAA,EAAAwB,SAEH5P,KAAA+X,uBAAA3J,GACRyF,SAHH,KAMciB,aAAU,SAAAjB,EAAAzF,OACpB8J,EAAoBlY,KAAAiY,WAAA7J,GACpByF,GAAOqE,MAIP3L,IAAOC,KAAG,2BAAwB0L,EAAA,QAAArE,GACpC7T,KAACmY,eAAA/J,EAAA8J,OAGIC,eAAsB,SAAK/J,EAAAyF,GAChC,IAAAxD,EAAOrQ,QACLoO,GAAKA,EAAAuB,UAAA3P,KAAAoY,2BAGM,8BACRxI,cAQKiE,EAAS,YACXoE,WAAS7J,eAGX,wCAA4ByF,EAAA,+BAC7B,qBAEgBD,YAAyBxF,EAAAyF,EAAA,SAAA/C,YAExC1C,GAAU0C,GAASA,EAAQoB,SAAApB,EAAAgC,UAG7B,YAFE1E,EAAA7B,IAAAE,KAAA4L,EAAA,KAAAvH,EAAA3P,SAKFiN,EAAK0E,SAAQhF,EAAQiI,MAAA3H,EAAA0E,SAAAhC,EAAAgC,UACtB,IAAAwF,EAAAzD,EAAAkD,uBAAA3J,OAAU,IAAA9D,KAAAgO,EACJxH,EAAAgC,SAAmBxI,WAG7B8D,EAAA0E,SAAAxI,GAGO,IAAQiO,EAAQ,CACA1E,QAAA/C,EAAA6D,gBAAX7B,SAAOhC,EAAAgC,UAEd1E,EAAO4B,QAAQ8C,SAAC5C,KAAAqI,GACjBnK,EAAA7B,IAAAC,KAAA,sBAAA+L,EAAA1E,SAACxD,EAAU2H,QAAE5J,GAEd,QACDiC,EAAA+H,qBAAA,QApCG7L,IAAO3L,MAAAyX,EAA8B,4BAyC7BL,QAAU,SAAS5J,GAE/B,QAACwD,EAAA,EAAA4G,EADYxY,KAACsP,UACbsC,EAAA4G,EAAAtV,OAAA0O,IAAA,CAED,IAAO9O,EAAW0V,EAAW5G,GAC9B,IACH9O,EAAAsL,GAlHiB,MAAA1L,GAOA0L,EAAA7B,IAAS3L,MAA8C,oCAAA8B,QA2HxDqV,uBAAkB,SAAA3J,GACzB,IAAApG,EAAAoG,EAAsB4B,QAAM8C,SAAAtC,MAAA,GAC5B,OAAAxI,GAAAA,EAAAuD,OAA8BvD,EAAKuD,MAACsI,SAAA7L,EAAAuD,MAAAuH,SACpC9K,EAAAuD,MAEA,CAAAsI,QAAoB,EAAKf,SAAC,KAM/B+B,EAvHD,KA0HMuD,qBAAwB,IACxB9I,UAAa,KAClBuF,gBAAKA,iBAEA4D,EAAuBtX,GAC5BnB,KAAKkS,SAAQ,EACblS,KAAKwS,YAAA,EACNxS,KAAAoS,oBAAA,EACHpS,KAAAqS,iBAAC,EAAArS,KAAAsS,sBAAA,EAvBYtS,KAAAuS,UAAA,EA2BbvS,KAAAyS,uBAAA,EAgBEzS,KAAAyY,WAAAA,EAAAzY,KAAAmB,QAAAA,EACEnB,KAAKkS,QAAgB,KAAPuG,GAAOA,GAA6B,oBAC5B,MAAdA,0BACwB,MAARA,EAExBzY,KAAKqS,gBAA0B,MAA1BoG,EACLzY,KAAKsS,qBAA6B,MAAZmG,GAAiB,MAALA,EAClCzY,KAAKuS,SAAa,MAANkG,EACbzY,KAAAyS,sBAAA,MAAAgG,KAKC1D,mBAAYA,MACd2D,EAAC,WAEM,SAAAA,EAAAC,EAAejI,GACpB,IAAIL,EAACrQ,KACNA,KAAAoO,OAEM,IAAAwK,EAFN,iBAAAD,EAEMA,EACgB,CAAAlE,OAAekE,EAAYjI,UAAAA,IAChD1Q,KAAA6Y,oBAAyB,KACzB7Y,KAAAoO,OAAQwJ,UAAA,SAAkBxJ,GAAA,OAAoBiC,EAAAwI,oBAAkB,EAAAxI,EAAAyI,WAAA,IAAA,KAEhE9Y,KAAAoO,OAAO6B,MAAQyB,eAAA,SAAAC,EAAAb,GAAA,OAAAT,EAAAwI,+BAGVH,EAAAlO,UAAAuO,gBAAA,SAAPlY,GACE,IAAImY,EAAC,IAAA9K,EAGA,OAFN8K,EAAAC,aAAApY,GAEMb,KAAAkZ,YAAAF,GAAAG,QAAP,UAEAT,EAAClO,UAAA4O,gBAAA,SAAAvY,EAAAwN,GAEMrO,KAAA+Y,gBAAAlY,GAAAwY,OAAAhL,IAEPqK,EAAClO,UAAA8O,yBAAA,SAAAzY,EAAA0Y,GAKM,IAAAC,EAAAxZ,KAAA+Y,gBAASlY,UACd2Y,EAAIR,kBAAeS,uBAEnBD,EAAIR,kBAAQU,oBAAAH,GACVC,KACgBhP,UAAGmP,yBAAA,SAAA9Y,EAAA0Y,EAAAlL,QACnBiL,yBAAkBzY,EAAU0Y,GAA2BF,OAAChL,MAClD7D,UAAAoP,mBAAA,SAAAC,UACN7Z,KAAOkZ,cAAWC,QAAW,SAAAW,UAAiBD,MAItCrP,UAAmBuP,mBAAiB,SAAAF,EAAAxL,2BAChCwL,GAAQR,OAAUhL,MACjB7D,UAAAwP,UAAA,SAAAC,EAAA9Y,EAAAuL,SACN1M,KAAMkZ,cAAWC,QAAA,UACxBzM,EACD8M,EAAAA,EAAAM,UAAAG,GAAAC,WAAA/Y,GAAAgZ,YAAA,SAAAzN,QAGF,GAAAvL,EAKMqY,EAAAA,EAAAM,UAAAG,GAAUC,WAAA/Y,OAEhB,CAEMqY,EAAAA,EAAAU,WAAAD,GACL,IACD,IAAA5R,EAAArI,KAAAga,UAAA3R,OAEMmR,EAAAA,EAAAM,UAAAzR,GAAPA,EAAsBA,QAAkBA,EAAAA,OAAgD1G,MAEvF,MAAAzB,GAEMF,KAAAoO,OAAA7B,IAAAD,MAAA,iCAAPpM,EAAAiB,UAIO,OAAAqY,GAEPd,EAAClO,UAAA4P,UAAA,SAAAH,EAAA9Y,EAAAuL,EAAA2B,GAEMrO,KAAAga,UAAAC,EAAA9Y,EAAAuL,GAAP2M,OAAwBhL,MAER7D,UAAS6P,eAAA,SAAAC,UACrBta,KAAKkZ,cAAOC,QAAiB,OAAAW,UAAcQ,IAE/C5B,EAAClO,UAAA+P,eAAA,SAAAD,EAAAjM,GAEMrO,KAAAqa,eAAAC,GAAAjB,OAAAhL,MAES7D,UAASgQ,mBAAA,kBACrBxa,KAAKkZ,cAAOC,QAAiB,YAEjCT,EAAClO,UAAAiQ,mBAAA,SAAApM,GAEMrO,KAAAwa,qBAAAnB,OAAAhL,IAEPqK,EAAClO,UAAAkQ,iBAAA,SAAArG,GAQMA,IACLrU,KAAAoO,OAAA7B,IAAmBC,KAAA,2BAAsC6H,GACvDrU,KAAKoO,OAACuC,iBAAqByD,cAAAC,GAAA,EAAArU,KAAAoO,YAIlB5D,UAAYkD,uBAAS,SAAoB2G,GACnDA,IAEKrU,KAAAoO,OAAU7B,IAAIC,KAAA,iCAAgC6H,GAChDrU,KAACoO,OAAQuC,iBAAAyD,cAAAC,GAAA,EAAArU,KAAAoO,YAIG5D,UAAU0O,YAAC,SAAAF,UACzB,IAAK2B,EAAe,CAACC,KAAA,IAAAtJ,MAAAtR,KAAAgZ,MAEtBxO,UAAAqQ,YAAA,SAAAjU,EAAAoS,EAAA3K,GAED,SAAKE,EAAauM,GAKhB,OAJMA,IACPA,EAAAvM,WAAA,KAGOF,GAAUA,EAAAyM,GAGlB,IAAAzY,EAAA,IAAkB2L,EAAchO,KAAC4G,EAAuBoS,UACtDpS,OAKIwH,OAAMuB,oBAMPrC,KAAA,MAIEyN,MAAInU,EAAAmU,KAAgB7X,gBACjB,WAEL+J,IAAA5K,EAAA,SAAA2Y,GACH,IAAC5M,EAAA4M,EAAAvN,OAAAW,OAEC6M,EAAAD,EAAQpU,MACToU,EAAAzM,YACJ0M,EAAApN,MAAA,IAAAoN,EAAApN,KAAA3K,SASM+X,EAAApN,KAAA,OACAoN,EAAWL,OACNK,EAACL,KAAQ,IAAItJ,MAGjBlD,EAAA6B,MAAeR,QAAuBwL,GAChCA,EAAArN,cAAqC,EAApBqN,EAAArN,aAAA1K,SACtB8X,EAAAzO,IAASC,KAAO,8BAAGyO,EAAArN,aAAA,KACtBQ,EAAK8M,uBAAiB/O,QAAA8O,EAAArN,gBAIvBS,GAAAA,EAAA2M,mBAtCMzO,IAAIC,KAAG,2CACX+B,EAAAlM,IANKkM,EAAOlM,MAmDLmI,UAAO2Q,8BAAiC,SAAAzH,EAAA0H,EAAA7S,EAAA8F,GACrD,IAAAgC,EAAArQ,KAEO,KAAA0T,GAAA0H,GAAA7S,GAAmBvI,KAA3BoO,OAA4BuB,SAA5B,QAAAtB,GAeCA,EAAA,IAAA0G,EAAA,IAAA,cAZC,IAAIsG,EAAc,CAAAC,cAAkBF,EAAU7S,YAAEA,GAChDvI,KAAKoO,OAAAuC,iBAAa8C,oBAA+BC,EAAC2H,EAAArb,KAAAoO,OAAA,SAAA0C,GAE5CA,EAAWoB,SACb7B,EAAQjC,OAAO7B,IAAA3L,MAAA,0DAAA8S,EAAA,MAAA5C,EAAA2H,WAAA,IAAA3H,EAAA3P,SAEfkN,GAAEA,EAAmByC,QAIlBtG,UAAc+Q,mBAAY,WACjC,OAACvb,KAAAoO,OAAA8M,uBAAAjP,WAOHyM,EAAAlO,UAAkBqO,oBAAO,SAAA2C,SAAzBxb,UACEoO,OAAI7B,IAAAC,KAAA,uCAAyCgP,mBAC3CC,aAAoBzb,KAAA8Y,iBACrBA,WAAA3L,cAAAnN,KAAAoN,iBAEDsO,EAAO1b,KAAAoO,OAAAuN,+BACT,GAAC,EAAAD,EAAA,2DAAA1b,KAAA8Y,WAAAnW,WAAAwV,EAAAqD,IA9OHxb,KAAAoN,YAAAI,YAAA2K,EAAAuD,KAiPAnR,OAAA4D,eAAAuK,EAAA,UAAA,CAAAlI,IAAA,WAGM,OA6BL,OAAAkI,EAAAkD,YA/BQlD,EAAAkD,UAAP,IAAoBlD,EAAgB,OAE3BA,EAAkBkD,WAE1BC,YAAA,EAEDC,cAAA,MA1NC,kDA4NA,WAEM,SAAA5N,YAEPA,EAAC1D,UAAAyO,aAAA,SAAApY,GAEMA,IACDb,KAAC,gBAAsBa,0BAG7BqN,EAAA1D,UAAA,eAAA,KACE,WACD,QAAAxK,KAAA,+BAAA8b,cAAA,MAGKtR,UAASuR,aAAA,kBACX/b,KAAK,iBAAsB,MAE/BkO,EAAC1D,UAAAiP,qBAAA,WAEMzZ,KAAA,wBAAA,GAEPuK,OAAC4D,eAAAD,EAAA1D,UAAA,mBAAA,CACHgG,IAAA,WAAC,QAAAxQ,KAAA,wBA0HD6b,YAAA,EA+HEC,cAAA,MAzGOtR,UAAWkP,oBAAc,SAAAlF,GAQzBA,IAIAxU,KAAA,uBAAsDwU,MAyCrDhK,UAAAwR,oBAA2B,WAO3B,OAAAhc,KAAA,wBAA8B,MAc9BkO,EAjPP,KAuQOA,YAAQA,QAOR,oBAGN0K,EAAuBqD,GAiBvB,SAAKC,EAAAC,GACD,MAAqB,mBAApBA,EAA8BA,EAAAnc,MAAcmc,OAjB/CC,YAAc,GAChBpc,KAACqc,YAAA,GAEDrc,KAAA2P,SAAc,EAEd3P,KAAKkb,uBAAa,IAAenP,EACjC/L,KAAK8S,SAAS,GACd9S,KAAKsc,WAAY,qCACjBtc,KAAKuc,iBAAkB,kCACvBvc,KAAKwc,oBAAqB,qCAC1Bxc,KAAKyc,gCAAiC,KACtCzc,KAAK0c,gBAAA,GAEL1c,KAAK2c,sBAAwB,GAC7B3c,KAAK4c,SAAW,GAChB5c,KAAKsP,UAAA,GAIL2M,EAAKnO,EAAiBiI,MAAG6C,EAAOiE,SAAeZ,GAC/Cjc,KAAKuM,IAAA2P,EAAAD,EAA0B1P,MAAA,IAAcK,EAC7C5M,KAAKyU,OAAOwH,EAAUxH,OACtBzU,KAAK0Q,UAAQuL,EAAOvL,UAEpB1Q,KAAA8T,gBAAgBmI,EAAAnI,gBAChB9T,KAAAuU,mBAAmB0H,EAAsB1H,mBAC1CvU,KAAA2b,+BAAAM,EAAAN,+BAMD3b,KAAA8c,0BAAWb,EAAAa,+BAAXC,yBAAAb,EAAAD,EAAAc,+BACEC,YAAYd,EAAQD,EAAAe,aACtBhd,KAACkb,uBAAAgB,EAAAD,EAAAf,yBAAA,IAAAnP,OAMDkR,gBAA+Bf,EAAAD,EAAAgB,sBAC7BC,qBAAwBhB,EAAKD,EAAAiB,2BAC7BzM,oBAAcyL,EAAWD,EAAgBxL,sBAAA,QACzC6C,kBAAe4I,EAAAD,EAAA3I,mBACjBtT,KAAC2Q,iBAAAuL,EAAAD,EAAAtL,mBAAA,IAAAqC,sEAVA6B,EAAAgD,yBAAA7X,MAgBD0O,EAAWC,kBAAA3O,mCACK4Y,EAAcpO,UAAQ,SAAa,CACnDgG,IAAC,gCAAA2M,IAAA,SAAA5R,GAMDvL,KAAAod,QAAW7R,GAAA,UAAXgB,IAAAC,KAAA,WAAAxM,KAAAod,SACEpd,KAAAgY,uBAOF,gBACQ,0BAECY,EAAmBpO,UAAM,UAAA,wBAEzBxK,KAAIyU,QAA4B,IAAvBzU,KAAAyU,OAAcvR,oBAE7B,EACH4Y,cAAC,mDAdAtL,IAAA,WAoBD,OAAAxQ,KAAAsc,gBACE,SAAW/Q,GACZA,IAMDvL,KAAAsc,WAAwC/Q,EAClCvL,KAAEuc,iBAAQhR,EACZvL,KAAKwc,oBAAmBjR,EACxBvL,KAAKuM,IAAIC,KAAK,cAAAjB,GACdvL,KAAKgY,4CAQTzN,OAAA4D,eAAWyK,EAAApO,UAAA,kBAAA,KAAX,WACE,OAAOxK,KAAKuc,sBAOd,SAA8BhR,GACtBA,IACJvL,KAAKuc,iBAAmBhR,EACxBvL,KAAKuM,IAAIC,KAAK,oBAAAjB,GACdvL,KAAKgY,4CAQTzN,OAAA4D,eAAWyK,EAAApO,UAAA,qBAAA,KAAX,WACE,OAAOxK,KAAKwc,yBAOd,SAA0CjR,GACpCA,IACFvL,KAAAwc,oBAAOjR,EACRvL,KAAAuM,IAAAC,KAAA,uBAAAjB,GAEGvL,KAAKgY,wBAEC,gBACH,0BAGFY,EAAApO,UAAkC,iCAAM,KAC7C,WACA,OAAKxK,KAAOyc,sEAYdlR,GAAA,EACQA,GAAA,EAEP,EAAAA,GAAAA,EAAA,eAAAvL,KAAAyc,gCAAAlR,EAWMvL,KAAAuM,IAAAC,KAAA,mCAAPjB,GAAyBvL,KAAAgY,wBAAA,oBAEzBzN,OAAC4D,eAAAyK,EAAApO,UAAA,iBAAA,CAMDgG,IAAA,eAAAgF,EAAAxV,KAAA8S,SAAA,oBACE,OAAO9S,KAAK0c,gBAAAW,OAAA7H,GAA2BA,EAAApR,MAAA,MAAA,iBAOzC,gBACc,MAEPoG,UAAA8S,kBAAuB,mBAC5B9H,EAAK,GACA5D,EAAA,EAAAA,EAAA3R,UAAuBiD,OAAC0O,IAC7B4D,EAAK5D,GAAA3R,UAAsB2R,QAE3B8K,gBAAK5O,EAAmByP,SAAOxd,MAAA+N,EAAA,CAAA9N,KAAA0c,iBAAAW,OAAA7H,2BAEjBoD,EAACpO,UAAA,4BAAA,CACjBgG,IAAC,mDAjBA2M,IAAA,SAAA5R,GAuBD,IAAAiS,EAAAjS,IAAW,OAAXkS,2BAAAD,EACExd,KAAA0d,iBAAYF,EACbxd,KAAA2d,oBAAAH,OAMDI,kBAAyCJ,EACvCxd,KAAK6d,gBAAgBL,EACrBxd,KAAK8d,iBAAUN,EAChBxd,KAAA+d,oBAAAP,iEAMD3B,YAAA,gBAAA,WAEC1N,eAAAyK,EAAApO,UAAA,kBAAA,KAMD,WACE,OAAKxK,KAAA0d,kBAEPP,IAAC,SAAA5R,+CAMDsQ,YAAA,gBAAA,WAEC1N,eAAAyK,EAAApO,UAAA,qBAAA,KAMD,WACE,OAAKxK,KAAA2d,qBAEPR,IAAC,SAAA5R,kDAODsQ,YAAA,gBAAA,WAEC1N,eAAAyK,EAAApO,UAAA,mBAAA,KAOD,WACE,OAAKxK,KAAA4d,mBAEPT,IAAC,SAAA5R,gDAODsQ,YAAA,gBAAA,WAEC1N,eAAAyK,EAAApO,UAAA,iBAAA,KAOD,WACE,OAAKxK,KAAA6d,iBAEPV,IAAC,SAAA5R,8CAODsQ,YAAA,gBAAA,WAEC1N,eAAAyK,EAAApO,UAAA,kBAAA,KAOD,WACE,OAAKxK,KAAA8d,kBAEPX,IAAC,SAAA5R,+CASDsQ,YAAA,gBAAA,0BAEcjD,EAAApO,UAAsB,qBAA2B,CAC/DgG,IAAC,4CAAA2M,IAAA,SAAA5R,GASMvL,KAAA+d,oBAAAxS,IAAA,EAAwBvL,KAAAgY,uBAAA,oBAE/BzN,OAAC4D,eAAAyK,EAAApO,UAAA,uBAAA,CAMDgG,IAAA,eAAA+F,EAAAvW,KAAA8S,SAAA,0BACE,OAAO9S,KAAK2c,sBAAcU,OAAmB9G,GAAgBA,EAAAnS,MAAA,MAAA,iBAE1D,EACL0X,cAAC,mDAeM,IAfN,IAAAkC,EAAA,GAeMpM,EAAA,EAAAA,EAAA3R,UAAPiD,OAAA0O,IACQoM,EAAyBpM,GAAe3R,UAAQ2R,QAEpD+K,sBAAe7O,EAAAyP,SAAAxd,MAAA+N,EAAA,CAAA9N,KAA4C2c,uBAACU,OAAAW,YAE7D7P,eAAAyK,EAAApO,UAAA,UAAA,CAEDgG,IAAK,WACH,OAAOxQ,KAAI4c,SAASqB,KAAM,SAACC,EAAAC,GAC5B,OAAAD,EAAAnR,SAAAoR,EAAApR,UAAA,EAAAmR,EAAAnR,SAAAoR,EAAApR,SAAA,EAAA,KAID8O,YAAC,EAEDC,cAAI,MAEYtR,UAAAoE,UAAA,SAAAwP,EAAArR,EAAOsR,OAAlB/P,EAAO+P,EAAA,CAAA1c,KAAAyc,EAAArR,SAAAA,EAAAE,IAAAoR,GAAAD,KACV9P,GAAUA,EAAKrB,KAIhBqB,EAAA3M,OAEG2M,EAAC3M,KAAamM,EAAEC,QAEnBO,EAAAvB,WACFuB,EAAAvB,SAAA,OAaC,IAAMuR,GAAsB,EACxB9P,EAAQxO,KAAA4c,SACLhL,EAAI,EAAA2M,EAAM/P,EAAAoD,EAAA2M,EAAArb,OAAA0O,IAAgD,CAEhE,GADQ2M,EAAA3M,GACRjQ,OAAA2M,EAAA3M,KAAA,CAEK2c,GAAe,EAChB,UAIH9P,EAACxL,KAAAsL,aAhCC/B,IAAA3L,MAAA,8CAwCCgY,EAAApO,UAAAgU,aAAP,SAAkBJ,GAChB,IAAIzc,EAAY,iBAAAyc,EAAAA,EAAAA,EAAAzc,QACdA,GASF,IADA,IAAM6M,EAAQxO,KAAW4c,SACnB/W,EAAsB,EAAAA,EAAO2I,EAAAtL,OAAkB2C,IAE/C,GAAA2I,EAAY3I,GAAalE,OAAYA,EAAE,CACzC6M,EAAYrL,OAAG0C,EAAA,GACjB,YAZD7F,KAAAuM,IAAA3L,MAAA,oDAeA4J,UAAAiU,WAAA,SAAA5K,GAEIA,IACN7T,KAAAqc,YAAA,YAAAxI,MAOOrJ,UAACkU,gBAA2B,SAAAC,EAAAhd,GACpC,0EAACid,SAKM5e,KAAAqc,YALN,SAMKrc,KAAAqc,YANL,SAMsBwC,EAErB7e,KAACuM,IAAAC,KAAA,mBAAAoS,EAAA,OAAAC,EAAAtR,YAMIhD,OAAA4D,eAAAyK,EAAApO,UAAP,YAAA,CACEgG,IAAK,WACN,MAAA,oCAIAqL,YAAA,EAGMC,cAAA,IAEPlD,EAACpO,UAAAsU,YAAA,SAAAC,EAAAjS,QAEM,IAAAiS,IAAPA,GAAyD,QACrC,IAAhBjS,IAA+BA,EAAS,KAC3CiS,GAEO/e,KAAA4O,UAAA,IAAA/B,EAARC,OAEatC,UAAOwU,gBAAA,gBAChBpQ,UAAK,IAAAjB,MAEJnD,UAAAyU,gBAAA,eACCzU,UAAS0U,eAAM,gBAChB3S,IAAA,IAAAF,GAELuM,EAACpO,UAAAoN,UAAA,SAAA9U,GAMDA,GAAA9C,KAAkBsP,UAAAtM,KAAAF,MACZ0H,UAAAwN,QAAc,mBAEjBpG,EAAA,EAAAuN,EADCnf,KAAAsP,UACDsC,EAAAuN,EAAAjc,OAAA0O,IAAA,CAED,IAAA9O,EAAOqc,EAAcvN,GACtB,YAAA,MAAAlP,GACH1C,KAAAuM,IAAC3L,MAAA,oCAAA8B,MAQD6H,OAAA4D,eAAAyK,EAAA,WAAA,CAOEpI,IAAA,WANO,OAMsC,OAAAoI,EAAAwG,mBAA8BxG,EAAAwG,iBAAA,CAAAtC,2BAAqB,IANzFlE,EAAyBwG,kBAO9BvD,YAAY,EACZC,cAAa,IAEblD,EAlgBM,KAogBPwG,iBAAA,OACHxG,cAAAA,EAAA,IAdA3E,EAAa,SAAA/B,EAAAY,EAAgB6B,EAAA9T,EAAAM,QAkB7B,IAAAwT,IAAAA,GAAA,QAOc,IAAZ9T,IAA2BA,EAA6B,WAFhD,IAAAM,IAAAA,EAAuC,MAG7CnB,KAAKkS,SAAS,EACdlS,KAAK2U,iBAAgB,EACrB3U,KAAKkS,QAAAA,EACNlS,KAAA8S,SAAAA,EAEM9S,KAAA2U,gBAAAA,EACL3U,KAAKa,UAAQA,OACXM,QAAWA,KAMR8S,iBAAAA,QACO,oBACV0G,EAAY/T,EAAS6G,EAAOuL,GAC9BhZ,KAACqf,6BAAA,iEAEDrf,KAAAgV,OAAYpO,EACb5G,KAAAyN,OAAAA,EAEMzN,KAAAgZ,kBAAAA,GAAe,IAAA9K,WAElB1D,UAAe2O,QAAC,SAAetL,GAKlC,OAJEA,IAEG7N,KAACgV,OAAOnH,KAAAA,GAEb7N,QASUwK,UAAGsP,UAAA,SAAAvW,UACVA,IACDvD,KAAAgV,OAAAzR,OAAAA,GAGCvD,QAGGwK,UAAY8U,eAAmB,SAAC5L,GACrC,IAAA1T,KAAOuf,kBAAK7L,GACb,MAAA,IAAA/J,MAAA,eAAA3J,KAAAqf,qCAGCrf,KAAKgV,OAACpH,aAAU8F,EACd1T,QAGKwK,UAAKgV,kBAAA,SAAA7d,EAAA8d,GACb,IAAA9d,EAEM,MAAA,IAAAgI,MAAA,oBAEH8V,IAAMzf,KAAIuf,kBAAME,GACjB,MAAA,IAAA9V,MAAA,MAAA3J,KAAAqf,8BAID,YADElF,YAAU,QAAMxY,EAAA8d,GACjBzf,QAGMwK,UAAK0P,WAAA,SAAA/Y,GAQZ,OAPDA,IAKMnB,KAAAgV,OAAA7T,QAAAA,GAEAnB,QAEJwK,UAAAkV,OAAA,SAAAC,EAAAC,GAED,GAAID,GAAY,IAAmB,GAAXA,EACxB,MAAO,IAAKhW,MAAA,0DAUP,GAAAiW,GAAA,KAAkB,IAAlBA,EACD,MAAA,IAAAjW,MAAgB,6DAIpB,OAFA3J,KAACgV,OAAA6K,IAAAF,EAAA,IAAAC,EAEM5f,MAUF2a,EAAAnQ,UAAAkU,gBAAA,SAAPC,EAA+Chd,GAC7C,IAAIkd,EAAgB,iBAAAF,EAAAA,EAAA,CAAApR,SAAAoR,EAAAhd,KAAAA,UAClBkd,IAAqCA,EAAAtR,UAAgBsR,EAAgBld,YAGpEwY,YAAA,QAAA0E,GAED7e,QAGKwK,UAAKsV,mBAAA,SAAAC,EAAAxX,UACbwX,GAAAxX,GAQMvI,KAAAma,YAAA,oBAAP,CAAAmB,cAA4ByE,EAA2BxX,YAAcA,IAEjEvI,QAEDwK,UAAAwV,sBAAA,SAAAC,EAAAC,GAED,GAAAD,EAAY,CACb,IAAAvf,EAAA,CAAAyf,eAAAF,GAEMC,IACCxf,EAAQwf,MAAAA,GAEblgB,KAAAma,YAAA,SAAAzZ,GAGF,OAAAV,QAEcwK,UAAiB4V,qBAAA,SAAAC,EAAAH,QAAjB,CAAA,IAAA5S,EAAA,CAAAgT,kBAAiBD,mCAE9B,OAAOrgB,MAWF2a,EAAAnQ,UAAA+V,SAAW,SAAlBhV,GAKE,OAJKA,IACHvL,KAAAgV,OAAYzJ,MAAAA,GAGTvL,QAEJwK,UAAAgW,QAAA,WAGD,IADA,IAAMzF,EAAM,GACPnJ,EAAM,EAAAA,EAAQ3R,UAAUiD,OAAA0O,IAC3BmJ,EAAKnJ,GAAM3R,UAAU2R,GAIxB,OADC5R,KAAAgV,OAAY+F,KAAAjN,EAAAyP,SAAAxd,MAAA+N,EAAA,CAAA9N,KAAAgV,OAAA+F,MAAAsC,OAAAtC,IACb/a,QAGKwK,UAAW2P,YAAA,SAAAxY,EAAA4J,EAAA6L,EAAAqJ,OACb9e,QAAatC,IAARkM,GAAoB,MAAAA,EAC1B,OAAAvL,KAGFA,KAAAgV,OAAA1H,OAEMtN,KAAAgV,OAAA1H,KAAA,QAEHlH,EAAK8M,KAAAgB,MAAApG,EAAkBqF,UAAW5H,EAAGvL,KAAQyN,OAAAW,OAAAsS,eAAArD,OAAAoD,GAAA,IAAArJ,IAM1C,OALJtJ,EAAA8H,QAAAxP,KAEDpG,KAAOgV,OAAK1H,KAAA3L,GAAAyE,GAGPpG,MAEP2a,EAACnQ,UAAAmW,eAAA,SAAAC,GAKC,OAHMA,GACF5gB,KAACwgB,QAAQ,YAEZxgB,QAGCwK,UAAaqW,eAAA,SAAAjd,UACdA,IAEG5D,KAAKgZ,kBAAgB,YAAepV,GAEtC5D,QAEMwK,UAAU6O,OAAS,SAAGhL,QAE5BZ,OAAMoN,YAAW7a,KAAQgV,OAAMhV,KAAOgZ,kBAAG3K,MAExC7D,UAAA+U,kBAAA,SAAAhU,GACH,IAACA,EAED,OAAW,EAEf,GAAAA,EAAArI,OAAC,GAAA,IAAAqI,EAAArI,OAAA,OAAA,EASD,IAAA,IAAA2C,EAAA,EAAAA,EAAA0F,EAAArI,OAAA2C,IAAA,CAAA,IAAAW,EAAA+E,EAAA+J,WAAAzP,GAIS,KAHsB,IAAAW,GAAAA,GAAA,OACP,IAAAA,GAAAA,GAA8B,IAAA,IAAAA,GAAAA,GAAA,QAwBrD,KAAAA,GArBS,OAAS,SAEV,KAvNC,kBA2NLmU,QAGkC,oBAC9B9L,SACH9B,SAAM,aACE,uCAEIvC,UAAcyC,IAAI,SAAO5K,EAAA6K,GAGvC,UAFK7K,EAAAoL,OAAAW,OAEJwD,EAAA,EAAAkP,EADE1S,EAAAgO,aAAA,GACFxK,EAAAkP,EAAA5d,OAAA0O,IAAA,CAEG,IAAImP,EAAMD,EAAClP,GAChBmP,GAAA1e,EAAAuE,MAAAmU,KAAAvT,QAAAuZ,GAAA,GACH1e,EAAAuE,MAAAmU,KAAA/X,KAAC+d,GAID,IAAA1E,EAAAjO,EAAAiO,aAAA,GASE,IAAA,IAAA/R,KAAA+R,EAAY,GAAAA,EAAA/R,GAAA,CAAiD,IAAAlE,EAAA8M,KAAAgB,MAAApG,EAAAqF,UAAwBkJ,EAAA/R,GAAA8D,EAAAsS,iBAArF5S,EASC8H,QAAAxP,KAjBM/D,EAAuBuE,MAAC0G,KAAAhD,GAAAlE,GAS7B8G,GAAKA,KAGL2B,EA7BmC,iCA+BZA,QACpB,oBACAE,EAAUiS,EAAAtF,QACd,IAAAsF,IAAAA,EAAA,WAAA,OAAA1P,KAAA2P,aAEM,IAAAvF,IAAAA,EAAP,KAAA,IAAArL,EAAArQ,KACEA,KAAA+M,SAAA,UACEpL,KAAQ,8BACRuf,cAAW,4BACU,wBACRF,iBACVtF,cACG,gBAC0B,IAAxBwF,cAAehe,QACrBmN,EAAC6Q,cAAAC,QAAAC,wBAKJ5W,UAAAyC,IAAA,SAAA5K,EAAA6K,GAED,IAAMmD,EAAQrQ,WACd,SAAiBE,GAEf,IADE,IAAAmV,EAAW,EACPnV,GACAA,EAAGiB,SAAQjB,EAAAiB,QAAA+B,SAEXmS,GAAc,IAADA,EAAcvH,EAACsH,YAAQlV,EAACiB,UAEzCjB,EAAMmhB,aAAenhB,EAACmhB,YAAOne,SAC7BmS,GAAkB,IAAXA,EAAmBvH,EAAMsH,YAAMlC,KAAAC,UAAAjT,EAAAmhB,eAEtCnhB,EAAAA,EAAAe,MAGF,OAAKoU,EAGID,CADH/S,EAACuE,MAAa0G,KAAK,cAEzBgU,EAAC,CAED,IAAIC,EAAQlf,EAACuE,MAAY2a,OAAA,EACvBC,EAAQxhB,KAAIyhB,kBACZC,EAAK1hB,KAAAkhB,cAAoBS,OAAO,SAAMvY,GAAU,OAASA,EAAEkY,WAAOA,IAAA,GAuBxE,GApBMI,MACEE,eAAKL,GACPG,EAACG,WAAAxf,EAAAuE,MAAAgU,MACFvY,EAAAkK,IAAAC,KAAA,uCAAA8U,GACFjf,EAAAkM,WAAA,IAGFlM,EAAAkM,WAAAvO,KAAA8hB,oBAAAnL,KAAA,SAAAoL,GAAA,OAAAA,EAAA1M,OAAAiM,GAAAS,EAAAhS,WAAAyR,EAAAnR,EAAArD,cACH3K,EAAAkK,IAAAD,MAAC,2BAAAgV,GAAAthB,KAAAkhB,cAAAle,KAAA,IAAAgf,EAAAV,EAAAjf,EAAAkf,IArEYlf,EAAAkM,WAAA,IAiFXlM,EAAYkM,UAGL,IAFAlM,EAAWkK,IAAAD,MAAS,+BAAAgV,EAAA,aACpBthB,KAAQ8hB,oBAAW9e,KAAA,CAAAqS,KAAAiM,EAAAvR,UAAAyR,IACJ,GAANxhB,KAAM8hB,oBAAA5e,QACrBlD,KAAA8hB,oBAAAX,QAMMjU,GAAAA,KAEL6B,EA7EG,KAgFEA,uBAAAA,QACM,oBACTiT,EAAaV,EAAOjf,EAAYkf,GAClCvhB,KAACshB,SAAAA,EACFthB,KAAAiiB,SAAA5f,EACHrC,KAAAkiB,OAACX,SAIDS,EAAAxX,UAAAoX,eAAA,SAAAL,GAAAvhB,KAAAkiB,QAAAX,KAES/W,UAAe4W,SAAA,WAevBphB,KAAAiiB,SAAArb,MAAA2a,MAAAvhB,KAAAkiB,OAbQliB,KAAAiiB,SAAAxU,OAAAW,OAAA6B,MAAPR,QAAAzP,KAAWiiB,SAA6Brb,UAGhC4D,UAAYqX,WAAe,SAAOjH,GACpCA,EAAC5a,KAAQiiB,SAAWrb,MAAAgU,OACtB5a,KAAMiiB,SAAArb,MAAegU,KAAqBA,MAjBpC,KAuBO,WACjB,SAACzL,IACHnP,KAAA+M,SAAA,GAAC/M,KAAA2B,KAAA,+BAIDwN,EAAA3E,UAAAyC,IAAA,SAAA5K,EAAA6K,GAAA,IAAAiV,EAAA,eACSC,EAAmB/f,EAAGoL,OAAAW,OAAA2O,yBACtB,IAAA1a,EAAeuE,MAAA0G,KAAA6U,IAAcC,EAAA,CAmDrC,IAAAC,EAAAD,EAAAE,mBAAAjgB,GAjDQggB,IACChgB,EAAoBuE,MAAA0G,KAAS6U,GAAAE,MAGjCnV,OAda,2BAkBJiC,QACH,oBACNL,SACA/B,SAAM,QACNpL,KAAA,uBAEA6I,UAAUyC,IAAA,SAAA5K,EAAA6K,WAuBFe,YAAgB8N,8BAElBlO,KAAO,WACRjH,MAAA0G,KAzBM,WAyBN,KAEDc,EAAQ/L,EAAMoL,OAAKW,OACpBmU,EAAAnU,EAAA4O,YACF,IAAAuF,EACF,MAAA,IAAA5Y,MAAA,gCAGF,IAAAvD,EAAAmc,EAAArO,MAAA7R,EAAAxB,GACH,GAACuF,EAAA,CAAA,IAAAoc,EAAAtP,KAAAgB,MAAApG,EAAAqF,UAAAtS,EAAAuN,EAAAsS,eAAArD,OAjCY,CACP,YACA,SACA,eAEI,cACF,WACF,UAEA,mHA7BOvP,EAAA8H,QAAW4M,KAyDxBpc,EAAAkH,OAAAlH,EAAAkH,KAAA,IAEwBlH,EAAAkH,KAAA,QAAuBkV,GAEtCngB,EAAAuE,MAAA0G,KA1CQ,UA0CJlH,MAIL8G,OApDI,iBAwDC4B,QACK,sCAER,aACF,gCAEKtE,UAAOyC,IAAA,SAAA5K,EAAA6K,cACDR,WACNA,GAAO,IAAAgK,cAAAD,YACV,QACF,IAAK,OACL,IAAK,IACL,IAAK,MACL,OAAS,MACP,QACF,OAAA,MACE,OACH,OAAA,EACF,IAAA,OAED,OAAA,EAAgD,IAAA,QACvC,OAAA,EACR,IAAA,QAGD,OAAA,EAAiC,IAAA,MAC3B,IAAK,QACP,IAAA,IACD,IAAA,KAEK,OAAQ,EACR,QAEA,OAAQ,YASXgM,EAAAxG,EAAApO,EAAAtK,EAAAoU,GAGH,QAFC,IAAAsE,IAAAA,EAAA,KAEDpO,EACD,OAAA8J,EAGK,IAAG+K,EAAe,QAAZ7U,EACN8U,EAAmB,KAAO9U,EAAO,IAEhCtC,EAAS0Q,EAAQ0G,EAAApf,GACtB,GAAMgI,EACA,OAAQmX,EAAiCnX,EAA9BuC,EAAW8U,UAASrX,OAGnC,IAAIjB,KAAK2R,EACT,GAAAnO,EAAQkJ,WAAY1M,EAAKoM,cAAAiM,EAAAjM,gBAAA5I,EAAA6H,QAAApS,EAAA,CAAA+G,EAAA1E,UAAA+c,EAAAzf,UAC1B,OAAAwf,EAAAzG,EAAA3R,GAAAwD,EAAA8U,UAAA3G,EAAA3R,IAED,OAAIqN,MAzBHsE,EAAA4G,IA2BCxgB,EAAIuE,UACE2F,MACJlK,EAAQoL,OAASW,OAAQ0E,YAC1B,eAAA,KAEDgQ,GAhCD7G,EAgCqBnJ,OA7BJ,KAHjB+P,EAgCqB5H,EAAA1X,UA7BJsf,EAAiB,KAC9BE,EAAON,EAA4BxG,EAAe,MAAA4G,EAAkB,SAAc,KA6BtFG,EAAAD,EAAA9H,EAAA3N,KAAA,WACF,GAAA0V,IAAA,EAAAA,GAAAA,EAAAF,KAASvW,EAACC,KAAA,kDACLnK,EAAKkM,WAAA,QAIP,GAAW,UAAP0M,EAAIpN,KAEhB,IADG,IAAAjN,EAAAqa,EAAA3N,KAAA,WACHjL,EAAAkM,WAAC3N,IAAA,IAAA6hB,EAAA3P,EAAAmI,EAAApN,KAAAjN,EAAAiN,MAAA,KAzFYtB,EAAAC,KAAA,kDAAoB5L,EAAAiN,MA6FjCxL,EAAAkM,WAAA,GACS3N,EAAmBA,EAAGK,WAG4B,IAAlDwhB,EAAP3P,EAAWmI,EAA2BpN,KAAmBoN,EAAA1X,QAAA,KACjDgJ,EAAAC,KAAS,wCAAoByO,EAAApN,KAAA,gBAAAoN,EAAA1X,QAE7BlB,EAAAkM,WAAoB,MAElBrB,OAzFK,KA6Fb8B,qBAACA,QAEc,WACjB,SAACC,IACHjP,KAAA+M,SAAA,GAAC/M,KAAA2B,KAAA,0BAIDsN,EAAAzE,UAAAyC,IAAA,SAAA5K,EAAA6K,GAAA,IACSkV,EAAmB/f,EAAGoL,OAAAW,OAAA6O,gBACtB,GAAA5a,EAAeuE,MAAA0G,KAFxB,YAE4CjL,EAAAuE,MAAA0G,KAAA,UAAA2V,SAAAb,EAAA,CAqB3C,IAAAa,EAAAb,EAAAc,WAAA7gB,GAnBQ4gB,GAAP,EAAOA,EAAG/f,SACFb,EAAWuE,MAAW0G,KALhC,UAK2C2V,QAAAA,GAIvC/V,GAAKA,OAfU,sBAmBF+B,QACP,sCACM,aACN,oBAsBR,SApBKzE,UAAAyC,IAAA,SAAA5K,EAAA6K,GACH,IAACiW,EAAA,WAEG/U,EAAQ/L,EAAGoL,OAAAW,OAChBgU,EAAAhU,EAAA8O,qBACH,IAAA7a,EAAAuE,MAAA0G,KAAC6V,IAAAf,EAAA,CAAA,IAAAgB,EAAAhB,EAAAiB,eAAAhhB,GAvBY+gB,IA2BbtV,EAAA6H,QAAAyN,EAAAE,WAAAlV,EAAA4P,uBAAA3b,EAAAkK,IAAAC,KAAA,0EACSnK,EAAuBkM,WAAA,GAGvBlM,EAAAuE,MAAA0G,KAAA6V,GAAIC,GAITlW,GAACA,KAGFgC,EAxBO,GAyBV9E,EAAC8E,kBAAAA,EAZY,IAAAE,EAAA,WAgBb,SAAAA,IAKEpP,KAAA+M,SAAA,IAHQ/M,KAAA2B,KAAK,kCAIK6I,UAASyC,IAAA,SAAA5K,EAAA6K,GAC1B,IAAAqM,EAAAlX,EAAA4L,YAAA+N,sBAEMzC,IACDlX,EAAQuE,MAAC0G,KAAA,sBAAAiM,GAEbrM,GAACA,KAGDkC,EA/BS,KAkCTA,uBAAuBA,QACV,oBACZyD,EAAA0Q,GAEDvjB,KAAKwjB,MAAA,GACLxjB,KAAAyjB,cAAqB,EACtBzjB,KAAAujB,SAAAA,WAGa/Y,UAAM0F,KAAS,SAAO3E,GACnC,IAAAA,EAEM,OAAA,KAEL,IAAIiY,EAAMxjB,KAAOwjB,MACfzT,EAAYrL,KAACK,IAAAuM,KAAS2P,MAAKjhB,KAAWyjB,cAAC,KACrC,CAAK1T,UAAWA,EAAGxE,MAAAA,GAMlB,SALDvI,KAAOgF,GAAAhI,KAAAujB,UACTC,EAACrC,QAEJnhB,KAAAyjB,cAAA1T,EAEM/H,EAAA+H,WAEP8C,EAACrI,UAAAgG,IAAA,SAAAkT,GACH,OAAA1jB,KAAAwjB,MAAC/jB,MAAA,EAAAikB,IA3CY7Q,EAAArI,UAAAmI,OAAA,SAAe5C,GAyD1B,IALF,IAAAyT,EAAAxjB,KAAAwjB,MAKEziB,EAAA,EAAAA,EAAAyiB,EAAYtgB,OAAQnC,IAFZ,GAAAyiB,EAAAziB,GAAAgP,YAA0BA,EAIjC,YADMyT,EAAQrgB,OAAGpC,EAAQ,MAMvByJ,UAAAiH,MAAA,WAEDzR,KAAKwjB,MAAA,IAGL3Q,EAlDQ,KAoDRA,gBAAkBA,QAEb,oBACH8Q,EAAqBJ,QACrBE,cAAK,OACLF,SAAUA,EAwGoB,SAtG7B/Y,UAAA0F,KAAA,SAAA3E,EAAAqY,GACH,IAACrY,EAAC,OAAW,KAEbvL,KAAC6jB,cAED,IAAAL,EAAOxjB,KAAUwjB,MAClBzT,EAAArL,KAAAK,IAAAuM,KAAA2P,MAAAjhB,KAAAyjB,cAAA,GAEMnZ,EAAAtK,KAAA8jB,OAAA/T,GAAPgU,EAAA7Q,KAAAC,UAkBC5H,GAjBC,IAEAvL,KAAOgkB,MAAK1Z,EAAMyZ,QACXN,cAAC1T,EAEEyT,EAAMxgB,KAAI+M,GAAQ/P,KAAUujB,UAC9BvjB,KAACikB,OAAAjkB,KAAA8jB,OAAAN,EAAArC,mBAIL,OAAC,iBAIA3W,UAAAgG,IAAA,SAAAkT,GACH,IAAErT,EAAArQ,KAEL,YADI6jB,cACJ7jB,KAAAwjB,MAAA/jB,MAAA,EAAAikB,GAEM7S,IAAA,SAAAd,GACD,IAACzF,EAAA+F,EAAcyT,OAAA/T,GAEb,IACA,IAAQgU,EAAM1T,EAAO6T,KAAC5Z,GAEpB,MAAM,CAAAyF,UAAYA,EAAWxE,MADpB2H,KAAAgB,MAAA6P,EAAAI,IAGf,MAAMvjB,GAET,OADEyP,EAAA+T,WAAA9Z,GACF,QAGMqX,OAAM,SAAQ3Z,GAAC,OAAS,MAAAA,KAE/B2b,EAACnZ,UAAAmI,OAAA,SAAA5C,GASO/P,KAAA6jB,cACN,IAAIL,EAAMxjB,KAAOwjB,MACf3d,EAAK2d,EAAQhc,QAAKuI,MACb,GAALlK,EAAK,CACN,IAAAyE,EAAAtK,KAAA8jB,OAAA/T,GACF/P,KAAAokB,WAAA9Z,GAEOkZ,EAAArgB,OAAA0C,EAAA,OAGL2E,UAAAiH,MAAA,WAAC,IAAApB,EAAYrQ,KACdA,KAACwjB,MAAAa,QAAA,SAAArc,GAAA,OAAAqI,EAAA+T,WAAA/T,EAAAyT,OAAA9b,MACFhI,KAAAwjB,MAAA,MAEDhZ,UAoBCqZ,YAAA,WAnBM7jB,KAAAwjB,QACHxjB,KAAMwjB,MAAOxjB,KAAKskB,cAClBtkB,KAAAyjB,cAAgB/e,KAACK,IAAGhF,MAAA2E,KAAA,CAAA,GAAA2Y,OAAArd,KAAAwjB,QAAA,MAGZhZ,UAAU4Z,WAAG,SAAA9Z,mBAEfA,iBAIFE,UAAK8Z,YAAgB,iBACrBtkB,gBAEMA,KAAAukB,cACF1T,IAAA,SAAKvG,GACd,IAAa,IAAGyF,EAAAM,EAAAmU,aAAAla,GACR,OAAGyF,IACXM,EAAA+T,WAAA9Z,GACF,MAGH,MAAsB1J,GAEJ,OADCyP,EAAA+T,WAAA9Z,GACI,QAEZqX,OAAC,SAAA5R,GAAA,OAAA,MAAAA,IACNkO,KAAO,SAASwG,EAAOvZ,GAAA,OAAAuZ,EAAAvZ,IAE1B,MAAAtK,GACM,MAAM,KAKqB+iB,EA3G3B,YA0H+DQ,EAAA7Z,EAAAiB,MAGtD,iBAATA,GAHP,oFAZc,OAAA,IAAA+F,KAAA/F,kBAKF,SAAYmZ,YAErBC,EAAAC,EAAA1N,EAAAqM,QAAY,IAAXrM,IAAWA,EAAA,2BACE,IAAbqM,IAAaA,EAAA,IACf,IAAClT,EAAAqU,EAAAziB,KAAAjC,KAAAujB,IAAAvjB,KASI,OARNqQ,EAAA6G,OAAAA,EAAA0N,EAAA,IAQMvU,WAZHsU,EAAYD,GAchBC,EAACE,YAAA,WAEM,IACL,IAAO7U,EAAO5Q,OAAA0lB,aACfC,EAAA,mBAGC,OADK/U,EAAAgV,QAAAD,EAAAA,GAAP/U,EAAAiV,WAGCF,IAFQ,EAER,MAAA7kB,GAEM,OAAA,IAIAykB,EAAAna,UAAAwZ,MAAM,SAAb1Z,EAAciB,GACZnM,OAAO0lB,aAAWE,QAAG1a,EAAUiB,IAG1BoZ,EAAAna,UAAA0Z,KAAA,SAAP5Z,GACE,OAAOlL,OAAA0lB,aAAoBI,QAAK5a,IAEpCqa,EAAAna,UAAC+Z,YAAA,WA7CmC,IAAAlU,EAAArQ,KAAvB,OAAAuK,OAAA0M,KAAA7X,OAAA0lB,cAiDbnD,OAAA,SAAArX,GAAA,OAAA,IAAAA,EAAA9C,QAAA6I,EAAA6G,WA+CAyN,EAACna,UAAAyZ,OAAA,SAAA3Z,GA9CQlL,OAAA0lB,aAAAG,WAAK3a,MAEFE,UAAoBsZ,OAAO,SAAe/T,UAEhD/P,KAAMkX,OAA0BnH,KAC3BvF,UAAWga,aAAA,SAAAla,mBACPA,EAAK6a,OAAMnlB,KAAEkX,OAAShU,QAAA,OAhDvB,GAOmBygB,oBAAAA,KA+C7BgB,eAAAA,QACiB,oBACfS,cAEW5a,UAAK0J,MAAA,SAAA7R,EAAAxB,YACdwkB,EAAYC,aAEV,GACA1T,EAAA,EAAS2T,GAFY,iBAARD,EAA0B,CAACA,GAAcA,IAAC,GAEnC1T,EAAA2T,EAAAriB,OAAA0O,IAAA,KACpB4T,EAAAD,EAAa3T,KACb5O,KAAQ,CAAArB,KAAM6jB,WAEjBpf,EAsBP,IAAAqf,EAAC,yBAAAC,EAAArjB,EAAA4L,YAAAwX,GA/CYpjB,EAAA4L,YAAAwX,GAmDbnmB,EAAAkC,kBAAAX,EAAA,IAAA,IAAA6kB,EA4BC,MAAA,IAAA/b,MAAA,+CA1BG,IAAIxI,EAAuB,iBAAT,EAA8BN,OAAExB,QAChD,CACDwO,KAAA6X,EAAA/jB,MAAA,QAEKR,QAAOukB,EAAiBvkB,SAAAN,EAAAM,SAAAA,EACxBkgB,YA9BN,SAACsE,OAEK,IAAAC,EAAA,cAEAC,EAAkC,GAC7BjU,EAAC,EAAAkU,EAAYH,EAAwB/T,EAACkU,EAAA5iB,OAAA0O,IAAA,CAC7C,IAAAmU,EAASD,EAAkBlU,GAE1BiU,EAAU7iB,KAAG,CACVrB,MAASokB,EAACjmB,MAAA8lB,GAAAxgB,QAAA,IAAAwgB,GACjBN,WAAAD,EAAAU,EAAApf,MAEYqf,UAAWD,EAAA3kB,IACjB6kB,YAAAF,EAAAlkB,MAAA,EACCC,OAAUikB,EAAKjkB,QAAW,IAGhC,OAAA+jB,EAa6CK,CAASR,EAAoBhlB,OAAS,QA5CpE,wBAiDT0kB,QACM,kCAGT5a,UAAA0Y,WAAA,SAAA7gB,kBAAWoB,SAAS8C,qDAIVA,qBAAoB,gBAC1B,EAAAD,EAAApD,WACJ,IAAA2C,EAAA,EAAAA,EAAAS,EAAApD,OAAA2C,IACFS,EAAAT,GAAAa,IACFuc,EAAAjgB,KAAA,CAEcmjB,UAAAtgB,EAChBlE,KAAA2E,EAAAT,GAAAa,IAAAtC,MAAA,KAAA,GACHyP,QAAC/F,EAAAmI,aAAA3P,EAAAT,GAAAa,OAIDJ,EAAAT,GAAAugB,WAAAnD,EAAAjgB,KAAA,CA+BCmjB,UAAAtgB,EA9BQlE,KAAA,aACQkS,QAAK/F,EAAasH,YAAY9O,EAAAT,GAAAugB,WAAApkB,aAM3C,OAAMihB,KA3BM,4BA+BSoD,QACI,oBAEvBC,KAoJN,SAjJyB9b,UAAS6Y,eAAmB,SAAShhB,GAC1D,IAACoB,WAAA8iB,YAAA3kB,SAEG,OAAO,KAEX,IAACwM,EAAA/L,EAAAoL,OAAAW,OAEGoH,EAASpH,EAAQsS,eACnB0C,EAAY,CACbE,WAAAiD,UAAA7R,UAED8R,UAAmB,WAAZ5kB,SAAY6kB,SACpBC,KAAA9kB,SAAA+kB,SACHC,KAAAhlB,SAAAglB,MAAC,KAADhlB,SAACglB,KAAAhS,SAAAhT,SAAAglB,KAAA,IAAA,GAAAhb,KAAAhK,SAAAilB,UAoBD,OAhBAzY,EAAA0Y,iBAIE1D,EAAA7N,QAAAzH,EAAYiZ,WAAiBtjB,SAA2BiS,OAAAF,IAClDpH,EAAM4Y,qBACN5D,EAAY6D,aAAInZ,EAAeoZ,iBAAkBtlB,SAAKulB,OAAAvhB,UAAA,GAAA4P,IAG9D/R,SAAA2jB,UAAC,KAAA3jB,SAAA2jB,WAAAhE,EAAAgE,SAAA3jB,SAAA2jB,UAODhE,GAgHCkD,EAtJoB,KAyCjBA,4BAAkCA,iBAEDpP,EAAAtE,QAEN,IAAvBA,IAA6BA,EAAA,KACjC5S,KAAIiQ,MAAA,IAAa0U,EAAkB,IAAAzN,EAAAtE,GACnC5S,KAAA8S,SAAA,IAAkB6R,EAAwC,WAAAzN,EAAA,6BAIrDmQ,QAEiB,kCAEP7c,UAAU+I,YAAA,SAAA3P,EAAAyK,EAAA+B,SAGnB,YACA,WACS,qBACR,KACF,WAEDkX,EAAO/kB,EAAQglB,GAkBf,IAAIC,EAAJ,IAGE,MACFrmB,EAAComB,EAAAE,WAACvjB,EAAWqjB,EAAYrjB,eAClBqjB,EAAAxT,cACH2T,GAAqB,IAAX3T,IACX,iCAAM,UAENxR,IAAAolB,GAAA5T,GAIL,GAAQA,EAAI,KAAsB,IAAbA,EAAe,CACrC,IAAA6T,EAAAL,EAAAK,aAED,GAAAA,GAAwCA,EAA6BzmB,QAC/DA,EAAkBymB,EAAIzmB,aAExB,GAAW+C,IAAwB,IAARA,EAAQsD,QAAA,WAEnC,IACIrG,EAAW+R,KAAQgB,MAAChQ,GAAA/C,QAEvB,MAAAjB,GACFiB,EAAA+C,SAfC6P,EAAC,SAAAnQ,EAAA4Q,OAAA,IAAA,OAkBDnG,EAAgB0F,GAAQ,IAAQ5S,GAAS,GAAK+C,EA7ChD,SAAC2jB,GASK,IAHN,IAJkBtc,EAIlByI,EAAkB,GAGZpC,EAAY,EAAWkW,GADPD,GAAsB,IAAAzjB,MAAA,QACSwN,EAAAkW,EAAA5kB,OAAA0O,IAAA,CACjD,IAAMmW,EAAsBD,EAAOlW,GAE/BoW,EAAgBD,EAAWvgB,QAAI,MAC3B,EAAHwgB,IACDhU,GAZUzI,EAYLwc,EAAAniB,UAAA,EAAAoiB,GAAAtR,cAXJnL,EAAAnG,QAAA,qCAAA,MAWI2iB,EAAAniB,UAAAoiB,EAAA,IAEX,OAAMhU,EA6BsDiU,CAAkBV,EAAeW,uBAACX,EAAAW,2BA8BlG,IA7BUxT,EAAAF,EAAA2T,EACNC,EA4BAhnB,EAASwC,EAAGxC,MAA4B,IAAtBwC,EAAAxC,IAAAoG,QAAS,KAAc,IAAA,KAAA,gBAAAmM,mBAAA/P,EAAA6Q,QACzC4T,GA9BM3T,EA8BI9Q,EAAM8Q,UA9BVF,EA8BkB5Q,EAAQ4Q,QAAO,OA9BjC2T,EA8BiC/mB,EA7BvCgnB,EAAa,IAAIvkB,eAClBykB,KAAAF,GAEGA,EAAWpkB,KAAEwQ,EAAA2T,GAAA,GACfC,EAAWG,iBAAgB,yBAAA7T,GAC5B,SAAAF,GAEM4T,EAAWG,iBAAA,eAAA,qBAIc,oBAAtBC,gBACJC,GAAG,GACTL,EAAgB,IAAII,gBACrBxkB,KAAAwQ,EAAA,UAAA5S,SAAA6kB,SAAA0B,EAAA/iB,QAAA,SAAA,SAAA+iB,IAKGC,EAAQ,KAERA,IAEAA,EAASM,QAAY,KAExBN,GAKD,IAAIC,EAEA,OAAAha,GAAgBA,EAAA,IAAA,uBAEnBia,KAAAD,IAAKA,EAAEM,mBAAA,WACiB,IAAfN,EAACO,YAGftB,EAAAK,EAAAU,KAIAA,EAAAQ,WAAA,aAAqCR,EAAAS,UAAA,WAAA,OAAmBxB,EAAAI,EAAAW,IAKtDA,EAAAtlB,QAAA,WAAY,OAAmBukB,EAAiB,QAAwBe,IAAxBA,EAAAU,OAAA,WAAA,OAAAzB,EAAsBK,EAAAU,IAAEI,EAAxE9lB,WACE,WAAA,OAAM0lB,EAASpkB,KAAAL,EAYhB0J,OAAA,KARE+a,EAAApkB,KAAAL,EAAA0J,OAID0b,EAnHoB,KAsHpBA,yBAAyBA,oBAGpB,SAAAC,EAAArE,EAAPsE,EAAahS,EAAaqM,EAAa4F,QAC7B,IAAJjS,IAAqBA,EAAS,YACnC,IAAAqM,IAAAA,EAAA,IAEM,IAAAlT,EAAAqU,EAAAziB,KAAAjC,KAAPujB,IAAuBvjB,KACrBkpB,IACDA,EAAArd,EAAAlG,KAAAkG,EAAAud,QAAA5d,EAAA6d,KAAAC,UAAA,mBAED,IAAAC,EAAA1d,EAIClG,KAAAujB,EAAAtE,GAEM,OALLvU,EAAMmZ,UAAS3d,EAAA4d,QAAgBF,KAC5BrS,OAAOA,IACPiS,GAAIA,GAACO,EACTrZ,EAAAsZ,MAAAtZ,EAAAmZ,WAEMnZ,SAhBPxF,EAACoe,EAAAvE,GAkBDuE,EAACze,UAAAwZ,MAAA,SAAA1Z,EAAAiB,GAEMvL,KAAAmpB,GAAAS,cAAAtf,EAAAiB,IAEP0d,EAACze,UAAA0Z,KAAA,SAAA5Z,GAEM,OAAAtK,KAAAmpB,GAAAU,aAAAvf,EAAA,WAEKE,UAAK+Z,YAAmB,WACnC,IAAAlU,EAAArQ,KAEO,OAAAA,KAAAmpB,GAAAW,YAAK9pB,KAAbwpB,WACQ7H,OAAO,SAAWoI,GAAQ,OAAE,IAAAA,EAAAviB,QAAA6I,EAAA6G,UAC9BrG,IAAI,SAAMkZ,GAAA,OAAAle,EAAAlG,KAAA0K,EAAAmZ,UAAAO,QAGHvf,UAAQyZ,OAAQ,SAAA3Z,QACzB6e,GAAIa,WAAW1f,MAEdE,UAAAsZ,OAAA,SAAA/T,UACElE,EAAElG,KAAQ3F,KAAAwpB,UAAe,GAAMxpB,KAAIkX,OAAAnH,EAAA,YAErCvF,UAAAga,aAAA,SAAAla,UACDsK,SAAW/I,EAAGoe,SAAS3f,EAAA,SACxB6a,OAAAnlB,KAAAkX,OAAAhU,QAAA,KAEL+lB,EAAAze,UAACmf,MAAA,SAAA/d,GAID,IAlEqC,IAAAse,EAAAte,EA8DpCxH,MAAAyH,EAAAse,KA9DYC,EAAA,GAkEb,EAAAF,EAAAhnB,QAAA,CAAA,IAAAmnB,EAAAH,EAAA/I,QAyDC,KAAAkJ,IAxDQD,EAAAve,EAAAse,KAEGnqB,KAAgBmpB,GAAGmB,WAAAF,EAAAC,IACnBrqB,KAAAmpB,GAAAoB,UAAgBH,EAAAC,MAEpBA,EAAUxe,EAAKse,8BAKdlB,QAEmB,oBACvBuB,cAGahgB,UAAA8X,mBAAA,SAAAjgB,OAgBZqJ,EACA,OAAM,SAdF+e,EACJC,IAee,iBACFhf,EAAAif,OAAQznB,6BACAwI,EAAAkf,qCACpBlf,EAAAmf,UACDC,aAAArf,QAAAsf,KAAAplB,KAAA,KAEIqlB,cAASvf,QAAcyU,OAAQ,IAAA9a,QAAA,mBAAA,IACjC6lB,WAAOxf,QAAAyf,IAAmB,GAC5BC,oBAAgB1f,QAAY2f,cAAcC,UAC3CC,aAAA5f,EAAA6f,OAEGC,SAAO9f,EAAAmC,OACT4d,YAAA/f,EAAgBggB,UACjBC,gBAAAlgB,QAAAoI,QAEIvG,KAAW,CACdse,QAAAlgB,EAAgBkgB,UACjBC,SAAAngB,EAAAmgB,WAEMC,OAAApgB,EAAAogB,SACRC,OAAArgB,EAAAqgB,WAxDU3d,EAAA/L,EAAAoL,OAAAW,cA6DbA,EAAA4d,qBAAA3J,EAAA4J,aAAAvgB,EAAAib,YACSvY,EAAA8d,mBACL7J,EAAA8J,YA3CM1B,EAAA,GACJC,EAAiBhf,EAAG0gB,oBACpB7hB,OAAA0M,KAAAyT,GAAuBrG,QAAG,SAAU1iB,GACpC+oB,EAAA/oB,GAAA0iB,QAA6B,SAAUgI,GAC3B,SAAUA,EAAKC,QAASD,EAAAE,UACxB9B,EAAGznB,KAAAqpB,EAAQG,aAKvB/B,EAAU9kB,KAAG,QAoCb+F,EAAG+gB,eAAanf,KAAAmf,WAAA/gB,EAAA+gB,mBArDM,kCA4DFjC,QAChB,kCAGChgB,UAAA0J,MAAA,SAAA7R,EAAAxB,GAqBX,IAAA6rB,EAEU,MAAA,IAAA/iB,MAAuB,2CAkEhC,IAAAgc,EAAA+G,EAAAxY,MAAArT,IAAA,GA/DQ,MAAA,CAAPgN,KAAAhN,EAsBCc,MAAA,QArBKR,QAACN,EAAaM,QAEdkgB,qBA5BDwE,GAGF,IADC,IAAAzf,EAAa,GACdwL,EAAA,EAAA+a,EAAA9G,EAAAjU,EAAA+a,EAAAzpB,OAAA0O,IAAA,CAEI,IAAAmU,EAAe4G,EAAE/a,GACpBxL,EAAUpD,KAAM,CACjBrB,KAAAokB,EAAA6G,iBAAA7G,EAAA8G,kBAEK7G,UAAcD,EAAA+G,cACb7G,YAAAF,EAAAgH,iBAAA,EACCjrB,OAAUikB,EAAIiH,mBAAW,EACxBC,eAAYlH,EAAOmH,cAC1B5f,KAAa,CACb6f,UAAApH,EAAAxe,cAAAwe,EAAAuD,UAAA,MAAAvD,EAAAuD,SAAA,IAAA,MAAAvD,EAAAuD,SAAA,MA/BO,OAAAljB,EA6CQ8f,CAAGP,KAIpByH,EApCM,KAuCNA,gBAAmBA,QACA,oBAEnBC,SACEC,aAAa,OACbC,iBAAoB,YAEnB/iB,UAAA0Y,WAAA,SAAA7gB,GAEH,IAAAgO,EAAOrQ,aACJwtB,cACAhiB,EAAO6d,KACX,MAAA,GAED,IACMoE,GAqCL7hB,EAAAwd,QAAA5d,EAAA6d,KAAAC,UAAA,kBArCwBpmB,OACrBwqB,EAAOnjB,OAAA0M,KAAAzL,EAAAgM,OACRmW,EAAA,GAUD,OARAD,EAAKrJ,QAAc,SAAK/Z,GAElB,IAAAmV,EAASnV,EAAA6a,OAAMsI,GAEjBhO,EAACA,EAAO0F,OAAE,EAAA1F,EAAAjY,QAAA,MACZmmB,EAAOlO,IAAA,IAGLlV,OAAK0M,KAAA0W,GACJ9c,IAAA,SAAAvG,GAAA,OAAA+F,EAAAkd,iBAAAjjB,KACHqX,OAAO,SAAWtd,GAAA,YAAkBhF,IAAXgF,OACdmG,UAAAgjB,WAAA,eACXnd,EAAOrQ,KACT,IAACA,KAAAstB,YAAD,MAIEA,aAAO,EACT,IAACM,EAAAjiB,EAAAkiB,UAAA,MAAA,CAAA,KAAA,YAAA,WAAAC,OAED,GAAIF,EAAJ,KAIE7J,QAEE7Q,KAAAgB,MAAa0Z,EAAE5rB,4BAMnB,IAAGwhB,EAAAO,EAAAgK,aACJ,GAAAvK,EAAA,CAnEU,IAAA/D,EAAA,EAwEbzf,KAAAutB,iBAAA,GAAAhjB,OAAA0M,KAAAuM,GAAAa,QAAA,SAAA/Z,GA4CC,IAAAtC,EAAAwb,EAAAlZ,GA3CQ0jB,EAAA,CACC7H,UAAsB1G,IACvB9d,KAAQ2I,EACXuJ,QAAY7L,EAAA6L,SAGRxD,EAAMkd,iBAAiBjjB,GAAO0jB,QAKpCX,EApEmB,yBAsECA,SACE,oBACpBY,KA2GN,SAzGMzjB,UAAA6Y,eAAA,SAAAhhB,GAEF,IAAM8gB,EAAc,WACpB,IAAM9gB,EAAe4L,YAAQkV,GACzB,OAAO,KAEX,IAAC/U,EAAA/L,EAAAoL,OAAAW,OAEGoH,EAAOpH,EAAAsS,eACT9c,EAAAvB,EAAY4L,YAAiBkV,GAC9BC,EAAA,CAEGE,WAAO1f,EAAAoQ,QAAiB,cAC1BwS,UAAW5iB,EAAQsqB,OACpBC,YAAAvqB,EAAA4Q,OAEGkS,KAAM9iB,EAAC+iB,UAAmB/iB,EAAE8iB,KAC9B9a,KAAAhI,EAAYgI,MAGV8a,EAAO9iB,EAAAoQ,QAAgB0S,KACzBE,EAAAF,GAAY9R,SAAY8R,EAAKjnB,MAAMinB,EAAKlf,QAAC,KAAU,GAAQ,IAqBjE,OApBK,EAAAof,IAEDxD,EAAOwD,KAAYA,GAEvBxY,EAAA8d,mBAAC9I,EAAAgL,kBAAAxqB,EAAAyqB,IAIDjgB,EAAA0Y,iBAIE1D,EAAA7N,QAAAzH,EAAYiZ,WAAgCnjB,EAAEoQ,QAA2B0B,OAAAF,IACnEpH,EAAM4Y,qBACN5D,EAAY6D,aAAI/T,KAAgBgB,MAAApG,EAAYqF,UAAQvP,EAAU0qB,QAAC,GAAA9Y,KAEvEpH,EAAAmgB,kBAACnL,EAAAoL,UAAAtb,KAAAgB,MAAApG,EAAAqF,UAAAvP,EAAA0B,MAAA,GAAAkQ,KAID4N,GA+DC6K,EA5GkB,KA8CjBA,yBAoCCA,mBAlCwB/E,EAAShS,EAAUtE,QACjC,IAAPA,IAAOA,EAAA,KACT5S,KAACiQ,MAAA,IAAAgZ,EAAA,IAAAC,EAAAhS,EAAAtE,GAED5S,KAAM8S,SAAU,IAAMmW,EAAe,WAAKC,EAAAhS,EAAA,8BAKnBuX,UACL,oBAChBC,cAEAlkB,UAAA+I,YAAA,SAAA3P,EAAAyK,EAAA+B,GAEF,IAAAC,EAAQrQ,KAER,GAAIoQ,EACFpQ,KAAA2uB,gBAAkB/qB,EAAAyK,OADpB,OAIIjN,EAAA8S,MAAAtQ,EAAAxC,KACHwtB,EAAA,CAEKC,KAAA,UAAiBjrB,EAAW6Q,OAC5BT,QAAA,GACJ2S,SAAQmI,EAAMnI,SACdnS,OAAQ5Q,EAAC4Q,OACToS,KAAAkI,EAAYlI,MAAQhS,SAACka,EAAUlI,KAAI,IACnChb,KAAAhI,EAAYxC,KAGdwtB,EAAA5a,QAAgB,cAAUpQ,EAAC8Q,UACT,SAAlB9Q,EAAA4Q,SACDoa,EAAA5a,QAAA,CAEO+a,eAAA,mBACFC,iBAAgBC,OAAAC,WAAAtrB,EAAA0J,QAGpB,IAAM6hB,GAAL,WAAAL,EAAArI,SAAA2I,EAAAtjB,GAA6BlI,QAAMgrB,EAAY,SAAC9d,GAC/C,IAAAxL,EAAU,GACXwL,EAAAue,YAAA,QAEDve,EAAYwe,GAAA,OAAS,SAASC,GAAU,OAASjqB,GAASiqB,IAC3Dze,EAAAwe,GAAA,MAAA,WAAA,OAAAjf,EAAAiX,SAAAxW,EAAAxL,EAAAwL,EAAAkD,QAAA3F,OAGC8gB,EAAMG,GAAW,QAAQ,SAAU1uB,GAAS,OAAAyN,GAAAA,EAAA,IAAAzN,EAAAO,WAC5CguB,EAAYnqB,IAAMpB,EAAU0J,UAGV9C,UAAU8c,SAAQ,SAAOxW,EAAA8W,EAAA4H,EAAAnhB,OACtClN,EAEkB,IAAjB2P,EAAS2H,WACTtX,EAAS,gCAGhB2P,EAAA2H,WAAA,KAAA,IAAA3H,EAAA2H,cACHtX,EAAA2P,EAAA2e,eAAC3e,EAAA3P,SA/DYkN,GAAAA,EAAAyC,EAAA2H,YAAA,IAAqBtX,EAAAymB,EAAA4H,IAoEhCd,EAAAlkB,UAAAmkB,gBAAA,SAAA/qB,EAAAyK,GACE,IAAIqhB,EAAcxc,KAAAC,UAASvP,GAOzB+rB,EANMhkB,EAAMkiB,UAAApiB,QAAAmkB,SAAA,CAAApkB,EAAAie,QAAA,oBAAA,CACbnhB,MAAAonB,EAEKG,MAAO,CAAA,OAAG,OAASpkB,QAAAqkB,UAGnBhC,OAAa9rB,aACfkR,KAAOgB,MAAMyb,MACdthB,EAAAjI,EAAA2N,OAAA3N,EAAAjF,QAAAiF,EAAAkH,KAAAlH,EAAA4N,UAEH0a,EAnEkB,YAsEpBA,sBAAAA,iBAuCmB,oBAAfjrB,YAIA+G,UAASyU,gBAAqB,WAC/B0F,EAAAE,gBAEG7kB,KAAAgQ,QAAe,IAACqX,EAClBxS,EAASgD,yBAA4B7X,MACtCA,KAAAgY,YAIH,IAAA6E,EAASjE,EAAkBiE,SAC3B/J,aAlDE,IAAArP,WAAiBA,SAAA8C,qBAClB,OAAA,KAIA,IADC,IAAAD,EAAO7C,SAAA8C,qBAAA,UACRV,EAAA,EAAAA,EAAAS,EAAApD,OAAA2C,IAmBD,GAAAS,EAAcT,GAAUa,MAAkB,EAAlBJ,EAAkBT,GAAAa,IAAAc,QAAA,kBACpC,OAAAsG,EAAeoZ,iBAAgB5gB,EAAAT,GAAAa,IAAAtC,MAAA,KAAA2rB,cAGjC,KAsBKC,GACTld,IAEQA,EAAQ2B,SACRoI,EAACpI,OAAA3B,EAAA2B,QAWN3B,EAAApC,YAOJmM,EAAAnM,UAAAoC,EAAApC,WAEU,iBAAAoC,EAAAgK,4BACRD,EAAAC,0BAAA,UAAAhK,EAAAgK,4BAIDD,EAASG,YAAc,IAAIoI,EAC3BvI,EAASI,gBAAkB,IAAIoJ,EAC/BxJ,EAASK,qBAAuB,IAAIoJ,EACpCzJ,EAASvJ,kBAAoB,IAAI0V,EAEjC1pB,EAAAa,OAAc0C,UAtDd,SAAE6iB,EAAAkJ,GAEI,IAAApV,EAAWd,EAAuBuX,QAAA3W,yBAAA,IAAA3P,MAAA+b,EAAAvkB,UAAAytB,GAAA,IAAA7a,QAAA,gBAAA,WAClCyF,EAAQR,kBAAG,0BAAmC0M,EAChDlM,EAAQH,aAmDLzP,sCACLsmB,gBAAgBC,EAAAA,iBAIlB,GAAoB,oBAAZ1kB,QAAR,CAIA,IAAAoR,EAAWjE,EAASiE,WAMlBE,yBAA2B,IAAgByN,IACzCxN,YAAY,IAAOoQ,oBACV,IAAAC,IACRnQ,qBAAA,IAAA+Q,KAED3a,kBAAqB,IAAAob,KACnBlkB,UAAOyU,gBAAA,gBACRjP,QAAA,IAAAye,KAEW5W,yBAAS7X,8BAIrBowB,YAAY,oBAAS,SAAAxvB,KACZqvB,QAAAtW,yBAAkB/Y,EAAA,+BAG3B0uB,GAAG,OAAC,SAAiB9oB,OACZ6pB,gBACR,KADQA,KAGL,2BAEH,IAAAA,EAEG,kCAEH,IAAAA,EAEG,yCAEH,IAAAA,EAEG,kBAEH,IAAAA,EAEG,2CAEH,IAAAA,EAEU,8CAGE,IAATA,EACU,qBAGG,IAAjBA,EACD,mBAIA,KAAAA,EAEY","file":"exceptionless.universal.min.js","sourcesContent":["/**\n * https://github.com/csnover/TraceKit\n * @license MIT\n * @namespace TraceKit\n */\n(function(window, undefined) {\nif (!window) {\n    return;\n}\n\nvar TraceKit = {};\nvar _oldTraceKit = window.TraceKit;\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\nvar ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/;\n\n/**\n * A better form of hasOwnProperty<br/>\n * Example: `_has(MainHostObject, property) === true/false`\n *\n * @param {Object} object to check property\n * @param {string} key to check\n * @return {Boolean} true if the object has the key and it is not inherited\n */\nfunction _has(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\n\n/**\n * Returns true if the parameter is undefined<br/>\n * Example: `_isUndefined(val) === true/false`\n *\n * @param {*} what Value to check\n * @return {Boolean} true if undefined and false otherwise\n */\nfunction _isUndefined(what) {\n    return typeof what === 'undefined';\n}\n\n/**\n * Export TraceKit out to another variable<br/>\n * Example: `var TK = TraceKit.noConflict()`\n * @return {Object} The TraceKit object\n * @memberof TraceKit\n */\nTraceKit.noConflict = function noConflict() {\n    window.TraceKit = _oldTraceKit;\n    return TraceKit;\n};\n\n/**\n * Wrap any function in a TraceKit reporter<br/>\n * Example: `func = TraceKit.wrap(func);`\n *\n * @param {Function} func Function to be wrapped\n * @return {Function} The wrapped func\n * @memberof TraceKit\n */\nTraceKit.wrap = function traceKitWrapper(func) {\n    function wrapped() {\n        try {\n            return func.apply(this, arguments);\n        } catch (e) {\n            TraceKit.report(e);\n            throw e;\n        }\n    }\n    return wrapped;\n};\n\n/**\n * Cross-browser processing of unhandled exceptions\n *\n * Syntax:\n * ```js\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n * ```\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *     on top frame; column number is not guaranteed\n *   - Opera: full stack trace with line and column numbers\n *   - Chrome: full stack trace with line and column numbers\n *   - Safari: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *   - IE: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a TraceKit.StackTrace object as described in the\n * TraceKit.computeStackTrace docs.\n *\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.report = (function reportModuleWrapper() {\n    var handlers = [],\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n\n        if (handlers.length === 0) {\n            window.onerror = _oldOnerrorHandler;\n            _onErrorHandlerInstalled = false;\n        }\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {TraceKit.StackTrace} stack\n     * @param {boolean} isWindowError Is this a top-level window error?\n     * @param {Error=} error The error that's being handled (if available, null otherwise)\n     * @memberof TraceKit.report\n     * @throws An exception if an error occurs while calling an handler.\n     */\n    function notifyHandlers(stack, isWindowError, error) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n          return;\n        }\n        for (var i in handlers) {\n            if (_has(handlers, i)) {\n                try {\n                    handlers[i](stack, isWindowError, error);\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error occurred.\n     * @param {(number|string)=} columnNo The column number at which the error occurred.\n     * @param {Error=} errorObj The actual Error object.\n     * @memberof TraceKit.report\n     */\n    function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {\n        var stack = null;\n\n        if (lastExceptionStack) {\n            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n    \t    processLastException();\n        } else if (errorObj) {\n            stack = TraceKit.computeStackTrace(errorObj);\n            notifyHandlers(stack, true, errorObj);\n        } else {\n            var location = {\n              'url': url,\n              'line': lineNo,\n              'column': columnNo\n            };\n\n            var name;\n            var msg = message; // must be new var or will modify original `arguments`\n            if ({}.toString.call(message) === '[object String]') {\n                var groups = message.match(ERROR_TYPES_RE);\n                if (groups) {\n                    name = groups[1];\n                    msg = groups[2];\n                }\n            }\n\n            location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);\n            location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);\n            stack = {\n                'name': name,\n                'message': msg,\n                'mode': 'onerror',\n                'stack': [location]\n            };\n\n            notifyHandlers(stack, true, null);\n        }\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    /**\n     * Install a global onerror handler\n     * @memberof TraceKit.report\n     */\n    function installGlobalHandler() {\n        if (_onErrorHandlerInstalled === true) {\n            return;\n        }\n\n        _oldOnerrorHandler = window.onerror;\n        window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    /**\n     * Process the most recent exception\n     * @memberof TraceKit.report\n     */\n    function processLastException() {\n        var _lastExceptionStack = lastExceptionStack,\n            _lastException = lastException;\n        lastExceptionStack = null;\n        lastException = null;\n        notifyHandlers(_lastExceptionStack, false, _lastException);\n    }\n\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     * @memberof TraceKit.report\n     * @throws An exception if an incomplete stack trace is detected (old IE browsers).\n     */\n    function report(ex) {\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n              processLastException();\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        setTimeout(function () {\n            if (lastException === ex) {\n                processLastException();\n            }\n        }, (stack.incomplete ? 2000 : 0));\n\n        throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    return report;\n}());\n\n/**\n * An object representing a single stack frame.\n * @typedef {Object} StackFrame\n * @property {string} url The JavaScript or HTML file URL.\n * @property {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * @property {string[]?} args The arguments passed to the function, if known.\n * @property {number=} line The line number, if known.\n * @property {number=} column The column number, if known.\n * @property {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n * @memberof TraceKit\n */\n\n/**\n * An object representing a JavaScript stack trace.\n * @typedef {Object} StackTrace\n * @property {string} name The name of the thrown exception.\n * @property {string} message The exception error message.\n * @property {TraceKit.StackFrame[]} stack An array of stack frames.\n * @property {string} mode 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace.\n * @memberof TraceKit\n */\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   ```js\n *   s = TraceKit.computeStackTrace.ofCaller([depth])\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n *   ```\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n * Tracing example:\n *  ```js\n *     function trace(message) {\n *         var stackInfo = TraceKit.computeStackTrace.ofCaller();\n *         var data = message + \"\\n\";\n *         for(var i in stackInfo.stack) {\n *             var item = stackInfo.stack[i];\n *             data += (item.func || '[anonymous]') + \"() in \" + item.url + \":\" + (item.line || '0') + \"\\n\";\n *         }\n *         if (window.console)\n *             console.info(data);\n *         else\n *             alert(data);\n *     }\n * ```\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n    var debug = false,\n        sourceCache = {};\n\n    /**\n     * Attempts to retrieve source code via XMLHttpRequest, which is used\n     * to look up anonymous function names.\n     * @param {string} url URL of source code.\n     * @return {string} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function loadSource(url) {\n        if (!TraceKit.remoteFetching) { //Only attempt request if remoteFetching is on.\n            return '';\n        }\n        try {\n            var getXHR = function() {\n                try {\n                    return new window.XMLHttpRequest();\n                } catch (e) {\n                    // explicitly bubble up the exception if not found\n                    return new window.ActiveXObject('Microsoft.XMLHTTP');\n                }\n            };\n\n            var request = getXHR();\n            request.open('GET', url, false);\n            request.send('');\n            return request.responseText;\n        } catch (e) {\n            return '';\n        }\n    }\n\n    /**\n     * Retrieves source code from the source code cache.\n     * @param {string} url URL of source code.\n     * @return {Array.<string>} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function getSource(url) {\n        if (typeof url !== 'string') {\n            return [];\n        }\n\n        if (!_has(sourceCache, url)) {\n            // URL needs to be able to fetched within the acceptable domain.  Otherwise,\n            // cross-domain errors will be triggered.\n            /*\n                Regex matches:\n                0 - Full Url\n                1 - Protocol\n                2 - Domain\n                3 - Port (Useful for internal applications)\n                4 - Path\n            */\n            var source = '';\n            var domain = '';\n            try { domain = window.document.domain; } catch (e) { }\n            var match = /(.*)\\:\\/\\/([^:\\/]+)([:\\d]*)\\/{0,1}([\\s\\S]*)/.exec(url);\n            if (match && match[2] === domain) {\n                source = loadSource(url);\n            }\n            sourceCache[url] = source ? source.split('\\n') : [];\n        }\n\n        return sourceCache[url];\n    }\n\n    /**\n     * Tries to use an externally loaded copy of source code to determine\n     * the name of a function by looking at the name of the variable it was\n     * assigned to, if any.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} lineNo Line number in source code.\n     * @return {string} The function name, if discoverable.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function guessFunctionName(url, lineNo) {\n        var reFunctionArgNames = /function ([^(]*)\\(([^)]*)\\)/,\n            reGuessFunction = /['\"]?([0-9A-Za-z$_]+)['\"]?\\s*[:=]\\s*(function|eval|new Function)/,\n            line = '',\n            maxLines = 10,\n            source = getSource(url),\n            m;\n\n        if (!source.length) {\n            return UNKNOWN_FUNCTION;\n        }\n\n        // Walk backwards from the first line in the function until we find the line which\n        // matches the pattern above, which is the function definition\n        for (var i = 0; i < maxLines; ++i) {\n            line = source[lineNo - i] + line;\n\n            if (!_isUndefined(line)) {\n                if ((m = reGuessFunction.exec(line))) {\n                    return m[1];\n                } else if ((m = reFunctionArgNames.exec(line))) {\n                    return m[1];\n                }\n            }\n        }\n\n        return UNKNOWN_FUNCTION;\n    }\n\n    /**\n     * Retrieves the surrounding lines from where an exception occurred.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} line Line number in source code to center around for context.\n     * @return {?Array.<string>} Lines of source code.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function gatherContext(url, line) {\n        var source = getSource(url);\n\n        if (!source.length) {\n            return null;\n        }\n\n        var context = [],\n            // linesBefore & linesAfter are inclusive with the offending line.\n            // if linesOfContext is even, there will be one extra line\n            //   *before* the offending line.\n            linesBefore = Math.floor(TraceKit.linesOfContext / 2),\n            // Add one extra line if linesOfContext is odd\n            linesAfter = linesBefore + (TraceKit.linesOfContext % 2),\n            start = Math.max(0, line - linesBefore - 1),\n            end = Math.min(source.length, line + linesAfter - 1);\n\n        line -= 1; // convert to 0-based index\n\n        for (var i = start; i < end; ++i) {\n            if (!_isUndefined(source[i])) {\n                context.push(source[i]);\n            }\n        }\n\n        return context.length > 0 ? context : null;\n    }\n\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    /**\n     * Determines where a code fragment occurs in the source code.\n     * @param {RegExp} re The function definition.\n     * @param {Array.<string>} urls A list of URLs to search.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInUrls(re, urls) {\n        var source, m;\n        for (var i = 0, j = urls.length; i < j; ++i) {\n            if ((source = getSource(urls[i])).length) {\n                source = source.join('\\n');\n                if ((m = re.exec(source))) {\n\n                    return {\n                        'url': urls[i],\n                        'line': source.substring(0, m.index).split('\\n').length,\n                        'column': m.index - source.lastIndexOf('\\n', m.index) - 1\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines at which column a code fragment occurs on a line of the\n     * source code.\n     * @param {string} fragment The code fragment.\n     * @param {string} url The URL to search.\n     * @param {(string|number)} line The line number to examine.\n     * @return {?number} The column number.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInLine(fragment, url, line) {\n        var source = getSource(url),\n            re = new RegExp('\\\\b' + escapeRegExp(fragment) + '\\\\b'),\n            m;\n\n        line -= 1;\n\n        if (source && source.length > line && (m = re.exec(source[line]))) {\n            return m.index;\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines where a function was defined within the source code.\n     * @param {(Function|string)} func A function reference or serialized\n     * function definition.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceByFunctionBody(func) {\n        if (_isUndefined(window && window.document)) {\n            return;\n        }\n\n        var urls = [window.location.href],\n            scripts = window.document.getElementsByTagName('script'),\n            body,\n            code = '' + func,\n            codeRE = /^function(?:\\s+([\\w$]+))?\\s*\\(([\\w\\s,]*)\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            eventRE = /^function on([\\w$]+)\\s*\\(event\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            re,\n            parts,\n            result;\n\n        for (var i = 0; i < scripts.length; ++i) {\n            var script = scripts[i];\n            if (script.src) {\n                urls.push(script.src);\n            }\n        }\n\n        if (!(parts = codeRE.exec(code))) {\n            re = new RegExp(escapeRegExp(code).replace(/\\s+/g, '\\\\s+'));\n        }\n\n        // not sure if this is really necessary, but I don’t have a test\n        // corpus large enough to confirm that and it was in the original.\n        else {\n            var name = parts[1] ? '\\\\s+' + parts[1] : '',\n                args = parts[2].split(',').join('\\\\s*,\\\\s*');\n\n            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\\s+/g, '\\\\s+');\n            re = new RegExp('function' + name + '\\\\s*\\\\(\\\\s*' + args + '\\\\s*\\\\)\\\\s*{\\\\s*' + body + '\\\\s*}');\n        }\n\n        // look for a normal function definition\n        if ((result = findSourceInUrls(re, urls))) {\n            return result;\n        }\n\n        // look for an old-school event handler function\n        if ((parts = eventRE.exec(code))) {\n            var event = parts[1];\n            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);\n\n            // look for a function defined in HTML as an onXXX handler\n            re = new RegExp('on' + event + '=[\\\\\\'\"]\\\\s*' + body + '\\\\s*[\\\\\\'\"]', 'i');\n\n            if ((result = findSourceInUrls(re, urls[0]))) {\n                return result;\n            }\n\n            // look for ???\n            re = new RegExp(body);\n\n            if ((result = findSourceInUrls(re, urls))) {\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (!ex.stack) {\n            return null;\n        }\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\\[native).*?|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n\n            // Used to additionally parse URL/line/column from eval frames\n            isEval,\n            geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i,\n            chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/,\n\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            submatch,\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if ((parts = chrome.exec(lines[i]))) {\n                var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n                isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n                if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n                    // throw out eval line/column and use top-most line/column number\n                    parts[2] = submatch[1]; // url\n                    parts[3] = submatch[2]; // line\n                    parts[4] = submatch[3]; // column\n                }\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ( parts = winjs.exec(lines[i]) ) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = gecko.exec(lines[i]))) {\n                isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n                if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n                    // throw out eval line/column and use top-most line number\n                    parts[3] = submatch[1];\n                    parts[4] = submatch[2];\n                    parts[5] = null; // no column when eval\n                } else if (i === 0 && !parts[5] && !_isUndefined(ex.columnNumber)) {\n                    // FireFox uses this awesome columnNumber property for its top frame\n                    // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n                    // so adding 1\n                    // NOTE: this hack doesn't work if top-most frame is eval\n                    stack[0].column = ex.columnNumber + 1;\n                }\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = guessFunctionName(element.url, element.line);\n            }\n\n            element.context = element.line ? gatherContext(element.url, element.line) : null;\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        if (stack[0] && stack[0].line && !stack[0].column && reference) {\n            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);\n        }\n\n        return {\n            'mode': 'stack',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * Computes stack trace information from the stacktrace property.\n     * Opera 10+ uses this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStacktraceProp(ex) {\n        // Access and store the stacktrace property before doing ANYTHING\n        // else to it because Opera is not very good at providing it\n        // reliably in other circumstances.\n        var stacktrace = ex.stacktrace;\n        if (!stacktrace) {\n            return;\n        }\n\n        var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i,\n            opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i,\n            lines = stacktrace.split('\\n'),\n            stack = [],\n            parts;\n\n        for (var line = 0; line < lines.length; line += 2) {\n            var element = null;\n            if ((parts = opera10Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[2],\n                    'line': +parts[1],\n                    'column': null,\n                    'func': parts[3],\n                    'args':[]\n                };\n            } else if ((parts = opera11Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[6],\n                    'line': +parts[1],\n                    'column': +parts[2],\n                    'func': parts[3] || parts[4],\n                    'args': parts[5] ? parts[5].split(',') : []\n                };\n            }\n\n            if (element) {\n                if (!element.func && element.line) {\n                    element.func = guessFunctionName(element.url, element.line);\n                }\n                if (element.line) {\n                    try {\n                        element.context = gatherContext(element.url, element.line);\n                    } catch (exc) {}\n                }\n\n                if (!element.context) {\n                    element.context = [lines[line + 1]];\n                }\n\n                stack.push(element);\n            }\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        return {\n            'mode': 'stacktrace',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * NOT TESTED.\n     * Computes stack trace information from an error message that includes\n     * the stack trace.\n     * Opera 9 and earlier use this method if the option to show stack\n     * traces is turned on in opera:config.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromOperaMultiLineMessage(ex) {\n        // TODO: Clean this function up\n        // Opera includes a stack trace into the exception message. An example is:\n        //\n        // Statement on line 3: Undefined variable: undefinedFunc\n        // Backtrace:\n        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz\n        //         undefinedFunc(a);\n        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy\n        //           zzz(x, y, z);\n        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx\n        //           yyy(a, a, a);\n        //   Line 1 of function script\n        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }\n        //   ...\n\n        var lines = ex.message.split('\\n');\n        if (lines.length < 4) {\n            return null;\n        }\n\n        var lineRE1 = /^\\s*Line (\\d+) of linked script ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE2 = /^\\s*Line (\\d+) of inline#(\\d+) script in ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE3 = /^\\s*Line (\\d+) of function script\\s*$/i,\n            stack = [],\n            scripts = (window && window.document && window.document.getElementsByTagName('script')),\n            inlineScriptBlocks = [],\n            parts;\n\n        for (var s in scripts) {\n            if (_has(scripts, s) && !scripts[s].src) {\n                inlineScriptBlocks.push(scripts[s]);\n            }\n        }\n\n        for (var line = 2; line < lines.length; line += 2) {\n            var item = null;\n            if ((parts = lineRE1.exec(lines[line]))) {\n                item = {\n                    'url': parts[2],\n                    'func': parts[3],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null\n                };\n            } else if ((parts = lineRE2.exec(lines[line]))) {\n                item = {\n                    'url': parts[3],\n                    'func': parts[4],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.\n                };\n                var relativeLine = (+parts[1]); // relative to the start of the <SCRIPT> block\n                var script = inlineScriptBlocks[parts[2] - 1];\n                if (script) {\n                    var source = getSource(item.url);\n                    if (source) {\n                        source = source.join('\\n');\n                        var pos = source.indexOf(script.innerText);\n                        if (pos >= 0) {\n                            item.line = relativeLine + source.substring(0, pos).split('\\n').length;\n                        }\n                    }\n                }\n            } else if ((parts = lineRE3.exec(lines[line]))) {\n                var url = window.location.href.replace(/#.*$/, '');\n                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));\n                var src = findSourceInUrls(re, [url]);\n                item = {\n                    'url': url,\n                    'func': '',\n                    'args': [],\n                    'line': src ? src.line : parts[1],\n                    'column': null\n                };\n            }\n\n            if (item) {\n                if (!item.func) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n                var context = gatherContext(item.url, item.line);\n                var midline = (context ? context[Math.floor(context.length / 2)] : null);\n                if (context && midline.replace(/^\\s*/, '') === lines[line + 1].replace(/^\\s*/, '')) {\n                    item.context = context;\n                } else {\n                    // if (context) alert(\"Context mismatch. Correct midline:\\n\" + lines[i+1] + \"\\n\\nMidline:\\n\" + midline + \"\\n\\nContext:\\n\" + context.join(\"\\n\") + \"\\n\\nURL:\\n\" + item.url);\n                    item.context = [lines[line + 1]];\n                }\n                stack.push(item);\n            }\n        }\n        if (!stack.length) {\n            return null; // could not parse multiline exception message as Opera stack trace\n        }\n\n        return {\n            'mode': 'multiline',\n            'name': ex.name,\n            'message': lines[0],\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {TraceKit.StackTrace} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = guessFunctionName(initial.url, initial.line);\n            }\n\n            if (!initial.context) {\n                initial.context = gatherContext(initial.url, initial.line);\n            }\n\n            var reference = / '([^']+)' /.exec(message);\n            if (reference) {\n                initial.column = findSourceInLine(reference[1], initial.url, initial.line);\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        stackInfo.stack[0].context = initial.context;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {TraceKit.StackTrace=} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'args': [],\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if ((parts = functionName.exec(curr.toString()))) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n              try {\n                item.func = parts.input.substring(0, parts.input.indexOf('{'));\n              } catch (e) { }\n            }\n\n            if ((source = findSourceByFunctionBody(curr))) {\n                item.url = source.url;\n                item.line = source.line;\n\n                if (item.func === UNKNOWN_FUNCTION) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n\n                var reference = / '([^']+)' /.exec(ex.message || ex.description);\n                if (reference) {\n                    item.column = findSourceInLine(reference[1], source.url, source.line);\n                }\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            }else{\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'mode': 'callers',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = (depth == null ? 0 : +depth);\n\n        try {\n            // This must be tried first because Opera 10 *destroys*\n            // its stacktrace property if you try to access the stack\n            // property first!!\n            stack = computeStackTraceFromStacktraceProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromOperaMultiLineMessage(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        return {\n            'name': ex.name,\n            'message': ex.message,\n            'mode': 'failed'\n        };\n    }\n\n    /**\n     * Logs a stacktrace starting from the previous call and working down.\n     * @param {(number|string)=} depth How many frames deep to trace.\n     * @return {TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceOfCaller(depth) {\n        depth = (depth == null ? 0 : +depth) + 1; // \"+ 1\" because \"ofCaller\" should drop one frame\n        try {\n            throw new Error();\n        } catch (ex) {\n            return computeStackTrace(ex, depth + 1);\n        }\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.computeStackTraceFromStackProp = computeStackTraceFromStackProp;\n    computeStackTrace.guessFunctionName = guessFunctionName;\n    computeStackTrace.gatherContext = gatherContext;\n    computeStackTrace.ofCaller = computeStackTraceOfCaller;\n    computeStackTrace.getSource = getSource;\n\n    return computeStackTrace;\n}());\n\n/**\n * Extends support for global error handling for asynchronous browser\n * functions. Adopted from Closure Library's errorhandler.js\n * @memberof TraceKit\n */\nTraceKit.extendToAsynchronousCallbacks = function () {\n    var _helper = function _helper(fnName) {\n        var originalFn = window[fnName];\n        window[fnName] = function traceKitAsyncExtension() {\n            // Make a copy of the arguments\n            var args = _slice.call(arguments);\n            var originalCallback = args[0];\n            if (typeof (originalCallback) === 'function') {\n                args[0] = TraceKit.wrap(originalCallback);\n            }\n            // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n            // also only supports 2 argument and doesn't care what \"this\" is, so we\n            // can just call the original function directly.\n            if (originalFn.apply) {\n                return originalFn.apply(this, args);\n            } else {\n                return originalFn(args[0], args[1]);\n            }\n        };\n    };\n\n    _helper('setTimeout');\n    _helper('setInterval');\n};\n\n//Default options:\nif (!TraceKit.remoteFetching) {\n    TraceKit.remoteFetching = true;\n}\nif (!TraceKit.collectWindowErrors) {\n    TraceKit.collectWindowErrors = true;\n}\nif (!TraceKit.linesOfContext || TraceKit.linesOfContext < 1) {\n    // 5 lines before, the offending line, 5 lines after\n    TraceKit.linesOfContext = 11;\n}\n\n// UMD export\nif (typeof define === 'function' && define.amd) {\n    define('TraceKit', [], TraceKit);\n} else if (typeof module !== 'undefined' && module.exports && window.module !== module) {\n    module.exports = TraceKit;\n} else {\n    window.TraceKit = TraceKit;\n}\n\n}(typeof window !== 'undefined' ? window : global));\n","import * as TraceKit from 'TraceKit';\nimport os = require('os');\nimport nodestacktrace = require('stack-trace');\nimport child = require('child_process');\nimport path = require('path');\nimport * as Fs from 'fs';\nimport * as Path from 'path';\nimport http = require('http');\nimport https = require('https');\nimport url = require('url');\nexport interface ILastReferenceIdManager {\n  getLast(): string;\n  clearLast(): void;\n  setLast(eventId: string): void;\n}\n\nexport interface ILog {\n  trace(message: string): void;\n  info(message: string): void;\n  warn(message: string): void;\n  error(message: string): void;\n}\n\n                                                                    \n\nexport class DefaultLastReferenceIdManager implements ILastReferenceIdManager {\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @type {string}\n   * @private\n   */\n  private _lastReferenceId: string = null;\n\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @returns {string}\n   */\n  public getLast(): string {\n    return this._lastReferenceId;\n  }\n\n  /**\n   * Clears the last event's reference id.\n   */\n  public clearLast(): void {\n    this._lastReferenceId = null;\n  }\n\n  /**\n   * Sets the last event's reference id.\n   * @param eventId\n   */\n  public setLast(eventId: string): void {\n    this._lastReferenceId = eventId;\n  }\n}\n\n                              \n\nexport class ConsoleLog implements ILog {\n  public trace(message: string): void {\n    this.log('debug', message);\n  }\n\n  public info(message: string): void {\n    this.log('info', message);\n  }\n\n  public warn(message: string): void {\n    this.log('warn', message);\n  }\n\n  public error(message: string): void {\n    this.log('error', message);\n  }\n\n  private log(level: string, message: string) {\n    if (console) {\n      const msg = `[${level}] Exceptionless: ${message}`;\n\n      if (console[level]) {\n        console[level](msg);\n      } else if (console.log) {\n        console[`log`](msg);\n      }\n    }\n  }\n}\n\n                              \n\nexport class NullLog implements ILog {\n  public trace(message: string): void { }\n  public info(message: string): void { }\n  public warn(message: string): void { }\n  public error(message: string): void { }\n}\n\nexport interface IUserInfo {\n  identity?: string;\n  name?: string;\n  data?: any;\n}\n\n                                                                                                                                                               \n\nexport class HeartbeatPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = 'HeartbeatPlugin';\n\n  private _interval: number;\n  private _intervalId: any;\n\n  constructor(heartbeatInterval: number = 30000) {\n    this._interval = heartbeatInterval >= 30000 ? heartbeatInterval : 60000;\n  }\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    clearInterval(this._intervalId);\n\n    const user: IUserInfo = context.event.data['@user'];\n    if (user && user.identity) {\n      this._intervalId = setInterval(() => context.client.submitSessionHeartbeat(user.identity), this._interval);\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                \n\nexport class ReferenceIdPlugin implements IEventPlugin {\n  public priority: number = 20;\n  public name: string = 'ReferenceIdPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    if ((!context.event.reference_id || context.event.reference_id.length === 0) && context.event.type === 'error') {\n      context.event.reference_id = Utils.guid().replace('-', '').substring(0, 10);\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                             \n\nexport class EventPluginContext {\n  public cancelled: boolean;\n  public client: ExceptionlessClient;\n  public event: IEvent;\n  public contextData: ContextData;\n\n  constructor(client: ExceptionlessClient, event: IEvent, contextData?: ContextData) {\n    this.client = client;\n    this.event = event;\n    this.contextData = contextData ? contextData : new ContextData();\n  }\n\n  public get log(): ILog {\n    return this.client.config.log;\n  }\n}\n\nn\nexport class EventPluginManager {\n  public static run(context: EventPluginContext, callback: (context?: EventPluginContext) => void): void {\n    const wrap = (plugin: IEventPlugin, next?: () => void): () => void => {\n      return () => {\n        try {\n          if (!context.cancelled) {\n            plugin.run(context, next);\n          }\n        } catch (ex) {\n          context.cancelled = true;\n          context.log.error(`Error running plugin '${plugin.name}': ${ex.message}. Discarding Event.`);\n        }\n\n        if (context.cancelled && !!callback) {\n          callback(context);\n        }\n      };\n    };\n\n    const plugins: IEventPlugin[] = context.client.config.plugins; // optimization for minifier.\n    const wrappedPlugins: Array<() => void> = [];\n    if (!!callback) {\n      wrappedPlugins[plugins.length] = wrap({ name: 'cb', priority: 9007199254740992, run: callback }, null);\n    }\n\n    for (let index = plugins.length - 1; index > -1; index--) {\n      wrappedPlugins[index] = wrap(plugins[index], !!callback || (index < plugins.length - 1) ? wrappedPlugins[index + 1] : null);\n    }\n\n    wrappedPlugins[0]();\n  }\n\n  public static addDefaultPlugins(config: Configuration): void {\n    config.addPlugin(new ConfigurationDefaultsPlugin());\n    config.addPlugin(new ErrorPlugin());\n    config.addPlugin(new DuplicateCheckerPlugin());\n    config.addPlugin(new EventExclusionPlugin());\n    config.addPlugin(new ModuleInfoPlugin());\n    config.addPlugin(new RequestInfoPlugin());\n    config.addPlugin(new EnvironmentInfoPlugin());\n    config.addPlugin(new SubmissionMethodPlugin());\n  }\n}\n\n                                                                                                         \n\nexport interface IEventPlugin {\n  priority?: number;\n  name?: string;\n  run(context: EventPluginContext, next?: () => void): void;\n}\n\n                                                                                                                                                                                                                                                                                                                                     \n\nexport class DefaultEventQueue implements IEventQueue {\n  /**\n   * The configuration object.\n   * @type {Configuration}\n   * @private\n   */\n  private _config: Configuration;\n\n  /**\n   * A list of handlers that will be fired when events are submitted.\n   * @type {Array}\n   * @private\n   */\n  private _handlers: Array<(events: IEvent[], response: SubmissionResponse) => void> = [];\n\n  /**\n   * Suspends processing until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _suspendProcessingUntil: Date;\n\n  /**\n   * Discards queued items until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _discardQueuedItemsUntil: Date;\n\n  /**\n   * Returns true if the queue is processing.\n   * @type {boolean}\n   * @private\n   */\n  private _processingQueue: boolean = false;\n\n  /**\n   * Processes the queue every xx seconds.\n   * @type {Timer}\n   * @private\n   */\n  private _queueTimer: any;\n\n  constructor(config: Configuration) {\n    this._config = config;\n  }\n\n  public enqueue(event: IEvent): void {\n    const eventWillNotBeQueued: string = 'The event will not be queued.'; // optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    if (this.areQueuedItemsDiscarded()) {\n      log.info(`Queue items are currently being discarded. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    this.ensureQueueTimer();\n\n    const timestamp = config.storage.queue.save(event);\n    const logText = `type=${event.type} ${!!event.reference_id ? 'refid=' + event.reference_id : ''}`;\n    if (timestamp) {\n      log.info(`Enqueuing event: ${timestamp} ${logText}`);\n    } else {\n      log.error(`Could not enqueue event ${logText}`);\n    }\n  }\n\n  public process(isAppExiting?: boolean): void {\n    const queueNotProcessed: string = 'The queue will not be processed.'; // optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (this._processingQueue) {\n      return;\n    }\n\n    log.info('Processing queue...');\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${queueNotProcessed}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${queueNotProcessed}`);\n      return;\n    }\n\n    this._processingQueue = true;\n    this.ensureQueueTimer();\n\n    try {\n      const events = config.storage.queue.get(config.submissionBatchSize);\n      if (!events || events.length === 0) {\n        this._processingQueue = false;\n        return;\n      }\n\n      log.info(`Sending ${events.length} events to ${config.serverUrl}.`);\n      config.submissionClient.postEvents(events.map((e) => e.value), config, (response: SubmissionResponse) => {\n        this.processSubmissionResponse(response, events);\n        this.eventsPosted(events.map((e) => e.value), response);\n        log.info('Finished processing queue.');\n        this._processingQueue = false;\n      }, isAppExiting);\n    } catch (ex) {\n      log.error(`Error processing queue: ${ex}`);\n      this.suspendProcessing();\n      this._processingQueue = false;\n    }\n  }\n\n  public suspendProcessing(durationInMinutes?: number, discardFutureQueuedItems?: boolean, clearQueue?: boolean): void {\n    const config: Configuration = this._config; // Optimization for minifier.\n\n    if (!durationInMinutes || durationInMinutes <= 0) {\n      durationInMinutes = 5;\n    }\n\n    config.log.info(`Suspending processing for ${durationInMinutes} minutes.`);\n    this._suspendProcessingUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\n\n    if (discardFutureQueuedItems) {\n      this._discardQueuedItemsUntil = this._suspendProcessingUntil;\n    }\n\n    if (clearQueue) {\n      // Account is over the limit and we want to ensure that the sample size being sent in will contain newer errors.\n      config.storage.queue.clear();\n    }\n  }\n\n  public onEventsPosted(handler: (events: IEvent[], response: SubmissionResponse) => void): void {\n    !!handler && this._handlers.push(handler);\n  }\n\n  private eventsPosted(events: IEvent[], response: SubmissionResponse) {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(events, response);\n      } catch (ex) {\n        this._config.log.error(`Error calling onEventsPosted handler: ${ex}`);\n      }\n    }\n  }\n\n  private areQueuedItemsDiscarded(): boolean {\n    return this._discardQueuedItemsUntil && this._discardQueuedItemsUntil > new Date();\n  }\n\n  private ensureQueueTimer(): void {\n    if (!this._queueTimer) {\n      this._queueTimer = setInterval(() => this.onProcessQueue(), 10000);\n    }\n  }\n\n  private isQueueProcessingSuspended(): boolean {\n    return this._suspendProcessingUntil && this._suspendProcessingUntil > new Date();\n  }\n\n  private onProcessQueue(): void {\n    if (!this.isQueueProcessingSuspended() && !this._processingQueue) {\n      this.process();\n    }\n  }\n\n  private processSubmissionResponse(response: SubmissionResponse, events: IStorageItem[]): void {\n    const noSubmission: string = 'The event will not be submitted.'; // Optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (response.success) {\n      log.info(`Sent ${events.length} events.`);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.serviceUnavailable) {\n      // You are currently over your rate limit or the servers are under stress.\n      log.error('Server returned service unavailable.');\n      this.suspendProcessing();\n      return;\n    }\n\n    if (response.paymentRequired) {\n      // If the organization over the rate limit then discard the event.\n      log.info('Too many events have been submitted, please upgrade your plan.');\n      this.suspendProcessing(null, true, true);\n      return;\n    }\n\n    if (response.unableToAuthenticate) {\n      // The api key was suspended or could not be authorized.\n      log.info(`Unable to authenticate, please check your configuration. ${noSubmission}`);\n      this.suspendProcessing(15);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.notFound || response.badRequest) {\n      // The service end point could not be found.\n      log.error(`Error while trying to submit data: ${response.message}`);\n      this.suspendProcessing(60 * 4);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.requestEntityTooLarge) {\n      const message = 'Event submission discarded for being too large.';\n      if (config.submissionBatchSize > 1) {\n        log.error(`${message} Retrying with smaller batch size.`);\n        config.submissionBatchSize = Math.max(1, Math.round(config.submissionBatchSize / 1.5));\n      } else {\n        log.error(`${message} ${noSubmission}`);\n        this.removeEvents(events);\n      }\n\n      return;\n    }\n\n    if (!response.success) {\n      log.error(`Error submitting events: ${response.message || 'Please check the network tab for more info.'}`);\n      this.suspendProcessing();\n    }\n  }\n\n  private removeEvents(events: IStorageItem[]) {\n    for (let index = 0; index < (events || []).length; index++) {\n      this._config.storage.queue.remove(events[index].timestamp);\n    }\n  }\n}\n\n                                                                                                                 \n\nexport interface IEventQueue {\n  enqueue(event: IEvent): void;\n  process(isAppExiting?: boolean): void;\n  suspendProcessing(durationInMinutes?: number, discardFutureQueuedItems?: boolean, clearQueue?: boolean): void;\n  onEventsPosted(handler: (events: IEvent[], response: SubmissionResponse) => void): void;\n}\n\n                                                                                                                                  \n\nexport interface IEnvironmentInfoCollector {\n  getEnvironmentInfo(context: EventPluginContext): IEnvironmentInfo;\n}\n\n                                                                                                              \n\nexport interface IErrorParser {\n  parse(context: EventPluginContext, exception: Error): IError;\n}\n\n                                                                                                                \n\nexport interface IModuleCollector {\n  getModules(context: EventPluginContext): IModule[];\n}\n\n                                                                                                                          \n\nexport interface IRequestInfoCollector {\n  getRequestInfo(context: EventPluginContext): IRequestInfo;\n}\n\n                                                                                                                                                  \n\nexport class InMemoryStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(maxQueueItems: number = 250) {\n    this.queue = new InMemoryStorage(maxQueueItems);\n    this.settings = new InMemoryStorage(1);\n  }\n\n}\n\n                                      \n\nexport interface IStorageProvider {\n  queue: IStorage;\n  settings: IStorage;\n}\n\nn\n// tslint:disable-next-line:prefer-const\ndeclare var XDomainRequest: { new(); create(); };\n\nexport class DefaultSubmissionClient implements ISubmissionClient {\n  public configurationVersionHeader: string = 'x-exceptionless-configversion';\n\n  public postEvents(events: IEvent[], config: Configuration, callback: (response: SubmissionResponse) => void, isAppExiting?: boolean): void {\n    const data = JSON.stringify(events);\n    const request = this.createRequest(config, 'POST', `${config.serverUrl}/api/v2/events`, data);\n    const cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb, isAppExiting);\n  }\n\n  public postUserDescription(referenceId: string, description: IUserDescription, config: Configuration, callback: (response: SubmissionResponse) => void): void {\n    const path = `${config.serverUrl}/api/v2/events/by-ref/${encodeURIComponent(referenceId)}/user-description`;\n    const data = JSON.stringify(description);\n    const request = this.createRequest(config, 'POST', path, data);\n    const cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public getSettings(config: Configuration, version: number, callback: (response: SettingsResponse) => void): void {\n    const request = this.createRequest(config, 'GET', `${config.configServerUrl}/api/v2/projects/config?v=${version}`);\n    const cb = (status, message, data?, headers?) => {\n      if (status !== 200) {\n        return callback(new SettingsResponse(false, null, -1, null, message));\n      }\n\n      let settings: IClientConfiguration;\n      try {\n        settings = JSON.parse(data);\n      } catch (e) {\n        config.log.error(`Unable to parse settings: '${data}'`);\n      }\n\n      if (!settings || isNaN(settings.version)) {\n        return callback(new SettingsResponse(false, null, -1, null, 'Invalid configuration settings.'));\n      }\n\n      callback(new SettingsResponse(true, settings.settings || {}, settings.version));\n    };\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public sendHeartbeat(sessionIdOrUserId: string, closeSession: boolean, config: Configuration): void {\n    const request = this.createRequest(config, 'GET', `${config.heartbeatServerUrl}/api/v2/events/session/heartbeat?id=${sessionIdOrUserId}&close=${closeSession}`);\n    config.submissionAdapter.sendRequest(request);\n  }\n\n  private createRequest(config: Configuration, method: string, url: string, data: string = null): SubmissionRequest {\n    return {\n      method,\n      url,\n      data,\n      apiKey: config.apiKey,\n      userAgent: config.userAgent\n    };\n  }\n\n  private createSubmissionCallback(config: Configuration, callback: (response: SubmissionResponse) => void) {\n    return (status, message, data?, headers?) => {\n      const settingsVersion: number = headers && parseInt(headers[this.configurationVersionHeader], 10);\n      if (!isNaN(settingsVersion)) {\n        SettingsManager.checkVersion(settingsVersion, config);\n      } else {\n        config.log.error('No config version header was returned.');\n      }\n\n      callback(new SubmissionResponse(status, message));\n    };\n  }\n}\n\n                                                                                                                   \n\nexport interface ISubmissionAdapter {\n  sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean): void;\n}\n\n                                                                                                                                                                                                                                                                                           \n\nexport interface ISubmissionClient {\n  postEvents(events: IEvent[], config: Configuration, callback: (response: SubmissionResponse) => void, isAppExiting?: boolean): void;\n  postUserDescription(referenceId: string, description: IUserDescription, config: Configuration, callback: (response: SubmissionResponse) => void): void;\n  getSettings(config: Configuration, version: number, callback: (response: SettingsResponse) => void): void;\n  sendHeartbeat(sessionIdOrUserId: string, closeSession: boolean, config: Configuration): void;\n}\n\nexport class Utils {\n  public static addRange<T>(target: T[], ...values: T[]) {\n    if (!target) {\n      target = [];\n    }\n\n    if (!values || values.length === 0) {\n      return target;\n    }\n\n    for (const value of values) {\n      if (value && target.indexOf(value) < 0) {\n        target.push(value);\n      }\n    }\n\n    return target;\n  }\n\n  public static getHashCode(source: string): number {\n    if (!source || source.length === 0) {\n      return 0;\n    }\n\n    let hash: number = 0;\n    for (let index = 0; index < source.length; index++) {\n      const character = source.charCodeAt(index);\n      hash = ((hash << 5) - hash) + character;\n      hash |= 0;\n    }\n\n    return hash;\n  }\n\n  public static getCookies(cookies: string, exclusions?: string[]): object {\n    const result: object = {};\n\n    const parts: string[] = (cookies || '').split('; ');\n    for (const part of parts) {\n      const cookie: string[] = part.split('=');\n      if (!Utils.isMatch(cookie[0], exclusions)) {\n        result[cookie[0]] = cookie[1];\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static guid(): string {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    }\n\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n  }\n\n  // tslint:disable-next-line:ban-types\n  public static merge(defaultValues: Object, values: Object) {\n    const result: object = {};\n\n    for (const key in defaultValues || {}) {\n      if (defaultValues[key] !== undefined && defaultValues[key] !== null) {\n        result[key] = defaultValues[key];\n      }\n    }\n\n    for (const key in values || {}) {\n      if (values[key] !== undefined && values[key] !== null) {\n        result[key] = values[key];\n      }\n    }\n\n    return result;\n  }\n\n  public static parseVersion(source: string): string {\n    if (!source) {\n      return null;\n    }\n\n    const versionRegex = /(v?((\\d+)\\.(\\d+)(\\.(\\d+))?)(?:-([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?(?:\\+([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?)/;\n    const matches = versionRegex.exec(source);\n    if (matches && matches.length > 0) {\n      return matches[0];\n    }\n\n    return null;\n  }\n\n  public static parseQueryString(query: string, exclusions?: string[]) {\n    if (!query || query.length === 0) {\n      return null;\n    }\n\n    const pairs: string[] = query.split('&');\n    if (pairs.length === 0) {\n      return null;\n    }\n\n    const result: object = {};\n    for (const pair of pairs) {\n      const parts = pair.split('=');\n      if (!Utils.isMatch(parts[0], exclusions)) {\n        result[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static randomNumber(): number {\n    return Math.floor(Math.random() * 9007199254740992);\n  }\n\n  /**\n   * Checks to see if a value matches a pattern.\n   * @param input the value to check against the @pattern.\n   * @param pattern The pattern to check, supports wild cards (*).\n   */\n  public static isMatch(input: string, patterns: string[], ignoreCase: boolean = true): boolean {\n    if (!input || typeof input !== 'string') {\n      return false;\n    }\n\n    const trim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n    input = (ignoreCase ? input.toLowerCase() : input).replace(trim, '');\n\n    return (patterns || []).some((pattern) => {\n      if (typeof pattern !== 'string') {\n        return false;\n      }\n\n      pattern = (ignoreCase ? pattern.toLowerCase() : pattern).replace(trim, '');\n      if (pattern.length <= 0) {\n        return false;\n      }\n\n      const startsWithWildcard: boolean = pattern[0] === '*';\n      if (startsWithWildcard) {\n        pattern = pattern.slice(1);\n      }\n\n      const endsWithWildcard: boolean = pattern[pattern.length - 1] === '*';\n      if (endsWithWildcard) {\n        pattern = pattern.substring(0, pattern.length - 1);\n      }\n\n      if (startsWithWildcard && endsWithWildcard) {\n        return pattern.length <= input.length && input.indexOf(pattern, 0) !== -1;\n      }\n\n      if (startsWithWildcard) {\n        return Utils.endsWith(input, pattern);\n      }\n\n      if (endsWithWildcard) {\n        return Utils.startsWith(input, pattern);\n      }\n\n      return input === pattern;\n    });\n  }\n\n  public static isEmpty(input: object) {\n    return input === null || (typeof (input) === 'object' && Object.keys(input).length === 0);\n  }\n\n  public static startsWith(input: string, prefix: string): boolean {\n    return input.substring(0, prefix.length) === prefix;\n  }\n\n  public static endsWith(input: string, suffix: string): boolean {\n    return input.indexOf(suffix, input.length - suffix.length) !== -1;\n  }\n\n  /**\n   * Stringifys an object with optional exclusions and max depth.\n   * @param data The data object to add.\n   * @param exclusions Any property names that should be excluded.\n   * @param maxDepth The max depth of the object to include.\n   */\n  public static stringify(data: any, exclusions?: string[], maxDepth?: number): string {\n    function stringifyImpl(obj: any, excludedKeys: string[]): string {\n      const cache: string[] = [];\n      return JSON.stringify(obj, (key: string, value: any) => {\n        if (Utils.isMatch(key, excludedKeys)) {\n          return;\n        }\n\n        if (typeof value === 'object' && !!value) {\n          if (cache.indexOf(value) !== -1) {\n            // Circular reference found, discard key\n            return;\n          }\n\n          cache.push(value);\n        }\n\n        return value;\n      });\n    }\n\n    if (({}).toString.call(data) === '[object Object]') {\n      const flattened = {};\n      /* tslint:disable:forin */\n      for (const prop in data) {\n        const value = data[prop];\n        if (value === data) {\n          continue;\n        }\n        flattened[prop] = data[prop];\n      }\n      /* tslint:enable:forin */\n\n      return stringifyImpl(flattened, exclusions);\n    }\n\n    if (({}).toString.call(data) === '[object Array]') {\n      const result = [];\n      for (let index = 0; index < data.length; index++) {\n        result[index] = JSON.parse(stringifyImpl(data[index], exclusions));\n      }\n\n      return JSON.stringify(result);\n    }\n\n    return stringifyImpl(data, exclusions);\n  }\n\n  public static toBoolean(input, defaultValue: boolean = false): boolean {\n    if (typeof input === 'boolean') {\n      return input;\n    }\n\n    if (input === null || typeof input !== 'number' && typeof input !== 'string') {\n      return defaultValue;\n    }\n\n    switch ((input + '').toLowerCase().trim()) {\n      case 'true': case 'yes': case '1': return true;\n      case 'false': case 'no': case '0': case null: return false;\n    }\n\n    return defaultValue;\n  }\n}\n\nn\nexport interface IConfigurationSettings {\n  apiKey?: string;\n  serverUrl?: string;\n  configServerUrl?: string;\n  heartbeatServerUrl?: string;\n  updateSettingsWhenIdleInterval?: number;\n  includePrivateInformation?: boolean;\n  environmentInfoCollector?: IEnvironmentInfoCollector;\n  errorParser?: IErrorParser;\n  lastReferenceIdManager?: ILastReferenceIdManager;\n  log?: ILog;\n  moduleCollector?: IModuleCollector;\n  requestInfoCollector?: IRequestInfoCollector;\n  submissionBatchSize?: number;\n  submissionClient?: ISubmissionClient;\n  submissionAdapter?: ISubmissionAdapter;\n  storage?: IStorageProvider;\n  queue?: IEventQueue;\n}\n\n                                                                                                                                                     \n\ninterface ISettingsWithVersion {\n  version: number;\n  settings: { [key: string]: string };\n}\n\nexport class SettingsManager {\n  private static _isUpdatingSettings: boolean = false;\n\n  /**\n   * A list of handlers that will be fired when the settings change.\n   * @type {Array}\n   * @private\n   */\n  private static _handlers: Array<(config: Configuration) => void> = [];\n\n  public static onChanged(handler: (config: Configuration) => void) {\n    !!handler && this._handlers.push(handler);\n  }\n\n  public static applySavedServerSettings(config: Configuration): void {\n    if (!config || !config.isValid) {\n      return;\n    }\n\n    const savedSettings = this.getSavedServerSettings(config);\n    config.log.info(`Applying saved settings: v${savedSettings.version}`);\n    config.settings = Utils.merge(config.settings, savedSettings.settings);\n    this.changed(config);\n  }\n\n  public static getVersion(config: Configuration): number {\n    if (!config || !config.isValid) {\n      return 0;\n    }\n\n    const savedSettings = this.getSavedServerSettings(config);\n    return savedSettings.version || 0;\n  }\n\n  public static checkVersion(version: number, config: Configuration): void {\n    const currentVersion: number = this.getVersion(config);\n    if (version <= currentVersion) {\n      return;\n    }\n\n    config.log.info(`Updating settings from v${currentVersion} to v${version}`);\n    this.updateSettings(config, currentVersion);\n  }\n\n  public static updateSettings(config: Configuration, version?: number): void {\n    if (!config || !config.enabled || this._isUpdatingSettings) {\n      return;\n    }\n\n    const unableToUpdateMessage = 'Unable to update settings';\n    if (!config.isValid) {\n      config.log.error(`${unableToUpdateMessage}: ApiKey is not set.`);\n      return;\n    }\n\n    if (!version || version < 0) {\n      version = this.getVersion(config);\n    }\n\n    config.log.info(`Checking for updated settings from: v${version}.`);\n    this._isUpdatingSettings = true;\n    config.submissionClient.getSettings(config, version, (response: SettingsResponse) => {\n      try {\n        if (!config || !response || !response.success || !response.settings) {\n          config.log.warn(`${unableToUpdateMessage}: ${response.message}`);\n          return;\n        }\n\n        config.settings = Utils.merge(config.settings, response.settings);\n\n        // TODO: Store snapshot of settings after reading from config and attributes and use that to revert to defaults.\n        // Remove any existing server settings that are not in the new server settings.\n        const savedServerSettings = SettingsManager.getSavedServerSettings(config);\n        for (const key in savedServerSettings) {\n          if (response.settings[key]) {\n            continue;\n          }\n\n          delete config.settings[key];\n        }\n\n        const newSettings: ISettingsWithVersion = {\n          version: response.settingsVersion,\n          settings: response.settings\n        };\n\n        config.storage.settings.save(newSettings);\n\n        config.log.info(`Updated settings: v${newSettings.version}`);\n        this.changed(config);\n      } finally {\n        this._isUpdatingSettings = false;\n      }\n    });\n  }\n\n  private static changed(config: Configuration) {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(config);\n      } catch (ex) {\n        config.log.error(`Error calling onChanged handler: ${ex}`);\n      }\n    }\n  }\n\n  private static getSavedServerSettings(config: Configuration): ISettingsWithVersion {\n    const item = config.storage.settings.get()[0];\n    if (item && item.value && item.value.version && item.value.settings) {\n      return item.value;\n    }\n\n    return { version: 0, settings: {} };\n  }\n}\n\nexport interface IEvent {\n  type?: string;\n  source?: string;\n  date?: Date;\n  tags?: string[];\n  message?: string;\n  geo?: string;\n  value?: number;\n  data?: any;\n  reference_id?: string;\n  count?: number;\n}\n\nexport class SubmissionResponse {\n  public success: boolean = false;\n  public badRequest: boolean = false;\n  public serviceUnavailable: boolean = false;\n  public paymentRequired: boolean = false;\n  public unableToAuthenticate: boolean = false;\n  public notFound: boolean = false;\n  public requestEntityTooLarge: boolean = false;\n  public statusCode: number;\n  public message: string;\n\n  constructor(statusCode: number, message?: string) {\n    this.statusCode = statusCode;\n    this.message = message;\n\n    this.success = statusCode >= 200 && statusCode <= 299;\n    this.badRequest = statusCode === 400;\n    this.serviceUnavailable = statusCode === 503;\n    this.paymentRequired = statusCode === 402;\n    this.unableToAuthenticate = statusCode === 401 || statusCode === 403;\n    this.notFound = statusCode === 404;\n    this.requestEntityTooLarge = statusCode === 413;\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n\nexport class ExceptionlessClient {\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   * @private\n   */\n  private static _instance: ExceptionlessClient = null;\n\n  public config: Configuration;\n\n  private _intervalId: any;\n  private _timeoutId: any;\n\n  constructor();\n  constructor(settings: IConfigurationSettings);\n  constructor(apiKey: string, serverUrl?: string);\n  constructor(settingsOrApiKey?: IConfigurationSettings | string, serverUrl?: string) {\n    this.config = typeof settingsOrApiKey === 'object'\n      ? new Configuration(settingsOrApiKey)\n      : new Configuration({ apiKey: settingsOrApiKey as string, serverUrl });\n\n    this.updateSettingsTimer(5000);\n    this.config.onChanged((config) => this.updateSettingsTimer(this._timeoutId > 0 ? 5000 : 0));\n    this.config.queue.onEventsPosted((events, response) => this.updateSettingsTimer());\n  }\n\n  public createException(exception: Error): EventBuilder {\n    const pluginContextData = new ContextData();\n    pluginContextData.setException(exception);\n    return this.createEvent(pluginContextData).setType('error');\n  }\n\n  public submitException(exception: Error, callback?: (context: EventPluginContext) => void): void {\n    this.createException(exception).submit(callback);\n  }\n\n  public createUnhandledException(exception: Error, submissionMethod?: string): EventBuilder {\n    const builder = this.createException(exception);\n    builder.pluginContextData.markAsUnhandledError();\n    builder.pluginContextData.setSubmissionMethod(submissionMethod);\n\n    return builder;\n  }\n\n  public submitUnhandledException(exception: Error, submissionMethod?: string, callback?: (context: EventPluginContext) => void) {\n    this.createUnhandledException(exception, submissionMethod).submit(callback);\n  }\n\n  public createFeatureUsage(feature: string): EventBuilder {\n    return this.createEvent().setType('usage').setSource(feature);\n  }\n\n  public submitFeatureUsage(feature: string, callback?: (context: EventPluginContext) => void): void {\n    this.createFeatureUsage(feature).submit(callback);\n  }\n\n  public createLog(message: string): EventBuilder;\n  public createLog(source: string, message: string): EventBuilder;\n  public createLog(source: string, message: string, level: string): EventBuilder;\n  public createLog(sourceOrMessage: string, message?: string, level?: string): EventBuilder {\n    let builder = this.createEvent().setType('log');\n\n    if (level) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message).setProperty('@level', level);\n    } else if (message) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message);\n    } else {\n      builder = builder.setMessage(sourceOrMessage);\n\n      try {\n        // TODO: Look into using https: //www.stevefenton.co.uk/Content/Blog/Date/201304/Blog/Obtaining-A-Class-Name-At-Runtime-In-TypeScript/\n        const caller: any = this.createLog.caller;\n        builder = builder.setSource(caller && caller.caller && caller.caller.name);\n      } catch (e) {\n        this.config.log.trace('Unable to resolve log source: ' + e.message);\n      }\n    }\n\n    return builder;\n  }\n\n  public submitLog(message: string): void;\n  public submitLog(source: string, message: string): void;\n  public submitLog(source: string, message: string, level: string, callback?: (context: EventPluginContext) => void): void;\n  public submitLog(sourceOrMessage: string, message?: string, level?: string, callback?: (context: EventPluginContext) => void): void {\n    this.createLog(sourceOrMessage, message, level).submit(callback);\n  }\n\n  public createNotFound(resource: string): EventBuilder {\n    return this.createEvent().setType('404').setSource(resource);\n  }\n\n  public submitNotFound(resource: string, callback?: (context: EventPluginContext) => void): void {\n    this.createNotFound(resource).submit(callback);\n  }\n\n  public createSessionStart(): EventBuilder {\n    return this.createEvent().setType('session');\n  }\n\n  public submitSessionStart(callback?: (context: EventPluginContext) => void): void {\n    this.createSessionStart().submit(callback);\n  }\n\n  public submitSessionEnd(sessionIdOrUserId: string): void {\n    if (sessionIdOrUserId) {\n      this.config.log.info(`Submitting session end: ${sessionIdOrUserId}`);\n      this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, true, this.config);\n    }\n  }\n\n  public submitSessionHeartbeat(sessionIdOrUserId: string): void {\n    if (sessionIdOrUserId) {\n      this.config.log.info(`Submitting session heartbeat: ${sessionIdOrUserId}`);\n      this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, false, this.config);\n    }\n  }\n\n  public createEvent(pluginContextData?: ContextData): EventBuilder {\n    return new EventBuilder({ date: new Date() }, this, pluginContextData);\n  }\n\n  /**\n   * Submits the event to be sent to the server.\n   * @param event The event data.\n   * @param pluginContextData Any contextual data objects to be used by Exceptionless plugins to gather default information for inclusion in the report information.\n   * @param callback\n   */\n  public submitEvent(event: IEvent, pluginContextData?: ContextData, callback?: (context: EventPluginContext) => void): void {\n    function cancelled(eventPluginContext: EventPluginContext) {\n      if (!!eventPluginContext) {\n        eventPluginContext.cancelled = true;\n      }\n\n      return !!callback && callback(eventPluginContext);\n    }\n\n    const context = new EventPluginContext(this, event, pluginContextData);\n    if (!event) {\n      return cancelled(context);\n    }\n\n    if (!this.config.enabled) {\n      this.config.log.info('Event submission is currently disabled.');\n      return cancelled(context);\n    }\n\n    if (!event.data) {\n      event.data = {};\n    }\n\n    if (!event.tags || !event.tags.length) {\n      event.tags = [];\n    }\n\n    EventPluginManager.run(context, (ctx: EventPluginContext) => {\n      const config = ctx.client.config;\n      const ev = ctx.event;\n\n      if (!ctx.cancelled) {\n        // ensure all required data\n        if (!ev.type || ev.type.length === 0) {\n          ev.type = 'log';\n        }\n\n        if (!ev.date) {\n          ev.date = new Date();\n        }\n\n        config.queue.enqueue(ev);\n\n        if (ev.reference_id && ev.reference_id.length > 0) {\n          ctx.log.info(`Setting last reference id '${ev.reference_id}'`);\n          config.lastReferenceIdManager.setLast(ev.reference_id);\n        }\n      }\n\n      !!callback && callback(ctx);\n    });\n  }\n\n  /**\n   * Updates the user's email address and description of an event for the specified reference id.\n   * @param referenceId The reference id of the event to update.\n   * @param email The user's email address to set on the event.\n   * @param description The user's description of the event.\n   * @param callback The submission response.\n   */\n  public updateUserEmailAndDescription(referenceId: string, email: string, description: string, callback?: (response: SubmissionResponse) => void) {\n    if (!referenceId || !email || !description || !this.config.enabled) {\n      return !!callback && callback(new SubmissionResponse(500, 'cancelled'));\n    }\n\n    const userDescription: IUserDescription = { email_address: email, description };\n    this.config.submissionClient.postUserDescription(referenceId, userDescription, this.config, (response: SubmissionResponse) => {\n      if (!response.success) {\n        this.config.log.error(`Failed to submit user email and description for event '${referenceId}': ${response.statusCode} ${response.message}`);\n      }\n\n      !!callback && callback(response);\n    });\n  }\n\n  /**\n   * Gets the last event client id that was submitted to the server.\n   * @returns {string} The event client id.\n   */\n  public getLastReferenceId(): string {\n    return this.config.lastReferenceIdManager.getLast();\n  }\n\n  private updateSettingsTimer(initialDelay?: number) {\n    this.config.log.info(`Updating settings timer with delay: ${initialDelay}`);\n\n    this._timeoutId = clearTimeout(this._timeoutId);\n    this._timeoutId = clearInterval(this._intervalId);\n\n    const interval = this.config.updateSettingsWhenIdleInterval;\n    if (interval > 0) {\n      const updateSettings = () => SettingsManager.updateSettings(this.config);\n      if (initialDelay > 0) {\n        this._timeoutId = setTimeout(updateSettings, initialDelay);\n      }\n\n      this._intervalId = setInterval(updateSettings, interval);\n    }\n  }\n\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   */\n  public static get default() {\n    if (ExceptionlessClient._instance === null) {\n      ExceptionlessClient._instance = new ExceptionlessClient(null);\n    }\n\n    return ExceptionlessClient._instance;\n  }\n}\n\nexport class ContextData {\n  public setException(exception: Error): void {\n    if (exception) {\n      this['@@_Exception'] = exception;\n    }\n  }\n\n  public get hasException(): boolean {\n    return !!this['@@_Exception'];\n  }\n\n  public getException(): Error {\n    return this['@@_Exception'] || null;\n  }\n\n  public markAsUnhandledError(): void {\n    this['@@_IsUnhandledError'] = true;\n  }\n\n  public get isUnhandledError(): boolean {\n    return !!this['@@_IsUnhandledError'];\n  }\n\n  public setSubmissionMethod(method: string): void {\n    if (method) {\n      this['@@_SubmissionMethod'] = method;\n    }\n  }\n\n  public getSubmissionMethod(): string {\n    return this['@@_SubmissionMethod'] || null;\n  }\n}\n\nexport interface IEnvironmentInfo {\n  processor_count?: number;\n  total_physical_memory?: number;\n  available_physical_memory?: number;\n  command_line?: string;\n  process_name?: string;\n  process_id?: string;\n  process_memory_size?: number;\n  thread_id?: string;\n  architecture?: string;\n  o_s_name?: string;\n  o_s_version?: string;\n  ip_address?: string;\n  machine_name?: string;\n  install_id?: string;\n  runtime_version?: string;\n  data?: any;\n}\n\nexport interface IParameter {\n  data?: any;\n  generic_arguments?: string[];\n\n  name?: string;\n  type?: string;\n  type_namespace?: string;\n}\n\n                                          \n\nexport interface IMethod {\n  data?: any;\n  generic_arguments?: string[];\n  parameters?: IParameter[];\n\n  is_signature_target?: boolean;\n  declaring_namespace?: string;\n  declaring_type?: string;\n  name?: string;\n  module_id?: number;\n}\n\n                                    \n\nexport interface IStackFrame extends IMethod {\n  file_name?: string;\n  line_number?: number;\n  column?: number;\n}\n\n                                                                                 \n\nexport interface IInnerError {\n  message?: string;\n  type?: string;\n  code?: string;\n  data?: any;\n  inner?: IInnerError;\n  stack_trace?: IStackFrame[];\n  target_method?: IMethod;\n}\n\nexport interface IModule {\n  data?: any;\n\n  module_id?: number;\n  name?: string;\n  version?: string;\n  is_entry?: boolean;\n  created_date?: Date;\n  modified_date?: Date;\n}\n\n                                                                                 \n\nexport interface IError extends IInnerError {\n  modules?: IModule[];\n}\n\nexport interface IRequestInfo {\n  user_agent?: string;\n  http_method?: string;\n  is_secure?: boolean;\n  host?: string;\n  port?: number;\n  path?: string;\n  referrer?: string;\n  client_ip_address?: string;\n  cookies?: any;\n  post_data?: any;\n  query_string?: any;\n  data?: any;\n}\n\nexport interface IStorageItem {\n  timestamp: number;\n  value: any;\n}\n\n                                              \n\nexport interface IStorage {\n  save(value: any): number;\n  get(limit?: number): IStorageItem[];\n  remove(timestamp: number): void;\n  clear(): void;\n}\n\nexport type SubmissionCallback = (status: number, message: string, data?: string, headers?: object) => void;\n\nexport interface SubmissionRequest {\n  apiKey: string;\n  userAgent: string;\n  method: string;\n  url: string;\n  data: string;\n}\n\nn\nexport class Configuration implements IConfigurationSettings {\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @type {IConfigurationSettings}\n   * @private\n   */\n  private static _defaultSettings: IConfigurationSettings = null;\n\n  /**\n   * A default list of tags that will automatically be added to every\n   * report submitted to the server.\n   *\n   * @type {Array}\n   */\n  public defaultTags: string[] = [];\n\n  /**\n   * A default list of of extended data objects that will automatically\n   * be added to every report submitted to the server.\n   *\n   * @type {{}}\n   */\n  public defaultData: object = {};\n\n  /**\n   * Whether the client is currently enabled or not. If it is disabled,\n   * submitted errors will be discarded and no data will be sent to the server.\n   *\n   * @returns {boolean}\n   */\n  public enabled: boolean = true;\n\n  public environmentInfoCollector: IEnvironmentInfoCollector;\n  public errorParser: IErrorParser;\n  public lastReferenceIdManager: ILastReferenceIdManager = new DefaultLastReferenceIdManager();\n  public log: ILog;\n  public moduleCollector: IModuleCollector;\n  public requestInfoCollector: IRequestInfoCollector;\n\n  /**\n   * Maximum number of events that should be sent to the server together in a batch. (Defaults to 50)\n   */\n  public submissionBatchSize: number;\n  public submissionAdapter: ISubmissionAdapter;\n  public submissionClient: ISubmissionClient;\n\n  /**\n   * Contains a dictionary of custom settings that can be used to control\n   * the client and will be automatically updated from the server.\n   */\n  public settings: object = {};\n\n  public storage: IStorageProvider;\n\n  public queue: IEventQueue;\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @type {string}\n   * @private\n   */\n  private _apiKey: string;\n\n  /**\n   * The server url that all events will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _serverUrl: string = 'https://collector.exceptionless.io';\n\n  /**\n   * The config server url that all configuration will be retrieved from.\n   * @type {string}\n   * @private\n   */\n  private _configServerUrl: string = 'https://config.exceptionless.io';\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _heartbeatServerUrl: string = 'https://heartbeat.exceptionless.io';\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @type {number}\n   * @private\n   */\n  private _updateSettingsWhenIdleInterval: number = 120000;\n\n  /**\n   * A list of exclusion patterns.\n   * @type {Array}\n   * @private\n   */\n  private _dataExclusions: string[] = [];\n\n  private _includePrivateInformation: boolean;\n  private _includeUserName: boolean;\n  private _includeMachineName: boolean;\n  private _includeIpAddress: boolean;\n  private _includeCookies: boolean;\n  private _includePostData: boolean;\n  private _includeQueryString: boolean;\n\n  /**\n   * A list of user agent patterns.\n   * @type {Array}\n   * @private\n   */\n  private _userAgentBotPatterns: string[] = [];\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @type {Array}\n   * @private\n   */\n  private _plugins: IEventPlugin[] = [];\n\n  /**\n   * A list of handlers that will be fired when configuration changes.\n   * @type {Array}\n   * @private\n   */\n  private _handlers: Array<(config: Configuration) => void> = [];\n\n  constructor(configSettings?: IConfigurationSettings) {\n    function inject(fn: any) {\n      return typeof fn === 'function' ? fn(this) : fn;\n    }\n\n    configSettings = Utils.merge(Configuration.defaults, configSettings);\n\n    this.log = inject(configSettings.log) || new NullLog();\n    this.apiKey = configSettings.apiKey;\n    this.serverUrl = configSettings.serverUrl;\n    this.configServerUrl = configSettings.configServerUrl;\n    this.heartbeatServerUrl = configSettings.heartbeatServerUrl;\n    this.updateSettingsWhenIdleInterval = configSettings.updateSettingsWhenIdleInterval;\n    this.includePrivateInformation = configSettings.includePrivateInformation;\n\n    this.environmentInfoCollector = inject(configSettings.environmentInfoCollector);\n    this.errorParser = inject(configSettings.errorParser);\n    this.lastReferenceIdManager = inject(configSettings.lastReferenceIdManager) || new DefaultLastReferenceIdManager();\n    this.moduleCollector = inject(configSettings.moduleCollector);\n    this.requestInfoCollector = inject(configSettings.requestInfoCollector);\n    this.submissionBatchSize = inject(configSettings.submissionBatchSize) || 50;\n    this.submissionAdapter = inject(configSettings.submissionAdapter);\n    this.submissionClient = inject(configSettings.submissionClient) || new DefaultSubmissionClient();\n    this.storage = inject(configSettings.storage) || new InMemoryStorageProvider();\n    this.queue = inject(configSettings.queue) || new DefaultEventQueue(this);\n\n    SettingsManager.applySavedServerSettings(this);\n    EventPluginManager.addDefaultPlugins(this);\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @returns {string}\n   */\n  public get apiKey(): string {\n    return this._apiKey;\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @param value\n   */\n  public set apiKey(value: string) {\n    this._apiKey = value || null;\n    this.log.info(`apiKey: ${this._apiKey}`);\n    this.changed();\n  }\n\n  /**\n   * Returns true if the apiKey is valid.\n   * @returns {boolean}\n   */\n  public get isValid(): boolean {\n    return !!this.apiKey && this.apiKey.length >= 10;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @returns {string}\n   */\n  public get serverUrl(): string {\n    return this._serverUrl;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @param value\n   */\n  public set serverUrl(value: string) {\n    if (!!value) {\n      this._serverUrl = value;\n      this._configServerUrl = value;\n      this._heartbeatServerUrl = value;\n      this.log.info(`serverUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * The config server url that all configuration will be retrieved from.\n   * @returns {string}\n   */\n  public get configServerUrl(): string {\n    return this._configServerUrl;\n  }\n\n  /**\n   * The config server url that all configuration will be retrieved from.\n   * @param value\n   */\n  public set configServerUrl(value: string) {\n    if (!!value) {\n      this._configServerUrl = value;\n      this.log.info(`configServerUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @returns {string}\n   */\n  public get heartbeatServerUrl(): string {\n    return this._heartbeatServerUrl;\n  }\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @param value\n   */\n  public set heartbeatServerUrl(value: string) {\n    if (!!value) {\n      this._heartbeatServerUrl = value;\n      this.log.info(`heartbeatServerUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @returns {number}\n   */\n  public get updateSettingsWhenIdleInterval(): number {\n    return this._updateSettingsWhenIdleInterval;\n  }\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @param value\n   */\n  public set updateSettingsWhenIdleInterval(value: number) {\n    if (typeof value !== 'number') {\n      return;\n    }\n\n    if (value <= 0) {\n      value = -1;\n    } else if (value > 0 && value < 120000) {\n      value = 120000;\n    }\n\n    this._updateSettingsWhenIdleInterval = value;\n    this.log.info(`updateSettingsWhenIdleInterval: ${value}`);\n    this.changed();\n  }\n\n  /**\n   *  A list of exclusion patterns that will automatically remove any data that\n   *  matches them from any data submitted to the server.\n   *\n   *  For example, entering CreditCard will remove any extended data properties,\n   *  form fields, cookies and query parameters from the report.\n   *\n   * @returns {string[]}\n   */\n  public get dataExclusions(): string[] {\n    const exclusions: string = this.settings['@@DataExclusions'];\n    return this._dataExclusions.concat(exclusions && exclusions.split(',') || []);\n  }\n\n  /**\n   * Add items to the list of exclusion patterns that will automatically remove any\n   * data that matches them from any data submitted to the server.\n   *\n   * For example, entering CreditCard will remove any extended data properties, form\n   * fields, cookies and query parameters from the report.\n   *\n   * @param exclusions\n   */\n  public addDataExclusions(...exclusions: string[]) {\n    this._dataExclusions = Utils.addRange<string>(this._dataExclusions, ...exclusions);\n  }\n\n  /**\n   * Gets a value indicating whether to include private information about the local machine.\n   * @returns {boolean}\n   */\n  public get includePrivateInformation(): boolean {\n    return this._includePrivateInformation;\n  }\n\n  /**\n   * Sets a value indicating whether to include private information about the local machine\n   * @param value\n   */\n  public set includePrivateInformation(value: boolean) {\n    const val = value || false;\n    this._includePrivateInformation = val;\n    this._includeUserName = val;\n    this._includeMachineName = val;\n    this._includeIpAddress = val;\n    this._includeCookies = val;\n    this._includePostData = val;\n    this._includeQueryString = val;\n    this.log.info(`includePrivateInformation: ${val}`);\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include User Name.\n   * @returns {boolean}\n   */\n  public get includeUserName(): boolean {\n    return this._includeUserName;\n  }\n\n  /**\n   * Sets a value indicating whether to include User Name.\n   * @param value\n   */\n  public set includeUserName(value: boolean) {\n    this._includeUserName = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include MachineName in MachineInfo.\n   * @returns {boolean}\n   */\n  public get includeMachineName(): boolean {\n    return this._includeMachineName;\n  }\n\n  /**\n   * Sets a value indicating whether to include MachineName in MachineInfo.\n   * @param value\n   */\n  public set includeMachineName(value: boolean) {\n    this._includeMachineName = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include Ip Addresses in MachineInfo and RequestInfo.\n   * @returns {boolean}\n   */\n  public get includeIpAddress(): boolean {\n    return this._includeIpAddress;\n  }\n\n  /**\n   * Sets a value indicating whether to include Ip Addresses in MachineInfo and RequestInfo.\n   * @param value\n   */\n  public set includeIpAddress(value: boolean) {\n    this._includeIpAddress = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include Cookies.\n   * NOTE: DataExclusions are applied to all Cookie keys when enabled.\n   * @returns {boolean}\n   */\n  public get includeCookies(): boolean {\n    return this._includeCookies;\n  }\n\n  /**\n   * Sets a value indicating whether to include Cookies.\n   * NOTE: DataExclusions are applied to all Cookie keys when enabled.\n   * @param value\n   */\n  public set includeCookies(value: boolean) {\n    this._includeCookies = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include Form/POST Data.\n   * NOTE: DataExclusions are only applied to Form data keys when enabled.\n   * @returns {boolean}\n   */\n  public get includePostData(): boolean {\n    return this._includePostData;\n  }\n\n  /**\n   * Sets a value indicating whether to include Form/POST Data.\n   * NOTE: DataExclusions are only applied to Form data keys when enabled.\n   * @param value\n   */\n  public set includePostData(value: boolean) {\n    this._includePostData = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include query string information.\n   * NOTE: DataExclusions are applied to all Query String keys when enabled.\n   * @returns {boolean}\n   */\n  public get includeQueryString(): boolean {\n    return this._includeQueryString;\n  }\n\n  /**\n   * Sets a value indicating whether to include query string information.\n   * NOTE: DataExclusions are applied to all Query String keys when enabled.\n   * @param value\n   */\n  public set includeQueryString(value: boolean) {\n    this._includeQueryString = value || false;\n    this.changed();\n  }\n\n  /**\n   * A list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @returns {string[]}\n   */\n  public get userAgentBotPatterns(): string[] {\n    const patterns: string = this.settings['@@UserAgentBotPatterns'];\n    return this._userAgentBotPatterns.concat(patterns && patterns.split(',') || []);\n  }\n\n  /**\n   * Add items to the list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @param userAgentBotPatterns\n   */\n  public addUserAgentBotPatterns(...userAgentBotPatterns: string[]) {\n    this._userAgentBotPatterns = Utils.addRange<string>(this._userAgentBotPatterns, ...userAgentBotPatterns);\n  }\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @returns {IEventPlugin[]}\n   */\n  public get plugins(): IEventPlugin[] {\n    return this._plugins.sort((p1: IEventPlugin, p2: IEventPlugin) => {\n      return (p1.priority < p2.priority) ? -1 : (p1.priority > p2.priority) ? 1 : 0;\n    });\n  }\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param plugin\n   */\n  public addPlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param name The name used to identify the plugin.\n   * @param priority Used to determine plugins priority.\n   * @param pluginAction A function that is run.\n   */\n  public addPlugin(name: string, priority: number, pluginAction: (context: EventPluginContext, next?: () => void) => void): void;\n  public addPlugin(pluginOrName: IEventPlugin | string, priority?: number, pluginAction?: (context: EventPluginContext, next?: () => void) => void): void {\n    const plugin: IEventPlugin = !!pluginAction ? { name: pluginOrName as string, priority, run: pluginAction } : pluginOrName as IEventPlugin;\n    if (!plugin || !plugin.run) {\n      this.log.error('Add plugin failed: Run method not defined');\n      return;\n    }\n\n    if (!plugin.name) {\n      plugin.name = Utils.guid();\n    }\n\n    if (!plugin.priority) {\n      plugin.priority = 0;\n    }\n\n    let pluginExists: boolean = false;\n    const plugins = this._plugins; // optimization for minifier.\n    for (const p of plugins) {\n      if (p.name === plugin.name) {\n        pluginExists = true;\n        break;\n      }\n    }\n\n    if (!pluginExists) {\n      plugins.push(plugin);\n    }\n  }\n\n  /**\n   * Remove the plugin from this configuration.\n   * @param plugin\n   */\n  public removePlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Remove an plugin by key from this configuration.\n   * @param name\n   */\n  public removePlugin(pluginOrName: IEventPlugin | string): void {\n    const name: string = typeof pluginOrName === 'string' ? pluginOrName : pluginOrName.name;\n    if (!name) {\n      this.log.error('Remove plugin failed: Plugin name not defined');\n      return;\n    }\n\n    const plugins = this._plugins; // optimization for minifier.\n    for (let index = 0; index < plugins.length; index++) {\n      if (plugins[index].name === name) {\n        plugins.splice(index, 1);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Automatically set the application version for events.\n   * @param version\n   */\n  public setVersion(version: string): void {\n    if (!!version) {\n      this.defaultData['@version'] = version;\n    }\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): void;\n  public setUserIdentity(identity: string): void;\n  public setUserIdentity(identity: string, name: string): void;\n  public setUserIdentity(userInfoOrIdentity: IUserInfo | string, name?: string): void {\n    const USER_KEY: string = '@user'; // optimization for minifier.\n    const userInfo: IUserInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name };\n\n    const shouldRemove: boolean = !userInfo || (!userInfo.identity && !userInfo.name);\n    if (shouldRemove) {\n      delete this.defaultData[USER_KEY];\n    } else {\n      this.defaultData[USER_KEY] = userInfo;\n    }\n\n    this.log.info(`user identity: ${shouldRemove ? 'null' : userInfo.identity}`);\n  }\n\n  /**\n   * Used to identify the client that sent the events to the server.\n   * @returns {string}\n   */\n  public get userAgent(): string {\n    return 'exceptionless-js/1.0.0.0';\n  }\n\n  /**\n   * Automatically send a heartbeat to keep the session alive.\n   */\n  public useSessions(sendHeartbeats: boolean = true, heartbeatInterval: number = 30000): void {\n    if (sendHeartbeats) {\n      this.addPlugin(new HeartbeatPlugin(heartbeatInterval));\n    }\n  }\n\n  /**\n   * Automatically set a reference id for error events.\n   */\n  public useReferenceIds(): void {\n    this.addPlugin(new ReferenceIdPlugin());\n  }\n\n  public useLocalStorage(): void {\n    // This method will be injected via the prototype.\n  }\n\n  // TODO: Support a min log level.\n  public useDebugLogger(): void {\n    this.log = new ConsoleLog();\n  }\n\n  public onChanged(handler: (config: Configuration) => void) {\n    !!handler && this._handlers.push(handler);\n  }\n\n  private changed() {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(this);\n      } catch (ex) {\n        this.log.error(`Error calling onChanged handler: ${ex}`);\n      }\n    }\n  }\n\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @returns {IConfigurationSettings}\n   */\n  public static get defaults() {\n    if (Configuration._defaultSettings === null) {\n      Configuration._defaultSettings = { includePrivateInformation: true };\n    }\n\n    return Configuration._defaultSettings;\n  }\n}\n\nexport interface IUserDescription {\n  email_address?: string;\n  description?: string;\n  data?: any;\n}\n\nexport class SettingsResponse {\n  public success: boolean = false;\n  public settings: any;\n  public settingsVersion: number = -1;\n  public message: string;\n  public exception: any;\n\n  constructor(success: boolean, settings: any, settingsVersion: number = -1, exception: any = null, message: string = null) {\n    this.success = success;\n    this.settings = settings;\n    this.settingsVersion = settingsVersion;\n    this.exception = exception;\n    this.message = message;\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                   \n\nexport class EventBuilder {\n  public target: IEvent;\n  public client: ExceptionlessClient;\n  public pluginContextData: ContextData;\n\n  private _validIdentifierErrorMessage: string = 'must contain between 8 and 100 alphanumeric or \\'-\\' characters.'; // optimization for minifier.\n\n  constructor(event: IEvent, client: ExceptionlessClient, pluginContextData?: ContextData) {\n    this.target = event;\n    this.client = client;\n    this.pluginContextData = pluginContextData || new ContextData();\n  }\n\n  public setType(type: string): EventBuilder {\n    if (!!type) {\n      this.target.type = type;\n    }\n\n    return this;\n  }\n\n  public setSource(source: string): EventBuilder {\n    if (!!source) {\n      this.target.source = source;\n    }\n\n    return this;\n  }\n\n  public setReferenceId(referenceId: string): EventBuilder {\n    if (!this.isValidIdentifier(referenceId)) {\n      throw new Error(`ReferenceId ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.target.reference_id = referenceId;\n    return this;\n  }\n\n  /**\n   * Allows you to reference a parent event by its ReferenceId property. This allows you to have parent and child relationships.\n   * @param name Reference name\n   * @param id The reference id that points to a specific event\n   * @returns {EventBuilder}\n   */\n  public setEventReference(name: string, id: string): EventBuilder {\n    if (!name) {\n      throw new Error('Invalid name');\n    }\n\n    if (!id || !this.isValidIdentifier(id)) {\n      throw new Error(`Id ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.setProperty('@ref:' + name, id);\n    return this;\n  }\n\n  public setMessage(message: string): EventBuilder {\n    if (!!message) {\n      this.target.message = message;\n    }\n\n    return this;\n  }\n\n  public setGeo(latitude: number, longitude: number): EventBuilder {\n    if (latitude < -90.0 || latitude > 90.0) {\n      throw new Error('Must be a valid latitude value between -90.0 and 90.0.');\n    }\n\n    if (longitude < -180.0 || longitude > 180.0) {\n      throw new Error('Must be a valid longitude value between -180.0 and 180.0.');\n    }\n\n    this.target.geo = `${latitude},${longitude}`;\n    return this;\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): EventBuilder;\n  public setUserIdentity(identity: string): EventBuilder;\n  public setUserIdentity(identity: string, name: string): EventBuilder;\n  public setUserIdentity(userInfoOrIdentity: IUserInfo | string, name?: string): EventBuilder {\n    const userInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name };\n    if (!userInfo || (!userInfo.identity && !userInfo.name)) {\n      return this;\n    }\n\n    this.setProperty('@user', userInfo);\n    return this;\n  }\n\n  /**\n   * Sets the user's description of the event.\n   *\n   * @param emailAddress The email address\n   * @param description The user's description of the event.\n   * @returns {EventBuilder}\n   */\n  public setUserDescription(emailAddress: string, description: string): EventBuilder {\n    if (emailAddress && description) {\n      this.setProperty('@user_description', { email_address: emailAddress, description });\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting manual\n   * stacking information.\n   * @param signatureData A dictionary of strings to use for stacking.\n   * @param title An optional title for the stacking information.\n   * @returns {EventBuilder}\n   */\n  public setManualStackingInfo(signatureData: any, title?: string) {\n    if (signatureData) {\n      const stack: IManualStackingInfo = { signature_data: signatureData };\n      if (title) {\n        stack.title = title;\n      }\n\n      this.setProperty('@stack', stack);\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting the stacking key.\n   * @param manualStackingKey The manual stacking key.\n   * @param title An optional title for the stacking information.\n   * @returns {EventBuilder}\n   */\n  public setManualStackingKey(manualStackingKey: string, title?: string): EventBuilder {\n    if (manualStackingKey) {\n      const data = { ManualStackingKey: manualStackingKey };\n      this.setManualStackingInfo(data, title);\n    }\n\n    return this;\n  }\n\n  public setValue(value: number): EventBuilder {\n    if (!!value) {\n      this.target.value = value;\n    }\n\n    return this;\n  }\n\n  public addTags(...tags: string[]): EventBuilder {\n    this.target.tags = Utils.addRange<string>(this.target.tags, ...tags);\n    return this;\n  }\n\n  /**\n   * Adds the object to extended data. Uses @excludedPropertyNames\n   * to exclude data from being included in the event.\n   * @param name The data object to add.\n   * @param value The name of the object to add.\n   * @param maxDepth The max depth of the object to include.\n   * @param excludedPropertyNames Any property names that should be excluded.\n   */\n  public setProperty(name: string, value: any, maxDepth?: number, excludedPropertyNames?: string[]): EventBuilder {\n    if (!name || (value === undefined || value == null)) {\n      return this;\n    }\n\n    if (!this.target.data) {\n      this.target.data = {};\n    }\n\n    const result = JSON.parse(Utils.stringify(value, this.client.config.dataExclusions.concat(excludedPropertyNames || []), maxDepth));\n    if (!Utils.isEmpty(result)) {\n      this.target.data[name] = result;\n    }\n\n    return this;\n  }\n\n  public markAsCritical(critical: boolean): EventBuilder {\n    if (critical) {\n      this.addTags('Critical');\n    }\n\n    return this;\n  }\n\n  public addRequestInfo(request: object): EventBuilder {\n    if (!!request) {\n      this.pluginContextData['@request'] = request;\n    }\n\n    return this;\n  }\n\n  public submit(callback?: (context: EventPluginContext) => void): void {\n    this.client.submitEvent(this.target, this.pluginContextData, callback);\n  }\n\n  private isValidIdentifier(value: string): boolean {\n    if (!value) {\n      return true;\n    }\n\n    if (value.length < 8 || value.length > 100) {\n      return false;\n    }\n\n    for (let index = 0; index < value.length; index++) {\n      const code = value.charCodeAt(index);\n      const isDigit = (code >= 48) && (code <= 57);\n      const isLetter = ((code >= 65) && (code <= 90)) || ((code >= 97) && (code <= 122));\n      const isMinus = code === 45;\n\n      if (!(isDigit || isLetter) && !isMinus) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nexport interface IManualStackingInfo {\n  title?: string;\n  signature_data?: any;\n}\n\n                                                                                                                                                \n\nexport class ConfigurationDefaultsPlugin implements IEventPlugin {\n  public priority: number = 10;\n  public name: string = 'ConfigurationDefaultsPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const config = context.client.config;\n    const defaultTags: string[] = config.defaultTags || [];\n    for (const tag of defaultTags) {\n      if (!!tag && context.event.tags.indexOf(tag) < 0) {\n        context.event.tags.push(tag);\n      }\n    }\n\n    // tslint:disable-next-line:ban-types\n    const defaultData: Object = config.defaultData || {};\n    for (const key in defaultData) {\n      if (!!defaultData[key]) {\n        const result = JSON.parse(Utils.stringify(defaultData[key], config.dataExclusions));\n        if (!Utils.isEmpty(result)) {\n          context.event.data[key] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                        \n\nexport class DuplicateCheckerPlugin implements IEventPlugin {\n  public priority: number = 1010;\n  public name: string = 'DuplicateCheckerPlugin';\n\n  private _mergedEvents: MergedEvent[] = [];\n  private _processedHashcodes: TimestampedHash[] = [];\n  private _getCurrentTime: () => number;\n  private _interval: number;\n\n  constructor(getCurrentTime: () => number = () => Date.now(), interval: number = 30000) {\n    this._getCurrentTime = getCurrentTime;\n    this._interval = interval;\n\n    setInterval(() => {\n      while (this._mergedEvents.length > 0) {\n        this._mergedEvents.shift().resubmit();\n      }\n    }, interval);\n  }\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    function getHashCode(e: IInnerError): number {\n      let hash = 0;\n      while (e) {\n        if (e.message && e.message.length) {\n          hash += (hash * 397) ^ Utils.getHashCode(e.message);\n        }\n        if (e.stack_trace && e.stack_trace.length) {\n          hash += (hash * 397) ^ Utils.getHashCode(JSON.stringify(e.stack_trace));\n        }\n        e = e.inner;\n      }\n\n      return hash;\n    }\n\n    const error = context.event.data['@error'];\n    const hashCode = getHashCode(error);\n    if (hashCode) {\n      const count = context.event.count || 1;\n      const now = this._getCurrentTime();\n\n      const merged = this._mergedEvents.filter((s) => s.hashCode === hashCode)[0];\n      if (merged) {\n        merged.incrementCount(count);\n        merged.updateDate(context.event.date);\n        context.log.info('Ignoring duplicate event with hash: ' + hashCode);\n        context.cancelled = true;\n      }\n\n      if (!context.cancelled && this._processedHashcodes.some((h) => h.hash === hashCode && h.timestamp >= (now - this._interval))) {\n        context.log.trace('Adding event with hash: ' + hashCode);\n        this._mergedEvents.push(new MergedEvent(hashCode, context, count));\n        context.cancelled = true;\n      }\n\n      if (!context.cancelled) {\n        context.log.trace('Enqueueing event with hash: ' + hashCode + 'to cache.');\n        this._processedHashcodes.push({ hash: hashCode, timestamp: now });\n\n        // Only keep the last 50 recent errors.\n        while (this._processedHashcodes.length > 50) {\n          this._processedHashcodes.shift();\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\ninterface TimestampedHash {\n  hash: number;\n  timestamp: number;\n}\n\nclass MergedEvent {\n  public hashCode: number;\n  private _count: number;\n  private _context: EventPluginContext;\n\n  constructor(hashCode: number, context: EventPluginContext, count: number) {\n    this.hashCode = hashCode;\n    this._context = context;\n    this._count = count;\n  }\n\n  public incrementCount(count: number) {\n    this._count += count;\n  }\n\n  public resubmit() {\n    this._context.event.count = this._count;\n    this._context.client.config.queue.enqueue(this._context.event);\n  }\n\n  public updateDate(date) {\n    if (date > this._context.event.date) {\n      this._context.event.date = date;\n    }\n  }\n}\n\n                                                                                                                                                                             \n\nexport class EnvironmentInfoPlugin implements IEventPlugin {\n  public priority: number = 80;\n  public name: string = 'EnvironmentInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ENVIRONMENT_KEY: string = '@environment'; // optimization for minifier.\n\n    const collector = context.client.config.environmentInfoCollector;\n    if (!context.event.data[ENVIRONMENT_KEY] && collector) {\n      const environmentInfo: IEnvironmentInfo = collector.getEnvironmentInfo(context);\n      if (!!environmentInfo) {\n        context.event.data[ENVIRONMENT_KEY] = environmentInfo;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                \n\nexport class ErrorPlugin implements IEventPlugin {\n  public priority: number = 30;\n  public name: string = 'ErrorPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\n    const ignoredProperties: string[] = [\n      'arguments',\n      'column',\n      'columnNumber',\n      'description',\n      'fileName',\n      'message',\n      'name',\n      'number',\n      'line',\n      'lineNumber',\n      'opera#sourceloc',\n      'sourceId',\n      'sourceURL',\n      'stack',\n      'stackArray',\n      'stacktrace'\n    ];\n\n    const exception = context.contextData.getException();\n    if (!!exception) {\n      context.event.type = 'error';\n\n      if (!context.event.data[ERROR_KEY]) {\n        const config = context.client.config;\n        const parser = config.errorParser;\n        if (!parser) {\n          throw new Error('No error parser was defined.');\n        }\n\n        const result = parser.parse(context, exception);\n        if (!!result) {\n          const additionalData = JSON.parse(Utils.stringify(exception, config.dataExclusions.concat(ignoredProperties)));\n          if (!Utils.isEmpty(additionalData)) {\n            if (!result.data) {\n              result.data = {};\n            }\n            result.data['@ext'] = additionalData;\n          }\n\n          context.event.data[ERROR_KEY] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                        \n\nexport class EventExclusionPlugin implements IEventPlugin {\n  public priority: number = 45;\n  public name: string = 'EventExclusionPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    function getLogLevel(level: string): number {\n      switch ((level || '').toLowerCase().trim()) {\n        case 'trace':\n        case 'true':\n        case '1':\n        case 'yes':\n          return 0;\n        case 'debug':\n          return 1;\n        case 'info':\n          return 2;\n        case 'warn':\n          return 3;\n        case 'error':\n          return 4;\n        case 'fatal':\n          return 5;\n        case 'off':\n        case 'false':\n        case '0':\n        case 'no':\n          return 6;\n        default:\n          return -1;\n      }\n    }\n\n    function getMinLogLevel(configSettings: object, loggerName: string = '*'): number {\n      return getLogLevel(getTypeAndSourceSetting(configSettings, 'log', loggerName, 'Trace') + '');\n    }\n\n    // tslint:disable-next-line:ban-types\n    function getTypeAndSourceSetting(configSettings: Object = {}, type: string, source: string, defaultValue?: string | boolean): string | boolean {\n      if (!type) {\n        return defaultValue;\n      }\n\n      const isLog = type === 'log';\n      const sourcePrefix = `@@${type}:`;\n\n      const value = configSettings[sourcePrefix + source];\n      if (value) {\n        return !isLog ? Utils.toBoolean(value) : value;\n      }\n\n      // check for wildcard match\n      for (const key in configSettings) {\n        if (Utils.startsWith(key.toLowerCase(), sourcePrefix.toLowerCase()) && Utils.isMatch(source, [key.substring(sourcePrefix.length)])) {\n          return !isLog ? Utils.toBoolean(configSettings[key]) : configSettings[key];\n        }\n      }\n\n      return defaultValue;\n    }\n\n    const ev = context.event;\n    const log = context.log;\n    const settings = context.client.config.settings;\n\n    if (ev.type === 'log') {\n      const minLogLevel = getMinLogLevel(settings, ev.source);\n      const logLevel = getLogLevel(ev.data['@level']);\n\n      if (logLevel >= 0 && (logLevel > 5 || logLevel < minLogLevel)) {\n        log.info('Cancelling log event due to minimum log level.');\n        context.cancelled = true;\n      }\n    } else if (ev.type === 'error') {\n      let error: IInnerError = ev.data['@error'];\n      while (!context.cancelled && error) {\n        if (getTypeAndSourceSetting(settings, ev.type, error.type, true) === false) {\n          log.info(`Cancelling error from excluded exception type: ${error.type}`);\n          context.cancelled = true;\n        }\n\n        error = error.inner;\n      }\n    } else if (getTypeAndSourceSetting(settings, ev.type, ev.source, true) === false) {\n      log.info(`Cancelling event from excluded type: ${ev.type} and source: ${ev.source}`);\n      context.cancelled = true;\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                           \n\nexport class ModuleInfoPlugin implements IEventPlugin {\n  public priority: number = 50;\n  public name: string = 'ModuleInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\n\n    const collector = context.client.config.moduleCollector;\n    if (context.event.data[ERROR_KEY] && !context.event.data['@error'].modules && !!collector) {\n      const modules: IModule[] = collector.getModules(context);\n      if (modules && modules.length > 0) {\n        context.event.data[ERROR_KEY].modules = modules;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                          \n\nexport class RequestInfoPlugin implements IEventPlugin {\n  public priority: number = 70;\n  public name: string = 'RequestInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const REQUEST_KEY: string = '@request'; // optimization for minifier.\n\n    const config = context.client.config;\n    const collector = config.requestInfoCollector;\n    if (!context.event.data[REQUEST_KEY] && !!collector) {\n      const requestInfo: IRequestInfo = collector.getRequestInfo(context);\n      if (!!requestInfo) {\n        if (Utils.isMatch(requestInfo.user_agent, config.userAgentBotPatterns)) {\n          context.log.info('Cancelling event as the request user agent matches a known bot pattern');\n          context.cancelled = true;\n        } else {\n          context.event.data[REQUEST_KEY] = requestInfo;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                           \n\nexport class SubmissionMethodPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = 'SubmissionMethodPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const submissionMethod: string = context.contextData.getSubmissionMethod();\n    if (!!submissionMethod) {\n      context.event.data['@submission_method'] = submissionMethod;\n    }\n\n    next && next();\n  }\n}\n\n                                                                                     \n\nexport class InMemoryStorage implements IStorage {\n  private maxItems: number;\n  private items: IStorageItem[] = [];\n  private lastTimestamp: number = 0;\n\n  constructor(maxItems: number) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any): number {\n    if (!value) {\n      return null;\n    }\n\n    const items = this.items;\n    const timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    const item = { timestamp, value };\n\n    if (items.push(item) > this.maxItems) {\n      items.shift();\n    }\n\n    this.lastTimestamp = timestamp;\n    return item.timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    return this.items.slice(0, limit);\n  }\n\n  public remove(timestamp: number): void {\n    const items = this.items;\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].timestamp === timestamp) {\n        items.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  public clear(): void {\n    this.items = [];\n  }\n}\n\nexport interface IClientConfiguration {\n  settings: object;\n  version: number;\n}\n\n                                                                                     \n\nexport abstract class KeyValueStorageBase implements IStorage {\n  private maxItems: number;\n  private items: number[];\n  private lastTimestamp: number = 0;\n\n  constructor(maxItems) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any, single?: boolean): number {\n    if (!value) {\n      return null;\n    }\n\n    this.ensureIndex();\n\n    const items = this.items;\n    const timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    const key = this.getKey(timestamp);\n    const json = JSON.stringify(value);\n\n    try {\n      this.write(key, json);\n      this.lastTimestamp = timestamp;\n      if (items.push(timestamp) > this.maxItems) {\n        this.delete(this.getKey(items.shift()));\n      }\n    } catch (e) {\n      return null;\n    }\n\n    return timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    this.ensureIndex();\n\n    return this.items.slice(0, limit)\n      .map((timestamp) => {\n        // Read and parse item for this timestamp\n        const key = this.getKey(timestamp);\n        try {\n          const json = this.read(key);\n          const value = JSON.parse(json, parseDate);\n          return { timestamp, value };\n        } catch (error) {\n          // Something went wrong - try to delete the cause.\n          this.safeDelete(key);\n          return null;\n        }\n      })\n      .filter((item) => item != null);\n  }\n\n  public remove(timestamp: number): void {\n    this.ensureIndex();\n\n    const items = this.items;\n    const index = items.indexOf(timestamp);\n    if (index >= 0) {\n      const key = this.getKey(timestamp);\n      this.safeDelete(key);\n      items.splice(index, 1);\n    }\n  }\n\n  public clear(): void {\n    this.items.forEach((item) => this.safeDelete(this.getKey(item)));\n    this.items = [];\n  }\n\n  protected abstract write(key: string, value: string): void;\n  protected abstract read(key: string): string;\n  protected abstract readAllKeys(): string[];\n  protected abstract delete(key: string);\n  protected abstract getKey(timestamp: number): string;\n  protected abstract getTimestamp(key: string): number;\n\n  private ensureIndex() {\n    if (!this.items) {\n      this.items = this.createIndex();\n      this.lastTimestamp = Math.max(0, ...this.items) + 1;\n    }\n  }\n\n  private safeDelete(key: string): void {\n    try {\n      this.delete(key);\n    } catch (error) {\n    }\n  }\n\n  private createIndex() {\n    try {\n      const keys = this.readAllKeys();\n      return keys.map((key) => {\n        try {\n          const timestamp = this.getTimestamp(key);\n          if (!timestamp) {\n            this.safeDelete(key);\n            return null;\n          }\n          return timestamp;\n        } catch (error) {\n          this.safeDelete(key);\n          return null;\n        }\n      }).filter((timestamp) => timestamp != null)\n        .sort((a, b) => a - b);\n    } catch (error) {\n      return [];\n    }\n  }\n}\n\nfunction parseDate(key, value) {\n  const dateRegx = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/g;\n  if (typeof value === 'string') {\n    const a = dateRegx.exec(value);\n    if (a) {\n      return new Date(value);\n    }\n  }\n  return value;\n}\n\n                                                            \n\nexport class BrowserStorage extends KeyValueStorageBase {\n  private prefix: string;\n\n  public static isAvailable(): boolean {\n    try {\n      const storage = window.localStorage;\n      const x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  constructor(namespace: string, prefix: string = 'com.exceptionless.', maxItems: number = 20) {\n    super(maxItems);\n\n    this.prefix = prefix + namespace + '-';\n  }\n\n  public write(key: string, value: string) {\n    window.localStorage.setItem(key, value);\n  }\n\n  public read(key: string) {\n    return window.localStorage.getItem(key);\n  }\n\n  public readAllKeys() {\n    return Object.keys(window.localStorage)\n      .filter((key) => key.indexOf(this.prefix) === 0);\n  }\n\n  public delete(key: string) {\n    window.localStorage.removeItem(key);\n  }\n\n  public getKey(timestamp) {\n    return this.prefix + timestamp;\n  }\n\n  public getTimestamp(key) {\n    return parseInt(key.substr(this.prefix.length), 10);\n  }\n}\n\n                                                                                                                                                                                                                                                                                                           \n\nexport class DefaultErrorParser implements IErrorParser {\n  public parse(context: EventPluginContext, exception: Error): IError {\n    function getParameters(parameters: string | string[]): IParameter[] {\n      const params: string[] = (typeof parameters === 'string' ? [parameters] : parameters) || [];\n\n      const result: IParameter[] = [];\n      for (const param of params) {\n        result.push({ name: param });\n      }\n\n      return result;\n    }\n\n    function getStackFrames(stackFrames: TraceKit.StackFrame[]): IStackFrame[] {\n      const ANONYMOUS: string = '<anonymous>';\n      const frames: IStackFrame[] = [];\n\n      for (const frame of stackFrames) {\n        frames.push({\n          name: (frame.func || ANONYMOUS).replace('?', ANONYMOUS),\n          parameters: getParameters(frame.args),\n          file_name: frame.url,\n          line_number: frame.line || 0,\n          column: frame.column || 0\n        });\n      }\n\n      return frames;\n    }\n\n    const TRACEKIT_STACK_TRACE_KEY: string = '@@_TraceKit.StackTrace'; // optimization for minifier.\n\n    const stackTrace: TraceKit.StackTrace = !!context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      ? context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      : TraceKit.computeStackTrace(exception, 25);\n\n    if (!stackTrace) {\n      throw new Error('Unable to parse the exceptions stack trace.');\n    }\n\n    const message = typeof (exception) === 'string' ? exception as any : undefined;\n    return {\n      type: stackTrace.name || 'Error',\n      message: stackTrace.message || exception.message || message,\n      stack_trace: getStackFrames(stackTrace.stack || [])\n    };\n  }\n}\n\n                                                                                                                                                                                                         \n\nexport class DefaultModuleCollector implements IModuleCollector {\n  public getModules(context: EventPluginContext): IModule[] {\n    if (!document || !document.getElementsByTagName) {\n      return null;\n    }\n\n    const modules: IModule[] = [];\n    const scripts: NodeListOf<HTMLScriptElement> = document.getElementsByTagName('script');\n    if (scripts && scripts.length > 0) {\n      for (let index = 0; index < scripts.length; index++) {\n        if (scripts[index].src) {\n          modules.push({\n            module_id: index,\n            name: scripts[index].src.split('?')[0],\n            version: Utils.parseVersion(scripts[index].src)\n          });\n        } else if (!!scripts[index].innerHTML) {\n          modules.push({\n            module_id: index,\n            name: 'Script Tag',\n            version: Utils.getHashCode(scripts[index].innerHTML).toString()\n          });\n        }\n      }\n    }\n\n    return modules;\n  }\n}\n\n                                                                                                                                                                                                                             \n\nexport class DefaultRequestInfoCollector implements IRequestInfoCollector {\n  public getRequestInfo(context: EventPluginContext): IRequestInfo {\n    if (!document || !navigator || !location) {\n      return null;\n    }\n\n    const config = context.client.config;\n    const exclusions = config.dataExclusions;\n    const requestInfo: IRequestInfo = {\n      user_agent: navigator.userAgent,\n      is_secure: location.protocol === 'https:',\n      host: location.hostname,\n      port: location.port && location.port !== '' ? parseInt(location.port, 10) : 80,\n      path: location.pathname\n      // client_ip_address: 'TODO'\n    };\n\n    if (config.includeCookies) {\n      requestInfo.cookies = Utils.getCookies(document.cookie, exclusions);\n    }\n\n    if (config.includeQueryString) {\n      requestInfo.query_string = Utils.parseQueryString(location.search.substring(1), exclusions);\n    }\n\n    if (document.referrer && document.referrer !== '') {\n      requestInfo.referrer = document.referrer;\n    }\n\n    return requestInfo;\n  }\n}\n\n                                                                                                                                                \n\nexport class BrowserStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(prefix?: string, maxQueueItems: number = 250) {\n    this.queue = new BrowserStorage('q', prefix, maxQueueItems);\n    this.settings = new BrowserStorage('settings', prefix, 1);\n  }\n\n}\n\n                                                                                                                                                                              \n\n// tslint:disable-next-line:prefer-const\ndeclare var XDomainRequest: { new(); create(); };\n\nexport class DefaultSubmissionAdapter implements ISubmissionAdapter {\n  public sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean) {\n    // TODO: Handle sending events when app is exiting with send beacon.\n    const TIMEOUT: string = 'timeout';  // optimization for minifier.\n    const LOADED: string = 'loaded';  // optimization for minifier.\n    const WITH_CREDENTIALS: string = 'withCredentials';  // optimization for minifier.\n\n    let isCompleted: boolean = false;\n    let useSetTimeout: boolean = false;\n    function complete(mode: string, xhrRequest: XMLHttpRequest) {\n      function parseResponseHeaders(headerStr) {\n        function trim(value) {\n          return value.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n        }\n\n        const headers = {};\n        const headerPairs = (headerStr || '').split('\\u000d\\u000a');\n        for (const headerPair of headerPairs) {\n          // Can't use split() here because it does the wrong thing\n          // if the header value has the string \": \" in it.\n          const separator = headerPair.indexOf('\\u003a\\u0020');\n          if (separator > 0) {\n            headers[trim(headerPair.substring(0, separator).toLowerCase())] = headerPair.substring(separator + 2);\n          }\n        }\n\n        return headers;\n      }\n\n      if (isCompleted) {\n        return;\n      }\n\n      isCompleted = true;\n\n      let message: string = xhrRequest.statusText;\n      const responseText: string = xhrRequest.responseText;\n      let status: number = xhrRequest.status;\n\n      if (mode === TIMEOUT || status === 0) {\n        message = 'Unable to connect to server.';\n        status = 0;\n      } else if (mode === LOADED && !status) {\n        status = request.method === 'POST' ? 202 : 200;\n      } else if (status < 200 || status > 299) {\n        const responseBody: any = (xhrRequest as any).responseBody;\n        if (!!responseBody && !!responseBody.message) {\n          message = responseBody.message;\n        } else if (!!responseText && responseText.indexOf('message') !== -1) {\n          try {\n            message = JSON.parse(responseText).message;\n          } catch (e) {\n            message = responseText;\n          }\n        }\n      }\n\n      callback && callback(status || 500, message || '', responseText, parseResponseHeaders(xhrRequest.getAllResponseHeaders && xhrRequest.getAllResponseHeaders()));\n    }\n\n    function createRequest(userAgent: string, method: string, uri: string): XMLHttpRequest {\n      let xmlRequest: any = new XMLHttpRequest();\n      if (WITH_CREDENTIALS in xmlRequest) {\n        xmlRequest.open(method, uri, true);\n\n        xmlRequest.setRequestHeader('X-Exceptionless-Client', userAgent);\n        if (method === 'POST') {\n          xmlRequest.setRequestHeader('Content-Type', 'application/json');\n        }\n      } else if (typeof XDomainRequest !== 'undefined') {\n        useSetTimeout = true;\n        xmlRequest = new XDomainRequest();\n        xmlRequest.open(method, location.protocol === 'http:' ? uri.replace('https:', 'http:') : uri);\n      } else {\n        xmlRequest = null;\n      }\n\n      if (xmlRequest) {\n        xmlRequest.timeout = 10000;\n      }\n\n      return xmlRequest;\n    }\n\n    const url = `${request.url}${(request.url.indexOf('?') === -1 ? '?' : '&')}access_token=${encodeURIComponent(request.apiKey)}`;\n    const xhr = createRequest(request.userAgent, request.method || 'POST', url);\n    if (!xhr) {\n      return (callback && callback(503, 'CORS not supported.'));\n    }\n\n    if (WITH_CREDENTIALS in xhr) {\n      xhr.onreadystatechange = () => {\n        // xhr not ready.\n        if (xhr.readyState !== 4) {\n          return;\n        }\n\n        complete(LOADED, xhr);\n      };\n    }\n\n    xhr.onprogress = () => { };\n    xhr.ontimeout = () => complete(TIMEOUT, xhr);\n    xhr.onerror = () => complete('error', xhr);\n    xhr.onload = () => complete(LOADED, xhr);\n\n    if (useSetTimeout) {\n      setTimeout(() => xhr.send(request.data), 500);\n    } else {\n      xhr.send(request.data);\n    }\n  }\n}\n\n                                                                                                                     \n\nexport class NodeFileStorage extends KeyValueStorageBase {\n  private directory: string;\n  private prefix: string;\n  private fs: any;\n\n  constructor(namespace: string, folder?: string, prefix: string = 'ex-', maxItems: number = 20, fs?: any) {\n    super(maxItems);\n\n    if (!folder) {\n      folder = Path.join(Path.dirname(require.main.filename), '.exceptionless');\n    }\n\n    const subfolder = Path.join(folder, namespace);\n    this.directory = Path.resolve(subfolder);\n    this.prefix = prefix;\n    this.fs = fs ? fs : Fs;\n\n    this.mkdir(this.directory);\n  }\n\n  public write(key: string, value: string) {\n    this.fs.writeFileSync(key, value);\n  }\n\n  public read(key: string) {\n    return this.fs.readFileSync(key, 'utf8');\n  }\n\n  public readAllKeys() {\n    return this.fs.readdirSync(this.directory)\n      .filter((file) => file.indexOf(this.prefix) === 0)\n      .map((file) => Path.join(this.directory, file));\n  }\n\n  public delete(key: string) {\n    this.fs.unlinkSync(key);\n  }\n\n  public getKey(timestamp) {\n    return Path.join(this.directory, `${this.prefix}${timestamp}.json`);\n  }\n\n  public getTimestamp(key) {\n    return parseInt(Path.basename(key, '.json')\n      .substr(this.prefix.length), 10);\n  }\n\n  private mkdir(path) {\n    const dirs = path.split(Path.sep);\n    let root = '';\n\n    while (dirs.length > 0) {\n      const dir = dirs.shift();\n      if (dir === '') {\n        root = Path.sep;\n      }\n      if (!this.fs.existsSync(root + dir)) {\n        this.fs.mkdirSync(root + dir);\n      }\n      root += dir + Path.sep;\n    }\n  }\n}\n\n                                                                                                                                                                                                                                       \n\nexport class NodeEnvironmentInfoCollector implements IEnvironmentInfoCollector {\n  public getEnvironmentInfo(context: EventPluginContext): IEnvironmentInfo {\n    function getIpAddresses(): string {\n      const ips: string[] = [];\n      const interfaces = os.networkInterfaces();\n      Object.keys(interfaces).forEach((name) => {\n        interfaces[name].forEach((iface: any) => {\n          if ('IPv4' === iface.family && !iface.internal) {\n            ips.push(iface.address);\n          }\n        });\n      });\n\n      return ips.join(', ');\n    }\n\n    if (!os) {\n      return null;\n    }\n\n    const environmentInfo: IEnvironmentInfo = {\n      processor_count: os.cpus().length,\n      total_physical_memory: os.totalmem(),\n      available_physical_memory: os.freemem(),\n      command_line: process.argv.join(' '),\n      process_name: (process.title || '').replace(/[\\uE000-\\uF8FF]/g, ''),\n      process_id: process.pid + '',\n      process_memory_size: process.memoryUsage().heapTotal,\n      // thread_id: '',\n      architecture: os.arch(),\n      o_s_name: os.type(),\n      o_s_version: os.release(),\n      // install_id: '',\n      runtime_version: process.version,\n      data: {\n        loadavg: os.loadavg(),\n        platform: os.platform(),\n        tmpdir: os.tmpdir(),\n        uptime: os.uptime()\n      }\n    };\n\n    const config = context.client.config;\n    if (config.includeMachineName) {\n      environmentInfo.machine_name = os.hostname();\n    }\n\n    if (config.includeIpAddress) {\n      environmentInfo.ip_address = getIpAddresses();\n    }\n\n    if ((os as any).endianness) {\n      environmentInfo.data.endianness = (os as any).endianness();\n    }\n\n    return environmentInfo;\n  }\n}\n\n                                                                                                                                                                                                                                                                   \n\nexport class NodeErrorParser implements IErrorParser {\n  public parse(context: EventPluginContext, exception: Error): IError {\n    function getStackFrames(frames: any[]): IStackFrame[] {\n      const result: IStackFrame[] = [];\n\n      for (const frame of frames) {\n        result.push({\n          name: frame.getMethodName() || frame.getFunctionName(),\n          // parameters: frame.args,\n          file_name: frame.getFileName(),\n          line_number: frame.getLineNumber() || 0,\n          column: frame.getColumnNumber() || 0,\n          declaring_type: frame.getTypeName(),\n          data: {\n            is_native: frame.isNative() || (!!frame.filename && frame.filename[0] !== '/' && frame.filename[0] !== '.')\n          }\n        });\n      }\n\n      return result;\n    }\n\n    if (!nodestacktrace) {\n      throw new Error('Unable to load the stack trace library.');\n    }\n\n    const stackFrames = nodestacktrace.parse(exception) || [];\n    return {\n      type: exception.name || 'Error',\n      message: exception.message,\n      stack_trace: getStackFrames(stackFrames)\n    };\n  }\n}\n\n                                                                                                                                                                                                                                                \n\nexport class NodeModuleCollector implements IModuleCollector {\n\n  private initialized: boolean = false;\n  private installedModules: { [id: string]: IModule } = {};\n\n  public getModules(context: EventPluginContext): IModule[] {\n    this.initialize();\n\n    if (!require.main) {\n      return [];\n    }\n\n    const modulePath = path.dirname(require.main.filename) + '/node_modules/';\n    const pathLength = modulePath.length;\n\n    const loadedKeys = Object.keys(require.cache);\n    const loadedModules = {};\n\n    loadedKeys.forEach((key) => {\n      let id = key.substr(pathLength);\n      id = id.substr(0, id.indexOf('/'));\n      loadedModules[id] = true;\n    });\n\n    return Object.keys(loadedModules)\n      .map((key) => this.installedModules[key])\n      .filter((m) => m !== undefined);\n  }\n\n  private initialize() {\n    if (this.initialized) {\n      return;\n    }\n\n    this.initialized = true;\n\n    const output = child.spawnSync('npm', ['ls', '--depth=0', '--json']).stdout;\n\n    if (!output) {\n      return;\n    }\n\n    let json;\n    try {\n      json = JSON.parse(output.toString());\n    } catch (e) {\n      return;\n    }\n\n    const items = json.dependencies;\n    if (!items) {\n      return;\n    }\n\n    let id = 0;\n    this.installedModules = {};\n\n    Object.keys(items).forEach((key) => {\n      const item = items[key];\n      const theModule: IModule = {\n        module_id: id++,\n        name: key,\n        version: item.version\n      };\n\n      this.installedModules[key] = theModule;\n    });\n  }\n}\n\n                                                                                                                                                                                                                             \n\nexport class NodeRequestInfoCollector implements IRequestInfoCollector {\n  public getRequestInfo(context: EventPluginContext): IRequestInfo {\n    const REQUEST_KEY: string = '@request'; // optimization for minifier.\n    if (!context.contextData[REQUEST_KEY]) {\n      return null;\n    }\n\n    const config = context.client.config;\n    const exclusions = config.dataExclusions;\n\n    // TODO: include referrer\n    const request = context.contextData[REQUEST_KEY];\n    const requestInfo: IRequestInfo = {\n      user_agent: request.headers['user-agent'],\n      is_secure: request.secure,\n      http_method: request.method,\n      host: request.hostname || request.host,\n      path: request.path\n    };\n\n    const host = request.headers.host;\n    const port: number = host && parseInt(host.slice(host.indexOf(':') + 1), 10);\n    if (port > 0) {\n      requestInfo.port = port;\n    }\n\n    if (config.includeIpAddress) {\n      requestInfo.client_ip_address = request.ip;\n    }\n\n    if (config.includeCookies) {\n      requestInfo.cookies = Utils.getCookies(request.headers.cookie, exclusions);\n    }\n\n    if (config.includeQueryString) {\n      requestInfo.query_string = JSON.parse(Utils.stringify(request.params || {}, exclusions));\n    }\n\n    if (config.includePostData) {\n      requestInfo.post_data = JSON.parse(Utils.stringify(request.body || {}, exclusions));\n    }\n\n    return requestInfo;\n  }\n}\n\n                                                                                                                                                  \n\nexport class NodeFileStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(folder?: string, prefix?: string, maxQueueItems: number = 250) {\n    this.queue = new NodeFileStorage('q', folder, prefix, maxQueueItems);\n    this.settings = new NodeFileStorage('settings', folder, prefix, 1);\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                     \n\nexport class NodeSubmissionAdapter implements ISubmissionAdapter {\n  public sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean) {\n    if (isAppExiting) {\n      this.sendRequestSync(request, callback);\n      return;\n    }\n\n    const parsedHost = url.parse(request.url);\n\n    const options: https.RequestOptions = {\n      auth: `client:${request.apiKey}`,\n      headers: {},\n      hostname: parsedHost.hostname,\n      method: request.method,\n      port: parsedHost.port && parseInt(parsedHost.port, 10),\n      path: request.url\n    };\n\n    options.headers['User-Agent'] = request.userAgent;\n\n    if (request.method === 'POST') {\n      options.headers = {\n        'Content-Type': 'application/json',\n        'Content-Length': Buffer.byteLength(request.data)\n      };\n    }\n\n    const protocol: any = (parsedHost.protocol === 'https:' ? https : http);\n    const clientRequest: http.ClientRequest = protocol.request(options, (response: http.IncomingMessage) => {\n      let body = '';\n      response.setEncoding('utf8');\n      response.on('data', (chunk) => body += chunk);\n      response.on('end', () => this.complete(response, body, response.headers, callback));\n    });\n\n    clientRequest.on('error', (error: Error) => callback && callback(500, error.message));\n    clientRequest.end(request.data);\n  }\n\n  private complete(response: http.IncomingMessage, responseBody: string, responseHeaders: object, callback: SubmissionCallback): void {\n    let message: string;\n    if (response.statusCode === 0) {\n      message = 'Unable to connect to server.';\n    } else if (response.statusCode < 200 || response.statusCode > 299) {\n      message = response.statusMessage || (response as any).message;\n    }\n\n    callback && callback(response.statusCode || 500, message, responseBody, responseHeaders);\n  }\n\n  private sendRequestSync(request: SubmissionRequest, callback: SubmissionCallback): void {\n    const requestJson = JSON.stringify(request);\n    const res = child.spawnSync(process.execPath, [require.resolve('./submitSync.js')],\n      {\n        input: requestJson,\n        stdio: ['pipe', 'pipe', process.stderr]\n      });\n\n    const out = res.stdout.toString();\n    const result = JSON.parse(out);\n\n    callback && callback(result.status, result.message, result.data, result.headers);\n  }\n}\n\nn\n(function init() {\n  function getDefaultsSettingsFromScriptTag(): IConfigurationSettings {\n    if (!document || !document.getElementsByTagName) {\n      return null;\n    }\n\n    const scripts = document.getElementsByTagName('script');\n    // tslint:disable-next-line:prefer-for-of\n    for (let index = 0; index < scripts.length; index++) {\n      if (scripts[index].src && scripts[index].src.indexOf('/exceptionless') > -1) {\n        return Utils.parseQueryString(scripts[index].src.split('?').pop());\n      }\n    }\n    return null;\n  }\n\n  function processUnhandledException(stackTrace: TraceKit.StackTrace, options?: any): void {\n    const builder = ExceptionlessClient.default.createUnhandledException(new Error(stackTrace.message || (options || {}).status || 'Script error'), 'onerror');\n    builder.pluginContextData['@@_TraceKit.StackTrace'] = stackTrace;\n    builder.submit();\n  }\n\n  if (typeof document === 'undefined') {\n    return;\n  }\n\n  /*\n   TODO: We currently are unable to parse string exceptions.\n   function processJQueryAjaxError(event, xhr, settings, error:string): void {\n   let client = ExceptionlessClient.default;\n   if (xhr.status === 404) {\n   client.submitNotFound(settings.url);\n   } else if (xhr.status !== 401) {\n   client.createUnhandledException(error, 'JQuery.ajaxError')\n   .setSource(settings.url)\n   .setProperty('status', xhr.status)\n   .setProperty('request', settings.data)\n   .setProperty('response', xhr.responseText && xhr.responseText.slice && xhr.responseText.slice(0, 1024))\n   .submit();\n   }\n   }\n   */\n\n  Configuration.prototype.useLocalStorage = function() {\n    if (BrowserStorage.isAvailable()) {\n      this.storage = new BrowserStorageProvider();\n      SettingsManager.applySavedServerSettings(this);\n      this.changed();\n    }\n  };\n\n  const defaults = Configuration.defaults;\n  const settings = getDefaultsSettingsFromScriptTag();\n  if (settings) {\n    if (settings.apiKey) {\n      defaults.apiKey = settings.apiKey;\n    }\n\n    if (settings.serverUrl) {\n      defaults.serverUrl = settings.serverUrl;\n    }\n\n    if (typeof settings.includePrivateInformation === 'string') {\n      defaults.includePrivateInformation = settings.includePrivateInformation === 'false' ? false : true;\n    }\n  }\n\n  defaults.errorParser = new DefaultErrorParser();\n  defaults.moduleCollector = new DefaultModuleCollector();\n  defaults.requestInfoCollector = new DefaultRequestInfoCollector();\n  defaults.submissionAdapter = new DefaultSubmissionAdapter();\n\n  TraceKit.report.subscribe(processUnhandledException);\n  TraceKit.extendToAsynchronousCallbacks();\n\n  // window && window.addEventListener && window.addEventListener('beforeunload', function () {\n  //   ExceptionlessClient.default.config.queue.process(true);\n  // });\n\n  // if (typeof $ !== 'undefined' && $(document)) {\n  //   $(document).ajaxError(processJQueryAjaxError);\n  // }\n\n  (Error as any).stackTraceLimit = Infinity;\n})();\n\n// tslint:disable-next-line:prefer-const\ndeclare var $;\n\nn\n(function init() {\n  if (typeof process === 'undefined') {\n    return;\n  }\n\n  const defaults = Configuration.defaults;\n  defaults.environmentInfoCollector = new NodeEnvironmentInfoCollector();\n  defaults.errorParser = new NodeErrorParser();\n  defaults.moduleCollector = new NodeModuleCollector();\n  defaults.requestInfoCollector = new NodeRequestInfoCollector();\n  defaults.submissionAdapter = new NodeSubmissionAdapter();\n\n  Configuration.prototype.useLocalStorage = function() {\n    this.storage = new NodeFileStorageProvider();\n    SettingsManager.applySavedServerSettings(this);\n    this.changed();\n  };\n\n  process.addListener('uncaughtException', (error: Error) => {\n    ExceptionlessClient.default.submitUnhandledException(error, 'uncaughtException');\n  });\n\n  process.on('exit', (code: number) => {\n    /**\n     * exit codes: https://nodejs.org/api/process.html#process_event_exit\n     * From now on, only synchronous code may run. As soon as this method\n     * ends, the application inevitably will exit.\n     */\n    function getExitCodeReason(exitCode: number): string {\n      if (exitCode === 1) {\n        return 'Uncaught Fatal Exception';\n      }\n\n      if (exitCode === 3) {\n        return 'Internal JavaScript Parse Error';\n      }\n\n      if (exitCode === 4) {\n        return 'Internal JavaScript Evaluation Failure';\n      }\n\n      if (exitCode === 5) {\n        return 'Fatal Exception';\n      }\n\n      if (exitCode === 6) {\n        return 'Non-function Internal Exception Handler ';\n      }\n\n      if (exitCode === 7) {\n        return 'Internal Exception Handler Run-Time Failure';\n      }\n\n      if (exitCode === 8) {\n        return 'Uncaught Exception';\n      }\n\n      if (exitCode === 9) {\n        return 'Invalid Argument';\n      }\n\n      if (exitCode === 10) {\n        return 'Internal JavaScript Run-Time Failure';\n      }\n\n      if (exitCode === 12) {\n        return 'Invalid Debug Argument';\n      }\n\n      return null;\n    }\n\n    const client = ExceptionlessClient.default;\n    const message = getExitCodeReason(code);\n\n    if (message !== null) {\n      client.submitLog('exit', message, 'Error');\n    }\n\n    client.config.queue.process(true);\n    // Application will now exit.\n  });\n\n  (Error as any).stackTraceLimit = Infinity;\n})();\n\n                                                                                                                   \n\n"]}