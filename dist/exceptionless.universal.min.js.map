{"version":3,"sources":["tracekit.js","exceptionless.universal.ts"],"names":["window","_oldOnerrorHandler","_onErrorHandlerInstalled","handlers","lastException","lastExceptionStack","debug","sourceCache","TraceKit","_oldTraceKit","_slice","slice","UNKNOWN_FUNCTION","ERROR_TYPES_RE","noConflict","wrap","func","apply","this","arguments","e","report","subscribe","handler","onerror","traceKitWindowOnError","push","unsubscribe","i","length","splice","computeStackTrace","augmentStackTraceWithInitialElement","computeStackTraceFromStackProp","guessFunctionName","gatherContext","ofCaller","depth","Error","ex","getSource","extendToAsynchronousCallbacks","_helper","fnName","originalFn","args","call","originalCallback","remoteFetching","collectWindowErrors","linesOfContext","define","amd","module","exports","_has","object","key","Object","prototype","hasOwnProperty","_isUndefined","what","notifyHandlers","stack","isWindowError","error","exception","inner","message","url","lineNo","columnNo","errorObj","processLastException","name","location","line","column","msg","toString","groups","match","context","mode","_lastExceptionStack","_lastException","setTimeout","incomplete","source","domain","document","exec","request","XMLHttpRequest","ActiveXObject","getXHR","open","send","responseText","loadSource","split","m","reFunctionArgNames","reGuessFunction","linesBefore","Math","floor","linesAfter","start","max","end","min","escapeRegExp","text","replace","escapeCodeAsRegExpForMatchingInsideHTML","body","findSourceInUrls","re","urls","j","join","substring","index","lastIndexOf","findSourceInLine","fragment","RegExp","findSourceByFunctionBody","parts","result","href","scripts","getElementsByTagName","code","script","src","event","submatch","element","chrome","gecko","winjs","geckoEval","chromeEval","lines","reference","isNative","indexOf","columnNumber","stackInfo","initial","unshift","partial","computeStackTraceByWalkingCallerChain","item","functionName","funcs","recursion","curr","caller","input","description","sourceURL","fileName","lineNumber","stacktrace","opera10Regex","opera11Regex","exc","computeStackTraceFromStacktraceProp","lineRE1","lineRE2","lineRE3","inlineScriptBlocks","s","relativeLine","pos","innerText","midline","computeStackTraceFromOperaMultiLineMessage","global","extendStatics","__extends","setPrototypeOf","__proto__","Array","d","b","p","__","constructor","create","value","require","process","os","child","path","Path","http","DefaultLastReferenceIdManager","getLast","_lastReferenceId","clearLast","setLast","eventId","ConsoleLog","trace","log","info","warn","level","console","NullLog","HeartbeatPlugin","run","next","clearInterval","_intervalId","user","data","identity","setInterval","client","submitSessionHeartbeat","_interval","heartbeatInterval","priority","ReferenceIdPlugin","reference_id","type","Utils","guid","EventPluginContext","defineProperty","config","contextData","ContextData","callback","plugin","cancelled","plugins","wrappedPlugins","EventPluginManager","addDefaultPlugins","addPlugin","ConfigurationDefaultsPlugin","ErrorPlugin","DuplicateCheckerPlugin","EventExclusionPlugin","ModuleInfoPlugin","RequestInfoPlugin","EnvironmentInfoPlugin","SubmissionMethodPlugin","enqueue","eventWillNotBeQueued","_config","enabled","isValid","areQueuedItemsDiscarded","ensureQueueTimer","timestamp","storage","queue","save","logText","isAppExiting","_this","queueNotProcessed","_processingQueue","events_1","get","submissionBatchSize","serverUrl","submissionClient","postEvents","map","response","processSubmissionResponse","eventsPosted","suspendProcessing","DefaultEventQueue","durationInMinutes","discardFutureQueuedItems","clearQueue","_suspendProcessingUntil","Date","getTime","_discardQueuedItemsUntil","clear","onEventsPosted","_handlers","events","_i","handlers_1","_queueTimer","onProcessQueue","isQueueProcessingSuspended","noSubmission","success","removeEvents","serviceUnavailable","paymentRequired","unableToAuthenticate","notFound","badRequest","requestEntityTooLarge","round","remove","maxQueueItems","InMemoryStorage","settings","InMemoryStorageProvider","JSON","stringify","createRequest","createSubmissionCallback","submissionAdapter","sendRequest","cb","postUserDescription","referenceId","encodeURIComponent","getSettings","version","configServerUrl","status","headers","SettingsResponse","parse","isNaN","DefaultSubmissionClient","sendHeartbeat","sessionIdOrUserId","closeSession","heartbeatServerUrl","method","apiKey","userAgent","settingsVersion","parseInt","configurationVersionHeader","SettingsManager","checkVersion","SubmissionResponse","target","values","_a","values_1","getHashCode","hash","charCodeAt","cookies","exclusions","parts_1","cookie","isMatch","isEmpty","s4","random","merge","defaultValues","undefined","parseVersion","matches","query","pairs","pairs_1","decodeURIComponent","patterns","ignoreCase","trim","toLowerCase","some","pattern","startsWithWildcard","endsWithWildcard","endsWith","startsWith","keys","prefix","suffix","maxDepth","stringifyImpl","obj","excludedKeys","cache","flattened","prop","defaultValue","onChanged","applySavedServerSettings","savedSettings","getSavedServerSettings","changed","getVersion","currentVersion","updateSettings","_isUpdatingSettings","unableToUpdateMessage","savedServerSettings","newSettings","handlers_2","statusCode","ExceptionlessClient","createException","pluginContextData","setException","createEvent","setType","submitException","submit","createUnhandledException","submissionMethod","builder","markAsUnhandledError","setSubmissionMethod","submitUnhandledException","createFeatureUsage","feature","setSource","submitFeatureUsage","createLog","sourceOrMessage","setMessage","setProperty","submitLog","createNotFound","resource","submitNotFound","createSessionStart","submitSessionStart","submitSessionEnd","EventBuilder","date","submitEvent","eventPluginContext","tags","ctx","ev","lastReferenceIdManager","updateUserEmailAndDescription","email","userDescription","email_address","getLastReferenceId","updateSettingsTimer","initialDelay","clearTimeout","_timeoutId","interval","updateSettingsWhenIdleInterval","_instance","enumerable","configurable","settingsOrApiKey","Configuration","getException","getSubmissionMethod","set","_apiKey","_serverUrl","_configServerUrl","_heartbeatServerUrl","_updateSettingsWhenIdleInterval","_dataExclusions","concat","addDataExclusions","addRange","val","_includePrivateInformation","_includeUserName","_includeMachineName","_includeIpAddress","_includeCookies","_includePostData","_includeQueryString","_userAgentBotPatterns","userAgentBotPatterns","_plugins","sort","p1","p2","pluginOrName","pluginAction","pluginExists","plugins_1","removePlugin","setVersion","defaultData","setUserIdentity","userInfoOrIdentity","shouldRemove","userInfo","useSessions","sendHeartbeats","useReferenceIds","useLocalStorage","useDebugLogger","handlers_3","_defaultSettings","includePrivateInformation","configSettings","inject","fn","defaultTags","defaults","environmentInfoCollector","errorParser","moduleCollector","requestInfoCollector","setReferenceId","isValidIdentifier","_validIdentifierErrorMessage","setEventReference","id","setGeo","latitude","longitude","geo","setUserDescription","emailAddress","setManualStackingInfo","signatureData","title","signature_data","setManualStackingKey","manualStackingKey","ManualStackingKey","setValue","addTags","excludedPropertyNames","dataExclusions","markAsCritical","critical","addRequestInfo","defaultTags_1","tag","stack_trace","hashCode","count","now_1","_getCurrentTime","merged","_mergedEvents","filter","incrementCount","updateDate","_processedHashcodes","h","MergedEvent","shift","getCurrentTime","now","resubmit","_count","_context","ENVIRONMENT_KEY","collector","environmentInfo","getEnvironmentInfo","parser","additionalData","getTypeAndSourceSetting","isLog","sourcePrefix","toBoolean","loggerName","minLogLevel","getLogLevel","logLevel","modules","getModules","REQUEST_KEY","requestInfo","getRequestInfo","user_agent","items","lastTimestamp","maxItems","limit","single","ensureIndex","getKey","json","write","delete","read","parseDate","safeDelete","KeyValueStorageBase","forEach","createIndex","readAllKeys","getTimestamp","a","_super","BrowserStorage","isAvailable","localStorage","x","setItem","removeItem","getItem","substr","namespace","getParameters","parameters","params_1","param","TRACEKIT_STACK_TRACE_KEY","stackTrace","stackFrames","ANONYMOUS","frames","stackFrames_1","frame","file_name","line_number","getStackFrames","DefaultErrorParser","module_id","innerHTML","DefaultModuleCollector","navigator","is_secure","protocol","host","hostname","port","pathname","includeCookies","getCookies","includeQueryString","query_string","parseQueryString","search","referrer","DefaultRequestInfoCollector","BrowserStorageProvider","complete","xhrRequest","isCompleted","statusText","TIMEOUT","LOADED","responseBody","headerStr","headerPairs_1","headerPair","separator","parseResponseHeaders","getAllResponseHeaders","uri","xmlRequest","xhr","WITH_CREDENTIALS","setRequestHeader","XDomainRequest","useSetTimeout","timeout","onreadystatechange","readyState","onprogress","ontimeout","onload","DefaultSubmissionAdapter","NodeFileStorage","fs","writeFileSync","readFileSync","readdirSync","directory","file","unlinkSync","basename","mkdir","dirs","sep","root","dir","existsSync","mkdirSync","folder","main","filename","dirname","subFolder","resolve","Fs","ips","interfaces","cpus","totalmem","freemem","command_line","argv","process_name","process_id","pid","process_memory_size","memoryUsage","heapTotal","architecture","arch","o_s_name","o_s_version","release","runtime_version","loadavg","platform","tmpdir","uptime","includeMachineName","machine_name","includeIpAddress","ip_address","networkInterfaces","iface","family","internal","address","endianness","NodeEnvironmentInfoCollector","nodestacktrace","frames_1","getMethodName","getFunctionName","getFileName","getLineNumber","getColumnNumber","declaring_type","getTypeName","is_native","NodeErrorParser","initialize","pathLength","loadedKeys","loadedModules","installedModules","initialized","output","spawnSync","stdout","dependencies","theModule","NodeModuleCollector","secure","http_method","client_ip_address","ip","params","includePostData","post_data","NodeRequestInfoCollector","NodeFileStorageProvider","sendRequestSync","options","auth","parsedHost","Content-Type","Content-Length","Buffer","byteLength","clientRequest","https","setEncoding","on","chunk","responseHeaders","statusMessage","NodeSubmissionAdapter","requestJson","out","execPath","stdio","stderr","pop","getDefaultsSettingsFromScriptTag","default","stackTraceLimit","Infinity","addListener","exitCode"],"mappings":"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","file":"exceptionless.universal.min.js","sourcesContent":["/**\n * https://github.com/csnover/TraceKit\n * @license MIT\n * @namespace TraceKit\n */\n(function(window, undefined) {\nif (!window) {\n    return;\n}\n\nvar TraceKit = {};\nvar _oldTraceKit = window.TraceKit;\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\nvar ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/;\n\n/**\n * A better form of hasOwnProperty<br/>\n * Example: `_has(MainHostObject, property) === true/false`\n *\n * @param {Object} object to check property\n * @param {string} key to check\n * @return {Boolean} true if the object has the key and it is not inherited\n */\nfunction _has(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\n\n/**\n * Returns true if the parameter is undefined<br/>\n * Example: `_isUndefined(val) === true/false`\n *\n * @param {*} what Value to check\n * @return {Boolean} true if undefined and false otherwise\n */\nfunction _isUndefined(what) {\n    return typeof what === 'undefined';\n}\n\n/**\n * Export TraceKit out to another variable<br/>\n * Example: `var TK = TraceKit.noConflict()`\n * @return {Object} The TraceKit object\n * @memberof TraceKit\n */\nTraceKit.noConflict = function noConflict() {\n    window.TraceKit = _oldTraceKit;\n    return TraceKit;\n};\n\n/**\n * Wrap any function in a TraceKit reporter<br/>\n * Example: `func = TraceKit.wrap(func);`\n *\n * @param {Function} func Function to be wrapped\n * @return {Function} The wrapped func\n * @memberof TraceKit\n */\nTraceKit.wrap = function traceKitWrapper(func) {\n    function wrapped() {\n        try {\n            return func.apply(this, arguments);\n        } catch (e) {\n            TraceKit.report(e);\n            throw e;\n        }\n    }\n    return wrapped;\n};\n\n/**\n * Cross-browser processing of unhandled exceptions\n *\n * Syntax:\n * ```js\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n * ```\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *     on top frame; column number is not guaranteed\n *   - Opera: full stack trace with line and column numbers\n *   - Chrome: full stack trace with line and column numbers\n *   - Safari: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *   - IE: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a TraceKit.StackTrace object as described in the\n * TraceKit.computeStackTrace docs.\n *\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.report = (function reportModuleWrapper() {\n    var handlers = [],\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n\n        if (handlers.length === 0) {\n            window.onerror = _oldOnerrorHandler;\n            _onErrorHandlerInstalled = false;\n        }\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {TraceKit.StackTrace} stack\n     * @param {boolean} isWindowError Is this a top-level window error?\n     * @param {Error=} error The error that's being handled (if available, null otherwise)\n     * @memberof TraceKit.report\n     * @throws An exception if an error occurs while calling an handler.\n     */\n    function notifyHandlers(stack, isWindowError, error) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n          return;\n        }\n        for (var i in handlers) {\n            if (_has(handlers, i)) {\n                try {\n                    handlers[i](stack, isWindowError, error);\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error occurred.\n     * @param {(number|string)=} columnNo The column number at which the error occurred.\n     * @param {Error=} errorObj The actual Error object.\n     * @memberof TraceKit.report\n     */\n    function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {\n        var stack = null;\n\n        if (lastExceptionStack) {\n            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n    \t    processLastException();\n        } else if (errorObj) {\n            stack = TraceKit.computeStackTrace(errorObj);\n            notifyHandlers(stack, true, errorObj);\n        } else {\n            var location = {\n              'url': url,\n              'line': lineNo,\n              'column': columnNo\n            };\n\n            var name;\n            var msg = message; // must be new var or will modify original `arguments`\n            if ({}.toString.call(message) === '[object String]') {\n                var groups = message.match(ERROR_TYPES_RE);\n                if (groups) {\n                    name = groups[1];\n                    msg = groups[2];\n                }\n            }\n\n            location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);\n            location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);\n            stack = {\n                'name': name,\n                'message': msg,\n                'mode': 'onerror',\n                'stack': [location]\n            };\n\n            notifyHandlers(stack, true, null);\n        }\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    /**\n     * Install a global onerror handler\n     * @memberof TraceKit.report\n     */\n    function installGlobalHandler() {\n        if (_onErrorHandlerInstalled === true) {\n            return;\n        }\n\n        _oldOnerrorHandler = window.onerror;\n        window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    /**\n     * Process the most recent exception\n     * @memberof TraceKit.report\n     */\n    function processLastException() {\n        var _lastExceptionStack = lastExceptionStack,\n            _lastException = lastException;\n        lastExceptionStack = null;\n        lastException = null;\n        notifyHandlers(_lastExceptionStack, false, _lastException);\n    }\n\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     * @memberof TraceKit.report\n     * @throws An exception if an incomplete stack trace is detected (old IE browsers).\n     */\n    function report(ex) {\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n              processLastException();\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        setTimeout(function () {\n            if (lastException === ex) {\n                processLastException();\n            }\n        }, (stack.incomplete ? 2000 : 0));\n\n        throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    return report;\n}());\n\n/**\n * An object representing a single stack frame.\n * @typedef {Object} StackFrame\n * @property {string} url The JavaScript or HTML file URL.\n * @property {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * @property {string[]?} args The arguments passed to the function, if known.\n * @property {number=} line The line number, if known.\n * @property {number=} column The column number, if known.\n * @property {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n * @memberof TraceKit\n */\n\n/**\n * An object representing a JavaScript stack trace.\n * @typedef {Object} StackTrace\n * @property {string} name The name of the thrown exception.\n * @property {string} message The exception error message.\n * @property {TraceKit.StackFrame[]} stack An array of stack frames.\n * @property {string} mode 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace.\n * @memberof TraceKit\n */\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   ```js\n *   s = TraceKit.computeStackTrace.ofCaller([depth])\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n *   ```\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n * Tracing example:\n *  ```js\n *     function trace(message) {\n *         var stackInfo = TraceKit.computeStackTrace.ofCaller();\n *         var data = message + \"\\n\";\n *         for(var i in stackInfo.stack) {\n *             var item = stackInfo.stack[i];\n *             data += (item.func || '[anonymous]') + \"() in \" + item.url + \":\" + (item.line || '0') + \"\\n\";\n *         }\n *         if (window.console)\n *             console.info(data);\n *         else\n *             alert(data);\n *     }\n * ```\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n    var debug = false,\n        sourceCache = {};\n\n    /**\n     * Attempts to retrieve source code via XMLHttpRequest, which is used\n     * to look up anonymous function names.\n     * @param {string} url URL of source code.\n     * @return {string} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function loadSource(url) {\n        if (!TraceKit.remoteFetching) { //Only attempt request if remoteFetching is on.\n            return '';\n        }\n        try {\n            var getXHR = function() {\n                try {\n                    return new window.XMLHttpRequest();\n                } catch (e) {\n                    // explicitly bubble up the exception if not found\n                    return new window.ActiveXObject('Microsoft.XMLHTTP');\n                }\n            };\n\n            var request = getXHR();\n            request.open('GET', url, false);\n            request.send('');\n            return request.responseText;\n        } catch (e) {\n            return '';\n        }\n    }\n\n    /**\n     * Retrieves source code from the source code cache.\n     * @param {string} url URL of source code.\n     * @return {Array.<string>} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function getSource(url) {\n        if (typeof url !== 'string') {\n            return [];\n        }\n\n        if (!_has(sourceCache, url)) {\n            // URL needs to be able to fetched within the acceptable domain.  Otherwise,\n            // cross-domain errors will be triggered.\n            /*\n                Regex matches:\n                0 - Full Url\n                1 - Protocol\n                2 - Domain\n                3 - Port (Useful for internal applications)\n                4 - Path\n            */\n            var source = '';\n            var domain = '';\n            try { domain = window.document.domain; } catch (e) { }\n            var match = /(.*)\\:\\/\\/([^:\\/]+)([:\\d]*)\\/{0,1}([\\s\\S]*)/.exec(url);\n            if (match && match[2] === domain) {\n                source = loadSource(url);\n            }\n            sourceCache[url] = source ? source.split('\\n') : [];\n        }\n\n        return sourceCache[url];\n    }\n\n    /**\n     * Tries to use an externally loaded copy of source code to determine\n     * the name of a function by looking at the name of the variable it was\n     * assigned to, if any.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} lineNo Line number in source code.\n     * @return {string} The function name, if discoverable.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function guessFunctionName(url, lineNo) {\n        var reFunctionArgNames = /function ([^(]*)\\(([^)]*)\\)/,\n            reGuessFunction = /['\"]?([0-9A-Za-z$_]+)['\"]?\\s*[:=]\\s*(function|eval|new Function)/,\n            line = '',\n            maxLines = 10,\n            source = getSource(url),\n            m;\n\n        if (!source.length) {\n            return UNKNOWN_FUNCTION;\n        }\n\n        // Walk backwards from the first line in the function until we find the line which\n        // matches the pattern above, which is the function definition\n        for (var i = 0; i < maxLines; ++i) {\n            line = source[lineNo - i] + line;\n\n            if (!_isUndefined(line)) {\n                if ((m = reGuessFunction.exec(line))) {\n                    return m[1];\n                } else if ((m = reFunctionArgNames.exec(line))) {\n                    return m[1];\n                }\n            }\n        }\n\n        return UNKNOWN_FUNCTION;\n    }\n\n    /**\n     * Retrieves the surrounding lines from where an exception occurred.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} line Line number in source code to center around for context.\n     * @return {?Array.<string>} Lines of source code.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function gatherContext(url, line) {\n        var source = getSource(url);\n\n        if (!source.length) {\n            return null;\n        }\n\n        var context = [],\n            // linesBefore & linesAfter are inclusive with the offending line.\n            // if linesOfContext is even, there will be one extra line\n            //   *before* the offending line.\n            linesBefore = Math.floor(TraceKit.linesOfContext / 2),\n            // Add one extra line if linesOfContext is odd\n            linesAfter = linesBefore + (TraceKit.linesOfContext % 2),\n            start = Math.max(0, line - linesBefore - 1),\n            end = Math.min(source.length, line + linesAfter - 1);\n\n        line -= 1; // convert to 0-based index\n\n        for (var i = start; i < end; ++i) {\n            if (!_isUndefined(source[i])) {\n                context.push(source[i]);\n            }\n        }\n\n        return context.length > 0 ? context : null;\n    }\n\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    /**\n     * Determines where a code fragment occurs in the source code.\n     * @param {RegExp} re The function definition.\n     * @param {Array.<string>} urls A list of URLs to search.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInUrls(re, urls) {\n        var source, m;\n        for (var i = 0, j = urls.length; i < j; ++i) {\n            if ((source = getSource(urls[i])).length) {\n                source = source.join('\\n');\n                if ((m = re.exec(source))) {\n\n                    return {\n                        'url': urls[i],\n                        'line': source.substring(0, m.index).split('\\n').length,\n                        'column': m.index - source.lastIndexOf('\\n', m.index) - 1\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines at which column a code fragment occurs on a line of the\n     * source code.\n     * @param {string} fragment The code fragment.\n     * @param {string} url The URL to search.\n     * @param {(string|number)} line The line number to examine.\n     * @return {?number} The column number.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInLine(fragment, url, line) {\n        var source = getSource(url),\n            re = new RegExp('\\\\b' + escapeRegExp(fragment) + '\\\\b'),\n            m;\n\n        line -= 1;\n\n        if (source && source.length > line && (m = re.exec(source[line]))) {\n            return m.index;\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines where a function was defined within the source code.\n     * @param {(Function|string)} func A function reference or serialized\n     * function definition.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceByFunctionBody(func) {\n        if (_isUndefined(window && window.document)) {\n            return;\n        }\n\n        var urls = [window.location.href],\n            scripts = window.document.getElementsByTagName('script'),\n            body,\n            code = '' + func,\n            codeRE = /^function(?:\\s+([\\w$]+))?\\s*\\(([\\w\\s,]*)\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            eventRE = /^function on([\\w$]+)\\s*\\(event\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            re,\n            parts,\n            result;\n\n        for (var i = 0; i < scripts.length; ++i) {\n            var script = scripts[i];\n            if (script.src) {\n                urls.push(script.src);\n            }\n        }\n\n        if (!(parts = codeRE.exec(code))) {\n            re = new RegExp(escapeRegExp(code).replace(/\\s+/g, '\\\\s+'));\n        }\n\n        // not sure if this is really necessary, but I don’t have a test\n        // corpus large enough to confirm that and it was in the original.\n        else {\n            var name = parts[1] ? '\\\\s+' + parts[1] : '',\n                args = parts[2].split(',').join('\\\\s*,\\\\s*');\n\n            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\\s+/g, '\\\\s+');\n            re = new RegExp('function' + name + '\\\\s*\\\\(\\\\s*' + args + '\\\\s*\\\\)\\\\s*{\\\\s*' + body + '\\\\s*}');\n        }\n\n        // look for a normal function definition\n        if ((result = findSourceInUrls(re, urls))) {\n            return result;\n        }\n\n        // look for an old-school event handler function\n        if ((parts = eventRE.exec(code))) {\n            var event = parts[1];\n            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);\n\n            // look for a function defined in HTML as an onXXX handler\n            re = new RegExp('on' + event + '=[\\\\\\'\"]\\\\s*' + body + '\\\\s*[\\\\\\'\"]', 'i');\n\n            if ((result = findSourceInUrls(re, urls[0]))) {\n                return result;\n            }\n\n            // look for ???\n            re = new RegExp(body);\n\n            if ((result = findSourceInUrls(re, urls))) {\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (!ex.stack) {\n            return null;\n        }\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\\[native).*?|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n\n            // Used to additionally parse URL/line/column from eval frames\n            isEval,\n            geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i,\n            chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/,\n\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            submatch,\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if ((parts = chrome.exec(lines[i]))) {\n                var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n                isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n                if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n                    // throw out eval line/column and use top-most line/column number\n                    parts[2] = submatch[1]; // url\n                    parts[3] = submatch[2]; // line\n                    parts[4] = submatch[3]; // column\n                }\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ( parts = winjs.exec(lines[i]) ) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = gecko.exec(lines[i]))) {\n                isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n                if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n                    // throw out eval line/column and use top-most line number\n                    parts[3] = submatch[1];\n                    parts[4] = submatch[2];\n                    parts[5] = null; // no column when eval\n                } else if (i === 0 && !parts[5] && !_isUndefined(ex.columnNumber)) {\n                    // FireFox uses this awesome columnNumber property for its top frame\n                    // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n                    // so adding 1\n                    // NOTE: this hack doesn't work if top-most frame is eval\n                    stack[0].column = ex.columnNumber + 1;\n                }\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = guessFunctionName(element.url, element.line);\n            }\n\n            element.context = element.line ? gatherContext(element.url, element.line) : null;\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        if (stack[0] && stack[0].line && !stack[0].column && reference) {\n            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);\n        }\n\n        return {\n            'mode': 'stack',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * Computes stack trace information from the stacktrace property.\n     * Opera 10+ uses this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStacktraceProp(ex) {\n        // Access and store the stacktrace property before doing ANYTHING\n        // else to it because Opera is not very good at providing it\n        // reliably in other circumstances.\n        var stacktrace = ex.stacktrace;\n        if (!stacktrace) {\n            return;\n        }\n\n        var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i,\n            opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i,\n            lines = stacktrace.split('\\n'),\n            stack = [],\n            parts;\n\n        for (var line = 0; line < lines.length; line += 2) {\n            var element = null;\n            if ((parts = opera10Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[2],\n                    'line': +parts[1],\n                    'column': null,\n                    'func': parts[3],\n                    'args':[]\n                };\n            } else if ((parts = opera11Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[6],\n                    'line': +parts[1],\n                    'column': +parts[2],\n                    'func': parts[3] || parts[4],\n                    'args': parts[5] ? parts[5].split(',') : []\n                };\n            }\n\n            if (element) {\n                if (!element.func && element.line) {\n                    element.func = guessFunctionName(element.url, element.line);\n                }\n                if (element.line) {\n                    try {\n                        element.context = gatherContext(element.url, element.line);\n                    } catch (exc) {}\n                }\n\n                if (!element.context) {\n                    element.context = [lines[line + 1]];\n                }\n\n                stack.push(element);\n            }\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        return {\n            'mode': 'stacktrace',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * NOT TESTED.\n     * Computes stack trace information from an error message that includes\n     * the stack trace.\n     * Opera 9 and earlier use this method if the option to show stack\n     * traces is turned on in opera:config.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromOperaMultiLineMessage(ex) {\n        // TODO: Clean this function up\n        // Opera includes a stack trace into the exception message. An example is:\n        //\n        // Statement on line 3: Undefined variable: undefinedFunc\n        // Backtrace:\n        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz\n        //         undefinedFunc(a);\n        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy\n        //           zzz(x, y, z);\n        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx\n        //           yyy(a, a, a);\n        //   Line 1 of function script\n        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }\n        //   ...\n\n        var lines = ex.message.split('\\n');\n        if (lines.length < 4) {\n            return null;\n        }\n\n        var lineRE1 = /^\\s*Line (\\d+) of linked script ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE2 = /^\\s*Line (\\d+) of inline#(\\d+) script in ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE3 = /^\\s*Line (\\d+) of function script\\s*$/i,\n            stack = [],\n            scripts = (window && window.document && window.document.getElementsByTagName('script')),\n            inlineScriptBlocks = [],\n            parts;\n\n        for (var s in scripts) {\n            if (_has(scripts, s) && !scripts[s].src) {\n                inlineScriptBlocks.push(scripts[s]);\n            }\n        }\n\n        for (var line = 2; line < lines.length; line += 2) {\n            var item = null;\n            if ((parts = lineRE1.exec(lines[line]))) {\n                item = {\n                    'url': parts[2],\n                    'func': parts[3],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null\n                };\n            } else if ((parts = lineRE2.exec(lines[line]))) {\n                item = {\n                    'url': parts[3],\n                    'func': parts[4],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.\n                };\n                var relativeLine = (+parts[1]); // relative to the start of the <SCRIPT> block\n                var script = inlineScriptBlocks[parts[2] - 1];\n                if (script) {\n                    var source = getSource(item.url);\n                    if (source) {\n                        source = source.join('\\n');\n                        var pos = source.indexOf(script.innerText);\n                        if (pos >= 0) {\n                            item.line = relativeLine + source.substring(0, pos).split('\\n').length;\n                        }\n                    }\n                }\n            } else if ((parts = lineRE3.exec(lines[line]))) {\n                var url = window.location.href.replace(/#.*$/, '');\n                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));\n                var src = findSourceInUrls(re, [url]);\n                item = {\n                    'url': url,\n                    'func': '',\n                    'args': [],\n                    'line': src ? src.line : parts[1],\n                    'column': null\n                };\n            }\n\n            if (item) {\n                if (!item.func) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n                var context = gatherContext(item.url, item.line);\n                var midline = (context ? context[Math.floor(context.length / 2)] : null);\n                if (context && midline.replace(/^\\s*/, '') === lines[line + 1].replace(/^\\s*/, '')) {\n                    item.context = context;\n                } else {\n                    // if (context) alert(\"Context mismatch. Correct midline:\\n\" + lines[i+1] + \"\\n\\nMidline:\\n\" + midline + \"\\n\\nContext:\\n\" + context.join(\"\\n\") + \"\\n\\nURL:\\n\" + item.url);\n                    item.context = [lines[line + 1]];\n                }\n                stack.push(item);\n            }\n        }\n        if (!stack.length) {\n            return null; // could not parse multiline exception message as Opera stack trace\n        }\n\n        return {\n            'mode': 'multiline',\n            'name': ex.name,\n            'message': lines[0],\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {TraceKit.StackTrace} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = guessFunctionName(initial.url, initial.line);\n            }\n\n            if (!initial.context) {\n                initial.context = gatherContext(initial.url, initial.line);\n            }\n\n            var reference = / '([^']+)' /.exec(message);\n            if (reference) {\n                initial.column = findSourceInLine(reference[1], initial.url, initial.line);\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        stackInfo.stack[0].context = initial.context;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {TraceKit.StackTrace=} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'args': [],\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if ((parts = functionName.exec(curr.toString()))) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n              try {\n                item.func = parts.input.substring(0, parts.input.indexOf('{'));\n              } catch (e) { }\n            }\n\n            if ((source = findSourceByFunctionBody(curr))) {\n                item.url = source.url;\n                item.line = source.line;\n\n                if (item.func === UNKNOWN_FUNCTION) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n\n                var reference = / '([^']+)' /.exec(ex.message || ex.description);\n                if (reference) {\n                    item.column = findSourceInLine(reference[1], source.url, source.line);\n                }\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            }else{\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'mode': 'callers',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = (depth == null ? 0 : +depth);\n\n        try {\n            // This must be tried first because Opera 10 *destroys*\n            // its stacktrace property if you try to access the stack\n            // property first!!\n            stack = computeStackTraceFromStacktraceProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromOperaMultiLineMessage(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        return {\n            'name': ex.name,\n            'message': ex.message,\n            'mode': 'failed'\n        };\n    }\n\n    /**\n     * Logs a stacktrace starting from the previous call and working down.\n     * @param {(number|string)=} depth How many frames deep to trace.\n     * @return {TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceOfCaller(depth) {\n        depth = (depth == null ? 0 : +depth) + 1; // \"+ 1\" because \"ofCaller\" should drop one frame\n        try {\n            throw new Error();\n        } catch (ex) {\n            return computeStackTrace(ex, depth + 1);\n        }\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.computeStackTraceFromStackProp = computeStackTraceFromStackProp;\n    computeStackTrace.guessFunctionName = guessFunctionName;\n    computeStackTrace.gatherContext = gatherContext;\n    computeStackTrace.ofCaller = computeStackTraceOfCaller;\n    computeStackTrace.getSource = getSource;\n\n    return computeStackTrace;\n}());\n\n/**\n * Extends support for global error handling for asynchronous browser\n * functions. Adopted from Closure Library's errorhandler.js\n * @memberof TraceKit\n */\nTraceKit.extendToAsynchronousCallbacks = function () {\n    var _helper = function _helper(fnName) {\n        var originalFn = window[fnName];\n        window[fnName] = function traceKitAsyncExtension() {\n            // Make a copy of the arguments\n            var args = _slice.call(arguments);\n            var originalCallback = args[0];\n            if (typeof (originalCallback) === 'function') {\n                args[0] = TraceKit.wrap(originalCallback);\n            }\n            // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n            // also only supports 2 argument and doesn't care what \"this\" is, so we\n            // can just call the original function directly.\n            if (originalFn.apply) {\n                return originalFn.apply(this, args);\n            } else {\n                return originalFn(args[0], args[1]);\n            }\n        };\n    };\n\n    _helper('setTimeout');\n    _helper('setInterval');\n};\n\n//Default options:\nif (!TraceKit.remoteFetching) {\n    TraceKit.remoteFetching = true;\n}\nif (!TraceKit.collectWindowErrors) {\n    TraceKit.collectWindowErrors = true;\n}\nif (!TraceKit.linesOfContext || TraceKit.linesOfContext < 1) {\n    // 5 lines before, the offending line, 5 lines after\n    TraceKit.linesOfContext = 11;\n}\n\n// UMD export\nif (typeof define === 'function' && define.amd) {\n    define('TraceKit', [], TraceKit);\n} else if (typeof module !== 'undefined' && module.exports && window.module !== module) {\n    module.exports = TraceKit;\n} else {\n    window.TraceKit = TraceKit;\n}\n\n}(typeof window !== 'undefined' ? window : global));\n","import * as TraceKit from 'TraceKit';\nimport os = require('os');\nimport nodestacktrace = require('stack-trace');\nimport child = require('child_process');\nimport path = require('path');\nimport * as Fs from 'fs';\nimport * as Path from 'path';\nimport http = require('http');\nimport https = require('https');\nimport url = require('url');\nexport interface ILastReferenceIdManager {\n  getLast(): string;\n  clearLast(): void;\n  setLast(eventId: string): void;\n}\n\nexport interface ILog {\n  trace(message: string): void;\n  info(message: string): void;\n  warn(message: string): void;\n  error(message: string): void;\n}\n\n                                                                    \n\nexport class DefaultLastReferenceIdManager implements ILastReferenceIdManager {\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @type {string}\n   * @private\n   */\n  private _lastReferenceId: string = null;\n\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @returns {string}\n   */\n  public getLast(): string {\n    return this._lastReferenceId;\n  }\n\n  /**\n   * Clears the last event's reference id.\n   */\n  public clearLast(): void {\n    this._lastReferenceId = null;\n  }\n\n  /**\n   * Sets the last event's reference id.\n   * @param eventId\n   */\n  public setLast(eventId: string): void {\n    this._lastReferenceId = eventId;\n  }\n}\n\n                              \n\nexport class ConsoleLog implements ILog {\n  public trace(message: string): void {\n    this.log('debug', message);\n  }\n\n  public info(message: string): void {\n    this.log('info', message);\n  }\n\n  public warn(message: string): void {\n    this.log('warn', message);\n  }\n\n  public error(message: string): void {\n    this.log('error', message);\n  }\n\n  private log(level: string, message: string) {\n    if (console) {\n      const msg = `[${level}] Exceptionless: ${message}`;\n\n      if (console[level]) {\n        console[level](msg);\n      } else if (console.log) {\n        console[`log`](msg);\n      }\n    }\n  }\n}\n\n                              \n\nexport class NullLog implements ILog {\n  public trace(message: string): void { }\n  public info(message: string): void { }\n  public warn(message: string): void { }\n  public error(message: string): void { }\n}\n\nexport interface IUserInfo {\n  identity?: string;\n  name?: string;\n  data?: any;\n}\n\n                                                                                                                                                               \n\nexport class HeartbeatPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = 'HeartbeatPlugin';\n\n  private _interval: number;\n  private _intervalId: any;\n\n  constructor(heartbeatInterval: number = 30000) {\n    this._interval = heartbeatInterval >= 30000 ? heartbeatInterval : 60000;\n  }\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    clearInterval(this._intervalId);\n\n    const user: IUserInfo = context.event.data['@user'];\n    if (user && user.identity) {\n      this._intervalId = setInterval(() => context.client.submitSessionHeartbeat(user.identity), this._interval);\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                \n\nexport class ReferenceIdPlugin implements IEventPlugin {\n  public priority: number = 20;\n  public name: string = 'ReferenceIdPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    if ((!context.event.reference_id || context.event.reference_id.length === 0) && context.event.type === 'error') {\n      context.event.reference_id = Utils.guid().replace('-', '').substring(0, 10);\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                             \n\nexport class EventPluginContext {\n  public cancelled: boolean;\n  public client: ExceptionlessClient;\n  public event: IEvent;\n  public contextData: ContextData;\n\n  constructor(client: ExceptionlessClient, event: IEvent, contextData?: ContextData) {\n    this.client = client;\n    this.event = event;\n    this.contextData = contextData ? contextData : new ContextData();\n  }\n\n  public get log(): ILog {\n    return this.client.config.log;\n  }\n}\n\nn\nexport class EventPluginManager {\n  public static run(context: EventPluginContext, callback: (context?: EventPluginContext) => void): void {\n    const wrap = (plugin: IEventPlugin, next?: () => void): () => void => {\n      return () => {\n        try {\n          if (!context.cancelled) {\n            plugin.run(context, next);\n          }\n        } catch (ex) {\n          context.cancelled = true;\n          context.log.error(`Error running plugin '${plugin.name}': ${ex.message}. Discarding Event.`);\n        }\n\n        if (context.cancelled && !!callback) {\n          callback(context);\n        }\n      };\n    };\n\n    const plugins: IEventPlugin[] = context.client.config.plugins; // optimization for minifier.\n    const wrappedPlugins: Array<() => void> = [];\n    if (!!callback) {\n      wrappedPlugins[plugins.length] = wrap({ name: 'cb', priority: 9007199254740992, run: callback }, null);\n    }\n\n    for (let index = plugins.length - 1; index > -1; index--) {\n      wrappedPlugins[index] = wrap(plugins[index], !!callback || (index < plugins.length - 1) ? wrappedPlugins[index + 1] : null);\n    }\n\n    wrappedPlugins[0]();\n  }\n\n  public static addDefaultPlugins(config: Configuration): void {\n    config.addPlugin(new ConfigurationDefaultsPlugin());\n    config.addPlugin(new ErrorPlugin());\n    config.addPlugin(new DuplicateCheckerPlugin());\n    config.addPlugin(new EventExclusionPlugin());\n    config.addPlugin(new ModuleInfoPlugin());\n    config.addPlugin(new RequestInfoPlugin());\n    config.addPlugin(new EnvironmentInfoPlugin());\n    config.addPlugin(new SubmissionMethodPlugin());\n  }\n}\n\n                                                                                                         \n\nexport interface IEventPlugin {\n  priority?: number;\n  name?: string;\n  run(context: EventPluginContext, next?: () => void): void;\n}\n\n                                                                                                                                                                                                                                                                                                                                     \n\nexport class DefaultEventQueue implements IEventQueue {\n  /**\n   * The configuration object.\n   * @type {Configuration}\n   * @private\n   */\n  private _config: Configuration;\n\n  /**\n   * A list of handlers that will be fired when events are submitted.\n   * @type {Array}\n   * @private\n   */\n  private _handlers: Array<(events: IEvent[], response: SubmissionResponse) => void> = [];\n\n  /**\n   * Suspends processing until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _suspendProcessingUntil: Date;\n\n  /**\n   * Discards queued items until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _discardQueuedItemsUntil: Date;\n\n  /**\n   * Returns true if the queue is processing.\n   * @type {boolean}\n   * @private\n   */\n  private _processingQueue: boolean = false;\n\n  /**\n   * Processes the queue every xx seconds.\n   * @type {Timer}\n   * @private\n   */\n  private _queueTimer: any;\n\n  constructor(config: Configuration) {\n    this._config = config;\n  }\n\n  public enqueue(event: IEvent): void {\n    const eventWillNotBeQueued: string = 'The event will not be queued.'; // optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    if (this.areQueuedItemsDiscarded()) {\n      log.info(`Queue items are currently being discarded. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    this.ensureQueueTimer();\n\n    const timestamp = config.storage.queue.save(event);\n    const logText = `type=${event.type} ${!!event.reference_id ? 'refid=' + event.reference_id : ''}`;\n    if (timestamp) {\n      log.info(`Enqueuing event: ${timestamp} ${logText}`);\n    } else {\n      log.error(`Could not enqueue event ${logText}`);\n    }\n  }\n\n  public process(isAppExiting?: boolean): void {\n    const queueNotProcessed: string = 'The queue will not be processed.'; // optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (this._processingQueue) {\n      return;\n    }\n\n    log.info('Processing queue...');\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${queueNotProcessed}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${queueNotProcessed}`);\n      return;\n    }\n\n    this._processingQueue = true;\n    this.ensureQueueTimer();\n\n    try {\n      const events = config.storage.queue.get(config.submissionBatchSize);\n      if (!events || events.length === 0) {\n        this._processingQueue = false;\n        return;\n      }\n\n      log.info(`Sending ${events.length} events to ${config.serverUrl}.`);\n      config.submissionClient.postEvents(events.map((e) => e.value), config, (response: SubmissionResponse) => {\n        this.processSubmissionResponse(response, events);\n        this.eventsPosted(events.map((e) => e.value), response);\n        log.info('Finished processing queue.');\n        this._processingQueue = false;\n      }, isAppExiting);\n    } catch (ex) {\n      log.error(`Error processing queue: ${ex}`);\n      this.suspendProcessing();\n      this._processingQueue = false;\n    }\n  }\n\n  public suspendProcessing(durationInMinutes?: number, discardFutureQueuedItems?: boolean, clearQueue?: boolean): void {\n    const config: Configuration = this._config; // Optimization for minifier.\n\n    if (!durationInMinutes || durationInMinutes <= 0) {\n      durationInMinutes = 5;\n    }\n\n    config.log.info(`Suspending processing for ${durationInMinutes} minutes.`);\n    this._suspendProcessingUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\n\n    if (discardFutureQueuedItems) {\n      this._discardQueuedItemsUntil = this._suspendProcessingUntil;\n    }\n\n    if (clearQueue) {\n      // Account is over the limit and we want to ensure that the sample size being sent in will contain newer errors.\n      config.storage.queue.clear();\n    }\n  }\n\n  public onEventsPosted(handler: (events: IEvent[], response: SubmissionResponse) => void): void {\n    !!handler && this._handlers.push(handler);\n  }\n\n  private eventsPosted(events: IEvent[], response: SubmissionResponse) {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(events, response);\n      } catch (ex) {\n        this._config.log.error(`Error calling onEventsPosted handler: ${ex}`);\n      }\n    }\n  }\n\n  private areQueuedItemsDiscarded(): boolean {\n    return this._discardQueuedItemsUntil && this._discardQueuedItemsUntil > new Date();\n  }\n\n  private ensureQueueTimer(): void {\n    if (!this._queueTimer) {\n      this._queueTimer = setInterval(() => this.onProcessQueue(), 10000);\n    }\n  }\n\n  private isQueueProcessingSuspended(): boolean {\n    return this._suspendProcessingUntil && this._suspendProcessingUntil > new Date();\n  }\n\n  private onProcessQueue(): void {\n    if (!this.isQueueProcessingSuspended() && !this._processingQueue) {\n      this.process();\n    }\n  }\n\n  private processSubmissionResponse(response: SubmissionResponse, events: IStorageItem[]): void {\n    const noSubmission: string = 'The event will not be submitted.'; // Optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (response.success) {\n      log.info(`Sent ${events.length} events.`);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.serviceUnavailable) {\n      // You are currently over your rate limit or the servers are under stress.\n      log.error('Server returned service unavailable.');\n      this.suspendProcessing();\n      return;\n    }\n\n    if (response.paymentRequired) {\n      // If the organization over the rate limit then discard the event.\n      log.info('Too many events have been submitted, please upgrade your plan.');\n      this.suspendProcessing(null, true, true);\n      return;\n    }\n\n    if (response.unableToAuthenticate) {\n      // The api key was suspended or could not be authorized.\n      log.info(`Unable to authenticate, please check your configuration. ${noSubmission}`);\n      this.suspendProcessing(15);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.notFound || response.badRequest) {\n      // The service end point could not be found.\n      log.error(`Error while trying to submit data: ${response.message}`);\n      this.suspendProcessing(60 * 4);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.requestEntityTooLarge) {\n      const message = 'Event submission discarded for being too large.';\n      if (config.submissionBatchSize > 1) {\n        log.error(`${message} Retrying with smaller batch size.`);\n        config.submissionBatchSize = Math.max(1, Math.round(config.submissionBatchSize / 1.5));\n      } else {\n        log.error(`${message} ${noSubmission}`);\n        this.removeEvents(events);\n      }\n\n      return;\n    }\n\n    if (!response.success) {\n      log.error(`Error submitting events: ${response.message || 'Please check the network tab for more info.'}`);\n      this.suspendProcessing();\n    }\n  }\n\n  private removeEvents(events: IStorageItem[]) {\n    for (let index = 0; index < (events || []).length; index++) {\n      this._config.storage.queue.remove(events[index].timestamp);\n    }\n  }\n}\n\n                                                                                                                 \n\nexport interface IEventQueue {\n  enqueue(event: IEvent): void;\n  process(isAppExiting?: boolean): void;\n  suspendProcessing(durationInMinutes?: number, discardFutureQueuedItems?: boolean, clearQueue?: boolean): void;\n  onEventsPosted(handler: (events: IEvent[], response: SubmissionResponse) => void): void;\n}\n\n                                                                                                                                  \n\nexport interface IEnvironmentInfoCollector {\n  getEnvironmentInfo(context: EventPluginContext): IEnvironmentInfo;\n}\n\n                                                                                                              \n\nexport interface IErrorParser {\n  parse(context: EventPluginContext, exception: Error): IError;\n}\n\n                                                                                                                \n\nexport interface IModuleCollector {\n  getModules(context: EventPluginContext): IModule[];\n}\n\n                                                                                                                          \n\nexport interface IRequestInfoCollector {\n  getRequestInfo(context: EventPluginContext): IRequestInfo;\n}\n\n                                                                                                                                                  \n\nexport class InMemoryStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(maxQueueItems: number = 250) {\n    this.queue = new InMemoryStorage(maxQueueItems);\n    this.settings = new InMemoryStorage(1);\n  }\n\n}\n\n                                      \n\nexport interface IStorageProvider {\n  queue: IStorage;\n  settings: IStorage;\n}\n\nn\n// tslint:disable-next-line:prefer-const\ndeclare var XDomainRequest: { new(); create(); };\n\nexport class DefaultSubmissionClient implements ISubmissionClient {\n  public configurationVersionHeader: string = 'x-exceptionless-configversion';\n\n  public postEvents(events: IEvent[], config: Configuration, callback: (response: SubmissionResponse) => void, isAppExiting?: boolean): void {\n    const data = JSON.stringify(events);\n    const request = this.createRequest(config, 'POST', `${config.serverUrl}/api/v2/events`, data);\n    const cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb, isAppExiting);\n  }\n\n  public postUserDescription(referenceId: string, description: IUserDescription, config: Configuration, callback: (response: SubmissionResponse) => void): void {\n    const path = `${config.serverUrl}/api/v2/events/by-ref/${encodeURIComponent(referenceId)}/user-description`;\n    const data = JSON.stringify(description);\n    const request = this.createRequest(config, 'POST', path, data);\n    const cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public getSettings(config: Configuration, version: number, callback: (response: SettingsResponse) => void): void {\n    const request = this.createRequest(config, 'GET', `${config.configServerUrl}/api/v2/projects/config?v=${version}`);\n    const cb = (status, message, data?, headers?) => {\n      if (status !== 200) {\n        return callback(new SettingsResponse(false, null, -1, null, message));\n      }\n\n      let settings: IClientConfiguration;\n      try {\n        settings = JSON.parse(data);\n      } catch (e) {\n        config.log.error(`Unable to parse settings: '${data}'`);\n      }\n\n      if (!settings || isNaN(settings.version)) {\n        return callback(new SettingsResponse(false, null, -1, null, 'Invalid configuration settings.'));\n      }\n\n      callback(new SettingsResponse(true, settings.settings || {}, settings.version));\n    };\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public sendHeartbeat(sessionIdOrUserId: string, closeSession: boolean, config: Configuration): void {\n    const request = this.createRequest(config, 'GET', `${config.heartbeatServerUrl}/api/v2/events/session/heartbeat?id=${sessionIdOrUserId}&close=${closeSession}`);\n    config.submissionAdapter.sendRequest(request);\n  }\n\n  private createRequest(config: Configuration, method: string, url: string, data: string = null): SubmissionRequest {\n    return {\n      method,\n      url,\n      data,\n      apiKey: config.apiKey,\n      userAgent: config.userAgent\n    };\n  }\n\n  private createSubmissionCallback(config: Configuration, callback: (response: SubmissionResponse) => void) {\n    return (status, message, data?, headers?) => {\n      const settingsVersion: number = headers && parseInt(headers[this.configurationVersionHeader], 10);\n      if (!isNaN(settingsVersion)) {\n        SettingsManager.checkVersion(settingsVersion, config);\n      } else {\n        config.log.error('No config version header was returned.');\n      }\n\n      callback(new SubmissionResponse(status, message));\n    };\n  }\n}\n\n                                                                                                                   \n\nexport interface ISubmissionAdapter {\n  sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean): void;\n}\n\n                                                                                                                                                                                                                                                                                           \n\nexport interface ISubmissionClient {\n  postEvents(events: IEvent[], config: Configuration, callback: (response: SubmissionResponse) => void, isAppExiting?: boolean): void;\n  postUserDescription(referenceId: string, description: IUserDescription, config: Configuration, callback: (response: SubmissionResponse) => void): void;\n  getSettings(config: Configuration, version: number, callback: (response: SettingsResponse) => void): void;\n  sendHeartbeat(sessionIdOrUserId: string, closeSession: boolean, config: Configuration): void;\n}\n\nexport class Utils {\n  public static addRange<T>(target: T[], ...values: T[]) {\n    if (!target) {\n      target = [];\n    }\n\n    if (!values || values.length === 0) {\n      return target;\n    }\n\n    for (const value of values) {\n      if (value && target.indexOf(value) < 0) {\n        target.push(value);\n      }\n    }\n\n    return target;\n  }\n\n  public static getHashCode(source: string): number {\n    if (!source || source.length === 0) {\n      return 0;\n    }\n\n    let hash: number = 0;\n    for (let index = 0; index < source.length; index++) {\n      const character = source.charCodeAt(index);\n      hash = ((hash << 5) - hash) + character;\n      hash |= 0;\n    }\n\n    return hash;\n  }\n\n  public static getCookies(cookies: string, exclusions?: string[]): object {\n    const result: object = {};\n\n    const parts: string[] = (cookies || '').split('; ');\n    for (const part of parts) {\n      const cookie: string[] = part.split('=');\n      if (!Utils.isMatch(cookie[0], exclusions)) {\n        result[cookie[0]] = cookie[1];\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static guid(): string {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    }\n\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n  }\n\n  // tslint:disable-next-line:ban-types\n  public static merge(defaultValues: Object, values: Object) {\n    const result: object = {};\n\n    for (const key in defaultValues || {}) {\n      if (defaultValues[key] !== undefined && defaultValues[key] !== null) {\n        result[key] = defaultValues[key];\n      }\n    }\n\n    for (const key in values || {}) {\n      if (values[key] !== undefined && values[key] !== null) {\n        result[key] = values[key];\n      }\n    }\n\n    return result;\n  }\n\n  public static parseVersion(source: string): string {\n    if (!source) {\n      return null;\n    }\n\n    const versionRegex = /(v?((\\d+)\\.(\\d+)(\\.(\\d+))?)(?:-([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?(?:\\+([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?)/;\n    const matches = versionRegex.exec(source);\n    if (matches && matches.length > 0) {\n      return matches[0];\n    }\n\n    return null;\n  }\n\n  public static parseQueryString(query: string, exclusions?: string[]) {\n    if (!query || query.length === 0) {\n      return null;\n    }\n\n    const pairs: string[] = query.split('&');\n    if (pairs.length === 0) {\n      return null;\n    }\n\n    const result: object = {};\n    for (const pair of pairs) {\n      const parts = pair.split('=');\n      if (!Utils.isMatch(parts[0], exclusions)) {\n        result[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static randomNumber(): number {\n    return Math.floor(Math.random() * 9007199254740992);\n  }\n\n  /**\n   * Checks to see if a value matches a pattern.\n   * @param input the value to check against the @pattern.\n   * @param pattern The pattern to check, supports wild cards (*).\n   */\n  public static isMatch(input: string, patterns: string[], ignoreCase: boolean = true): boolean {\n    if (!input || typeof input !== 'string') {\n      return false;\n    }\n\n    const trim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n    input = (ignoreCase ? input.toLowerCase() : input).replace(trim, '');\n\n    return (patterns || []).some((pattern) => {\n      if (typeof pattern !== 'string') {\n        return false;\n      }\n\n      pattern = (ignoreCase ? pattern.toLowerCase() : pattern).replace(trim, '');\n      if (pattern.length <= 0) {\n        return false;\n      }\n\n      const startsWithWildcard: boolean = pattern[0] === '*';\n      if (startsWithWildcard) {\n        pattern = pattern.slice(1);\n      }\n\n      const endsWithWildcard: boolean = pattern[pattern.length - 1] === '*';\n      if (endsWithWildcard) {\n        pattern = pattern.substring(0, pattern.length - 1);\n      }\n\n      if (startsWithWildcard && endsWithWildcard) {\n        return pattern.length <= input.length && input.indexOf(pattern, 0) !== -1;\n      }\n\n      if (startsWithWildcard) {\n        return Utils.endsWith(input, pattern);\n      }\n\n      if (endsWithWildcard) {\n        return Utils.startsWith(input, pattern);\n      }\n\n      return input === pattern;\n    });\n  }\n\n  public static isEmpty(input: object) {\n    return input === null || (typeof (input) === 'object' && Object.keys(input).length === 0);\n  }\n\n  public static startsWith(input: string, prefix: string): boolean {\n    return input.substring(0, prefix.length) === prefix;\n  }\n\n  public static endsWith(input: string, suffix: string): boolean {\n    return input.indexOf(suffix, input.length - suffix.length) !== -1;\n  }\n\n  /**\n   * Stringifys an object with optional exclusions and max depth.\n   * @param data The data object to add.\n   * @param exclusions Any property names that should be excluded.\n   * @param maxDepth The max depth of the object to include.\n   */\n  public static stringify(data: any, exclusions?: string[], maxDepth?: number): string {\n    function stringifyImpl(obj: any, excludedKeys: string[]): string {\n      const cache: string[] = [];\n      return JSON.stringify(obj, (key: string, value: any) => {\n        if (Utils.isMatch(key, excludedKeys)) {\n          return;\n        }\n\n        if (typeof value === 'object' && !!value) {\n          if (cache.indexOf(value) !== -1) {\n            // Circular reference found, discard key\n            return;\n          }\n\n          cache.push(value);\n        }\n\n        return value;\n      });\n    }\n\n    if (({}).toString.call(data) === '[object Object]') {\n      const flattened = {};\n      /* tslint:disable:forin */\n      for (const prop in data) {\n        const value = data[prop];\n        if (value === data) {\n          continue;\n        }\n        flattened[prop] = data[prop];\n      }\n      /* tslint:enable:forin */\n\n      return stringifyImpl(flattened, exclusions);\n    }\n\n    if (({}).toString.call(data) === '[object Array]') {\n      const result = [];\n      for (let index = 0; index < data.length; index++) {\n        result[index] = JSON.parse(stringifyImpl(data[index], exclusions));\n      }\n\n      return JSON.stringify(result);\n    }\n\n    return stringifyImpl(data, exclusions);\n  }\n\n  public static toBoolean(input, defaultValue: boolean = false): boolean {\n    if (typeof input === 'boolean') {\n      return input;\n    }\n\n    if (input === null || typeof input !== 'number' && typeof input !== 'string') {\n      return defaultValue;\n    }\n\n    switch ((input + '').toLowerCase().trim()) {\n      case 'true': case 'yes': case '1': return true;\n      case 'false': case 'no': case '0': case null: return false;\n    }\n\n    return defaultValue;\n  }\n}\n\nn\nexport interface IConfigurationSettings {\n  apiKey?: string;\n  serverUrl?: string;\n  configServerUrl?: string;\n  heartbeatServerUrl?: string;\n  updateSettingsWhenIdleInterval?: number;\n  includePrivateInformation?: boolean;\n  environmentInfoCollector?: IEnvironmentInfoCollector;\n  errorParser?: IErrorParser;\n  lastReferenceIdManager?: ILastReferenceIdManager;\n  log?: ILog;\n  moduleCollector?: IModuleCollector;\n  requestInfoCollector?: IRequestInfoCollector;\n  submissionBatchSize?: number;\n  submissionClient?: ISubmissionClient;\n  submissionAdapter?: ISubmissionAdapter;\n  storage?: IStorageProvider;\n  queue?: IEventQueue;\n}\n\n                                                                                                                                                     \n\ninterface ISettingsWithVersion {\n  version: number;\n  settings: { [key: string]: string };\n}\n\nexport class SettingsManager {\n  private static _isUpdatingSettings: boolean = false;\n\n  /**\n   * A list of handlers that will be fired when the settings change.\n   * @type {Array}\n   * @private\n   */\n  private static _handlers: Array<(config: Configuration) => void> = [];\n\n  public static onChanged(handler: (config: Configuration) => void) {\n    !!handler && this._handlers.push(handler);\n  }\n\n  public static applySavedServerSettings(config: Configuration): void {\n    if (!config || !config.isValid) {\n      return;\n    }\n\n    const savedSettings = this.getSavedServerSettings(config);\n    config.log.info(`Applying saved settings: v${savedSettings.version}`);\n    config.settings = Utils.merge(config.settings, savedSettings.settings);\n    this.changed(config);\n  }\n\n  public static getVersion(config: Configuration): number {\n    if (!config || !config.isValid) {\n      return 0;\n    }\n\n    const savedSettings = this.getSavedServerSettings(config);\n    return savedSettings.version || 0;\n  }\n\n  public static checkVersion(version: number, config: Configuration): void {\n    const currentVersion: number = this.getVersion(config);\n    if (version <= currentVersion) {\n      return;\n    }\n\n    config.log.info(`Updating settings from v${currentVersion} to v${version}`);\n    this.updateSettings(config, currentVersion);\n  }\n\n  public static updateSettings(config: Configuration, version?: number): void {\n    if (!config || !config.enabled || this._isUpdatingSettings) {\n      return;\n    }\n\n    const unableToUpdateMessage = 'Unable to update settings';\n    if (!config.isValid) {\n      config.log.error(`${unableToUpdateMessage}: ApiKey is not set.`);\n      return;\n    }\n\n    if (!version || version < 0) {\n      version = this.getVersion(config);\n    }\n\n    config.log.info(`Checking for updated settings from: v${version}.`);\n    this._isUpdatingSettings = true;\n    config.submissionClient.getSettings(config, version, (response: SettingsResponse) => {\n      try {\n        if (!config || !response || !response.success || !response.settings) {\n          config.log.warn(`${unableToUpdateMessage}: ${response.message}`);\n          return;\n        }\n\n        config.settings = Utils.merge(config.settings, response.settings);\n\n        // TODO: Store snapshot of settings after reading from config and attributes and use that to revert to defaults.\n        // Remove any existing server settings that are not in the new server settings.\n        const savedServerSettings = SettingsManager.getSavedServerSettings(config);\n        for (const key in savedServerSettings) {\n          if (response.settings[key]) {\n            continue;\n          }\n\n          delete config.settings[key];\n        }\n\n        const newSettings: ISettingsWithVersion = {\n          version: response.settingsVersion,\n          settings: response.settings\n        };\n\n        config.storage.settings.save(newSettings);\n\n        config.log.info(`Updated settings: v${newSettings.version}`);\n        this.changed(config);\n      } finally {\n        this._isUpdatingSettings = false;\n      }\n    });\n  }\n\n  private static changed(config: Configuration) {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(config);\n      } catch (ex) {\n        config.log.error(`Error calling onChanged handler: ${ex}`);\n      }\n    }\n  }\n\n  private static getSavedServerSettings(config: Configuration): ISettingsWithVersion {\n    const item = config.storage.settings.get()[0];\n    if (item && item.value && item.value.version && item.value.settings) {\n      return item.value;\n    }\n\n    return { version: 0, settings: {} };\n  }\n}\n\nexport interface IEvent {\n  type?: string;\n  source?: string;\n  date?: Date;\n  tags?: string[];\n  message?: string;\n  geo?: string;\n  value?: number;\n  data?: any;\n  reference_id?: string;\n  count?: number;\n}\n\nexport class SubmissionResponse {\n  public success: boolean = false;\n  public badRequest: boolean = false;\n  public serviceUnavailable: boolean = false;\n  public paymentRequired: boolean = false;\n  public unableToAuthenticate: boolean = false;\n  public notFound: boolean = false;\n  public requestEntityTooLarge: boolean = false;\n  public statusCode: number;\n  public message: string;\n\n  constructor(statusCode: number, message?: string) {\n    this.statusCode = statusCode;\n    this.message = message;\n\n    this.success = statusCode >= 200 && statusCode <= 299;\n    this.badRequest = statusCode === 400;\n    this.serviceUnavailable = statusCode === 503;\n    this.paymentRequired = statusCode === 402;\n    this.unableToAuthenticate = statusCode === 401 || statusCode === 403;\n    this.notFound = statusCode === 404;\n    this.requestEntityTooLarge = statusCode === 413;\n  }\n}\n\nn\nexport class ExceptionlessClient {\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   * @private\n   */\n  private static _instance: ExceptionlessClient = null;\n\n  public config: Configuration;\n\n  private _intervalId: any;\n  private _timeoutId: any;\n\n  constructor();\n  constructor(settings: IConfigurationSettings);\n  constructor(apiKey: string, serverUrl?: string);\n  constructor(settingsOrApiKey?: IConfigurationSettings | string, serverUrl?: string) {\n    this.config = typeof settingsOrApiKey === 'object'\n      ? new Configuration(settingsOrApiKey)\n      : new Configuration({ apiKey: settingsOrApiKey as string, serverUrl });\n\n    this.updateSettingsTimer(5000);\n    this.config.onChanged((config) => this.updateSettingsTimer(this._timeoutId > 0 ? 5000 : 0));\n    this.config.queue.onEventsPosted((events, response) => this.updateSettingsTimer());\n  }\n\n  public createException(exception: Error): EventBuilder {\n    const pluginContextData = new ContextData();\n    pluginContextData.setException(exception);\n    return this.createEvent(pluginContextData).setType('error');\n  }\n\n  public submitException(exception: Error, callback?: (context: EventPluginContext) => void): void {\n    this.createException(exception).submit(callback);\n  }\n\n  public createUnhandledException(exception: Error, submissionMethod?: string): EventBuilder {\n    const builder = this.createException(exception);\n    builder.pluginContextData.markAsUnhandledError();\n    builder.pluginContextData.setSubmissionMethod(submissionMethod);\n\n    return builder;\n  }\n\n  public submitUnhandledException(exception: Error, submissionMethod?: string, callback?: (context: EventPluginContext) => void) {\n    this.createUnhandledException(exception, submissionMethod).submit(callback);\n  }\n\n  public createFeatureUsage(feature: string): EventBuilder {\n    return this.createEvent().setType('usage').setSource(feature);\n  }\n\n  public submitFeatureUsage(feature: string, callback?: (context: EventPluginContext) => void): void {\n    this.createFeatureUsage(feature).submit(callback);\n  }\n\n  public createLog(message: string): EventBuilder;\n  public createLog(source: string, message: string): EventBuilder;\n  public createLog(source: string, message: string, level: string): EventBuilder;\n  public createLog(sourceOrMessage: string, message?: string, level?: string): EventBuilder {\n    let builder = this.createEvent().setType('log');\n\n    if (level) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message).setProperty('@level', level);\n    } else if (message) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message);\n    } else {\n      builder = builder.setMessage(sourceOrMessage);\n\n      try {\n        // TODO: Look into using https: //www.stevefenton.co.uk/Content/Blog/Date/201304/Blog/Obtaining-A-Class-Name-At-Runtime-In-TypeScript/\n        const caller: any = this.createLog.caller;\n        builder = builder.setSource(caller && caller.caller && caller.caller.name);\n      } catch (e) {\n        this.config.log.trace('Unable to resolve log source: ' + e.message);\n      }\n    }\n\n    return builder;\n  }\n\n  public submitLog(message: string): void;\n  public submitLog(source: string, message: string): void;\n  public submitLog(source: string, message: string, level: string, callback?: (context: EventPluginContext) => void): void;\n  public submitLog(sourceOrMessage: string, message?: string, level?: string, callback?: (context: EventPluginContext) => void): void {\n    this.createLog(sourceOrMessage, message, level).submit(callback);\n  }\n\n  public createNotFound(resource: string): EventBuilder {\n    return this.createEvent().setType('404').setSource(resource);\n  }\n\n  public submitNotFound(resource: string, callback?: (context: EventPluginContext) => void): void {\n    this.createNotFound(resource).submit(callback);\n  }\n\n  public createSessionStart(): EventBuilder {\n    return this.createEvent().setType('session');\n  }\n\n  public submitSessionStart(callback?: (context: EventPluginContext) => void): void {\n    this.createSessionStart().submit(callback);\n  }\n\n  public submitSessionEnd(sessionIdOrUserId: string): void {\n    if (sessionIdOrUserId) {\n      this.config.log.info(`Submitting session end: ${sessionIdOrUserId}`);\n      this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, true, this.config);\n    }\n  }\n\n  public submitSessionHeartbeat(sessionIdOrUserId: string): void {\n    if (sessionIdOrUserId) {\n      this.config.log.info(`Submitting session heartbeat: ${sessionIdOrUserId}`);\n      this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, false, this.config);\n    }\n  }\n\n  public createEvent(pluginContextData?: ContextData): EventBuilder {\n    return new EventBuilder({ date: new Date() }, this, pluginContextData);\n  }\n\n  /**\n   * Submits the event to be sent to the server.\n   * @param event The event data.\n   * @param pluginContextData Any contextual data objects to be used by Exceptionless plugins to gather default information for inclusion in the report information.\n   * @param callback\n   */\n  public submitEvent(event: IEvent, pluginContextData?: ContextData, callback?: (context: EventPluginContext) => void): void {\n    function cancelled(eventPluginContext: EventPluginContext) {\n      if (!!eventPluginContext) {\n        eventPluginContext.cancelled = true;\n      }\n\n      return !!callback && callback(eventPluginContext);\n    }\n\n    const context = new EventPluginContext(this, event, pluginContextData);\n    if (!event) {\n      return cancelled(context);\n    }\n\n    if (!this.config.enabled) {\n      this.config.log.info('Event submission is currently disabled.');\n      return cancelled(context);\n    }\n\n    if (!event.data) {\n      event.data = {};\n    }\n\n    if (!event.tags || !event.tags.length) {\n      event.tags = [];\n    }\n\n    EventPluginManager.run(context, (ctx: EventPluginContext) => {\n      const config = ctx.client.config;\n      const ev = ctx.event;\n\n      if (!ctx.cancelled) {\n        // ensure all required data\n        if (!ev.type || ev.type.length === 0) {\n          ev.type = 'log';\n        }\n\n        if (!ev.date) {\n          ev.date = new Date();\n        }\n\n        config.queue.enqueue(ev);\n\n        if (ev.reference_id && ev.reference_id.length > 0) {\n          ctx.log.info(`Setting last reference id '${ev.reference_id}'`);\n          config.lastReferenceIdManager.setLast(ev.reference_id);\n        }\n      }\n\n      !!callback && callback(ctx);\n    });\n  }\n\n  /**\n   * Updates the user's email address and description of an event for the specified reference id.\n   * @param referenceId The reference id of the event to update.\n   * @param email The user's email address to set on the event.\n   * @param description The user's description of the event.\n   * @param callback The submission response.\n   */\n  public updateUserEmailAndDescription(referenceId: string, email: string, description: string, callback?: (response: SubmissionResponse) => void) {\n    if (!referenceId || !email || !description || !this.config.enabled) {\n      return !!callback && callback(new SubmissionResponse(500, 'cancelled'));\n    }\n\n    const userDescription: IUserDescription = { email_address: email, description };\n    this.config.submissionClient.postUserDescription(referenceId, userDescription, this.config, (response: SubmissionResponse) => {\n      if (!response.success) {\n        this.config.log.error(`Failed to submit user email and description for event '${referenceId}': ${response.statusCode} ${response.message}`);\n      }\n\n      !!callback && callback(response);\n    });\n  }\n\n  /**\n   * Gets the last event client id that was submitted to the server.\n   * @returns {string} The event client id.\n   */\n  public getLastReferenceId(): string {\n    return this.config.lastReferenceIdManager.getLast();\n  }\n\n  private updateSettingsTimer(initialDelay?: number) {\n    this.config.log.info(`Updating settings timer with delay: ${initialDelay}`);\n\n    this._timeoutId = clearTimeout(this._timeoutId);\n    this._timeoutId = clearInterval(this._intervalId);\n\n    const interval = this.config.updateSettingsWhenIdleInterval;\n    if (interval > 0) {\n      const updateSettings = () => SettingsManager.updateSettings(this.config);\n      if (initialDelay > 0) {\n        this._timeoutId = setTimeout(updateSettings, initialDelay);\n      }\n\n      this._intervalId = setInterval(updateSettings, interval);\n    }\n  }\n\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   */\n  public static get default() {\n    if (ExceptionlessClient._instance === null) {\n      ExceptionlessClient._instance = new ExceptionlessClient(null);\n    }\n\n    return ExceptionlessClient._instance;\n  }\n}\n\nexport class ContextData {\n  public setException(exception: Error): void {\n    if (exception) {\n      this['@@_Exception'] = exception;\n    }\n  }\n\n  public get hasException(): boolean {\n    return !!this['@@_Exception'];\n  }\n\n  public getException(): Error {\n    return this['@@_Exception'] || null;\n  }\n\n  public markAsUnhandledError(): void {\n    this['@@_IsUnhandledError'] = true;\n  }\n\n  public get isUnhandledError(): boolean {\n    return !!this['@@_IsUnhandledError'];\n  }\n\n  public setSubmissionMethod(method: string): void {\n    if (method) {\n      this['@@_SubmissionMethod'] = method;\n    }\n  }\n\n  public getSubmissionMethod(): string {\n    return this['@@_SubmissionMethod'] || null;\n  }\n}\n\nexport interface IEnvironmentInfo {\n  processor_count?: number;\n  total_physical_memory?: number;\n  available_physical_memory?: number;\n  command_line?: string;\n  process_name?: string;\n  process_id?: string;\n  process_memory_size?: number;\n  thread_id?: string;\n  architecture?: string;\n  o_s_name?: string;\n  o_s_version?: string;\n  ip_address?: string;\n  machine_name?: string;\n  install_id?: string;\n  runtime_version?: string;\n  data?: any;\n}\n\nexport interface IParameter {\n  data?: any;\n  generic_arguments?: string[];\n\n  name?: string;\n  type?: string;\n  type_namespace?: string;\n}\n\n                                          \n\nexport interface IMethod {\n  data?: any;\n  generic_arguments?: string[];\n  parameters?: IParameter[];\n\n  is_signature_target?: boolean;\n  declaring_namespace?: string;\n  declaring_type?: string;\n  name?: string;\n  module_id?: number;\n}\n\n                                    \n\nexport interface IStackFrame extends IMethod {\n  file_name?: string;\n  line_number?: number;\n  column?: number;\n}\n\n                                                                                 \n\nexport interface IInnerError {\n  message?: string;\n  type?: string;\n  code?: string;\n  data?: any;\n  inner?: IInnerError;\n  stack_trace?: IStackFrame[];\n  target_method?: IMethod;\n}\n\nexport interface IModule {\n  data?: any;\n\n  module_id?: number;\n  name?: string;\n  version?: string;\n  is_entry?: boolean;\n  created_date?: Date;\n  modified_date?: Date;\n}\n\n                                                                                 \n\nexport interface IError extends IInnerError {\n  modules?: IModule[];\n}\n\nexport interface IRequestInfo {\n  user_agent?: string;\n  http_method?: string;\n  is_secure?: boolean;\n  host?: string;\n  port?: number;\n  path?: string;\n  referrer?: string;\n  client_ip_address?: string;\n  cookies?: any;\n  post_data?: any;\n  query_string?: any;\n  data?: any;\n}\n\nexport interface IStorageItem {\n  timestamp: number;\n  value: any;\n}\n\n                                              \n\nexport interface IStorage {\n  save(value: any): number;\n  get(limit?: number): IStorageItem[];\n  remove(timestamp: number): void;\n  clear(): void;\n}\n\nexport type SubmissionCallback = (status: number, message: string, data?: string, headers?: object) => void;\n\nexport interface SubmissionRequest {\n  apiKey: string;\n  userAgent: string;\n  method: string;\n  url: string;\n  data: string;\n}\n\nn\nexport class Configuration implements IConfigurationSettings {\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @type {IConfigurationSettings}\n   * @private\n   */\n  private static _defaultSettings: IConfigurationSettings = null;\n\n  /**\n   * A default list of tags that will automatically be added to every\n   * report submitted to the server.\n   *\n   * @type {Array}\n   */\n  public defaultTags: string[] = [];\n\n  /**\n   * A default list of of extended data objects that will automatically\n   * be added to every report submitted to the server.\n   *\n   * @type {{}}\n   */\n  public defaultData: object = {};\n\n  /**\n   * Whether the client is currently enabled or not. If it is disabled,\n   * submitted errors will be discarded and no data will be sent to the server.\n   *\n   * @returns {boolean}\n   */\n  public enabled: boolean = true;\n\n  public environmentInfoCollector: IEnvironmentInfoCollector;\n  public errorParser: IErrorParser;\n  public lastReferenceIdManager: ILastReferenceIdManager = new DefaultLastReferenceIdManager();\n  public log: ILog;\n  public moduleCollector: IModuleCollector;\n  public requestInfoCollector: IRequestInfoCollector;\n\n  /**\n   * Maximum number of events that should be sent to the server together in a batch. (Defaults to 50)\n   */\n  public submissionBatchSize: number;\n  public submissionAdapter: ISubmissionAdapter;\n  public submissionClient: ISubmissionClient;\n\n  /**\n   * Contains a dictionary of custom settings that can be used to control\n   * the client and will be automatically updated from the server.\n   */\n  public settings: object = {};\n\n  public storage: IStorageProvider;\n\n  public queue: IEventQueue;\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @type {string}\n   * @private\n   */\n  private _apiKey: string;\n\n  /**\n   * The server url that all events will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _serverUrl: string = 'https://collector.exceptionless.io';\n\n  /**\n   * The config server url that all configuration will be retrieved from.\n   * @type {string}\n   * @private\n   */\n  private _configServerUrl: string = 'https://config.exceptionless.io';\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _heartbeatServerUrl: string = 'https://heartbeat.exceptionless.io';\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @type {number}\n   * @private\n   */\n  private _updateSettingsWhenIdleInterval: number = 120000;\n\n  /**\n   * A list of exclusion patterns.\n   * @type {Array}\n   * @private\n   */\n  private _dataExclusions: string[] = [];\n\n  private _includePrivateInformation: boolean;\n  private _includeUserName: boolean;\n  private _includeMachineName: boolean;\n  private _includeIpAddress: boolean;\n  private _includeCookies: boolean;\n  private _includePostData: boolean;\n  private _includeQueryString: boolean;\n\n  /**\n   * A list of user agent patterns.\n   * @type {Array}\n   * @private\n   */\n  private _userAgentBotPatterns: string[] = [];\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @type {Array}\n   * @private\n   */\n  private _plugins: IEventPlugin[] = [];\n\n  /**\n   * A list of handlers that will be fired when configuration changes.\n   * @type {Array}\n   * @private\n   */\n  private _handlers: Array<(config: Configuration) => void> = [];\n\n  constructor(configSettings?: IConfigurationSettings) {\n    function inject(fn: any) {\n      return typeof fn === 'function' ? fn(this) : fn;\n    }\n\n    configSettings = Utils.merge(Configuration.defaults, configSettings);\n\n    this.log = inject(configSettings.log) || new NullLog();\n    this.apiKey = configSettings.apiKey;\n    this.serverUrl = configSettings.serverUrl;\n    this.configServerUrl = configSettings.configServerUrl;\n    this.heartbeatServerUrl = configSettings.heartbeatServerUrl;\n    this.updateSettingsWhenIdleInterval = configSettings.updateSettingsWhenIdleInterval;\n    this.includePrivateInformation = configSettings.includePrivateInformation;\n\n    this.environmentInfoCollector = inject(configSettings.environmentInfoCollector);\n    this.errorParser = inject(configSettings.errorParser);\n    this.lastReferenceIdManager = inject(configSettings.lastReferenceIdManager) || new DefaultLastReferenceIdManager();\n    this.moduleCollector = inject(configSettings.moduleCollector);\n    this.requestInfoCollector = inject(configSettings.requestInfoCollector);\n    this.submissionBatchSize = inject(configSettings.submissionBatchSize) || 50;\n    this.submissionAdapter = inject(configSettings.submissionAdapter);\n    this.submissionClient = inject(configSettings.submissionClient) || new DefaultSubmissionClient();\n    this.storage = inject(configSettings.storage) || new InMemoryStorageProvider();\n    this.queue = inject(configSettings.queue) || new DefaultEventQueue(this);\n\n    SettingsManager.applySavedServerSettings(this);\n    EventPluginManager.addDefaultPlugins(this);\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @returns {string}\n   */\n  public get apiKey(): string {\n    return this._apiKey;\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @param value\n   */\n  public set apiKey(value: string) {\n    this._apiKey = value || null;\n    this.log.info(`apiKey: ${this._apiKey}`);\n    this.changed();\n  }\n\n  /**\n   * Returns true if the apiKey is valid.\n   * @returns {boolean}\n   */\n  public get isValid(): boolean {\n    return !!this.apiKey && this.apiKey.length >= 10;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @returns {string}\n   */\n  public get serverUrl(): string {\n    return this._serverUrl;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @param value\n   */\n  public set serverUrl(value: string) {\n    if (!!value) {\n      this._serverUrl = value;\n      this._configServerUrl = value;\n      this._heartbeatServerUrl = value;\n      this.log.info(`serverUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * The config server url that all configuration will be retrieved from.\n   * @returns {string}\n   */\n  public get configServerUrl(): string {\n    return this._configServerUrl;\n  }\n\n  /**\n   * The config server url that all configuration will be retrieved from.\n   * @param value\n   */\n  public set configServerUrl(value: string) {\n    if (!!value) {\n      this._configServerUrl = value;\n      this.log.info(`configServerUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @returns {string}\n   */\n  public get heartbeatServerUrl(): string {\n    return this._heartbeatServerUrl;\n  }\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @param value\n   */\n  public set heartbeatServerUrl(value: string) {\n    if (!!value) {\n      this._heartbeatServerUrl = value;\n      this.log.info(`heartbeatServerUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @returns {number}\n   */\n  public get updateSettingsWhenIdleInterval(): number {\n    return this._updateSettingsWhenIdleInterval;\n  }\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @param value\n   */\n  public set updateSettingsWhenIdleInterval(value: number) {\n    if (typeof value !== 'number') {\n      return;\n    }\n\n    if (value <= 0) {\n      value = -1;\n    } else if (value > 0 && value < 120000) {\n      value = 120000;\n    }\n\n    this._updateSettingsWhenIdleInterval = value;\n    this.log.info(`updateSettingsWhenIdleInterval: ${value}`);\n    this.changed();\n  }\n\n  /**\n   *  A list of exclusion patterns that will automatically remove any data that\n   *  matches them from any data submitted to the server.\n   *\n   *  For example, entering CreditCard will remove any extended data properties,\n   *  form fields, cookies and query parameters from the report.\n   *\n   * @returns {string[]}\n   */\n  public get dataExclusions(): string[] {\n    const exclusions: string = this.settings['@@DataExclusions'];\n    return this._dataExclusions.concat(exclusions && exclusions.split(',') || []);\n  }\n\n  /**\n   * Add items to the list of exclusion patterns that will automatically remove any\n   * data that matches them from any data submitted to the server.\n   *\n   * For example, entering CreditCard will remove any extended data properties, form\n   * fields, cookies and query parameters from the report.\n   *\n   * @param exclusions\n   */\n  public addDataExclusions(...exclusions: string[]) {\n    this._dataExclusions = Utils.addRange<string>(this._dataExclusions, ...exclusions);\n  }\n\n  /**\n   * Gets a value indicating whether to include private information about the local machine.\n   * @returns {boolean}\n   */\n  public get includePrivateInformation(): boolean {\n    return this._includePrivateInformation;\n  }\n\n  /**\n   * Sets a value indicating whether to include private information about the local machine\n   * @param value\n   */\n  public set includePrivateInformation(value: boolean) {\n    const val = value || false;\n    this._includePrivateInformation = val;\n    this._includeUserName = val;\n    this._includeMachineName = val;\n    this._includeIpAddress = val;\n    this._includeCookies = val;\n    this._includePostData = val;\n    this._includeQueryString = val;\n    this.log.info(`includePrivateInformation: ${val}`);\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include User Name.\n   * @returns {boolean}\n   */\n  public get includeUserName(): boolean {\n    return this._includeUserName;\n  }\n\n  /**\n   * Sets a value indicating whether to include User Name.\n   * @param value\n   */\n  public set includeUserName(value: boolean) {\n    this._includeUserName = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include MachineName in MachineInfo.\n   * @returns {boolean}\n   */\n  public get includeMachineName(): boolean {\n    return this._includeMachineName;\n  }\n\n  /**\n   * Sets a value indicating whether to include MachineName in MachineInfo.\n   * @param value\n   */\n  public set includeMachineName(value: boolean) {\n    this._includeMachineName = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include Ip Addresses in MachineInfo and RequestInfo.\n   * @returns {boolean}\n   */\n  public get includeIpAddress(): boolean {\n    return this._includeIpAddress;\n  }\n\n  /**\n   * Sets a value indicating whether to include Ip Addresses in MachineInfo and RequestInfo.\n   * @param value\n   */\n  public set includeIpAddress(value: boolean) {\n    this._includeIpAddress = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include Cookies.\n   * NOTE: DataExclusions are applied to all Cookie keys when enabled.\n   * @returns {boolean}\n   */\n  public get includeCookies(): boolean {\n    return this._includeCookies;\n  }\n\n  /**\n   * Sets a value indicating whether to include Cookies.\n   * NOTE: DataExclusions are applied to all Cookie keys when enabled.\n   * @param value\n   */\n  public set includeCookies(value: boolean) {\n    this._includeCookies = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include Form/POST Data.\n   * NOTE: DataExclusions are only applied to Form data keys when enabled.\n   * @returns {boolean}\n   */\n  public get includePostData(): boolean {\n    return this._includePostData;\n  }\n\n  /**\n   * Sets a value indicating whether to include Form/POST Data.\n   * NOTE: DataExclusions are only applied to Form data keys when enabled.\n   * @param value\n   */\n  public set includePostData(value: boolean) {\n    this._includePostData = value || false;\n    this.changed();\n  }\n\n  /**\n   * Gets a value indicating whether to include query string information.\n   * NOTE: DataExclusions are applied to all Query String keys when enabled.\n   * @returns {boolean}\n   */\n  public get includeQueryString(): boolean {\n    return this._includeQueryString;\n  }\n\n  /**\n   * Sets a value indicating whether to include query string information.\n   * NOTE: DataExclusions are applied to all Query String keys when enabled.\n   * @param value\n   */\n  public set includeQueryString(value: boolean) {\n    this._includeQueryString = value || false;\n    this.changed();\n  }\n\n  /**\n   * A list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @returns {string[]}\n   */\n  public get userAgentBotPatterns(): string[] {\n    const patterns: string = this.settings['@@UserAgentBotPatterns'];\n    return this._userAgentBotPatterns.concat(patterns && patterns.split(',') || []);\n  }\n\n  /**\n   * Add items to the list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @param userAgentBotPatterns\n   */\n  public addUserAgentBotPatterns(...userAgentBotPatterns: string[]) {\n    this._userAgentBotPatterns = Utils.addRange<string>(this._userAgentBotPatterns, ...userAgentBotPatterns);\n  }\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @returns {IEventPlugin[]}\n   */\n  public get plugins(): IEventPlugin[] {\n    return this._plugins.sort((p1: IEventPlugin, p2: IEventPlugin) => {\n      return (p1.priority < p2.priority) ? -1 : (p1.priority > p2.priority) ? 1 : 0;\n    });\n  }\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param plugin\n   */\n  public addPlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param name The name used to identify the plugin.\n   * @param priority Used to determine plugins priority.\n   * @param pluginAction A function that is run.\n   */\n  public addPlugin(name: string, priority: number, pluginAction: (context: EventPluginContext, next?: () => void) => void): void;\n  public addPlugin(pluginOrName: IEventPlugin | string, priority?: number, pluginAction?: (context: EventPluginContext, next?: () => void) => void): void {\n    const plugin: IEventPlugin = !!pluginAction ? { name: pluginOrName as string, priority, run: pluginAction } : pluginOrName as IEventPlugin;\n    if (!plugin || !plugin.run) {\n      this.log.error('Add plugin failed: Run method not defined');\n      return;\n    }\n\n    if (!plugin.name) {\n      plugin.name = Utils.guid();\n    }\n\n    if (!plugin.priority) {\n      plugin.priority = 0;\n    }\n\n    let pluginExists: boolean = false;\n    const plugins = this._plugins; // optimization for minifier.\n    for (const p of plugins) {\n      if (p.name === plugin.name) {\n        pluginExists = true;\n        break;\n      }\n    }\n\n    if (!pluginExists) {\n      plugins.push(plugin);\n    }\n  }\n\n  /**\n   * Remove the plugin from this configuration.\n   * @param plugin\n   */\n  public removePlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Remove an plugin by key from this configuration.\n   * @param name\n   */\n  public removePlugin(pluginOrName: IEventPlugin | string): void {\n    const name: string = typeof pluginOrName === 'string' ? pluginOrName : pluginOrName.name;\n    if (!name) {\n      this.log.error('Remove plugin failed: Plugin name not defined');\n      return;\n    }\n\n    const plugins = this._plugins; // optimization for minifier.\n    for (let index = 0; index < plugins.length; index++) {\n      if (plugins[index].name === name) {\n        plugins.splice(index, 1);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Automatically set the application version for events.\n   * @param version\n   */\n  public setVersion(version: string): void {\n    if (!!version) {\n      this.defaultData['@version'] = version;\n    }\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): void;\n  public setUserIdentity(identity: string): void;\n  public setUserIdentity(identity: string, name: string): void;\n  public setUserIdentity(userInfoOrIdentity: IUserInfo | string, name?: string): void {\n    const USER_KEY: string = '@user'; // optimization for minifier.\n    const userInfo: IUserInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name };\n\n    const shouldRemove: boolean = !userInfo || (!userInfo.identity && !userInfo.name);\n    if (shouldRemove) {\n      delete this.defaultData[USER_KEY];\n    } else {\n      this.defaultData[USER_KEY] = userInfo;\n    }\n\n    this.log.info(`user identity: ${shouldRemove ? 'null' : userInfo.identity}`);\n  }\n\n  /**\n   * Used to identify the client that sent the events to the server.\n   * @returns {string}\n   */\n  public get userAgent(): string {\n    return 'exceptionless-js/1.0.0.0';\n  }\n\n  /**\n   * Automatically send a heartbeat to keep the session alive.\n   */\n  public useSessions(sendHeartbeats: boolean = true, heartbeatInterval: number = 30000): void {\n    if (sendHeartbeats) {\n      this.addPlugin(new HeartbeatPlugin(heartbeatInterval));\n    }\n  }\n\n  /**\n   * Automatically set a reference id for error events.\n   */\n  public useReferenceIds(): void {\n    this.addPlugin(new ReferenceIdPlugin());\n  }\n\n  public useLocalStorage(): void {\n    // This method will be injected via the prototype.\n  }\n\n  // TODO: Support a min log level.\n  public useDebugLogger(): void {\n    this.log = new ConsoleLog();\n  }\n\n  public onChanged(handler: (config: Configuration) => void) {\n    !!handler && this._handlers.push(handler);\n  }\n\n  private changed() {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(this);\n      } catch (ex) {\n        this.log.error(`Error calling onChanged handler: ${ex}`);\n      }\n    }\n  }\n\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @returns {IConfigurationSettings}\n   */\n  public static get defaults() {\n    if (Configuration._defaultSettings === null) {\n      Configuration._defaultSettings = { includePrivateInformation: true };\n    }\n\n    return Configuration._defaultSettings;\n  }\n}\n\nexport interface IUserDescription {\n  email_address?: string;\n  description?: string;\n  data?: any;\n}\n\nexport class SettingsResponse {\n  public success: boolean = false;\n  public settings: any;\n  public settingsVersion: number = -1;\n  public message: string;\n  public exception: any;\n\n  constructor(success: boolean, settings: any, settingsVersion: number = -1, exception: any = null, message: string = null) {\n    this.success = success;\n    this.settings = settings;\n    this.settingsVersion = settingsVersion;\n    this.exception = exception;\n    this.message = message;\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                   \n\nexport class EventBuilder {\n  public target: IEvent;\n  public client: ExceptionlessClient;\n  public pluginContextData: ContextData;\n\n  private _validIdentifierErrorMessage: string = 'must contain between 8 and 100 alphanumeric or \\'-\\' characters.'; // optimization for minifier.\n\n  constructor(event: IEvent, client: ExceptionlessClient, pluginContextData?: ContextData) {\n    this.target = event;\n    this.client = client;\n    this.pluginContextData = pluginContextData || new ContextData();\n  }\n\n  public setType(type: string): EventBuilder {\n    if (!!type) {\n      this.target.type = type;\n    }\n\n    return this;\n  }\n\n  public setSource(source: string): EventBuilder {\n    if (!!source) {\n      this.target.source = source;\n    }\n\n    return this;\n  }\n\n  public setReferenceId(referenceId: string): EventBuilder {\n    if (!this.isValidIdentifier(referenceId)) {\n      throw new Error(`ReferenceId ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.target.reference_id = referenceId;\n    return this;\n  }\n\n  /**\n   * Allows you to reference a parent event by its ReferenceId property. This allows you to have parent and child relationships.\n   * @param name Reference name\n   * @param id The reference id that points to a specific event\n   * @returns {EventBuilder}\n   */\n  public setEventReference(name: string, id: string): EventBuilder {\n    if (!name) {\n      throw new Error('Invalid name');\n    }\n\n    if (!id || !this.isValidIdentifier(id)) {\n      throw new Error(`Id ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.setProperty('@ref:' + name, id);\n    return this;\n  }\n\n  public setMessage(message: string): EventBuilder {\n    if (!!message) {\n      this.target.message = message;\n    }\n\n    return this;\n  }\n\n  public setGeo(latitude: number, longitude: number): EventBuilder {\n    if (latitude < -90.0 || latitude > 90.0) {\n      throw new Error('Must be a valid latitude value between -90.0 and 90.0.');\n    }\n\n    if (longitude < -180.0 || longitude > 180.0) {\n      throw new Error('Must be a valid longitude value between -180.0 and 180.0.');\n    }\n\n    this.target.geo = `${latitude},${longitude}`;\n    return this;\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): EventBuilder;\n  public setUserIdentity(identity: string): EventBuilder;\n  public setUserIdentity(identity: string, name: string): EventBuilder;\n  public setUserIdentity(userInfoOrIdentity: IUserInfo | string, name?: string): EventBuilder {\n    const userInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name };\n    if (!userInfo || (!userInfo.identity && !userInfo.name)) {\n      return this;\n    }\n\n    this.setProperty('@user', userInfo);\n    return this;\n  }\n\n  /**\n   * Sets the user's description of the event.\n   *\n   * @param emailAddress The email address\n   * @param description The user's description of the event.\n   * @returns {EventBuilder}\n   */\n  public setUserDescription(emailAddress: string, description: string): EventBuilder {\n    if (emailAddress && description) {\n      this.setProperty('@user_description', { email_address: emailAddress, description });\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting manual\n   * stacking information.\n   * @param signatureData A dictionary of strings to use for stacking.\n   * @param title An optional title for the stacking information.\n   * @returns {EventBuilder}\n   */\n  public setManualStackingInfo(signatureData: any, title?: string) {\n    if (signatureData) {\n      const stack: IManualStackingInfo = { signature_data: signatureData };\n      if (title) {\n        stack.title = title;\n      }\n\n      this.setProperty('@stack', stack);\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting the stacking key.\n   * @param manualStackingKey The manual stacking key.\n   * @param title An optional title for the stacking information.\n   * @returns {EventBuilder}\n   */\n  public setManualStackingKey(manualStackingKey: string, title?: string): EventBuilder {\n    if (manualStackingKey) {\n      const data = { ManualStackingKey: manualStackingKey };\n      this.setManualStackingInfo(data, title);\n    }\n\n    return this;\n  }\n\n  public setValue(value: number): EventBuilder {\n    if (!!value) {\n      this.target.value = value;\n    }\n\n    return this;\n  }\n\n  public addTags(...tags: string[]): EventBuilder {\n    this.target.tags = Utils.addRange<string>(this.target.tags, ...tags);\n    return this;\n  }\n\n  /**\n   * Adds the object to extended data. Uses @excludedPropertyNames\n   * to exclude data from being included in the event.\n   * @param name The data object to add.\n   * @param value The name of the object to add.\n   * @param maxDepth The max depth of the object to include.\n   * @param excludedPropertyNames Any property names that should be excluded.\n   */\n  public setProperty(name: string, value: any, maxDepth?: number, excludedPropertyNames?: string[]): EventBuilder {\n    if (!name || (value === undefined || value == null)) {\n      return this;\n    }\n\n    if (!this.target.data) {\n      this.target.data = {};\n    }\n\n    const result = JSON.parse(Utils.stringify(value, this.client.config.dataExclusions.concat(excludedPropertyNames || []), maxDepth));\n    if (!Utils.isEmpty(result)) {\n      this.target.data[name] = result;\n    }\n\n    return this;\n  }\n\n  public markAsCritical(critical: boolean): EventBuilder {\n    if (critical) {\n      this.addTags('Critical');\n    }\n\n    return this;\n  }\n\n  public addRequestInfo(request: object): EventBuilder {\n    if (!!request) {\n      this.pluginContextData['@request'] = request;\n    }\n\n    return this;\n  }\n\n  public submit(callback?: (context: EventPluginContext) => void): void {\n    this.client.submitEvent(this.target, this.pluginContextData, callback);\n  }\n\n  private isValidIdentifier(value: string): boolean {\n    if (!value) {\n      return true;\n    }\n\n    if (value.length < 8 || value.length > 100) {\n      return false;\n    }\n\n    for (let index = 0; index < value.length; index++) {\n      const code = value.charCodeAt(index);\n      const isDigit = (code >= 48) && (code <= 57);\n      const isLetter = ((code >= 65) && (code <= 90)) || ((code >= 97) && (code <= 122));\n      const isMinus = code === 45;\n\n      if (!(isDigit || isLetter) && !isMinus) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nexport interface IManualStackingInfo {\n  title?: string;\n  signature_data?: any;\n}\n\n                                                                                                                                                \n\nexport class ConfigurationDefaultsPlugin implements IEventPlugin {\n  public priority: number = 10;\n  public name: string = 'ConfigurationDefaultsPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const config = context.client.config;\n    const defaultTags: string[] = config.defaultTags || [];\n    for (const tag of defaultTags) {\n      if (!!tag && context.event.tags.indexOf(tag) < 0) {\n        context.event.tags.push(tag);\n      }\n    }\n\n    // tslint:disable-next-line:ban-types\n    const defaultData: Object = config.defaultData || {};\n    for (const key in defaultData) {\n      if (!!defaultData[key]) {\n        const result = JSON.parse(Utils.stringify(defaultData[key], config.dataExclusions));\n        if (!Utils.isEmpty(result)) {\n          context.event.data[key] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                        \n\nexport class DuplicateCheckerPlugin implements IEventPlugin {\n  public priority: number = 1010;\n  public name: string = 'DuplicateCheckerPlugin';\n\n  private _mergedEvents: MergedEvent[] = [];\n  private _processedHashcodes: TimestampedHash[] = [];\n  private _getCurrentTime: () => number;\n  private _interval: number;\n\n  constructor(getCurrentTime: () => number = () => Date.now(), interval: number = 30000) {\n    this._getCurrentTime = getCurrentTime;\n    this._interval = interval;\n\n    setInterval(() => {\n      while (this._mergedEvents.length > 0) {\n        this._mergedEvents.shift().resubmit();\n      }\n    }, interval);\n  }\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    function getHashCode(e: IInnerError): number {\n      let hash = 0;\n      while (e) {\n        if (e.message && e.message.length) {\n          hash += (hash * 397) ^ Utils.getHashCode(e.message);\n        }\n        if (e.stack_trace && e.stack_trace.length) {\n          hash += (hash * 397) ^ Utils.getHashCode(JSON.stringify(e.stack_trace));\n        }\n        e = e.inner;\n      }\n\n      return hash;\n    }\n\n    const error = context.event.data['@error'];\n    const hashCode = getHashCode(error);\n    if (hashCode) {\n      const count = context.event.count || 1;\n      const now = this._getCurrentTime();\n\n      const merged = this._mergedEvents.filter((s) => s.hashCode === hashCode)[0];\n      if (merged) {\n        merged.incrementCount(count);\n        merged.updateDate(context.event.date);\n        context.log.info('Ignoring duplicate event with hash: ' + hashCode);\n        context.cancelled = true;\n      }\n\n      if (!context.cancelled && this._processedHashcodes.some((h) => h.hash === hashCode && h.timestamp >= (now - this._interval))) {\n        context.log.trace('Adding event with hash: ' + hashCode);\n        this._mergedEvents.push(new MergedEvent(hashCode, context, count));\n        context.cancelled = true;\n      }\n\n      if (!context.cancelled) {\n        context.log.trace('Enqueueing event with hash: ' + hashCode + 'to cache.');\n        this._processedHashcodes.push({ hash: hashCode, timestamp: now });\n\n        // Only keep the last 50 recent errors.\n        while (this._processedHashcodes.length > 50) {\n          this._processedHashcodes.shift();\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\ninterface TimestampedHash {\n  hash: number;\n  timestamp: number;\n}\n\nclass MergedEvent {\n  public hashCode: number;\n  private _count: number;\n  private _context: EventPluginContext;\n\n  constructor(hashCode: number, context: EventPluginContext, count: number) {\n    this.hashCode = hashCode;\n    this._context = context;\n    this._count = count;\n  }\n\n  public incrementCount(count: number) {\n    this._count += count;\n  }\n\n  public resubmit() {\n    this._context.event.count = this._count;\n    this._context.client.config.queue.enqueue(this._context.event);\n  }\n\n  public updateDate(date) {\n    if (date > this._context.event.date) {\n      this._context.event.date = date;\n    }\n  }\n}\n\n                                                                                                                                                                             \n\nexport class EnvironmentInfoPlugin implements IEventPlugin {\n  public priority: number = 80;\n  public name: string = 'EnvironmentInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ENVIRONMENT_KEY: string = '@environment'; // optimization for minifier.\n\n    const collector = context.client.config.environmentInfoCollector;\n    if (!context.event.data[ENVIRONMENT_KEY] && collector) {\n      const environmentInfo: IEnvironmentInfo = collector.getEnvironmentInfo(context);\n      if (!!environmentInfo) {\n        context.event.data[ENVIRONMENT_KEY] = environmentInfo;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                \n\nexport class ErrorPlugin implements IEventPlugin {\n  public priority: number = 30;\n  public name: string = 'ErrorPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\n    const ignoredProperties: string[] = [\n      'arguments',\n      'column',\n      'columnNumber',\n      'description',\n      'fileName',\n      'message',\n      'name',\n      'number',\n      'line',\n      'lineNumber',\n      'opera#sourceloc',\n      'sourceId',\n      'sourceURL',\n      'stack',\n      'stackArray',\n      'stacktrace'\n    ];\n\n    const exception = context.contextData.getException();\n    if (!!exception) {\n      context.event.type = 'error';\n\n      if (!context.event.data[ERROR_KEY]) {\n        const config = context.client.config;\n        const parser = config.errorParser;\n        if (!parser) {\n          throw new Error('No error parser was defined.');\n        }\n\n        const result = parser.parse(context, exception);\n        if (!!result) {\n          const additionalData = JSON.parse(Utils.stringify(exception, config.dataExclusions.concat(ignoredProperties)));\n          if (!Utils.isEmpty(additionalData)) {\n            if (!result.data) {\n              result.data = {};\n            }\n            result.data['@ext'] = additionalData;\n          }\n\n          context.event.data[ERROR_KEY] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                        \n\nexport class EventExclusionPlugin implements IEventPlugin {\n  public priority: number = 45;\n  public name: string = 'EventExclusionPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    function getLogLevel(level: string): number {\n      switch ((level || '').toLowerCase().trim()) {\n        case 'trace':\n        case 'true':\n        case '1':\n        case 'yes':\n          return 0;\n        case 'debug':\n          return 1;\n        case 'info':\n          return 2;\n        case 'warn':\n          return 3;\n        case 'error':\n          return 4;\n        case 'fatal':\n          return 5;\n        case 'off':\n        case 'false':\n        case '0':\n        case 'no':\n          return 6;\n        default:\n          return -1;\n      }\n    }\n\n    function getMinLogLevel(configSettings: object, loggerName: string = '*'): number {\n      return getLogLevel(getTypeAndSourceSetting(configSettings, 'log', loggerName, 'Trace') + '');\n    }\n\n    // tslint:disable-next-line:ban-types\n    function getTypeAndSourceSetting(configSettings: Object = {}, type: string, source: string, defaultValue?: string | boolean): string | boolean {\n      if (!type) {\n        return defaultValue;\n      }\n\n      const isLog = type === 'log';\n      const sourcePrefix = `@@${type}:`;\n\n      const value = configSettings[sourcePrefix + source];\n      if (value) {\n        return !isLog ? Utils.toBoolean(value) : value;\n      }\n\n      // check for wildcard match\n      for (const key in configSettings) {\n        if (Utils.startsWith(key.toLowerCase(), sourcePrefix.toLowerCase()) && Utils.isMatch(source, [key.substring(sourcePrefix.length)])) {\n          return !isLog ? Utils.toBoolean(configSettings[key]) : configSettings[key];\n        }\n      }\n\n      return defaultValue;\n    }\n\n    const ev = context.event;\n    const log = context.log;\n    const settings = context.client.config.settings;\n\n    if (ev.type === 'log') {\n      const minLogLevel = getMinLogLevel(settings, ev.source);\n      const logLevel = getLogLevel(ev.data['@level']);\n\n      if (logLevel >= 0 && (logLevel > 5 || logLevel < minLogLevel)) {\n        log.info('Cancelling log event due to minimum log level.');\n        context.cancelled = true;\n      }\n    } else if (ev.type === 'error') {\n      let error: IInnerError = ev.data['@error'];\n      while (!context.cancelled && error) {\n        if (getTypeAndSourceSetting(settings, ev.type, error.type, true) === false) {\n          log.info(`Cancelling error from excluded exception type: ${error.type}`);\n          context.cancelled = true;\n        }\n\n        error = error.inner;\n      }\n    } else if (getTypeAndSourceSetting(settings, ev.type, ev.source, true) === false) {\n      log.info(`Cancelling event from excluded type: ${ev.type} and source: ${ev.source}`);\n      context.cancelled = true;\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                           \n\nexport class ModuleInfoPlugin implements IEventPlugin {\n  public priority: number = 50;\n  public name: string = 'ModuleInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\n\n    const collector = context.client.config.moduleCollector;\n    if (context.event.data[ERROR_KEY] && !context.event.data['@error'].modules && !!collector) {\n      const modules: IModule[] = collector.getModules(context);\n      if (modules && modules.length > 0) {\n        context.event.data[ERROR_KEY].modules = modules;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                          \n\nexport class RequestInfoPlugin implements IEventPlugin {\n  public priority: number = 70;\n  public name: string = 'RequestInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const REQUEST_KEY: string = '@request'; // optimization for minifier.\n\n    const config = context.client.config;\n    const collector = config.requestInfoCollector;\n    if (!context.event.data[REQUEST_KEY] && !!collector) {\n      const requestInfo: IRequestInfo = collector.getRequestInfo(context);\n      if (!!requestInfo) {\n        if (Utils.isMatch(requestInfo.user_agent, config.userAgentBotPatterns)) {\n          context.log.info('Cancelling event as the request user agent matches a known bot pattern');\n          context.cancelled = true;\n        } else {\n          context.event.data[REQUEST_KEY] = requestInfo;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                           \n\nexport class SubmissionMethodPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = 'SubmissionMethodPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const submissionMethod: string = context.contextData.getSubmissionMethod();\n    if (!!submissionMethod) {\n      context.event.data['@submission_method'] = submissionMethod;\n    }\n\n    next && next();\n  }\n}\n\n                                                                                     \n\nexport class InMemoryStorage implements IStorage {\n  private maxItems: number;\n  private items: IStorageItem[] = [];\n  private lastTimestamp: number = 0;\n\n  constructor(maxItems: number) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any): number {\n    if (!value) {\n      return null;\n    }\n\n    const items = this.items;\n    const timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    const item = { timestamp, value };\n\n    if (items.push(item) > this.maxItems) {\n      items.shift();\n    }\n\n    this.lastTimestamp = timestamp;\n    return item.timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    return this.items.slice(0, limit);\n  }\n\n  public remove(timestamp: number): void {\n    const items = this.items;\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].timestamp === timestamp) {\n        items.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  public clear(): void {\n    this.items = [];\n  }\n}\n\nexport interface IClientConfiguration {\n  settings: object;\n  version: number;\n}\n\n                                                                                     \n\nexport abstract class KeyValueStorageBase implements IStorage {\n  private maxItems: number;\n  private items: number[];\n  private lastTimestamp: number = 0;\n\n  constructor(maxItems) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any, single?: boolean): number {\n    if (!value) {\n      return null;\n    }\n\n    this.ensureIndex();\n\n    const items = this.items;\n    const timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    const key = this.getKey(timestamp);\n    const json = JSON.stringify(value);\n\n    try {\n      this.write(key, json);\n      this.lastTimestamp = timestamp;\n      if (items.push(timestamp) > this.maxItems) {\n        this.delete(this.getKey(items.shift()));\n      }\n    } catch (e) {\n      return null;\n    }\n\n    return timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    this.ensureIndex();\n\n    return this.items.slice(0, limit)\n      .map((timestamp) => {\n        // Read and parse item for this timestamp\n        const key = this.getKey(timestamp);\n        try {\n          const json = this.read(key);\n          const value = JSON.parse(json, parseDate);\n          return { timestamp, value };\n        } catch (error) {\n          // Something went wrong - try to delete the cause.\n          this.safeDelete(key);\n          return null;\n        }\n      })\n      .filter((item) => item != null);\n  }\n\n  public remove(timestamp: number): void {\n    this.ensureIndex();\n\n    const items = this.items;\n    const index = items.indexOf(timestamp);\n    if (index >= 0) {\n      const key = this.getKey(timestamp);\n      this.safeDelete(key);\n      items.splice(index, 1);\n    }\n  }\n\n  public clear(): void {\n    this.items.forEach((item) => this.safeDelete(this.getKey(item)));\n    this.items = [];\n  }\n\n  protected abstract write(key: string, value: string): void;\n  protected abstract read(key: string): string;\n  protected abstract readAllKeys(): string[];\n  protected abstract delete(key: string);\n  protected abstract getKey(timestamp: number): string;\n  protected abstract getTimestamp(key: string): number;\n\n  private ensureIndex() {\n    if (!this.items) {\n      this.items = this.createIndex();\n      this.lastTimestamp = Math.max(0, ...this.items) + 1;\n    }\n  }\n\n  private safeDelete(key: string): void {\n    try {\n      this.delete(key);\n    } catch (error) {\n    }\n  }\n\n  private createIndex() {\n    try {\n      const keys = this.readAllKeys();\n      return keys.map((key) => {\n        try {\n          const timestamp = this.getTimestamp(key);\n          if (!timestamp) {\n            this.safeDelete(key);\n            return null;\n          }\n          return timestamp;\n        } catch (error) {\n          this.safeDelete(key);\n          return null;\n        }\n      }).filter((timestamp) => timestamp != null)\n        .sort((a, b) => a - b);\n    } catch (error) {\n      return [];\n    }\n  }\n}\n\nfunction parseDate(key, value) {\n  const dateRegx = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/g;\n  if (typeof value === 'string') {\n    const a = dateRegx.exec(value);\n    if (a) {\n      return new Date(value);\n    }\n  }\n  return value;\n}\n\n                                                            \n\nexport class BrowserStorage extends KeyValueStorageBase {\n  private prefix: string;\n\n  public static isAvailable(): boolean {\n    try {\n      const storage = window.localStorage;\n      const x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  constructor(namespace: string, prefix: string = 'com.exceptionless.', maxItems: number = 20) {\n    super(maxItems);\n\n    this.prefix = prefix + namespace + '-';\n  }\n\n  public write(key: string, value: string) {\n    window.localStorage.setItem(key, value);\n  }\n\n  public read(key: string) {\n    return window.localStorage.getItem(key);\n  }\n\n  public readAllKeys() {\n    return Object.keys(window.localStorage)\n      .filter((key) => key.indexOf(this.prefix) === 0);\n  }\n\n  public delete(key: string) {\n    window.localStorage.removeItem(key);\n  }\n\n  public getKey(timestamp) {\n    return this.prefix + timestamp;\n  }\n\n  public getTimestamp(key) {\n    return parseInt(key.substr(this.prefix.length), 10);\n  }\n}\n\n                                                                                                                                                                                                                                                                                                           \n\nexport class DefaultErrorParser implements IErrorParser {\n  public parse(context: EventPluginContext, exception: Error): IError {\n    function getParameters(parameters: string | string[]): IParameter[] {\n      const params: string[] = (typeof parameters === 'string' ? [parameters] : parameters) || [];\n\n      const result: IParameter[] = [];\n      for (const param of params) {\n        result.push({ name: param });\n      }\n\n      return result;\n    }\n\n    function getStackFrames(stackFrames: TraceKit.StackFrame[]): IStackFrame[] {\n      const ANONYMOUS: string = '<anonymous>';\n      const frames: IStackFrame[] = [];\n\n      for (const frame of stackFrames) {\n        frames.push({\n          name: (frame.func || ANONYMOUS).replace('?', ANONYMOUS),\n          parameters: getParameters(frame.args),\n          file_name: frame.url,\n          line_number: frame.line || 0,\n          column: frame.column || 0\n        });\n      }\n\n      return frames;\n    }\n\n    const TRACEKIT_STACK_TRACE_KEY: string = '@@_TraceKit.StackTrace'; // optimization for minifier.\n\n    const stackTrace: TraceKit.StackTrace = !!context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      ? context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      : TraceKit.computeStackTrace(exception, 25);\n\n    if (!stackTrace) {\n      throw new Error('Unable to parse the exceptions stack trace.');\n    }\n\n    const message = typeof (exception) === 'string' ? exception as any : undefined;\n    return {\n      type: stackTrace.name || 'Error',\n      message: stackTrace.message || exception.message || message,\n      stack_trace: getStackFrames(stackTrace.stack || [])\n    };\n  }\n}\n\n                                                                                                                                                                                                         \n\nexport class DefaultModuleCollector implements IModuleCollector {\n  public getModules(context: EventPluginContext): IModule[] {\n    if (!document || !document.getElementsByTagName) {\n      return null;\n    }\n\n    const modules: IModule[] = [];\n    const scripts: NodeListOf<HTMLScriptElement> = document.getElementsByTagName('script');\n    if (scripts && scripts.length > 0) {\n      for (let index = 0; index < scripts.length; index++) {\n        if (scripts[index].src) {\n          modules.push({\n            module_id: index,\n            name: scripts[index].src.split('?')[0],\n            version: Utils.parseVersion(scripts[index].src)\n          });\n        } else if (!!scripts[index].innerHTML) {\n          modules.push({\n            module_id: index,\n            name: 'Script Tag',\n            version: Utils.getHashCode(scripts[index].innerHTML).toString()\n          });\n        }\n      }\n    }\n\n    return modules;\n  }\n}\n\n                                                                                                                                                                                                                             \n\nexport class DefaultRequestInfoCollector implements IRequestInfoCollector {\n  public getRequestInfo(context: EventPluginContext): IRequestInfo {\n    if (!document || !navigator || !location) {\n      return null;\n    }\n\n    const config = context.client.config;\n    const exclusions = config.dataExclusions;\n    const requestInfo: IRequestInfo = {\n      user_agent: navigator.userAgent,\n      is_secure: location.protocol === 'https:',\n      host: location.hostname,\n      port: location.port && location.port !== '' ? parseInt(location.port, 10) : 80,\n      path: location.pathname\n      // client_ip_address: 'TODO'\n    };\n\n    if (config.includeCookies) {\n      requestInfo.cookies = Utils.getCookies(document.cookie, exclusions);\n    }\n\n    if (config.includeQueryString) {\n      requestInfo.query_string = Utils.parseQueryString(location.search.substring(1), exclusions);\n    }\n\n    if (document.referrer && document.referrer !== '') {\n      requestInfo.referrer = document.referrer;\n    }\n\n    return requestInfo;\n  }\n}\n\n                                                                                                                                                \n\nexport class BrowserStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(prefix?: string, maxQueueItems: number = 250) {\n    this.queue = new BrowserStorage('q', prefix, maxQueueItems);\n    this.settings = new BrowserStorage('settings', prefix, 1);\n  }\n\n}\n\n                                                                                                                                                                              \n\n// tslint:disable-next-line:prefer-const\ndeclare var XDomainRequest: { new(); create(); };\n\nexport class DefaultSubmissionAdapter implements ISubmissionAdapter {\n  public sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean) {\n    // TODO: Handle sending events when app is exiting with send beacon.\n    const TIMEOUT: string = 'timeout';  // optimization for minifier.\n    const LOADED: string = 'loaded';  // optimization for minifier.\n    const WITH_CREDENTIALS: string = 'withCredentials';  // optimization for minifier.\n\n    let isCompleted: boolean = false;\n    let useSetTimeout: boolean = false;\n    function complete(mode: string, xhrRequest: XMLHttpRequest) {\n      function parseResponseHeaders(headerStr) {\n        function trim(value) {\n          return value.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n        }\n\n        const headers = {};\n        const headerPairs = (headerStr || '').split('\\u000d\\u000a');\n        for (const headerPair of headerPairs) {\n          // Can't use split() here because it does the wrong thing\n          // if the header value has the string \": \" in it.\n          const separator = headerPair.indexOf('\\u003a\\u0020');\n          if (separator > 0) {\n            headers[trim(headerPair.substring(0, separator).toLowerCase())] = headerPair.substring(separator + 2);\n          }\n        }\n\n        return headers;\n      }\n\n      if (isCompleted) {\n        return;\n      }\n\n      isCompleted = true;\n\n      let message: string = xhrRequest.statusText;\n      const responseText: string = xhrRequest.responseText;\n      let status: number = xhrRequest.status;\n\n      if (mode === TIMEOUT || status === 0) {\n        message = 'Unable to connect to server.';\n        status = 0;\n      } else if (mode === LOADED && !status) {\n        status = request.method === 'POST' ? 202 : 200;\n      } else if (status < 200 || status > 299) {\n        const responseBody: any = (xhrRequest as any).responseBody;\n        if (!!responseBody && !!responseBody.message) {\n          message = responseBody.message;\n        } else if (!!responseText && responseText.indexOf('message') !== -1) {\n          try {\n            message = JSON.parse(responseText).message;\n          } catch (e) {\n            message = responseText;\n          }\n        }\n      }\n\n      callback && callback(status || 500, message || '', responseText, parseResponseHeaders(xhrRequest.getAllResponseHeaders && xhrRequest.getAllResponseHeaders()));\n    }\n\n    function createRequest(userAgent: string, method: string, uri: string): XMLHttpRequest {\n      let xmlRequest: any = new XMLHttpRequest();\n      if (WITH_CREDENTIALS in xmlRequest) {\n        xmlRequest.open(method, uri, true);\n\n        xmlRequest.setRequestHeader('X-Exceptionless-Client', userAgent);\n        if (method === 'POST') {\n          xmlRequest.setRequestHeader('Content-Type', 'application/json');\n        }\n      } else if (typeof XDomainRequest !== 'undefined') {\n        useSetTimeout = true;\n        xmlRequest = new XDomainRequest();\n        xmlRequest.open(method, location.protocol === 'http:' ? uri.replace('https:', 'http:') : uri);\n      } else {\n        xmlRequest = null;\n      }\n\n      if (xmlRequest) {\n        xmlRequest.timeout = 10000;\n      }\n\n      return xmlRequest;\n    }\n\n    const url = `${request.url}${(request.url.indexOf('?') === -1 ? '?' : '&')}access_token=${encodeURIComponent(request.apiKey)}`;\n    const xhr = createRequest(request.userAgent, request.method || 'POST', url);\n    if (!xhr) {\n      return (callback && callback(503, 'CORS not supported.'));\n    }\n\n    if (WITH_CREDENTIALS in xhr) {\n      xhr.onreadystatechange = () => {\n        // xhr not ready.\n        if (xhr.readyState !== 4) {\n          return;\n        }\n\n        complete(LOADED, xhr);\n      };\n    }\n\n    xhr.onprogress = () => { };\n    xhr.ontimeout = () => complete(TIMEOUT, xhr);\n    xhr.onerror = () => complete('error', xhr);\n    xhr.onload = () => complete(LOADED, xhr);\n\n    if (useSetTimeout) {\n      setTimeout(() => xhr.send(request.data), 500);\n    } else {\n      xhr.send(request.data);\n    }\n  }\n}\n\n                                                                                                                     \n\nexport class NodeFileStorage extends KeyValueStorageBase {\n  private directory: string;\n  private prefix: string;\n  private fs: any;\n\n  constructor(namespace: string, folder?: string, prefix: string = 'ex-', maxItems: number = 20, fs?: any) {\n    super(maxItems);\n\n    if (!folder) {\n      folder = require.main && require.main.filename ? Path.join(Path.dirname(require.main.filename), '.exceptionless') : '.exceptionless';\n    }\n\n    const subFolder = Path.join(folder, namespace);\n    this.directory = Path.resolve(subFolder);\n    this.prefix = prefix;\n    this.fs = fs ? fs : Fs;\n\n    this.mkdir(this.directory);\n  }\n\n  public write(key: string, value: string) {\n    this.fs.writeFileSync(key, value);\n  }\n\n  public read(key: string) {\n    return this.fs.readFileSync(key, 'utf8');\n  }\n\n  public readAllKeys() {\n    return this.fs.readdirSync(this.directory)\n      .filter((file) => file.indexOf(this.prefix) === 0)\n      .map((file) => Path.join(this.directory, file));\n  }\n\n  public delete(key: string) {\n    this.fs.unlinkSync(key);\n  }\n\n  public getKey(timestamp) {\n    return Path.join(this.directory, `${this.prefix}${timestamp}.json`);\n  }\n\n  public getTimestamp(key) {\n    return parseInt(Path.basename(key, '.json')\n      .substr(this.prefix.length), 10);\n  }\n\n  private mkdir(path) {\n    const dirs = path.split(Path.sep);\n    let root = '';\n\n    while (dirs.length > 0) {\n      const dir = dirs.shift();\n      if (dir === '') {\n        root = Path.sep;\n      }\n      if (!this.fs.existsSync(root + dir)) {\n        this.fs.mkdirSync(root + dir);\n      }\n      root += dir + Path.sep;\n    }\n  }\n}\n\n                                                                                                                                                                                                                                       \n\nexport class NodeEnvironmentInfoCollector implements IEnvironmentInfoCollector {\n  public getEnvironmentInfo(context: EventPluginContext): IEnvironmentInfo {\n    function getIpAddresses(): string {\n      const ips: string[] = [];\n      const interfaces = os.networkInterfaces();\n      Object.keys(interfaces).forEach((name) => {\n        interfaces[name].forEach((iface: any) => {\n          if ('IPv4' === iface.family && !iface.internal) {\n            ips.push(iface.address);\n          }\n        });\n      });\n\n      return ips.join(', ');\n    }\n\n    if (!os) {\n      return null;\n    }\n\n    const environmentInfo: IEnvironmentInfo = {\n      processor_count: os.cpus().length,\n      total_physical_memory: os.totalmem(),\n      available_physical_memory: os.freemem(),\n      command_line: process.argv.join(' '),\n      process_name: (process.title || '').replace(/[\\uE000-\\uF8FF]/g, ''),\n      process_id: process.pid + '',\n      process_memory_size: process.memoryUsage().heapTotal,\n      // thread_id: '',\n      architecture: os.arch(),\n      o_s_name: os.type(),\n      o_s_version: os.release(),\n      // install_id: '',\n      runtime_version: process.version,\n      data: {\n        loadavg: os.loadavg(),\n        platform: os.platform(),\n        tmpdir: os.tmpdir(),\n        uptime: os.uptime()\n      }\n    };\n\n    const config = context.client.config;\n    if (config.includeMachineName) {\n      environmentInfo.machine_name = os.hostname();\n    }\n\n    if (config.includeIpAddress) {\n      environmentInfo.ip_address = getIpAddresses();\n    }\n\n    if ((os as any).endianness) {\n      environmentInfo.data.endianness = (os as any).endianness();\n    }\n\n    return environmentInfo;\n  }\n}\n\n                                                                                                                                                                                                                                                                   \n\nexport class NodeErrorParser implements IErrorParser {\n  public parse(context: EventPluginContext, exception: Error): IError {\n    function getStackFrames(frames: any[]): IStackFrame[] {\n      const result: IStackFrame[] = [];\n\n      for (const frame of frames) {\n        result.push({\n          name: frame.getMethodName() || frame.getFunctionName(),\n          // parameters: frame.args,\n          file_name: frame.getFileName(),\n          line_number: frame.getLineNumber() || 0,\n          column: frame.getColumnNumber() || 0,\n          declaring_type: frame.getTypeName(),\n          data: {\n            is_native: frame.isNative() || (!!frame.filename && frame.filename[0] !== '/' && frame.filename[0] !== '.')\n          }\n        });\n      }\n\n      return result;\n    }\n\n    if (!nodestacktrace) {\n      throw new Error('Unable to load the stack trace library.');\n    }\n\n    const stackFrames = nodestacktrace.parse(exception) || [];\n    return {\n      type: exception.name || 'Error',\n      message: exception.message,\n      stack_trace: getStackFrames(stackFrames)\n    };\n  }\n}\n\n                                                                                                                                                                                                                                                \n\nexport class NodeModuleCollector implements IModuleCollector {\n\n  private initialized: boolean = false;\n  private installedModules: { [id: string]: IModule } = {};\n\n  public getModules(context: EventPluginContext): IModule[] {\n    if (!require.main || !require.main.filename) {\n      return [];\n    }\n\n    this.initialize();\n\n    const modulePath = path.dirname(require.main.filename) + '/node_modules/';\n    const pathLength = modulePath.length;\n\n    const loadedKeys = Object.keys(require.cache);\n    const loadedModules = {};\n\n    loadedKeys.forEach((key) => {\n      let id = key.substr(pathLength);\n      id = id.substr(0, id.indexOf('/'));\n      loadedModules[id] = true;\n    });\n\n    return Object.keys(loadedModules)\n      .map((key) => this.installedModules[key])\n      .filter((m) => m !== undefined);\n  }\n\n  private initialize() {\n    if (this.initialized) {\n      return;\n    }\n\n    this.initialized = true;\n\n    let json;\n    try {\n      const output = child.spawnSync('npm', ['ls', '--depth=0', '--json']).stdout;\n      if (!output) {\n        return;\n      }\n\n      json = JSON.parse(output.toString());\n    } catch (e) {\n      return;\n    }\n\n    const items = json.dependencies;\n    if (!items) {\n      return;\n    }\n\n    let id = 0;\n    this.installedModules = {};\n\n    Object.keys(items).forEach((key) => {\n      const item = items[key];\n      const theModule: IModule = {\n        module_id: id++,\n        name: key,\n        version: item.version\n      };\n\n      this.installedModules[key] = theModule;\n    });\n  }\n}\n\n                                                                                                                                                                                                                             \n\nexport class NodeRequestInfoCollector implements IRequestInfoCollector {\n  public getRequestInfo(context: EventPluginContext): IRequestInfo {\n    const REQUEST_KEY: string = '@request'; // optimization for minifier.\n    if (!context.contextData[REQUEST_KEY]) {\n      return null;\n    }\n\n    const config = context.client.config;\n    const exclusions = config.dataExclusions;\n\n    // TODO: include referrer\n    const request = context.contextData[REQUEST_KEY];\n    const requestInfo: IRequestInfo = {\n      user_agent: request.headers['user-agent'],\n      is_secure: request.secure,\n      http_method: request.method,\n      host: request.hostname || request.host,\n      path: request.path\n    };\n\n    const host = request.headers.host;\n    const port: number = host && parseInt(host.slice(host.indexOf(':') + 1), 10);\n    if (port > 0) {\n      requestInfo.port = port;\n    }\n\n    if (config.includeIpAddress) {\n      requestInfo.client_ip_address = request.ip;\n    }\n\n    if (config.includeCookies) {\n      requestInfo.cookies = Utils.getCookies(request.headers.cookie, exclusions);\n    }\n\n    if (config.includeQueryString) {\n      requestInfo.query_string = JSON.parse(Utils.stringify(request.params || {}, exclusions));\n    }\n\n    if (config.includePostData) {\n      requestInfo.post_data = JSON.parse(Utils.stringify(request.body || {}, exclusions));\n    }\n\n    return requestInfo;\n  }\n}\n\n                                                                                                                                                  \n\nexport class NodeFileStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(folder?: string, prefix?: string, maxQueueItems: number = 250) {\n    this.queue = new NodeFileStorage('q', folder, prefix, maxQueueItems);\n    this.settings = new NodeFileStorage('settings', folder, prefix, 1);\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                     \n\nexport class NodeSubmissionAdapter implements ISubmissionAdapter {\n  public sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean) {\n    if (isAppExiting) {\n      this.sendRequestSync(request, callback);\n      return;\n    }\n\n    const parsedHost = url.parse(request.url);\n\n    const options: https.RequestOptions = {\n      auth: `client:${request.apiKey}`,\n      headers: {},\n      hostname: parsedHost.hostname,\n      method: request.method,\n      port: parsedHost.port && parseInt(parsedHost.port, 10),\n      path: request.url\n    };\n\n    options.headers['User-Agent'] = request.userAgent;\n\n    if (request.method === 'POST') {\n      options.headers = {\n        'Content-Type': 'application/json',\n        'Content-Length': Buffer.byteLength(request.data)\n      };\n    }\n\n    const protocol: any = (parsedHost.protocol === 'https:' ? https : http);\n    const clientRequest: http.ClientRequest = protocol.request(options, (response: http.IncomingMessage) => {\n      let body = '';\n      response.setEncoding('utf8');\n      response.on('data', (chunk) => body += chunk);\n      response.on('end', () => this.complete(response, body, response.headers, callback));\n    });\n\n    clientRequest.on('error', (error: Error) => callback && callback(500, error.message));\n    clientRequest.end(request.data);\n  }\n\n  private complete(response: http.IncomingMessage, responseBody: string, responseHeaders: object, callback: SubmissionCallback): void {\n    let message: string;\n    if (response.statusCode === 0) {\n      message = 'Unable to connect to server.';\n    } else if (response.statusCode < 200 || response.statusCode > 299) {\n      message = response.statusMessage || (response as any).message;\n    }\n\n    callback && callback(response.statusCode || 500, message, responseBody, responseHeaders);\n  }\n\n  private sendRequestSync(request: SubmissionRequest, callback: SubmissionCallback): void {\n    const requestJson = JSON.stringify(request);\n    const res = child.spawnSync(process.execPath, [require.resolve('./submitSync.js')],\n      {\n        input: requestJson,\n        stdio: ['pipe', 'pipe', process.stderr]\n      });\n\n    const out = res.stdout.toString();\n    const result = JSON.parse(out);\n\n    callback && callback(result.status, result.message, result.data, result.headers);\n  }\n}\n\nn\n(function init() {\n  function getDefaultsSettingsFromScriptTag(): IConfigurationSettings {\n    if (!document || !document.getElementsByTagName) {\n      return null;\n    }\n\n    const scripts = document.getElementsByTagName('script');\n    // tslint:disable-next-line:prefer-for-of\n    for (let index = 0; index < scripts.length; index++) {\n      if (scripts[index].src && scripts[index].src.indexOf('/exceptionless') > -1) {\n        return Utils.parseQueryString(scripts[index].src.split('?').pop());\n      }\n    }\n    return null;\n  }\n\n  function processUnhandledException(stackTrace: TraceKit.StackTrace, options?: any): void {\n    const builder = ExceptionlessClient.default.createUnhandledException(new Error(stackTrace.message || (options || {}).status || 'Script error'), 'onerror');\n    builder.pluginContextData['@@_TraceKit.StackTrace'] = stackTrace;\n    builder.submit();\n  }\n\n  if (typeof document === 'undefined') {\n    return;\n  }\n\n  /*\n   TODO: We currently are unable to parse string exceptions.\n   function processJQueryAjaxError(event, xhr, settings, error:string): void {\n   let client = ExceptionlessClient.default;\n   if (xhr.status === 404) {\n   client.submitNotFound(settings.url);\n   } else if (xhr.status !== 401) {\n   client.createUnhandledException(error, 'JQuery.ajaxError')\n   .setSource(settings.url)\n   .setProperty('status', xhr.status)\n   .setProperty('request', settings.data)\n   .setProperty('response', xhr.responseText && xhr.responseText.slice && xhr.responseText.slice(0, 1024))\n   .submit();\n   }\n   }\n   */\n\n  Configuration.prototype.useLocalStorage = function() {\n    if (BrowserStorage.isAvailable()) {\n      this.storage = new BrowserStorageProvider();\n      SettingsManager.applySavedServerSettings(this);\n      this.changed();\n    }\n  };\n\n  const defaults = Configuration.defaults;\n  const settings = getDefaultsSettingsFromScriptTag();\n  if (settings) {\n    if (settings.apiKey) {\n      defaults.apiKey = settings.apiKey;\n    }\n\n    if (settings.serverUrl) {\n      defaults.serverUrl = settings.serverUrl;\n    }\n\n    if (typeof settings.includePrivateInformation === 'string') {\n      defaults.includePrivateInformation = settings.includePrivateInformation === 'false' ? false : true;\n    }\n  }\n\n  defaults.errorParser = new DefaultErrorParser();\n  defaults.moduleCollector = new DefaultModuleCollector();\n  defaults.requestInfoCollector = new DefaultRequestInfoCollector();\n  defaults.submissionAdapter = new DefaultSubmissionAdapter();\n\n  TraceKit.report.subscribe(processUnhandledException);\n  TraceKit.extendToAsynchronousCallbacks();\n\n  // window && window.addEventListener && window.addEventListener('beforeunload', function () {\n  //   ExceptionlessClient.default.config.queue.process(true);\n  // });\n\n  // if (typeof $ !== 'undefined' && $(document)) {\n  //   $(document).ajaxError(processJQueryAjaxError);\n  // }\n\n  (Error as any).stackTraceLimit = Infinity;\n})();\n\n// tslint:disable-next-line:prefer-const\ndeclare var $;\n\nn\n(function init() {\n  if (typeof process === 'undefined') {\n    return;\n  }\n\n  const defaults = Configuration.defaults;\n  defaults.environmentInfoCollector = new NodeEnvironmentInfoCollector();\n  defaults.errorParser = new NodeErrorParser();\n  defaults.moduleCollector = new NodeModuleCollector();\n  defaults.requestInfoCollector = new NodeRequestInfoCollector();\n  defaults.submissionAdapter = new NodeSubmissionAdapter();\n\n  Configuration.prototype.useLocalStorage = function() {\n    this.storage = new NodeFileStorageProvider();\n    SettingsManager.applySavedServerSettings(this);\n    this.changed();\n  };\n\n  process.addListener('uncaughtException', (error: Error) => {\n    ExceptionlessClient.default.submitUnhandledException(error, 'uncaughtException');\n  });\n\n  process.on('exit', (code: number) => {\n    /**\n     * exit codes: https://nodejs.org/api/process.html#process_event_exit\n     * From now on, only synchronous code may run. As soon as this method\n     * ends, the application inevitably will exit.\n     */\n    function getExitCodeReason(exitCode: number): string {\n      if (exitCode === 1) {\n        return 'Uncaught Fatal Exception';\n      }\n\n      if (exitCode === 3) {\n        return 'Internal JavaScript Parse Error';\n      }\n\n      if (exitCode === 4) {\n        return 'Internal JavaScript Evaluation Failure';\n      }\n\n      if (exitCode === 5) {\n        return 'Fatal Exception';\n      }\n\n      if (exitCode === 6) {\n        return 'Non-function Internal Exception Handler ';\n      }\n\n      if (exitCode === 7) {\n        return 'Internal Exception Handler Run-Time Failure';\n      }\n\n      if (exitCode === 8) {\n        return 'Uncaught Exception';\n      }\n\n      if (exitCode === 9) {\n        return 'Invalid Argument';\n      }\n\n      if (exitCode === 10) {\n        return 'Internal JavaScript Run-Time Failure';\n      }\n\n      if (exitCode === 12) {\n        return 'Invalid Debug Argument';\n      }\n\n      return null;\n    }\n\n    const client = ExceptionlessClient.default;\n    const message = getExitCodeReason(code);\n\n    if (message !== null) {\n      client.submitLog('exit', message, 'Error');\n    }\n\n    client.config.queue.process(true);\n    // Application will now exit.\n  });\n\n  (Error as any).stackTraceLimit = Infinity;\n})();\n\n                                                                                                                   \n\n"]}