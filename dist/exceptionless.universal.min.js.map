{"version":3,"sources":["tracekit.js","exceptionless.universal.ts"],"names":["window","undefined","_has","object","key","Object","prototype","hasOwnProperty","call","_isUndefined","what","TraceKit","_oldTraceKit","_slice","slice","UNKNOWN_FUNCTION","ERROR_TYPES_RE","noConflict","wrap","func","apply","this","arguments","e","report","notifyHandlers","stack","isWindowError","error","exception","collectWindowErrors","i","handlers","inner","traceKitWindowOnError","message","url","lineNo","columnNo","errorObj","lastExceptionStack","computeStackTrace","augmentStackTraceWithInitialElement","processLastException","name","location","line","column","msg","toString","groups","match","guessFunctionName","context","gatherContext","mode","_oldOnerrorHandler","installGlobalHandler","_onErrorHandlerInstalled","onerror","_lastExceptionStack","_lastException","lastException","ex","setTimeout","incomplete","subscribe","handler","push","unsubscribe","length","splice","loadSource","remoteFetching","request","XMLHttpRequest","ActiveXObject","open","send","responseText","getSource","sourceCache","source","domain","document","exec","split","m","reFunctionArgNames","reGuessFunction","linesBefore","Math","floor","linesOfContext","linesAfter","start","max","end","min","escapeRegExp","text","replace","escapeCodeAsRegExpForMatchingInsideHTML","body","findSourceInUrls","re","urls","j","join","substring","index","lastIndexOf","findSourceInLine","fragment","RegExp","findSourceByFunctionBody","parts","result","href","scripts","getElementsByTagName","code","codeRE","eventRE","script","src","args","event","computeStackTraceFromStackProp","submatch","element","chrome","gecko","winjs","geckoEval","chromeEval","lines","reference","isNative","indexOf","columnNumber","computeStackTraceFromStacktraceProp","stacktrace","opera10Regex","opera11Regex","exc","computeStackTraceFromOperaMultiLineMessage","lineRE1","lineRE2","lineRE3","inlineScriptBlocks","s","item","relativeLine","pos","innerText","midline","stackInfo","initial","unshift","partial","computeStackTraceByWalkingCallerChain","depth","functionName","funcs","recursion","curr","caller","input","description","sourceURL","fileName","lineNumber","debug","ofCaller","Error","extendToAsynchronousCallbacks","_helper","fnName","originalFn","originalCallback","define","amd","module","exports","global","parseDate","value","dateRegx","Date","isBrowser","browserInit","Configuration","useLocalStorage","BrowserStorage","isAvailable","storage","BrowserStorageProvider","SettingsManager","applySavedServerSettings","changed","defaults","settings","Utils","parseQueryString","pop","apiKey","serverUrl","errorParser","DefaultErrorParser","moduleCollector","DefaultModuleCollector","requestInfoCollector","DefaultRequestInfoCollector","submissionAdapter","DefaultSubmissionAdapter","stackTrace","options","builder","ExceptionlessClient","default","createUnhandledException","status","pluginContextData","submit","stackTraceLimit","Infinity","isNode","process","nodeInit","environmentInfoCollector","NodeEnvironmentInfoCollector","NodeErrorParser","NodeModuleCollector","NodeRequestInfoCollector","NodeSubmissionAdapter","NodeFileStorageProvider","addListener","submitUnhandledException","on","client","exitCode","submitLog","config","queue","__extends","extendStatics","setPrototypeOf","__proto__","Array","d","b","p","__","constructor","create","require","os","child","path","Path","http","DefaultLastReferenceIdManager","_lastReferenceId","getLast","clearLast","setLast","eventId","ConsoleLog","trace","log","info","warn","level","console","NullLog","HeartbeatPlugin","heartbeatInterval","priority","_interval","run","next","clearInterval","_intervalId","user","data","identity","setInterval","submitSessionHeartbeat","ReferenceIdPlugin","reference_id","type","guid","EventPluginContext","contextData","ContextData","defineProperty","callback","plugin","cancelled","plugins","wrappedPlugins","EventPluginManager","addDefaultPlugins","addPlugin","ConfigurationDefaultsPlugin","ErrorPlugin","DuplicateCheckerPlugin","EventExclusionPlugin","ModuleInfoPlugin","RequestInfoPlugin","EnvironmentInfoPlugin","SubmissionMethodPlugin","DefaultEventQueue","_handlers","_processingQueue","_config","enqueue","enabled","isValid","areQueuedItemsDiscarded","ensureQueueTimer","timestamp","save","logText","isAppExiting","_this","events_1","get","submissionBatchSize","submissionClient","postEvents","map","response","processSubmissionResponse","eventsPosted","suspendProcessing","durationInMinutes","discardFutureQueuedItems","clearQueue","_suspendProcessingUntil","getTime","_discardQueuedItemsUntil","clear","onEventsPosted","events","_i","handlers_1","_queueTimer","onProcessQueue","isQueueProcessingSuspended","success","removeEvents","serviceUnavailable","paymentRequired","unableToAuthenticate","notFound","badRequest","requestEntityTooLarge","round","remove","maxQueueItems","InMemoryStorage","InMemoryStorageProvider","DefaultSubmissionClient","configurationVersionHeader","JSON","stringify","createRequest","createSubmissionCallback","sendRequest","cb","postUserDescription","referenceId","encodeURIComponent","getSettings","version","headers","SettingsResponse","parse","isNaN","sendHeartbeat","sessionIdOrUserId","closeSession","heartbeatServerUrl","method","userAgent","settingsVersion","parseInt","SubmissionResponse","target","values","_a","values_1","getHashCode","hash","charCodeAt","cookies","exclusions","parts_1","cookie","isMatch","isEmpty","s4","random","merge","defaultValues","parseVersion","matches","query","pairs","pairs_1","decodeURIComponent","patterns","ignoreCase","trim","toLowerCase","some","pattern","startsWithWildcard","endsWithWildcard","endsWith","startsWith","keys","prefix","suffix","maxDepth","stringifyImpl","obj","excludedKeys","cache","flattened","prop","defaultValue","onChanged","savedSettings","getSavedServerSettings","getVersion","checkVersion","currentVersion","updateSettings","savedServerSettings","newSettings","unableToUpdateMessage","handlers_2","statusCode","settingsOrApiKey","updateSettingsTimer","_timeoutId","createException","setException","createEvent","setType","submitException","submissionMethod","markAsUnhandledError","setSubmissionMethod","createFeatureUsage","feature","setSource","submitFeatureUsage","createLog","sourceOrMessage","setMessage","setProperty","createNotFound","resource","submitNotFound","createSessionStart","submitSessionStart","submitSessionEnd","EventBuilder","date","submitEvent","tags","ctx","ev","lastReferenceIdManager","updateUserEmailAndDescription","email","userDescription","email_address","getLastReferenceId","initialDelay","clearTimeout","interval","updateSettingsWhenIdleInterval","_instance","enumerable","configurable","getException","getSubmissionMethod","configSettings","inject","fn","defaultTags","defaultData","_serverUrl","_heartbeatServerUrl","_updateSettingsWhenIdleInterval","_dataExclusions","_userAgentBotPatterns","_plugins","set","_apiKey","concat","addDataExclusions","userAgentBotPatterns","addRange","sort","p1","p2","pluginOrName","pluginAction","pluginExists","plugins_1","removePlugin","setVersion","setUserIdentity","userInfoOrIdentity","shouldRemove","userInfo","useSessions","sendHeartbeats","useReferenceIds","useDebugLogger","handlers_3","_defaultSettings","_validIdentifierErrorMessage","setReferenceId","isValidIdentifier","setEventReference","id","setGeo","latitude","longitude","geo","setUserDescription","emailAddress","setManualStackingInfo","signatureData","title","signature_data","setManualStackingKey","manualStackingKey","ManualStackingKey","setValue","addTags","excludedPropertyNames","dataExclusions","markAsCritical","critical","addRequestInfo","isDigit","isLetter","isMinus","defaultTags_1","tag","getCurrentTime","now","_mergedEvents","shift","resubmit","hashCode","stack_trace","count","now_1","_getCurrentTime","merged","filter","incrementCount","updateDate","_processedHashcodes","h","MergedEvent","_context","_count","collector","environmentInfo","getEnvironmentInfo","ignoredProperties","parser","additionalData","getTypeAndSourceSetting","isLog","sourcePrefix","toBoolean","minLogLevel","loggerName","getLogLevel","logLevel","modules","getModules","requestInfo","getRequestInfo","user_agent","maxItems","items","lastTimestamp","limit","KeyValueStorageBase","single","ensureIndex","getKey","json","write","delete","read","safeDelete","forEach","createIndex","readAllKeys","getTimestamp","a","_super","namespace","localStorage","x","setItem","removeItem","getItem","substr","getParameters","parameters","params_1","param","stackFrames","frames","stackFrames_1","frame","file_name","line_number","module_id","innerHTML","navigator","is_secure","protocol","host","hostname","port","pathname","getCookies","query_string","search","referrer","complete","xhr","isCompleted","statusText","TIMEOUT","LOADED","responseBody","headerStr","headerPairs_1","headerPair","separator","getAllResponseHeaders","WITH_CREDENTIALS","setRequestHeader","XDomainRequest","useSetTimeout","timeout","onreadystatechange","readyState","onprogress","ontimeout","onload","NodeFileStorage","folder","fs","dirname","main","filename","subfolder","directory","resolve","Fs","mkdir","writeFileSync","readFileSync","readdirSync","file","unlinkSync","basename","dirs","sep","root","dir","existsSync","mkdirSync","cpus","totalmem","freemem","argv","process_id","pid","process_memory_size","memoryUsage","heapTotal","architecture","arch","o_s_name","o_s_version","release","ip_address","ips","interfaces","networkInterfaces","iface","family","internal","address","machine_name","runtime_version","loadavg","platform","tmpdir","uptime","endianness","nodestacktrace","stackFrames_2","getMethodName","getFunctionName","getFileName","getLineNumber","getColumnNumber","declaring_type","getTypeName","is_native","initialized","installedModules","initialize","pathLength","loadedModules","output","spawnSync","stdout","dependencies","theModule","client_ip_address","ip","secure","http_method","post_data","params","sendRequestSync","auth","parsedHost","Content-Type","Content-Length","Buffer","byteLength","clientRequest","https","setEncoding","chunk","responseHeaders","statusMessage","requestJson","out","execPath","stdio","stderr"],"mappings":"CAKA,SAAAA,EAAAC,GAuBA,SAAAC,EAAAC,EAAAC,GACA,OAAAC,OAAAC,UAAAC,eAAAC,KAAAL,EAAAC,GAUA,SAAAK,EAAAC,GACA,YAAA,IAAAA,EAlCA,GAAAV,EAAA,CAIA,IAAAW,KACAC,EAAAZ,EAAAW,SAGAE,KAAAC,MACAC,EAAA,IAGAC,EAAA,0GA+BAL,EAAAM,WAAA,WAEA,OADAjB,EAAAW,SAAAC,EACAD,GAWAA,EAAAO,KAAA,SAAAC,GASA,OARA,WACA,IACA,OAAAA,EAAAC,MAAAC,KAAAC,WACA,MAAAC,GAEA,MADAZ,EAAAa,OAAAD,GACAA,KAkDAZ,EAAAa,OAAA,WAyCA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAA,KACA,IAAAF,GAAAhB,EAAAmB,oBAAA,CAGA,IAAA,IAAAC,KAAAC,EACA,GAAA9B,EAAA8B,EAAAD,GACA,IACAC,EAAAD,GAAAL,EAAAC,EAAAC,GACA,MAAAK,GACAJ,EAAAI,EAKA,GAAAJ,EACA,MAAAA,GAgBA,SAAAK,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAGA,GAAAC,EACA7B,EAAA8B,kBAAAC,oCAAAF,EAAAJ,EAAAC,EAAAF,GACAQ,SACA,GAAAJ,EAEAd,EADAd,EAAA8B,kBAAAF,IACA,EAAAA,OACA,CACA,IAMAK,EANAC,GACAT,IAAAA,EACAU,KAAAT,EACAU,OAAAT,GAIAU,EAAAb,EACA,GAAA,uBAAAc,SAAAzC,KAAA2B,GAAA,CACA,IAAAe,EAAAf,EAAAgB,MAAAnC,GACAkC,IACAN,EAAAM,EAAA,GACAF,EAAAE,EAAA,IAIAL,EAAA1B,KAAAR,EAAA8B,kBAAAW,kBAAAP,EAAAT,IAAAS,EAAAC,MACAD,EAAAQ,QAAA1C,EAAA8B,kBAAAa,cAAAT,EAAAT,IAAAS,EAAAC,MAQArB,GANAmB,KAAAA,EACAT,QAAAa,EACAO,KAAA,UACA7B,OAAAmB,KAGA,EAAA,MAGA,QAAAW,GACAA,EAAApC,MAAAC,KAAAC,WAUA,SAAAmC,KACA,IAAAC,IAIAF,EAAAxD,EAAA2D,QACA3D,EAAA2D,QAAAzB,EACAwB,GAAA,GAOA,SAAAf,IACA,IAAAiB,EAAApB,EACAqB,EAAAC,EACAtB,EAAA,KACAsB,EAAA,KACArC,EAAAmC,GAAA,EAAAC,GASA,SAAArC,EAAAuC,GACA,GAAAvB,EAAA,CACA,GAAAsB,IAAAC,EACA,OAEApB,IAIA,IAAAjB,EAAAf,EAAA8B,kBAAAsB,GAcA,MAbAvB,EAAAd,EACAoC,EAAAC,EAMAC,WAAA,WACAF,IAAAC,GACApB,KAEAjB,EAAAuC,WAAA,IAAA,GAEAF,EA5KA,IA4DAP,EAAAE,EA5DA1B,KACA8B,EAAA,KACAtB,EAAA,KA+KA,OAFAhB,EAAA0C,UAtKA,SAAAC,GACAV,IACAzB,EAAAoC,KAAAD,IAqKA3C,EAAA6C,YA7JA,SAAAF,GACA,IAAA,IAAApC,EAAAC,EAAAsC,OAAA,EAAAvC,GAAA,IAAAA,EACAC,EAAAD,KAAAoC,GACAnC,EAAAuC,OAAAxC,EAAA,GAIA,IAAAC,EAAAsC,SACAtE,EAAA2D,QAAAH,EACAE,GAAA,IAqJAlC,KAwFAb,EAAA8B,kBAAA,WAWA,SAAA+B,EAAApC,GACA,IAAAzB,EAAA8D,eACA,MAAA,GAEA,IACA,IASAC,EATA,WACA,IACA,OAAA,IAAA1E,EAAA2E,eACA,MAAApD,GAEA,OAAA,IAAAvB,EAAA4E,cAAA,yBAOA,OAFAF,EAAAG,KAAA,MAAAzC,GAAA,GACAsC,EAAAI,KAAA,IACAJ,EAAAK,aACA,MAAAxD,GACA,MAAA,IAUA,SAAAyD,EAAA5C,GACA,GAAA,iBAAAA,EACA,SAGA,IAAAlC,EAAA+E,EAAA7C,GAAA,CAWA,IAAA8C,EAAA,GACAC,EAAA,GACA,IAAAA,EAAAnF,EAAAoF,SAAAD,OAAA,MAAA5D,IACA,IAAA4B,EAAA,8CAAAkC,KAAAjD,GACAe,GAAAA,EAAA,KAAAgC,IACAD,EAAAV,EAAApC,IAEA6C,EAAA7C,GAAA8C,EAAAA,EAAAI,MAAA,SAGA,OAAAL,EAAA7C,GAYA,SAAAgB,EAAAhB,EAAAC,GACA,IAKAkD,EALAC,EAAA,8BACAC,EAAA,mEACA3C,EAAA,GAEAoC,EAAAF,EAAA5C,GAGA,IAAA8C,EAAAZ,OACA,OAAAvD,EAKA,IAAA,IAAAgB,EAAA,EAAAA,EAVA,KAUAA,EAGA,GAFAe,EAAAoC,EAAA7C,EAAAN,GAAAe,GAEArC,EAAAqC,GAAA,CACA,GAAAyC,EAAAE,EAAAJ,KAAAvC,GACA,OAAAyC,EAAA,GACA,GAAAA,EAAAC,EAAAH,KAAAvC,GACA,OAAAyC,EAAA,GAKA,OAAAxE,EAUA,SAAAuC,EAAAlB,EAAAU,GACA,IAAAoC,EAAAF,EAAA5C,GAEA,IAAA8C,EAAAZ,OACA,OAAA,KAGA,IAAAjB,KAIAqC,EAAAC,KAAAC,MAAAjF,EAAAkF,eAAA,GAEAC,EAAAJ,EAAA/E,EAAAkF,eAAA,EACAE,EAAAJ,KAAAK,IAAA,EAAAlD,EAAA4C,EAAA,GACAO,EAAAN,KAAAO,IAAAhB,EAAAZ,OAAAxB,EAAAgD,EAAA,GAEAhD,GAAA,EAEA,IAAA,IAAAf,EAAAgE,EAAAhE,EAAAkE,IAAAlE,EACAtB,EAAAyE,EAAAnD,KACAsB,EAAAe,KAAAc,EAAAnD,IAIA,OAAAsB,EAAAiB,OAAA,EAAAjB,EAAA,KAUA,SAAA8C,EAAAC,GACA,OAAAA,EAAAC,QAAA,4BAAA,QAWA,SAAAC,EAAAC,GACA,OAAAJ,EAAAI,GAAAF,QAAA,IAAA,cAAAA,QAAA,IAAA,cAAAA,QAAA,IAAA,eAAAA,QAAA,IAAA,gBAAAA,QAAA,OAAA,QAWA,SAAAG,EAAAC,EAAAC,GAEA,IAAA,IADAxB,EAAAK,EACAxD,EAAA,EAAA4E,EAAAD,EAAApC,OAAAvC,EAAA4E,IAAA5E,EACA,IAAAmD,EAAAF,EAAA0B,EAAA3E,KAAAuC,SACAY,EAAAA,EAAA0B,KAAA,MACArB,EAAAkB,EAAApB,KAAAH,IAEA,OACA9C,IAAAsE,EAAA3E,GACAe,KAAAoC,EAAA2B,UAAA,EAAAtB,EAAAuB,OAAAxB,MAAA,MAAAhB,OACAvB,OAAAwC,EAAAuB,MAAA5B,EAAA6B,YAAA,KAAAxB,EAAAuB,OAAA,GAMA,OAAA,KAYA,SAAAE,EAAAC,EAAA7E,EAAAU,GACA,IAEAyC,EAFAL,EAAAF,EAAA5C,GACAqE,EAAA,IAAAS,OAAA,MAAAf,EAAAc,GAAA,OAKA,OAFAnE,GAAA,EAEAoC,GAAAA,EAAAZ,OAAAxB,IAAAyC,EAAAkB,EAAApB,KAAAH,EAAApC,KACAyC,EAAAuB,MAGA,KAWA,SAAAK,EAAAhG,GACA,IAAAV,EAAAT,GAAAA,EAAAoF,UAAA,CAcA,IAAA,IARAmB,EAIAE,EACAW,EACAC,EARAX,GAAA1G,EAAA6C,SAAAyE,MACAC,EAAAvH,EAAAoF,SAAAoC,qBAAA,UAEAC,EAAA,GAAAtG,EACAuG,EAAA,2EACAC,EAAA,iEAKA5F,EAAA,EAAAA,EAAAwF,EAAAjD,SAAAvC,EAAA,CACA,IAAA6F,EAAAL,EAAAxF,GACA6F,EAAAC,KACAnB,EAAAtC,KAAAwD,EAAAC,KAIA,GAAAT,EAAAM,EAAArC,KAAAoC,GAMA,CACA,IAAA7E,EAAAwE,EAAA,GAAA,OAAAA,EAAA,GAAA,GACAU,EAAAV,EAAA,GAAA9B,MAAA,KAAAsB,KAAA,aAEAL,EAAAJ,EAAAiB,EAAA,IAAAf,QAAA,KAAA,MACAI,EAAA,IAAAS,OAAA,WAAAtE,EAAA,cAAAkF,EAAA,mBAAAvB,EAAA,cAVAE,EAAA,IAAAS,OAAAf,EAAAsB,GAAApB,QAAA,OAAA,SAcA,GAAAgB,EAAAb,EAAAC,EAAAC,GACA,OAAAW,EAIA,GAAAD,EAAAO,EAAAtC,KAAAoC,GAAA,CACA,IAAAM,EAAAX,EAAA,GAMA,GALAb,EAAAD,EAAAc,EAAA,IAGAX,EAAA,IAAAS,OAAA,KAAAa,EAAA,eAAAxB,EAAA,cAAA,KAEAc,EAAAb,EAAAC,EAAAC,EAAA,IACA,OAAAW,EAMA,GAFAZ,EAAA,IAAAS,OAAAX,GAEAc,EAAAb,EAAAC,EAAAC,GACA,OAAAW,EAIA,OAAA,MA+CA,SAAAW,EAAAjE,GACA,IAAAA,EAAArC,MACA,OAAA,KAmBA,IAAA,IALAuG,EACAb,EACAc,EAbAC,EAAA,8HACAC,EAAA,kIACAC,EAAA,gHAIAC,EAAA,gDACAC,EAAA,gCAEAC,EAAAzE,EAAArC,MAAA4D,MAAA,MACA5D,KAIA+G,EAAA,sBAAApD,KAAAtB,EAAA5B,SAEAJ,EAAA,EAAA4E,EAAA6B,EAAAlE,OAAAvC,EAAA4E,IAAA5E,EAAA,CACA,GAAAqF,EAAAe,EAAA9C,KAAAmD,EAAAzG,IAAA,CACA,IAAA2G,EAAAtB,EAAA,IAAA,IAAAA,EAAA,GAAAuB,QAAA,UACAvB,EAAA,IAAA,IAAAA,EAAA,GAAAuB,QAAA,UACAV,EAAAM,EAAAlD,KAAA+B,EAAA,OAEAA,EAAA,GAAAa,EAAA,GACAb,EAAA,GAAAa,EAAA,GACAb,EAAA,GAAAa,EAAA,IAEAC,GACA9F,IAAAsG,EAAA,KAAAtB,EAAA,GACAjG,KAAAiG,EAAA,IAAArG,EACA+G,KAAAY,GAAAtB,EAAA,OACAtE,KAAAsE,EAAA,IAAAA,EAAA,GAAA,KACArE,OAAAqE,EAAA,IAAAA,EAAA,GAAA,WAEA,GAAAA,EAAAiB,EAAAhD,KAAAmD,EAAAzG,IACAmG,GACA9F,IAAAgF,EAAA,GACAjG,KAAAiG,EAAA,IAAArG,EACA+G,QACAhF,MAAAsE,EAAA,GACArE,OAAAqE,EAAA,IAAAA,EAAA,GAAA,UAEA,CAAA,KAAAA,EAAAgB,EAAA/C,KAAAmD,EAAAzG,KAsBA,SArBAqF,EAAA,IAAAA,EAAA,GAAAuB,QAAA,YAAA,IACAV,EAAAK,EAAAjD,KAAA+B,EAAA,MAEAA,EAAA,GAAAa,EAAA,GACAb,EAAA,GAAAa,EAAA,GACAb,EAAA,GAAA,MACA,IAAArF,GAAAqF,EAAA,IAAA3G,EAAAsD,EAAA6E,gBAKAlH,EAAA,GAAAqB,OAAAgB,EAAA6E,aAAA,GAEAV,GACA9F,IAAAgF,EAAA,GACAjG,KAAAiG,EAAA,IAAArG,EACA+G,KAAAV,EAAA,GAAAA,EAAA,GAAA9B,MAAA,QACAxC,KAAAsE,EAAA,IAAAA,EAAA,GAAA,KACArE,OAAAqE,EAAA,IAAAA,EAAA,GAAA,OAMAc,EAAA/G,MAAA+G,EAAApF,OACAoF,EAAA/G,KAAAiC,EAAA8E,EAAA9F,IAAA8F,EAAApF,OAGAoF,EAAA7E,QAAA6E,EAAApF,KAAAQ,EAAA4E,EAAA9F,IAAA8F,EAAApF,MAAA,KACApB,EAAA0C,KAAA8D,GAGA,OAAAxG,EAAA4C,QAIA5C,EAAA,IAAAA,EAAA,GAAAoB,OAAApB,EAAA,GAAAqB,QAAA0F,IACA/G,EAAA,GAAAqB,OAAAiE,EAAAyB,EAAA,GAAA/G,EAAA,GAAAU,IAAAV,EAAA,GAAAoB,QAIAS,KAAA,QACAX,KAAAmB,EAAAnB,KACAT,QAAA4B,EAAA5B,QACAT,MAAAA,IAXA,KAsBA,SAAAmH,EAAA9E,GAIA,IAAA+E,EAAA/E,EAAA+E,WACA,GAAAA,EAAA,CAUA,IAAA,IAFA1B,EAJA2B,EAAA,8DACAC,EAAA,uGACAR,EAAAM,EAAAxD,MAAA,MACA5D,KAGAoB,EAAA,EAAAA,EAAA0F,EAAAlE,OAAAxB,GAAA,EAAA,CACA,IAAAoF,EAAA,KAmBA,IAlBAd,EAAA2B,EAAA1D,KAAAmD,EAAA1F,KACAoF,GACA9F,IAAAgF,EAAA,GACAtE,MAAAsE,EAAA,GACArE,OAAA,KACA5B,KAAAiG,EAAA,GACAU,UAEAV,EAAA4B,EAAA3D,KAAAmD,EAAA1F,OACAoF,GACA9F,IAAAgF,EAAA,GACAtE,MAAAsE,EAAA,GACArE,QAAAqE,EAAA,GACAjG,KAAAiG,EAAA,IAAAA,EAAA,GACAU,KAAAV,EAAA,GAAAA,EAAA,GAAA9B,MAAA,UAIA4C,EAAA,CAIA,IAHAA,EAAA/G,MAAA+G,EAAApF,OACAoF,EAAA/G,KAAAiC,EAAA8E,EAAA9F,IAAA8F,EAAApF,OAEAoF,EAAApF,KACA,IACAoF,EAAA7E,QAAAC,EAAA4E,EAAA9F,IAAA8F,EAAApF,MACA,MAAAmG,IAGAf,EAAA7E,UACA6E,EAAA7E,SAAAmF,EAAA1F,EAAA,KAGApB,EAAA0C,KAAA8D,IAIA,OAAAxG,EAAA4C,QAKAf,KAAA,aACAX,KAAAmB,EAAAnB,KACAT,QAAA4B,EAAA5B,QACAT,MAAAA,GAPA,MAqBA,SAAAwH,EAAAnF,GAgBA,IAAAyE,EAAAzE,EAAA5B,QAAAmD,MAAA,MACA,GAAAkD,EAAAlE,OAAA,EACA,OAAA,KAGA,IAMA8C,EANA+B,EAAA,yFACAC,EAAA,kGACAC,EAAA,yCACA3H,KACA6F,EAAAvH,GAAAA,EAAAoF,UAAApF,EAAAoF,SAAAoC,qBAAA,UACA8B,KAGA,IAAA,IAAAC,KAAAhC,EACArH,EAAAqH,EAAAgC,KAAAhC,EAAAgC,GAAA1B,KACAyB,EAAAlF,KAAAmD,EAAAgC,IAIA,IAAA,IAAAzG,EAAA,EAAAA,EAAA0F,EAAAlE,OAAAxB,GAAA,EAAA,CACA,IAAA0G,EAAA,KACA,GAAApC,EAAA+B,EAAA9D,KAAAmD,EAAA1F,IACA0G,GACApH,IAAAgF,EAAA,GACAjG,KAAAiG,EAAA,GACAU,QACAhF,MAAAsE,EAAA,GACArE,OAAA,WAEA,GAAAqE,EAAAgC,EAAA/D,KAAAmD,EAAA1F,IAAA,CACA0G,GACApH,IAAAgF,EAAA,GACAjG,KAAAiG,EAAA,GACAU,QACAhF,MAAAsE,EAAA,GACArE,OAAA,MAEA,IAAA0G,GAAArC,EAAA,GACAQ,EAAA0B,EAAAlC,EAAA,GAAA,GACA,GAAAQ,EAAA,CACA,IAAA1C,EAAAF,EAAAwE,EAAApH,KACA,GAAA8C,EAAA,CAEA,IAAAwE,GADAxE,EAAAA,EAAA0B,KAAA,OACA+B,QAAAf,EAAA+B,WACAD,GAAA,IACAF,EAAA1G,KAAA2G,EAAAvE,EAAA2B,UAAA,EAAA6C,GAAApE,MAAA,MAAAhB,eAIA,GAAA8C,EAAAiC,EAAAhE,KAAAmD,EAAA1F,IAAA,CACA,IAAAV,EAAApC,EAAA6C,SAAAyE,KAAAjB,QAAA,OAAA,IAEAwB,EAAArB,EADA,IAAAU,OAAAZ,EAAAkC,EAAA1F,EAAA,MACAV,IACAoH,GACApH,IAAAA,EACAjB,KAAA,GACA2G,QACAhF,KAAA+E,EAAAA,EAAA/E,KAAAsE,EAAA,GACArE,OAAA,MAIA,GAAAyG,EAAA,CACAA,EAAArI,OACAqI,EAAArI,KAAAiC,EAAAoG,EAAApH,IAAAoH,EAAA1G,OAEA,IAAAO,EAAAC,EAAAkG,EAAApH,IAAAoH,EAAA1G,MACA8G,EAAAvG,EAAAA,EAAAsC,KAAAC,MAAAvC,EAAAiB,OAAA,IAAA,KACAjB,GAAAuG,EAAAvD,QAAA,OAAA,MAAAmC,EAAA1F,EAAA,GAAAuD,QAAA,OAAA,IACAmD,EAAAnG,QAAAA,EAGAmG,EAAAnG,SAAAmF,EAAA1F,EAAA,IAEApB,EAAA0C,KAAAoF,IAGA,OAAA9H,EAAA4C,QAKAf,KAAA,YACAX,KAAAmB,EAAAnB,KACAT,QAAAqG,EAAA,GACA9G,MAAAA,GAPA,KAyBA,SAAAgB,EAAAmH,EAAAzH,EAAAC,EAAAF,GACA,IAAA2H,GACA1H,IAAAA,EACAU,KAAAT,GAGA,GAAAyH,EAAA1H,KAAA0H,EAAAhH,KAAA,CACA+G,EAAA5F,YAAA,EAEA6F,EAAA3I,OACA2I,EAAA3I,KAAAiC,EAAA0G,EAAA1H,IAAA0H,EAAAhH,OAGAgH,EAAAzG,UACAyG,EAAAzG,QAAAC,EAAAwG,EAAA1H,IAAA0H,EAAAhH,OAGA,IAAA2F,EAAA,cAAApD,KAAAlD,GAKA,GAJAsG,IACAqB,EAAA/G,OAAAiE,EAAAyB,EAAA,GAAAqB,EAAA1H,IAAA0H,EAAAhH,OAGA+G,EAAAnI,MAAA4C,OAAA,GACAuF,EAAAnI,MAAA,GAAAU,MAAA0H,EAAA1H,IAAA,CACA,GAAAyH,EAAAnI,MAAA,GAAAoB,OAAAgH,EAAAhH,KACA,OAAA,EACA,IAAA+G,EAAAnI,MAAA,GAAAoB,MAAA+G,EAAAnI,MAAA,GAAAP,OAAA2I,EAAA3I,KAGA,OAFA0I,EAAAnI,MAAA,GAAAoB,KAAAgH,EAAAhH,KACA+G,EAAAnI,MAAA,GAAA2B,QAAAyG,EAAAzG,SACA,EAOA,OAFAwG,EAAAnI,MAAAqI,QAAAD,GACAD,EAAAG,SAAA,GACA,EAKA,OAHAH,EAAA5F,YAAA,GAGA,EAaA,SAAAgG,EAAAlG,EAAAmG,GASA,IAAA,IAJA9C,EACAoC,EACAtE,EANAiF,EAAA,qEACAzI,KACA0I,KACAC,GAAA,EAKAC,EAAAL,EAAAM,OAAAD,IAAAD,EAAAC,EAAAA,EAAAC,OACA,GAAAD,IAAA7H,GAAA6H,IAAA3J,EAAAa,OAAA,CAkBA,GAdAgI,GACApH,IAAA,KACAjB,KAAAJ,EACA+G,QACAhF,KAAA,KACAC,OAAA,MAGAuH,EAAA1H,KACA4G,EAAArI,KAAAmJ,EAAA1H,MACAwE,EAAA+C,EAAA9E,KAAAiF,EAAArH,eACAuG,EAAArI,KAAAiG,EAAA,SAGA,IAAAoC,EAAArI,KACA,IACAqI,EAAArI,KAAAiG,EAAAoD,MAAA3D,UAAA,EAAAO,EAAAoD,MAAA7B,QAAA,MACA,MAAApH,IAGA,GAAA2D,EAAAiC,EAAAmD,GAAA,CACAd,EAAApH,IAAA8C,EAAA9C,IACAoH,EAAA1G,KAAAoC,EAAApC,KAEA0G,EAAArI,OAAAJ,IACAyI,EAAArI,KAAAiC,EAAAoG,EAAApH,IAAAoH,EAAA1G,OAGA,IAAA2F,EAAA,cAAApD,KAAAtB,EAAA5B,SAAA4B,EAAA0G,aACAhC,IACAe,EAAAzG,OAAAiE,EAAAyB,EAAA,GAAAvD,EAAA9C,IAAA8C,EAAApC,OAIAsH,EAAA,GAAAE,GACAD,GAAA,EAEAD,EAAA,GAAAE,IAAA,EAGA5I,EAAA0C,KAAAoF,GAGAU,GACAxI,EAAA6C,OAAA,EAAA2F,GAGA,IAAA7C,GACA9D,KAAA,UACAX,KAAAmB,EAAAnB,KACAT,QAAA4B,EAAA5B,QACAT,MAAAA,GAGA,OADAgB,EAAA2E,EAAAtD,EAAA2G,WAAA3G,EAAA4G,SAAA5G,EAAAjB,MAAAiB,EAAA6G,WAAA7G,EAAA5B,SAAA4B,EAAA0G,aACApD,EASA,SAAA5E,EAAAsB,EAAAmG,GACA,IAAAxI,EAAA,KACAwI,EAAA,MAAAA,EAAA,GAAAA,EAEA,IAKA,GADAxI,EAAAmH,EAAA9E,GAEA,OAAArC,EAEA,MAAAH,GACA,GAAAsJ,EACA,MAAAtJ,EAIA,IAEA,GADAG,EAAAsG,EAAAjE,GAEA,OAAArC,EAEA,MAAAH,GACA,GAAAsJ,EACA,MAAAtJ,EAIA,IAEA,GADAG,EAAAwH,EAAAnF,GAEA,OAAArC,EAEA,MAAAH,GACA,GAAAsJ,EACA,MAAAtJ,EAIA,IAEA,GADAG,EAAAuI,EAAAlG,EAAAmG,EAAA,GAEA,OAAAxI,EAEA,MAAAH,GACA,GAAAsJ,EACA,MAAAtJ,EAIA,OACAqB,KAAAmB,EAAAnB,KACAT,QAAA4B,EAAA5B,QACAoB,KAAA,UA3yBA,IAAAsH,GAAA,EACA5F,KAo0BA,OAPAxC,EAAAC,oCAAAA,EACAD,EAAAuF,+BAAAA,EACAvF,EAAAW,kBAAAA,EACAX,EAAAa,cAAAA,EACAb,EAAAqI,SAbA,SAAAZ,GACAA,EAAA,GAAA,MAAAA,EAAA,GAAAA,GACA,IACA,MAAA,IAAAa,MACA,MAAAhH,GACA,OAAAtB,EAAAsB,EAAAmG,EAAA,KASAzH,EAAAuC,UAAAA,EAEAvC,KAQA9B,EAAAqK,8BAAA,WACA,IAAAC,EAAA,SAAAC,GACA,IAAAC,EAAAnL,EAAAkL,GACAlL,EAAAkL,GAAA,WAEA,IAAApD,EAAAjH,EAAAL,KAAAc,WACA8J,EAAAtD,EAAA,GAOA,MANA,mBAAA,IACAA,EAAA,GAAAnH,EAAAO,KAAAkK,IAKAD,EAAA/J,MACA+J,EAAA/J,MAAAC,KAAAyG,GAEAqD,EAAArD,EAAA,GAAAA,EAAA,MAKAmD,EAAA,cACAA,EAAA,gBAIAtK,EAAA8D,iBACA9D,EAAA8D,gBAAA,GAEA9D,EAAAmB,sBACAnB,EAAAmB,qBAAA,KAEAnB,EAAAkF,gBAAAlF,EAAAkF,eAAA,KAEAlF,EAAAkF,eAAA,IAIA,mBAAAwF,QAAAA,OAAAC,IACAD,OAAA,cAAA1K,GACA,oBAAA4K,QAAAA,OAAAC,SAAAxL,EAAAuL,SAAAA,OACAA,OAAAC,QAAA7K,EAEAX,EAAAW,SAAAA,IAGA,oBAAAX,OAAAA,OAAAyL,wSC04CwEC,EAAAtL,EAAAuL,OAAtEC,EAAA,kFAGgB,iBAATD,aAfO,IAAAE,KAAAF,cAwoBXG,UACW,oBAAL1G,kBAIP2G,IAsCFC,EAAS1L,UAAe2L,gBAAO,WACvBC,EAACC,gBACD9K,KAAC+K,QAAA,IAAiBC,EAElBC,EAAQC,yBAAUlL,MAClBA,KAACmL,YA5DX,IAAAC,EAAAT,EAAAS,SAyEIC,aAtDA,IAAAtH,WAAiBA,SAAAoC,qBAClB,OAAA,SAqBG,IADED,EAAAnC,SAAeoC,qBAAgB,UAC5BV,EAAO,EAAGA,EAAIS,EAAAjD,OAAAwC,IACnB,GAAAS,EAAAT,GAAgBe,KAAAN,EAAAT,GAAyBe,IAAIc,QAAE,mBAAA,EAC3C,OAACgE,EAAUC,iBAAArF,EAAAT,GAAAe,IAAAvC,MAAA,KAAAuH,OAIb,OAAA,QA2BNH,IAAcA,EAAAI,QAAAJ,EAAAK,aACfN,EAAAK,OAAAJ,EAAAI,OAODL,EAAAM,UAAAL,EAAAK,WAECN,EAAAO,YAAA,IAAAC,EAFDR,EAAAS,gBAEC,IAAAC,EAEDV,EAAAW,qBAAA,IAAAC,EACEZ,EAAMa,kBAAyB,IAAAC,EAC/B5M,EAASa,OAAA0C,UAvCT,SAAgCsJ,EAAaC,GAC3C,IAAAC,EAASC,EAAyBC,QAAAC,yBAAA,IAAA9C,MAAAyC,EAAArL,UAAAsL,OAAAK,QAAA,gBAAA,WAClCJ,EAAQK,kBAAa,0BAAmBP,EACzCE,EAAAM,WAqCDrN,EAASqK,gCACTD,MAAAkD,gBAAwBC,EAAAA,WAOtBC,IACF,MAAE,oBAAAC,iBAICC,IAEH,IAAA5B,EAAWT,EAASS,WAMlB6B,yBAA2B,IAAgBC,KACzCvB,YAAY,IAAOwB,qBACV,IAAAC,KACRrB,qBAAA,IAAAsB,KAEDpB,kBAAqB,IAAAqB,KACnBrO,UAAO2L,gBAAA,gBACRG,QAAA,IAAAwC,KAEWrC,yBAASlL,8BAIrBwN,YAAY,oBAAS,SAAAjN,KACZgM,QAAAkB,yBAAkBlN,EAAA,+BAG3BmN,GAAG,OAAC,SAAiBtH,GAgDzB,IAAQuH,EAAGrB,EAAAC,QACXzL,WAhDa8M,GACT,OAAC,IAAAA,EAEG,2BAEH,IAAAA,EAEG,kCAEH,IAAAA,EAEG,yCAEH,IAAAA,EAEG,kBAEH,IAAAA,EAEG,2CAEH,IAAAA,EAEU,8CAGE,IAATA,EACU,qBAGG,IAAjBA,EACD,mBAIA,KAAAA,EAEY,uCAChB,KAhFDA,EAkFe,yBAEd,MAMoCxH,GACpC,OAAAtF,GAAU6M,EAASE,UAAK,OAAA/M,EAAA,SAEvB6M,EAAAG,OAAAC,MAAoBhB,SAAQ,KACxBrD,MAAEkD,gBAAAC,EAAAA,iBAx6GR,IAAAmB,EAAAhO,MAAAA,KAAAgO,WAA+C,WAC/C,IAAAC,EAAAjP,OAAAkP,iBACAC,wBAA8BC,OAAA,SAAAC,EAAAC,GAAAD,EAAAF,UAAAG,IAC9B,SAAAD,EAAAC,GAAyB,IAAA,IAAAC,KAAAD,EAAAA,EAAApP,eAAAqP,KAAAF,EAAAE,GAAAD,EAAAC,KACzB,OAAA,SAAAF,EAAAC,GAEA,SAAAE,IAAAxO,KAAgCyO,YAAAJ,EADhCJ,EAAAI,EAAAC,GAEAD,EAAApP,UAA4B,OAA5BqP,EAA4BtP,OAAA0P,OAAAJ,IAAAE,EAAAvP,UAAAqP,EAAArP,UAAA,IAAAuP,gCAsBlBrE,EAAgB,cAAgBG,OAAA,IAwB1CqE,GAAC,oBAAA5B,YAlBQ6B,EAAAD,EAAA,QACOA,EAAA,eACdE,EAACF,EAAA,iBAKMG,EAAAH,EAAA,UACLA,EAAK,MACPI,EAACJ,EAAA,QAMMK,EAAAL,EAAA,UACDA,EAAC,SACP5N,EAAC4N,EAAA,OACH,IA9BAM,EA8BC,WA9BY,SAAAA,IAkCbjP,KAAAkP,iBAAA,KAWE,OAiBFD,EAAChQ,UAAAkQ,QAAA,WA3BQ,OAAAnP,KAAAkP,kBAEPD,EAAChQ,UAAAmQ,UAAA,WAEMpP,KAAAkP,iBAAP,MAEAD,EAAChQ,UAAAoQ,QAAA,SAAAC,GAEMtP,KAAAkP,iBAAPI,GAECL,OAGCA,8BAA2BA,MAC7BM,EAAC,WAEO,SAAAA,KAqCR,SAnCItQ,UAAYuQ,MAAS,SAAA1O,QAErB2O,IAAI,QAAQ3O,MAEX7B,UAAAyQ,KAAA,SAAA5O,QAAC2O,IAAK,OAAI3O,MAEV7B,UAAA0Q,KAAA,SAAA7O,GACHd,KAACyP,IAAA,OAAA3O,IAELyO,EAAAtQ,UAACsB,MAAA,SAAAO,GAAAd,KAAAyP,IAAA,QAAA3O,IAIDyO,EAAAtQ,UAAAwQ,IAAA,SAAAG,EAAA9O,GAAA,GAAA+O,QAAA,CAKC,IAAAlO,EAAA,IAAAiO,EAAA,oBAAA9O,EAJQ+O,QAAAD,GACAC,QAAAD,GAAPjO,GAEOkO,QAAKJ,KACdI,QAAC,IAAAlO,KAiBC4N,OANOA,WAAQA,QACR,oBAMAO,YAGAA,EAAA7Q,UAAAuQ,MAAA,SAAP1O,OACE7B,UAAcyQ,KAAK,SAAY5O,OAEzB7B,UAAkB0Q,KAAQ,SAAW7O,OACvC7B,UAAQsB,MAAK,SAAWO,YAI5BgP,QAAQA,MACVC,EAAC,WACH,SAAAA,EAACC,QAAA,IAAAA,IAAAA,EAAA,KArBYhQ,KAAAiQ,SAAA,IAyBbjQ,KAAAuB,KAAA,kBAAAvB,KAAAkQ,UAAAF,EAWA,SATwB/Q,UAAAkR,IAAA,SAAoBnO,EAAAoO,GAS3CC,cAAArQ,KAAAsQ,aAPQ,IAAAC,EAAAvO,EAAA0E,MAAA8J,KAAP,SACMD,GAAEA,EAAQE,WACZzQ,KAAAsQ,YAAcI,YAAe,WAAa,OAAQ1O,EAAS2L,OAAAgD,uBAAiBJ,EAAAE,WAAAzQ,KAAAkQ,YAG9EE,GAAQA,KAEZL,KAXa5F,EAAA4F,gBAAAA,EAeb,IAAAa,EAAA,WAME,SAAAA,IACE5Q,KAAKiQ,SAAS,GACdjQ,KAAKuB,KAAK,2BAEZqP,EAAC3R,UAAAkR,IAAA,SAAAnO,EAAAoO,GAEDpO,EAAA0E,MAAWmK,cAAG,IAAH7O,EAAA0E,MAAAmK,aAAG5N,QAAA,UAAAjB,EAAA0E,MAAAoK,SAAdpK,MAAAmK,aAAAvF,EAAAyF,OAAA/L,QAAA,IAAA,IAAAQ,UAAA,EAAA,KAEA4K,GAACA,YACHQ,kBAAAA,EAAA,IAfAI,EAeC,WAfY,SAAAA,EAAArD,EAAAjH,EAAAuK,GAmBbjR,KAAA2N,OAAAA,EAAA3N,KAAA0G,MAAAA,EA0CC1G,KAAAiR,YAAAA,GAAA,IAAAC,gBAxCGC,eAAaH,EAAwC/R,UAAA,WACnD,kBACEe,KAAK2N,OAAAG,OAAA2B,iCAGF,8BAGOuB,QACT,kCAIAb,IAAA,SAAAnO,EAAAoP,OACHvR,EAAE,SAAAwR,EAAAjB,GACF,OAAA,WAEI,IACApO,EAAuCsP,WAC7BD,EAAClB,IAAAnO,EAAAoO,GAIZ,MAAS1N,GACZV,EAAesP,WAAa,EAC7BtP,EAAAyN,IAAAlP,MAAA,yBAAA8Q,EAAA9P,KAAA,MAAAmB,EAAA5B,QAAA,uBAGFkB,EAAAsP,WAAAF,GAEaA,EAAApP,KAIZuP,EAAOvP,EAAc2L,OAAAG,OAAAyD,QACrBC,KACMJ,IACNI,EAAiBD,EAAItO,QAAApD,GAAuB0B,KAAE,KAAA0O,SAAA,iBAAAE,IAAAiB,GAAA,OAE/C,IAAA,IAAA3L,EAAA8L,EAAAtO,OAAA,EAAAwC,GAAA,EAAAA,IACH+L,EAAA/L,GAAC5F,EAAA0R,EAAA9L,GAAA2L,GAAA3L,EAAA8L,EAAAtO,OAAA,EAAAuO,EAAA/L,EAAA,GAAA,MA1CY+L,EAAA,MAiGXC,EAAAC,kBAAiC,SAAA5D,GA9BzBA,EAAA6D,UAA6E,IAAGC,GAqBhF9D,EAAA6D,UAAA,IAAgBE,GAUtB/D,EAAK6D,UAAU,IAAMG,GACtBhE,EAAA6D,UAAA,IAAAI,GAEMjE,EAAA6D,UAAA,IAAAK,GACLlE,EAAM6D,UAAA,IAAAM,GACNnE,EAAM6D,UAA4B,IAACO,GACnCpE,EAAS6D,UAAgB,IAAIQ,WAK7BV,mBAACA,QAEW,oBACVW,EAAStE,QACTuE,aACFrS,KAACsS,kBAAA,EAEDtS,KAAIuS,QAAKzE,WAEA7O,UAAAuT,QAAA,SAAA9L,GACT,IAEIoH,EAAC9N,KAAAuS,QAEC9C,EAAA3B,EAAY2B,IAClB,GAAM3B,EAAO2E,QAGX,GAAK3E,EAAC4E,QAKH,GAAA1S,KAAA2S,0BAAPlD,EAAAC,KAAA,gFAAO,CAGL1P,KAAM4S,mBAEN,IAAIC,EAAK/E,EAAA/C,QAAmBgD,MAAA+E,KAAApM,GAC1BqM,EAAO,QAAArM,EAAAoK,KAAA,KAAApK,EAAAmK,aAAA,SAAAnK,EAAAmK,aAAA,IACRgC,EAEGpD,EAAIC,KAAC,oBAAuBmD,EAAA,IAAAE,GAG9BtD,EAAAlP,MAAO,2BAAAwS,QAhBPtD,EAAIC,KAAK,uDAHPD,EAAAC,KAAS,+DAuBFzQ,UAAA8N,QAAA,SAAoBiG,OAC7BC,EAAOjT,KAGL8N,EAAC9N,KAAAuS,QACD9C,EAAC3B,EAAA2B,IAEL,IAAIzP,KAACsS,2BAGD,yBACAG,aAKAC,cAIDJ,kBAAgB,EACnBtS,KAAC4S,mBAAC,IACA,IAAIM,EAAMpF,EAAA/C,QAAAgD,MAAAoF,IAA2BrF,EAAMsF,qBAC3C,IAAKF,GAAoB,IAApBA,EAAoBjQ,OAE1B,YADKjD,KAACsS,kBAAmB,GAIrB7C,EAAAC,KAAA,WAAAwD,EAAAjQ,OAAP,cAAyB6K,EAAApC,UAA4B,KAC7CoC,EAAMuF,iBAA+BC,WAAAJ,EAAAK,IAAA,SAAArT,GAAA,OAAAA,EAAAoK,QAAAwD,EAAA,SAAA0F,GAEtCP,EAAAQ,0BAAqBD,EAAwBN,GAChDD,EAAAS,aAAsBR,EAAAK,IAAA,SAAArT,GAAA,OAAAA,EAAAoK,QAAAkJ,GACvB/D,EAAAC,KAAA,8BAEMuD,EAAIX,kBAAK,GACXU,SAGHtQ,GACD+M,EAAAlP,MAAA,2BAAAmC,GAEG1C,KAAA2T,oBAEF3T,KAAAsS,kBAAqB,UA3BnB5C,KAAI,0DALND,EAACC,KAAA,gEAoCE0C,EAAAnT,UAAA0U,kBAAP,SAAsBC,EAAiEC,EAAAC,GACrF,IAAEhG,EAAW9N,KAAKuS,UACnBqB,GAAAA,GAAA,KAEOA,EAAA,GAEN9F,EAAsB2B,IAAAC,KAAQ,6BAARkE,EAAA,kBAAjBG,wBAAa,IAAAvJ,MAAA,IAAAA,MAAAwJ,UAAA,IAAAJ,GAChBC,SACEI,yBAA0BjU,KAAA+T,yBAC1BD,KACA/I,QAAKgD,MAAYmG,SAGvB9B,EAACnT,UAAAkV,eAAA,SAAArR,KAEOA,GAAA9C,KAAAqS,UAAAtP,KAAAD,IAERsP,EAACnT,UAAAyU,aAAA,SAAAU,EAAAZ,GAED,IAAA,IAAAa,EAAA,EAICC,EAJOtU,KAAAqS,UAIPgC,EAAAC,EAAArR,OAAAoR,IAAA,CAHK,IAACvR,EAAKwR,EAAcD,GACtB,IACDvR,EAAAsR,EAAAZ,GAGK,MAAA9Q,GACC1C,KAAKuS,QAAA9C,IAAAlP,MAAA,yCAA8DmC,QAKnEzD,UAAU0T,wBAAA,WACjB,OAAC3S,KAAAiU,0BAAAjU,KAAAiU,yBAAA,IAAAzJ,MAGK4H,EAAAnT,UAAA2T,iBAAA,WACN,IAAMK,EAAAjT,KACAA,KAAMuU,cACNvU,KAAGuU,YAAoB7D,YAAA,WAAA,OAAAuC,EAAAuB,kBAAA,SAItBvV,UAAawV,2BAAQ,kBAC1BzU,KAAO+T,yBAAA/T,KAAA+T,wBAAA,IAAAvJ,QAGIvL,UAAAuV,eAAqB,WAEhCxU,KAAIyU,8BAAMzU,KAAAsS,kBACVtS,KAAK+M,aAIM9N,UAAAwU,0BAAkB,SAAAD,EAAAY,OAG7BtG,EAAK9N,KAAAuS,QACL9C,EAAM3B,EAAC2B,IACT,GAAC+D,EAAAkB,QAKC,OAHEjF,EAAAC,KAAS,QAAA0E,EAAAnR,OAAuB,iBAElCjD,KAAI2U,aAAKP,MAGTZ,EAAOoB,mBAKP,OAJDnF,EAAAlP,MAAA,6CAEGP,KAAA2T,uBAIFH,EAAKqB,gBAIH,OAHFpF,EAAAC,KAAO,uEACR1P,KAAA2T,kBAAA,MAAA,GAAA,MAICH,EAAIsB,qBAGF,SAFApF,KAAI,kGACJiE,kBAAO,SACT3T,KAAC2U,aAAAP,QAEMW,UAAYvB,EAASwB,WAM1B,OALFvF,EAAClP,MAAA,sCAAAiT,EAAA1S,SAEDd,KAAA2T,kBAAO,UACR3T,KAAA2U,aAAAP,MAICZ,EAAKyB,uBACN,IAAAnU,EAAA,kDACFgN,EAAAsF,oBAAA,GAEO3D,EAAAlP,MAAAO,EAAA,sCACDgN,EAASsF,oBAAqB9O,KAAOK,IAAC,EAAML,KAAE4Q,MAASpH,EAACsF,oBAAA,QAG9D3D,EAAAlP,MAAAO,EAAA,qCACHd,KAAA2U,aAACP,SAyCCZ,EAAAkB,UAAYjF,EAAAlP,MAAA,6BAAAiT,EAA2B1S,SAAA,gDACjCd,KAAC2T,sBAITvB,EAAAnT,UAAA0V,aAAC,SAAAP,GAAA,IAAA,IAAA3O,EAAA,EAAAA,GAAA2O,OAAAnR,OAAAwC,IATYzF,KAAAuS,QAAAxH,QAAAgD,MAAAoH,OAAAf,EAAA3O,GAAuBoN,YAwB3BT,OAEAA,kBAAAA,QACa,2BACGgD,QACL,IAAVA,IAAUA,EAAiC,KAEjDpV,KAAA+N,MAAa,IAACsH,EAAkBD,GACjCpV,KAAAqL,SAAA,IAAAgK,EAAA,SAKCC,wBAAqBA,QACL,oBAEhBC,IACDvV,KAAAwV,2BAAA,yCAGsBvW,UAAAqU,WAAsB,SAAUc,EAAOtG,EAASsD,EAAA4B,GACrE,IAAMxC,EAAKiF,KAAAC,UAAOtB,GAChB/Q,EAAUrD,KAAK2V,cAAM7H,EAAA,OAAAA,EAAApC,UAAA,iBAAA8E,KACnBxQ,KAAM4V,yBAAc9H,EAAiBsD,UACtCtD,EAAA7B,kBAAA4J,YAAAxS,EAAAyS,EAAA9C,MAGI/T,UAAA8W,oBAAA,SAAAC,EAAA5M,EAAA0E,EAAAsD,SACHtD,EAAQpC,UAAc,yBAAMuK,mBAAAD,GAAA,oBAC9BxF,EAACiF,KAAAC,UAAAtM,GAAC/F,EAAUrD,KAAC2V,cAAA7H,EAAA,OAAAgB,EAAA0B,KACXxQ,KAAM4V,yBAAW9H,EAAAsD,UAClBtD,EAAA7B,kBAAA4J,YAAAxS,EAAAyS,MAGQ7W,UAAaiX,YAAgB,SAAQpI,EAAUqI,EAAM/E,OAC9D/N,EAACrD,KAAA2V,cAAA7H,EAAA,MAAAA,EAAApC,UAAA,6BAAAyK,UAoBDrI,EAAA7B,kBAAA4J,YAAAxS,EAlBA,SAAaoJ,EAAA3L,EAAiB0P,EAAM4F,GACpC,GAAA,MAAA3J,EAEK,OAAO2E,EAAA,IAAAiF,GAA8B,EAAO,MAAM,EAAA,KAAAvV,IAGpD,IAAAuK,EACC,IACCA,EAAAoK,KAAiBa,MAAC9F,GAGnB,MAAAtQ,GAAkE4N,EAAA2B,IAAAlP,MAAA,8BAAmBiQ,EAAA,KAEzF,IAAAnF,GAAMkL,MAAAlL,EAAA8K,SACH,OAAA/E,EAAA,IAAAiF,GAAA,EAAA,MAAA,EAAA,KAAA,oCAEHjF,EAAQ,IAAAiF,GAAa,EAAAhL,EAAAA,aAAAA,EAAA8K,aAKjBZ,EAAAtW,UAAAuX,cAAA,SAAwBC,EAAwBC,EAAgD5I,GAAxG,IAAAzK,EAAArD,KAOC2V,cAAA7H,EAAA,MAAAA,EAAA6I,mBAAA,uCAAAF,EAAA,UAAAC,GANC5I,EAAO7B,kBAAS4J,YAASxS,MAEPpE,UAAA0W,cAAa,SAAuB7H,EAAE8I,EAAA7V,EAAAyP,GAGxD,YADW,IAATA,IAAaA,EAAA,OAEhBoG,OAAAA,EACH7V,IAAAA,EAACyP,KAAAA,EAnEY/E,OAAAqC,EAAArC,OAoFboL,UAAA/I,EAAA+I,YACgBtB,EAAdtW,UAAqC2W,yBAAA,SAAA9H,EAAAsD,GAAE,IAAA6B,EAAAjT,YAAA,SAAAyM,EAAA3L,EAAA0P,EAAA4F,GAAA,IAAAU,EAAAV,GAAcW,SAAAX,EAAAnD,EAAAuC,4BAAA,wBAC/CpE,EAAS,IAAC4F,EAAAvK,EAAA3L,MAIXyU,OAEHA,wBAACA,QAEmB,oBAAfjK,uBAED,SAAY2L,OAEf,IADCC,KACD7C,EAAA,EAAAA,EAAApU,UAAAgD,OAAAoR,IAED6C,EAAO7C,EAAO,GAAApU,UAAAoU,GAMd,GAHY4C,IACRA,OAEHC,GAAA,IAAAA,EAAAjU,OAEG,OAAegU,MAEjB,IAAME,EAAA,EAASC,EAAUF,EAAAC,EAAWC,EAAOnU,OAAAkU,IAAA,CAC3C,IAAI7M,EAAK8M,EAAUD,GACf7M,GAAM2M,EAAA3P,QAAAgD,GAAA,GACX2M,EAAAlU,KAAAuH,GAKW,OAAA2M,KAGZI,YAAyB,SAAaxT,GACtC,IAAmBA,GAAK,IAAAA,EAALZ,OAAd,OAAM,UAETqU,EAAK,EACH7R,EAAO,EAAAA,EAAa5B,EAAOZ,OAAGwC,IAEjC6R,GAAAA,GAAA,GAAAA,EADEzT,EAAA0T,WAAA9R,GAGH6R,GAAQ,EAGI,OAAIA,gBAEH,SAASE,EAAQC,GAI/B,IAAA,IAHEzR,KAGFqO,EAAA,EAAAqD,GADYF,GAAa,IAAGvT,MAAO,MACnCoQ,EAAAqD,EAAAzU,OAAAoR,IAAA,CAGa,IACNsD,EADRD,EAAoBrD,GACQpQ,MAAA,KAEfqH,EAAGsM,QAAID,EAAa,GAAIF,KAC7BzR,EAAE2R,EAAA,IAAkBA,EAAG,IAG7B,OAACrM,EAAAuM,QAAA7R,GAAA,KAAAA,UAGM,oBACH8R,IACF,OAACxT,KAAAC,MAAA,OAAA,EAAAD,KAAAyT,WAAAnW,SAAA,IAAA4D,UAAA,GAGH,OAAOsS,IAAOA,IAAA,IAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAAA,IAAAA,KAGFxM,EAAA0M,MAAA,SAAdC,EAAyCf,GACvC,IAAIlR,SACF,IAAAjH,KAAYkZ,MACbA,EAAAlZ,KAEKiH,EAAAjH,GAAekZ,EAAAlZ,QAGnB,IAAAA,KAAOmY,MACRA,EAAAnY,KAEMiH,EAAKjH,GAAAmY,EAAAnY,IAIZ,OAAKiH,KAEJkS,aAAA,SAAArU,GAED,IAAMA,EACF,OAAM,KAEV,IAEMsU,EAFL,kHAEyBnU,KAAAH,GAC1B,OAAIsU,GAAoBA,EAALlV,OAAK,EAAbkV,EAAI,GAEV,yBAEF,SAAAC,EAAAX,OACFW,GAAA,IAAAA,EAAAnV,OAED,OAAQ,KAGI,IAAAoV,EAAAD,EAAdnU,MAAA,KACE,GAAkB,IAAlBoU,EAAOpV,OACR,OAAA,KAQC,IAAK,IADkD+C,KAClDqO,EAAS,EAAAiE,EAAYD,EAAKhE,EAAQiE,EAAGrV,OAAAoR,IAAA,CACxC,IACDtO,EADQuS,EAAMjE,GACdpQ,MAAA,KAESqH,EAAGsM,QAAA7R,EAAA,GAAA0R,KACLzR,EAACuS,mBAAmBxS,EAAW,KAAKwS,mBAAqBxS,EAAI,YAIjEuF,EAAMuM,QAAO7R,GAAA,KAAAA,kBAGJ,kBACR1B,KAACC,MAAsB,iBAAdD,KAAMyT,qBAEjB,SAAA5O,EAAAqP,EAAAC,WAEK,IAANA,IAAoCA,GAAU,IAC9CtP,GAAyB,iBAArBA,SACF,MAGFuP,EAAM,+CACFD,EAAAtP,EAAmBwP,cAAAxP,GAAAnE,QAAA0T,EAAA,KACrBF,OAAUI,KAAQ,SAAaC,GACjC,GAAC,iBAAAA,EAEG,OAAA,EAIJ,IAFAA,GAACJ,EAAAI,EAAAF,cAAAE,GAAA7T,QAAA0T,EAAA,KAEGzV,QAAkB,EACpB,OAAO,EAGT,IAAI6V,EAAmB,MAAAD,EAAA,GACrBC,IACDD,EAAAA,EAAApZ,MAAA,IAGA,IAAAsZ,EAAA,MAAAF,EAAAA,EAAA5V,OAAA,GAKJ,OAJA8V,IAEaF,EAAdA,EAAsBrT,UAAa,EAAAqT,EAAA5V,OAAA,IAElC6V,GAAAC,EAEDF,EAAA5V,QAAwCkG,EAAclG,SAAA,IAAAkG,EAAA7B,QAAAuR,EAAA,GAErDC,EAEDxN,EAAA0N,SAAsC7P,EAAc0P,GAEnDE,EAQDzN,EAAA2N,WAAmC9P,EAAA0P,GAEzB1P,IAAqB0P,eAGvB,SAAO1P,UACR,UAAA,iBAAA,GAAA,IAAAnK,OAAAka,KAAA/P,GAAAlG,qBAGI,SAAOkG,EAAQgQ,sBAET,EAAAA,EAAAlW,UAAAkW,cAGT,SAAWhQ,EAAOiQ,UACnB,MAAA9R,QAAA8R,EAAAjQ,EAAAlG,OAAAmW,EAAAnW,qBAGA,SAAAuN,EAAAiH,EAAA4B,GACL,SAACC,EAAAC,EAAAC,GAEG,IAAIC,KACN,OAAMhE,KAAAC,UAAe6D,EAAA,SAAAxa,EAAAuL,GAEjB,IAACgB,EAAUsM,QAAS7Y,EAAEya,GAAtB,IAGS,iBAATlP,GAASA,EAAA,CACV,IAAA,IAAAmP,EAAAnS,QAAAgD,GACD,OAIKmP,EAAA1W,KAAAuH,GAGD,OAACA,QAGgB,uBAArB1I,SAAOzC,KAAMqR,GAA4B,CAC3C,IAACkJ,KAED,IAAA,IAAOC,KAAKnJ,EACbA,EAAAmJ,KAEoBnJ,IAGQkJ,EAAAC,GAAAnJ,EAAAmJ,IAE3B,OAAOL,EAAMI,EAAAjC,GAGf,GAA6B,sBAApB7V,SAASzC,KAAIqR,GAA6B,CAElD,IAAA,IADCxK,KACDP,EAAA,EAAAA,EAAA+K,EAAAvN,OAAAwC,IAEOO,EAAMP,GAAOgQ,KAAAa,MAAcgD,EAAS9I,EAAA/K,GAAAgS,IAC7B,OAAKhC,KAAMC,UAAA1P,UACxBsT,EAAa9I,EAAAiH,gBAAqB,SAAAtO,EAAAyQ,GACpC,QADsD,IAAjBA,IAAwBA,GAAA,GAC5D,kBAAAzQ,EAED,OAAOA,EAEX,GAAC,OAADA,GAAC,iBAAAA,GAAA,iBAAAA,EAAA,OAAAyQ,EA6BD,QAAAzQ,EAAA,IAAAwP,cAAAD,QAAA,IAAA,OA4GC,IAAA,MApGe,IAAA,IAAA,OAAS,EACnB,IAAO,QACV,IAAA,KAEa,IAAA,IACR,KAAC,KAAU,OAAO,EAEtB,OAACkB,GAGDtO,OAEAA,MAAKA,MACPL,EAAC,WAEa,SAAAA,cAEF4O,UAAC,SAAA/W,KACVA,GAAA9C,KAAAqS,UAAAtP,KAAAD,MAGMoI,yBAA2B,SAAA4C,GACnC,GAAAA,GAAAA,EAAA4E,QAAA,CAIC,IAAIoH,EAAW9Z,KAAA+Z,uBAAiBjM,KAC9B2B,IAAOC,KAAA,6BAAAoK,EAAA3D,SACTrI,EAACzC,SAAAC,EAAA0M,MAAAlK,EAAAzC,SAAAyO,EAAAzO,UAEDrL,KAAAmL,QAAW2C,KAEb7C,EAAC+O,WAAA,SAAAlM,GAEa,OAAAA,GAAAA,EAAA4E,QAEH1S,KAAA+Z,uBAAAjM,GACRqI,SAAA,EAHH,KAMc8D,aAAU,SAAA9D,EAAArI,OACpBoM,EAAoBla,KAAAga,WAAAlM,GACpBqI,GAAO+D,MAIPzK,IAAOC,KAAG,2BAAwBwK,EAAA,QAAA/D,GACpCnW,KAACma,eAAArM,EAAAoM,OAGMC,eAAiB,SAAYrM,EAAQqI,OAC1ClD,EAAKjT,WACI8N,EAAQ2E,SAQjB3E,EAAM4E,cAIHyD,EAAA,OAEDnW,KAAOga,WAAelM,MAGxB2B,IAAMC,KAAA,wCAAoCyG,EAAA,wBAC/BD,YAASpI,EAAeqI,EAAA,SAAA3C,MACjC1F,GAAU0F,GAASA,EAAQkB,SAAAlB,EAAAnI,UAM7ByC,EAAKzC,SAAQC,EAAQ0M,MAAAlK,EAAAzC,SAAAmI,EAAAnI,UACpB,IAAA+O,EAAAnP,EAAA8O,uBAAAjM,GACJ,IAAA,IAAA/O,KAAAqb,EAEc5G,EAAOnI,SAAtBtM,WAEoB+O,EAAAzC,SAAAtM,OAEdsb,GACDlE,QAAA3C,EAAAsD,gBAACzL,SAAYmI,EAAAnI,UAEdyC,EAAC/C,QAAAM,SAAAyH,KAAAuH,GACFvM,EAAA2B,IAAAC,KAAA,sBAAA2K,EAAAlE,SACFlD,EAAA9H,QAAA2C,QAlBKA,EAAA2B,IAAAE,KAAA2K,8BAAA9G,EAAA1S,YAXFgN,EAAK2B,IAAMlP,MAAO+Z,qDAiCRnP,QAAU,SAAS2C,GAE/B,IAAC,IAAAuG,EAAA,EAAAkG,EADYva,KAACqS,UACbgC,EAAAkG,EAAAtX,OAAAoR,IAAA,CAED,IAAOvR,EAAWyX,EAAWlG,GAC9B,IACHvR,EAAAgL,GAtGiB,MAAApL,GANJoL,EAAA2B,IAAAlP,MAAA,oCAAemC,QA6HnBqX,uBAA4B,SAAAjM,GAC5B,IAAA3F,EAAA2F,EAAA/C,QAA8BM,SAAM8H,MAAA,GACpC,OAAAhL,GAAAA,EAAAmC,OAA2BnC,EAAMmC,MAAA6L,SAAAhO,EAAAmC,MAAAe,SACjClD,EAAAmC,OAEA6L,QAAA,EAAA9K,cAMLJ,OAGKoH,eACLpH,gBAAKA,QACA,2BACAuP,EAAuB1Z,GAC5Bd,KAAK0U,SAAQ,EACb1U,KAAKgV,YAAA,EACNhV,KAAA4U,oBAAA,EACH5U,KAAA6U,iBAAC,EAAA7U,KAAA8U,sBAAA,EAvBY9U,KAAA+U,UAAA,EA2Bb/U,KAAAiV,uBAAA,EAgBEjV,KAAAwa,WAAAA,EAAAxa,KAAAc,QAAAA,EACEd,KAAK0U,QAAS8F,GAAO,KAAAA,GAA6B,oBAC5B,MAAdA,0BACyB,MAATA,EAExBxa,KAAK6U,gBAA0B,MAA1B2F,EACLxa,KAAK8U,qBAA6B,MAAZ0F,GAAiB,MAALA,EAClCxa,KAAK+U,SAAa,MAANyF,EACbxa,KAAAiV,sBAAA,MAAAuF,QAKCxD,mBAAYA,MACd1K,EAAC,WAEM,SAAAA,EAAAmO,EAAe/O,GACpB,IAAIuH,EAACjT,KACNA,KAAA8N,OAEM,IAAAnD,EAFN,iBAAA8P,EAEMA,GACgBhP,OAAegP,EAAY/O,UAAAA,IAChD1L,KAAA0a,oBAAyB,KACzB1a,KAAA8N,OAAQ+L,UAAA,SAAkB/L,GAAA,OAAoBmF,EAAAyH,oBAAkBzH,EAAA0H,WAAA,EAAA,IAAA,KAEhE3a,KAAA8N,OAAOC,MAAQoG,eAAA,SAAAC,EAAAZ,GAAA,OAAAP,EAAAyH,+BAGVpO,EAAArN,UAAA2b,gBAAA,SAAPpa,GACE,IAAIkM,EAAC,IAAAwE,EAGA,OAFNxE,EAAAmO,aAAAra,GAEMR,KAAA8a,YAAApO,GAAAqO,QAAP,UAEAzO,EAACrN,UAAA+b,gBAAA,SAAAxa,EAAA4Q,GAEMpR,KAAA4a,gBAAApa,GAAAmM,OAAAyE,IAEP9E,EAACrN,UAAAuN,yBAAA,SAAAhM,EAAAya,GAKM,IAAA5O,EAAArM,KAAA4a,gBAASpa,UACd6L,EAAIK,kBAAewO,uBAEnB7O,EAAIK,kBAAmByO,oBAAAF,GACrB5O,KACgBpN,UAAGwO,yBAAA,SAAAjN,EAAAya,EAAA7J,QACnB5E,yBAAkBhM,EAAUya,GAA2BtO,OAACyE,MAClDnS,UAAAmc,mBAAA,SAAAC,UACNrb,KAAO8a,cAAWC,QAAW,SAAAO,UAAiBD,MAItCpc,UAAmBsc,mBAAiB,SAAAF,EAAAjK,2BAChCiK,GAAQ1O,OAAUyE,MACjBnS,UAAAuc,UAAA,SAAAC,EAAA3a,EAAA8O,SACN5P,KAAM8a,cAAWC,QAAA,UACxBja,GAAC8O,EACFvD,EAAAA,EAAAiP,UAAAG,GAAAC,WAAA5a,GAAA6a,YAAA,SAAA/L,QAGF,GAAA9O,EAKMuL,EAAAA,EAAAiP,UAAAG,GAAUC,WAAA5a,OAEhB,CAEMuL,EAAAA,EAAAqP,WAAAD,GACL,IACD,IAAAvS,EAAAlJ,KAAAwb,UAAAtS,OAEMmD,EAAAA,EAAAiP,UAAApS,GAAPA,EAAsBA,QAAkBA,EAAAA,OAAgD3H,MAEvF,MAAArB,GAEMF,KAAA8N,OAAA2B,IAAAD,MAAA,iCAAPtP,EAAAY,UAIO,OAAAuL,GAEPC,EAACrN,UAAA4O,UAAA,SAAA4N,EAAA3a,EAAA8O,EAAAwB,GAEMpR,KAAAwb,UAAAC,EAAA3a,EAAA8O,GAAPjD,OAAwByE,MAERnS,UAAS2c,eAAA,SAAAC,UACrB7b,KAAK8a,cAAOC,QAAiB,OAAAO,UAAcO,IAE/CvP,EAACrN,UAAA6c,eAAA,SAAAD,EAAAzK,GAEMpR,KAAA4b,eAAAC,GAAAlP,OAAAyE,MAESnS,UAAS8c,mBAAA,kBACrB/b,KAAK8a,cAAOC,QAAiB,YAEjCzO,EAACrN,UAAA+c,mBAAA,SAAA5K,GAEMpR,KAAA+b,qBAAApP,OAAAyE,IAEP9E,EAACrN,UAAAgd,iBAAA,SAAAxF,GAQMA,IACLzW,KAAA8N,OAAA2B,IAAmBC,KAAA,2BAA2B+G,GAC5CzW,KAAK8N,OAACuF,iBAAUmD,cAAAC,GAAA,EAAAzW,KAAA8N,YAIP7O,UAAY0R,uBAAkB,SAAA8F,GACxCA,IAEKzW,KAAA8N,OAAU2B,IAAIC,KAAA,iCAAgC+G,GAChDzW,KAAC8N,OAAQuF,iBAAAmD,cAAAC,GAAA,EAAAzW,KAAA8N,YAIG7O,UAAU6b,YAAC,SAAApO,UACzB,IAAKwP,GAAgBC,KAAA,IAAA3R,MAAAxK,KAAA0M,MAEtBzN,UAAAmd,YAAA,SAAA1V,EAAAgG,EAAA0E,GAED,SAAKE,EAAatP,GAKhB,OAJMA,IACPA,EAAAsP,WAAA,KAGOF,GAAUA,EAAApP,GAGlB,IAAAA,EAAA,IAAkBgP,EAAchR,KAAC0G,EAAuBgG,UACtDhG,OAKIoH,OAAM2E,oBAMPjC,WAIE6L,MAAI3V,EAAA2V,KAAgBpZ,2BAGtBkN,IAAAnO,EAAA,SAAAsa,GACH,IAACxO,EAAAwO,EAAA3O,OAAAG,OAECyO,EAAAD,EAAQ5V,MACT4V,EAAAhL,YACJiL,EAAAzL,MAAA,IAAAyL,EAAAzL,KAAA7N,SASMsZ,EAAAzL,KAAA,OACAyL,EAAWJ,OACNI,EAACJ,KAAQ,IAAI3R,MAGjBsD,EAAAC,MAAeyE,QAAuB+J,GAChCA,EAAA1L,cAAiB0L,EAAA1L,aAAA5N,OAAoB,IAC1CqZ,EAAA7M,IAASC,KAAO,8BAAG6M,EAAA1L,aAAA,KACtB/C,EAAK0O,uBAAiBnN,QAAAkN,EAAA1L,kBAIvBO,GAAAA,EAAAkL,mBAtCM7M,IAAIC,KAAG,2CACX4B,EAAAtP,IANKsP,EAAOtP,MAmDL/C,UAAOwd,8BAAiC,SAAAzG,EAAA0G,EAAAtT,EAAAgI,GACrD,IAAA6B,EAAAjT,KAEO,KAAAgW,GAAA0G,GAAAtT,GAAmBpJ,KAA3B8N,OAA4B2E,SAA5B,QAAArB,GAeCA,EAAA,IAAA4F,EAAA,IAAA,cAZC,IAAI2F,GAAcC,cAAkBF,EAAUtT,YAAEA,GAChDpJ,KAAK8N,OAAAuF,iBAAa0C,oBAA+BC,EAAC2G,EAAA3c,KAAA8N,OAAA,SAAA0F,GAE5CA,EAAWkB,SACbzB,EAAQnF,OAAO2B,IAAAlP,MAAA,0DAAAyV,EAAA,MAAAxC,EAAAgH,WAAA,IAAAhH,EAAA1S,WAEfsQ,GAAEA,EAAmBoC,QAIlBvU,UAAc4d,mBAAY,WACjC,OAAC7c,KAAA8N,OAAA0O,uBAAArN,WAOH7C,EAAArN,UAAkByb,oBAAO,SAAAoC,SAAzB9c,UACE8N,OAAI2B,IAAAC,KAAA,uCAAyCoN,mBAC3CC,aAAoB/c,KAAA2a,iBACrBA,WAAAtK,cAAArQ,KAAAsQ,iBAED0M,EAAOhd,KAAA8N,OAAAmP,+BACT,GAACD,EAAA,EAAA,2DAAAhd,KAAA2a,WAAAhY,WAAAwX,EAAA2C,IA9OH9c,KAAAsQ,YAAAI,YAAAyJ,EAAA6C,KAiPAhe,OAAAmS,eAAA7E,EAAA,WAAA6G,IAAA,WAGM,OA6BL,OAAA7G,EAAA4Q,YA/BQ5Q,EAAA4Q,UAAP,IAAoB5Q,EAAgB,OAE3BA,EAAkB4Q,WAE1BC,YAAA,EAEDC,cAAA,wDAEC,WAEM,SAAAlM,YAEPA,EAACjS,UAAA4b,aAAA,SAAAra,GAEMA,IACDR,KAAC,gBAAsBQ,0BAG7B0Q,EAAAjS,UAAA,oBACE,WACD,QAAAe,KAAA,+BAAAod,cAAA,MAGKne,UAASoe,aAAA,kBACXrd,KAAK,iBAAsB,MAE/BkR,EAACjS,UAAAic,qBAAA,WAEMlb,KAAA,wBAAA,GAEPhB,OAACmS,eAAAD,EAAAjS,UAAA,oBACHkU,IAAA,WAAC,QAAAnT,KAAA,wBA0HDmd,YAAA,EAgHEC,cAAA,MA1FOne,UAAWkc,oBAAc,SAAAvE,GAQzBA,IAIA5W,KAAA,uBAAsD4W,MAyCrD3X,UAAAqe,oBAA8B,WAO9B,OAAAtd,KAAA,wBAA+B,MAc/BkR,OAcAA,YAASA,QAGf,oBACEvG,EAAc4S,GAgBhB,SAAKC,EAAAC,GACD,MAAqB,mBAApBA,EAA2BA,EAAAzd,MAAeyd,EAhB/Czd,KAAC0d,eAED1d,KAAA2d,eAEA3d,KAAKyS,SAAM,EACXzS,KAAKwc,uBAAwB,IAAAvN,EAC7BjP,KAAKqL,YACLrL,KAAK4d,WAAA,qCACL5d,KAAK6d,oBAAA,qCAEL7d,KAAK8d,gCAAkC,KACvC9d,KAAK+d,mBACL/d,KAAKge,yBACLhe,KAAKie,YACLje,KAAKqS,aAILkL,EAAejS,EAAO0M,MAAArN,EAAeS,SAAgBmS,GACrDvd,KAAKyP,IAAK+N,EAAGD,EAAO9N,MAAqB,IAAIK,EAE7C9P,KAAAyL,OAAA8R,EAAgB9R,OAChBzL,KAAA0L,UAAA6R,EAAmB7R,UACpB1L,KAAA2W,mBAAA4G,EAAA5G,mBAMD3W,KAAAid,+BAAWM,EAAMN,oCAAjBhQ,yBAAAuQ,EAAAD,EAAAtQ,+BACEtB,YAAY6R,EAAQD,EAAA5R,aACtB3L,KAACwc,uBAAAgB,EAAAD,EAAAf,yBAAA,IAAAvN,OAMDpD,gBAA+B2R,EAAAD,EAAA1R,sBAC7BE,qBAAwByR,EAAKD,EAAAxR,2BAC7BqH,oBAAcoK,EAAWD,EAAgBnK,sBAAA,QACzCnH,kBAAeuR,EAAAD,EAAAtR,mBACjBjM,KAACqT,iBAAAmK,EAAAD,EAAAlK,mBAAA,IAAAkC,sEAVAtK,EAAAC,yBAAAlL,MAgBDyR,EAAWC,kBAAA1R,mCACK2K,EAAc1L,UAAQ,UACtCkU,IAAC,gCAAA+K,IAAA,SAAA5T,GAMDtK,KAAAme,QAAW7T,GAAA,UAAXmF,IAAAC,KAAA,WAAA1P,KAAAme,SACEne,KAAAmL,uBAOF,gBACQ,0BAECR,EAAmB1L,UAAS,kCAE5Be,KAAAyL,QAAUzL,KAAAyL,OAAAxI,QAAA,IAEnBka,YAAC,2BAbAhM,eAAAxG,EAAA1L,UAAA,aAmBDkU,IAAA,kBAAAnT,KAAA4d,YAEAM,IAAC,SAAA5T,GAMDA,IACMtK,KAAE4d,WAAQtT,EACZtK,KAAK6d,oBAAsBvT,EAC3BtK,KAAKyP,IAAIC,KAAK,cAAApF,GACdtK,KAAKmL,4CAQTnM,OAAAmS,eAAWxG,EAAA1L,UAAA,0BAAX,WACE,OAAOe,KAAK6d,yBAOd,SAA0CvT,GACpCA,IACFtK,KAAA6d,oBAAOvT,EACRtK,KAAAyP,IAAAC,KAAA,uBAAApF,GAEGtK,KAAKmL,wBAEC,gBACH,0BAGFR,EAAA1L,UAAkC,sCACvC,WACA,OAAKe,KAAO8d,sEAYdxT,GAAA,EACQA,GAAA,EAEPA,EAAA,GAAAA,EAAA,eAAAtK,KAAA8d,gCAAAxT,EAWMtK,KAAAyP,IAAAC,KAAA,mCAAPpF,GAAyBtK,KAAAmL,wBAAA,oBAEzBnM,OAACmS,eAAAxG,EAAA1L,UAAA,kBASDkU,IAAA,eAAAsE,EAAAzX,KAAAqL,SAAA,oBACE,OAAMrL,KAAQ+d,gBAAwBK,OAAC3G,GAAAA,EAA0BxT,MAAA,WAEnEkZ,YAAC,sBAAAle,UAAAof,kBAAA,WAS8B,IAAA,IAAxB5G,KAAwBpD,EAAA,EAAAA,EAAApU,UAAiCgD,OAAAoR,MAAAA,GAAjCpU,UAAAoU,8EAE/BrV,OAACmS,eAAAxG,EAAA1L,UAAA,wBAMDkU,IAAA,eAAAqF,EAAAxY,KAAAqL,SAAA,0BACE,OAAOrL,KAAKge,sBAAcI,OAAmB5F,GAAgBA,EAAAvU,MAAA,uBAE1D,EACLmZ,cAAC,mDAeM,IAAA,IAfNkB,KAeMjK,EAAA,EAAAA,EAAApU,UAAPgD,OAAAoR,IACQiK,EAAyBjK,GAAepU,UAAQoU,QAEpD2J,sBAAe1S,EAAAiT,SAAAxe,MAAAuL,GAAAtL,KAA4Cge,uBAACI,OAAAE,YAE7DnN,eAAAxG,EAAA1L,UAAA,WAEDkU,IAAK,WACH,OAAOnT,KAAIie,SAASO,KAAM,SAACC,EAAAC,GAC5B,OAAAD,EAAAxO,SAAAyO,EAAAzO,UAAA,EAAAwO,EAAAxO,SAAAyO,EAAAzO,SAAA,EAAA,KAIDkN,YAAC,EAEDC,cAAI,MAEYne,UAAA0S,UAAA,SAAAgN,EAAA1O,EAAO2O,OAAlBvN,EAAOuN,GAAArd,KAAAod,EAAA1O,SAAAA,EAAAE,IAAAyO,GAAAD,KACVtN,GAAUA,EAAKlB,KAIhBkB,EAAA9P,OAEG8P,EAAC9P,KAAa+J,EAAEyF,QAEnBM,EAAApB,WACFoB,EAAApB,SAAA,OAeG,IAFI4O,GAAsB,EACxBtN,EAAQvR,KAAAie,SACL5J,EAAI,EAAAyK,EAAMvN,EAAA8C,EAAAyK,EAAA7b,OAAAoR,IAEhB,GADQyK,EAAAzK,GACR9S,OAAA8P,EAAA9P,KAAA,CAEKsd,GAAe,EAChB,SAIHtN,EAACxO,KAAAsO,aAhCC5B,IAAAlP,MAAA,8CAwCCoK,EAAA1L,UAAA8f,aAAP,SAAkBJ,GAChB,IAAIpd,EAAY,iBAAAod,EAAAA,EAAAA,EAAApd,QACdA,GASF,IAAM,IADAgQ,EAAQvR,KAAWie,SACnBxY,EAAsB,EAAAA,EAAO8L,EAAAtO,OAAkBwC,IAE/C,GAAA8L,EAAY9L,GAAalE,OAAYA,EAAE,CACzCgQ,EAAYrO,OAAGuC,EAAA,GACjB,YAZDzF,KAAAyP,IAAAlP,MAAA,oDAeAtB,UAAA+f,WAAA,SAAA7I,GAEIA,IACNnW,KAAA2d,YAAA,YAAAxH,MAOOlX,UAACggB,gBAA2B,SAAAC,EAAA3d,GACpC,0EAAC4d,SAKMnf,KAAA2d,YALN,SAMK3d,KAAA2d,YANL,SAMsByB,EAErBpf,KAACyP,IAAAC,KAAA,mBAAAyP,EAAA,OAAAC,EAAA3O,YAMIzR,OAAAmS,eAAAxG,EAAA1L,UAAP,aACEkU,IAAK,WACN,MAAA,oCAIAgK,YAAA,EAGMC,cAAA,IAEPzS,EAAC1L,UAAAogB,YAAA,SAAAC,EAAAtP,QAEM,IAAAsP,IAAPA,GAAyD,QACrC,IAAhBtP,IAA+BA,EAAS,KAC3CsP,GAEOtf,KAAA2R,UAAA,IAAA5B,EAARC,OAEa/Q,UAAOsgB,gBAAA,gBAChB5N,UAAK,IAAAf,MAEJ3R,UAAA2L,gBAAA,eACC3L,UAASugB,eAAM,gBAChB/P,IAAA,IAAAF,GAEL5E,EAAC1L,UAAA4a,UAAA,SAAA/W,KAMDA,GAAA9C,KAAkBqS,UAAAtP,KAAAD,MACZ7D,UAAAkM,QAAc,eAEjB,IAAAkJ,EAAA,EAAAoL,EADCzf,KAAAqS,UACDgC,EAAAoL,EAAAxc,OAAAoR,IAAA,CAED,IAAAvR,EAAO2c,EAAcpL,GACtB,YAAA,MAAA3R,GACH1C,KAAAyP,IAAClP,MAAA,oCAAAmC,MAQD1D,OAAAmS,eAAAxG,EAAA,YAOEwI,IAAA,WANO,OAMsC,OAAAxI,EAAA+U,mBAA8B/U,EAAA+U,qBANpE/U,EAAyB+U,kBAO9BvC,YAAY,EACZC,cAAa,IAEbzS,OAED+U,iBAAA,OACH/U,cAAAA,EAAA,IAdA0L,EAcC,kBAdY,SAAA3B,EAAArJ,EAAgByL,EAAAtW,EAAAM,QAkB7B,IAAAgW,IAAAA,GAAA,QAOc,IAAZtW,IAA2BA,EAA6B,WAFhD,IAAAM,IAAAA,EAAuC,MAG7Cd,KAAK0U,SAAS,EACd1U,KAAK8W,iBAAgB,EACrB9W,KAAK0U,QAAAA,EACN1U,KAAAqL,SAAAA,EAEMrL,KAAA8W,gBAAAA,EACL9W,KAAKQ,UAAQA,OACXM,QAAWA,QAMRuV,iBAAAA,QACO,oBACV6F,EAAYxV,EAASiH,EAAOjB,GAC9B1M,KAAC2f,6BAAA,iEAED3f,KAAAiX,OAAYvQ,EACb1G,KAAA2N,OAAAA,EAEM3N,KAAA0M,kBAAAA,GAAe,IAAAwE,WAElBjS,UAAe8b,QAAC,SAAejK,GAKlC,OAJEA,IAEG9Q,KAACiX,OAAOnG,KAAAA,GAEb9Q,QASUf,UAAGqc,UAAA,SAAAzX,UACVA,IACD7D,KAAAiX,OAAApT,OAAAA,GAGC7D,QAGGf,UAAY2gB,eAAmB,SAAC5J,GACrC,IAAAhW,KAAO6f,kBAAK7J,GACb,MAAA,IAAAtM,MAAA,eAAA1J,KAAA2f,qCAGC3f,KAAKiX,OAACpG,aAAUmF,EACdhW,QAGKf,UAAK6gB,kBAAA,SAAAve,EAAAwe,GACb,IAAAxe,EAEM,MAAA,IAAAmI,MAAA,oBAEHqW,IAAM/f,KAAI6f,kBAAME,GACjB,MAAA,IAAArW,MAAA,MAAA1J,KAAA2f,8BAID,YADEhE,YAAU,QAAMpa,EAAAwe,GACjB/f,QAGMf,UAAKyc,WAAA,SAAA5a,GAQZ,OAPDA,IAKMd,KAAAiX,OAAAnW,QAAAA,GAEAd,QAEJf,UAAA+gB,OAAA,SAAAC,EAAAC,GAED,GAAID,GAAY,IAAQA,EAAW,GACnC,MAAO,IAAKvW,MAAA,0DAUP,GAAAwW,GAAA,KAAAA,EAAkB,IACnB,MAAA,IAAAxW,MAAgB,6DAIpB,OAFA1J,KAACiX,OAAAkJ,IAAAF,EAAA,IAAAC,EAEMlgB,MAUFkc,EAAAjd,UAAAggB,gBAAA,SAAPC,EAA+C3d,GAC7C,IAAI6d,EAAgB,iBAAAF,EAAAA,GAAAzO,SAAAyO,EAAA3d,KAAAA,UAClB6d,IAAqCA,EAAA3O,UAAgB2O,EAAgB7d,YAGpEoa,YAAA,QAAAyD,GAEDpf,MAJIA,QAOCf,UAAKmhB,mBAAA,SAAAC,EAAAjX,UACbiX,GAAAjX,GAQMpJ,KAAA2b,YAAA,qBAAPiB,cAA4ByD,EAA2BjX,YAAcA,IAEjEpJ,QAEDf,UAAAqhB,sBAAA,SAAAC,EAAAC,GAED,GAAAD,EAAY,CACb,IAAAlgB,GAAAogB,eAAAF,GAEMC,IACCngB,EAAQmgB,MAAAA,GAEbxgB,KAAA2b,YAAA,SAAAtb,GAGF,OAAAL,QAEcf,UAAiByhB,qBAAA,SAAAC,EAAAH,QAAjB,CAAA,IAAAhQ,GAAAoQ,kBAAiBD,mCAE9B,OAAO3gB,MAWFkc,EAAAjd,UAAA4hB,SAAW,SAAlBvW,GAKE,OAJKA,IACHtK,KAAAiX,OAAY3M,MAAAA,GAGTtK,QAEJf,UAAA6hB,QAAA,WAGD,IAAK,IADCzE,KACDhI,EAAM,EAAAA,EAAQpU,UAAUgD,OAAAoR,IAC3BgI,EAAKhI,GAAMpU,UAAUoU,GAIxB,OADCrU,KAAAiX,OAAYoF,KAAA/Q,EAAAiT,SAAAxe,MAAAuL,GAAAtL,KAAAiX,OAAAoF,MAAA+B,OAAA/B,IACbrc,QAGKf,UAAW0c,YAAA,SAAApa,EAAA+I,EAAA+O,EAAA0H,OACbxf,QAAa3C,IAAR0L,GAAoB,MAAAA,EAC1B,OAAAtK,KAGFA,KAAAiX,OAAAzG,OAEMxQ,KAAAiX,OAAAzG,aAEHxK,EAAKyP,KAAAa,MAAAhL,EAAkBoK,UAAWpL,EAAGtK,KAAQ2N,OAAAG,OAAAkT,eAAA5C,OAAA2C,OAAA1H,IAM1C,OALJ/N,EAAAuM,QAAA7R,KAEDhG,KAAOiX,OAAKzG,KAAAjP,GAAAyE,GAGPhG,MAEPkc,EAACjd,UAAAgiB,eAAA,SAAAC,GAKC,OAHMA,GACFlhB,KAAC8gB,QAAQ,YAEZ9gB,QAGCf,UAAakiB,eAAA,SAAA9d,UACdA,IAEGrD,KAAK0M,kBAAgB,YAAerJ,GAEtCrD,QAEMf,UAAU0N,OAAS,SAAGyE,QAE5BzD,OAAMyO,YAAWpc,KAAQiX,OAAMjX,KAAO0M,kBAAG0E,MAExCnS,UAAA4gB,kBAAA,SAAAvV,GACH,IAACA,EAED,OAAW,EAEf,GAAAA,EAAArH,OAAC,GAAAqH,EAAArH,OAAA,IAAA,OAAA,EASD,IAAA,IAAAwC,EAAA,EAAAA,EAAA6E,EAAArH,OAAAwC,IAAA,CAAA,IAAAW,EAAAkE,EAAAiN,WAAA9R,GACS2b,EAAsBhb,GAAA,IAAAA,GAAA,GACtBib,EAAejb,GAAA,IAAAA,GAA8B,IAAAA,GAAA,IAAAA,GAAA,IAwBrDkb,EAAA,KAAAlb,EAtBQ,IAAAgb,IAAAC,IAAAC,EACC,OAAS,SAEV,uBAIJpF,QAGkC,oBAC9BtK,SACH3B,SAAM,aACE,uCAEIhR,UAAckR,IAAI,SAAOnO,EAAAoO,GAGvC,IAAC,MAFIpO,EAAA2L,OAAAG,OAEJuG,EAAA,EAAAkN,EADEzT,EAAA4P,gBACFrJ,EAAAkN,EAAAte,OAAAoR,IAAA,CAEG,IAAImN,EAAMD,EAAClN,GAChBmN,GAAAxf,EAAA0E,MAAA2V,KAAA/U,QAAAka,GAAA,GACHxf,EAAA0E,MAAA2V,KAAAtZ,KAACye,GAID,IAAA7D,EAAA7P,EAAA6P,gBASE,IAAA,IAAA5e,KAAA4e,EAAY,GAAAA,EAAA5e,GAAA,CAAiD,IAAAiH,EAAAyP,KAAAa,MAAAhL,EAAAoK,UAAwBiI,EAAA5e,GAAA+O,EAAAkT,iBAArF1V,EASCuM,QAAA7R,KAjBMhE,EAAuB0E,MAAC8J,KAAAzR,GAAAiH,GAS7BoK,GAAKA,KAGLwB,mCAEuBA,QACpB,oBACAE,EAAU2P,EAAAzE,QACd,IAAAyE,IAAAA,EAAA,WAAA,OAAAjX,KAAAkX,aAEM,IAAA1E,IAAAA,EAAP,KAAA,IAAA/J,EAAAjT,KACEA,KAAAiQ,SAAA,UACE1O,KAAI,8BACJogB,kEAEYF,iBACTzE,cACG,kBACF2E,cAAa1e,OAAe,GAC9BgQ,EAAC0O,cAAAC,QAAAC,wBAKJ5iB,UAAAkR,IAAA,SAAAnO,EAAAoO,GAED,IAAM6C,EAAQjT,OACd,SAAiBO,GAEf,IADE,IAAAuhB,EAAW,EACPvhB,GACAA,EAAMO,SAAKP,EAAAO,QAAkBmC,SAE7B6e,GAA4B,IAAdA,EAAqBxW,EAAA+L,YAAO9W,EAAEO,UAEhDP,EAAOwhB,aAAexhB,EAAOwhB,YAAA9e,SAC7B6e,GAA0B,IAATA,EAAexW,EAAM+L,YAAA5B,KAAAC,UAAAnV,EAAAwhB,eAEtCxhB,EAAQA,EAAAK,MAGV,OAAKkhB,GAEC9f,EAAC0E,MAAa8J,KAAK,cAEzBsR,EAAC,CAED,IAAIE,EAAQhgB,EAAC0E,MAAYsb,OAAA,EACvBC,EAAQjiB,KAAIkiB,kBACZC,EAAKniB,KAAA2hB,cAAoBS,OAAO,SAAMla,GAAU,OAASA,EAAE4Z,WAAOA,IAAA,GAuBxE,GApBMK,MACEE,eAAKL,GACPG,EAACG,WAAAtgB,EAAA0E,MAAAyV,MACFna,EAAAyN,IAAAC,KAAA,uCAAAoS,GACF9f,EAAAsP,WAAA,IAGFtP,EAAAsP,WAAAtR,KAAAuiB,oBAAA3J,KAAA,SAAA4J,GAAA,OAAAA,EAAAlL,OAAAwK,GAAAU,EAAA3P,WAAAoP,EAAAhP,EAAA/C,cACHlO,EAAAyN,IAAAD,MAAC,2BAAAsS,GAAA9hB,KAAA2hB,cAAA5e,KAAA,IAAA0f,EAAAX,EAAA9f,EAAAggB,IArEYhgB,EAAAsP,WAAA,IAiFXtP,EAAYsP,UAGL,IAFAtP,EAAWyN,IAAAD,MAAS,+BAAAsS,EAAA,aACpB9hB,KAAQuiB,oBAAWxf,MAAAuU,KAAAwK,EAAAjP,UAAAoP,IACVjiB,KAAMuiB,oBAAAtf,OAAA,IACrBjD,KAAAuiB,oBAAAX,QAMMxR,GAAAA,KAEL0B,OAGKA,uBAAAA,QACM,oBACT2Q,EAAaX,EAAO9f,EAAYggB,GAClChiB,KAAC8hB,SAAAA,EACF9hB,KAAA0iB,SAAA1gB,EACHhC,KAAA2iB,OAACX,SAIDS,EAAAxjB,UAAAojB,eAAA,SAAAL,GAAAhiB,KAAA2iB,QAAAX,KAES/iB,UAAe4iB,SAAA,WAevB7hB,KAAA0iB,SAAAhc,MAAAsb,MAAAhiB,KAAA2iB,OAbQ3iB,KAAA0iB,SAAA/U,OAAAG,OAAAC,MAAPyE,QAAAxS,KAAW0iB,SAA6Bhc,UAGhCzH,UAAYqjB,WAAe,SAAOnG,GACpCA,EAACnc,KAAQ0iB,SAAWhc,MAAAyV,OACtBnc,KAAM0iB,SAAAhc,MAAeyV,KAAqBA,WAM7B,WACjB,SAACjK,IACHlS,KAAAiQ,SAAA,GAACjQ,KAAAuB,KAAA,+BAID2Q,EAAAjT,UAAAkR,IAAA,SAAAnO,EAAAoO,GAAA,IACSwS,EAAmB5gB,EAAG2L,OAAAG,OAAAb,yBACtB,IAAAjL,EAAe0E,MAAA8J,KAFxB,iBAEsCoS,EAAA,CAmDrC,IAAAC,EAAAD,EAAAE,mBAAA9gB,GAjDQ6gB,IACC7gB,EAAoB0E,MAAA8J,KAL9B,gBAKuCqS,MAGjCzS,kCAIS8B,QACH,oBACNL,SACA5B,SAAM,QACN1O,KAAA,uBAEAtC,UAAUkR,IAAA,SAAAnO,EAAAoO,OAEV2S,GACA,YACA,SACA,eAEI,cACF,WACF,UAEA,oHAYQ9R,YAAgBoM,8BAElBvM,KAAO,WACRpK,MAAA8J,KAzBM,WAyBN,KAED1C,EAAQ9L,EAAM2L,OAAKG,OACpBkV,EAAAlV,EAAAnC,YACF,IAAAqX,EACF,MAAA,IAAAtZ,MAAA,gCAGF,IAAA1D,EAAAgd,EAAA1M,MAAAtU,EAAAxB,GACH,GAACwF,EAAA,CAAA,IAAAid,EAAAxN,KAAAa,MAAAhL,EAAAoK,UAAAlV,EAAAsN,EAAAkT,eAAA5C,OAAA2E,KArDYzX,EAAAuM,QAAWoL,KAyDxBjd,EAAAwK,OAAAxK,EAAAwK,SAEwBxK,EAAAwK,KAAA,QAAuByS,GAEtCjhB,EAAA0E,MAAA8J,KA1CQ,UA0CJxK,MAILoK,wBAIKyB,QACK,sCAER,aACF,gCAEK5S,UAAOkR,IAAA,SAAAnO,EAAAoO,cACDR,WACNA,GAAO,IAAA+I,cAAAD,YACV,QACF,IAAK,OACL,IAAK,IACL,IAAK,MACL,OAAS,MACP,QACF,OAAA,MACE,OACH,OAAA,EACF,IAAA,OAED,OAAA,EAA0C,IAAA,QACjC,OAAA,EACR,IAAA,QAGD,OAAA,EAAiC,IAAA,MAC3B,IAAK,QACP,IAAA,IACD,IAAA,KAEK,OAAQ,EACR,QAEA,OAAQ,YASXwK,EAAA7X,EAAAyF,EAAAjN,EAAA+V,GAGH,QAFC,IAAAvO,IAAAA,OAEDyF,EACD,OAAA8I,EAGK,IAAGuJ,EAAe,QAAZrS,EACNsS,EAAmB,KAAOtS,EAAO,IAEhCxG,EAASe,EAAQ+X,EAAAvf,GACtB,GAAMyG,EACA,OAAQ6Y,EAAiC7Y,EAA9BgB,EAAW+X,UAAS/Y,OAGnC,IAAIvL,KAAKsM,EACT,GAAAC,EAAQ2N,WAAYla,EAAK4Z,cAAAyK,EAAAzK,gBAAArN,EAAAsM,QAAA/T,GAAA9E,EAAAyG,UAAA4d,EAAAngB,UAC1B,OAAAkgB,EAAA9X,EAAAtM,GAAAuM,EAAA+X,UAAAhY,EAAAtM,IAED,OAAI6a,QAEF5X,EAAI0E,UACE+I,MACJzN,EAAQ2L,OAASG,OAAQzC,YAC1B,eAAA,KAEDiY,WAhCDjY,EAAAkY,eAGiB,IAAdA,IAAyBA,EAAA,KACxBC,EAAON,EAA4B7X,EAAE,MAAakY,EAAc,SAAU,KA4BzDlY,EAAAkR,EAAA1Y,QACrB4f,EAAAD,EAAAjH,EAAA/L,KAAA,WACFiT,GAAA,IAAAA,EAAA,GAAAA,EAAAH,KAAS7T,EAACC,KAAA,kDACL1N,EAAKsP,WAAA,QAIP,GAAW,UAAPiL,EAAIzL,KAEhB,IADG,IAAAvQ,EAAAgc,EAAA/L,KAAA,WACHxO,EAAAsP,WAAC/Q,IAAA,IAAA2iB,EAAA7X,EAAAkR,EAAAzL,KAAAvQ,EAAAuQ,MAAA,KAzFYrB,EAAAC,KAAA,kDAAoBnP,EAAAuQ,MA6FjC9O,EAAAsP,WAAA,GACS/Q,EAAmBA,EAAGK,WAG4B,IAAlDsiB,EAAP7X,EAAWkR,EAA2BzL,KAAmByL,EAAA1Y,QAAA,KACjD4L,EAAAC,KAAS,wCAAoB6M,EAAAzL,KAAA,gBAAAyL,EAAA1Y,QAE7B7B,EAAAsP,WAAoB,MAElBlB,YAIR2B,qBAACA,QAEc,WACjB,SAACC,IACHhS,KAAAiQ,SAAA,GAACjQ,KAAAuB,KAAA,0BAIDyQ,EAAA/S,UAAAkR,IAAA,SAAAnO,EAAAoO,GAAA,IACSwS,EAAmB5gB,EAAG2L,OAAAG,OAAAjC,gBACtB,GAAA7J,EAAe0E,MAAA8J,KAFxB,YAE4CxO,EAAA0E,MAAA8J,KAAA,UAAAkT,SAAAd,EAAA,CAqB3C,IAAAc,EAAAd,EAAAe,WAAA3hB,GAnBQ0hB,GAAAA,EAAGzgB,OAAV,IACQjB,EAAW0E,MAAW8J,KALhC,UAK2CkT,QAAAA,GAIvCtT,GAAKA,6BAIQ4B,QACP,sCACM,aACN,oBAsBR,SApBK/S,UAAAkR,IAAA,SAAAnO,EAAAoO,GACH,IAEItC,EAAQ9L,EAAG2L,OAAAG,OAChB8U,EAAA9U,EAAA/B,qBACH,IAAA/J,EAAA0E,MAAA8J,KAJK,aAIJoS,EAAA,CAAA,IAAAgB,EAAAhB,EAAAiB,eAAA7hB,GAvBY4hB,IA2BbtY,EAAAsM,QAAAgM,EAAAE,WAAAhW,EAAAwQ,uBAAAtc,EAAAyN,IAAAC,KAAA,0EACS1N,EAAuBsP,WAAA,GAGvBtP,EAAA0E,MAAA8J,KAZJ,YAYQoT,GAITxT,GAACA,KAGF6B,KACH9H,EAAC8H,kBAAAA,EAZY,IAAAE,EAAA,WAgBb,SAAAA,IAKEnS,KAAAiQ,SAAA,IAHQjQ,KAAAuB,KAAK,kCAIKtC,UAASkR,IAAA,SAAAnO,EAAAoO,GAC1B,IAAA6K,EAAAjZ,EAAAiP,YAAAqM,sBAEMrC,IACDjZ,EAAQ0E,MAAC8J,KAAA,sBAAAyK,GAEb7K,GAACA,KAGD+B,OAGAA,uBAAuBA,QACV,oBACZkD,EAAA0O,GAED/jB,KAAKgkB,SACLhkB,KAAAikB,cAAqB,EACtBjkB,KAAA+jB,SAAAA,WAGa9kB,UAAM6T,KAAS,SAAOxI,GACnC,IAAAA,EAEM,OAAA,KAEL,IAAI0Z,EAAMhkB,KAAOgkB,MACfnR,EAAYvO,KAACK,IAAA6F,KAASkX,MAAK1hB,KAAWikB,cAAC,MAChCpR,UAAWA,EAAGvI,MAAAA,GAMlB,SALDvH,KAAOoF,GAAAnI,KAAA+jB,UACTC,EAACpC,QAEJ5hB,KAAAikB,cAAApR,EAEM1K,EAAA0K,WAEPwC,EAACpW,UAAAkU,IAAA,SAAA+Q,GACH,OAAAlkB,KAAAgkB,MAACvkB,MAAA,EAAAykB,IA3CY7O,EAAApW,UAAAkW,OAAA,SAAetC,GAyD1B,IAAA,IALFmR,EAAAhkB,KAAAgkB,MAKEtjB,EAAA,EAAAA,EAAAsjB,EAAY/gB,OAAQvC,IAFZ,GAAAsjB,EAAAtjB,GAAAmS,YAA0BA,EAIjC,YADMmR,EAAQ9gB,OAAGxC,EAAQ,MAMvBzB,UAAAiV,MAAA,WAEDlU,KAAKgkB,UAGL3O,OAEAA,gBAAkBA,QAEb,oBACH8O,EAAqBJ,QACrBE,cAAK,OACLF,SAAUA,EAwGoB,SAtG7B9kB,UAAA6T,KAAA,SAAAxI,EAAA8Z,GACH,IAAC9Z,EAAC,OAAW,KAEbtK,KAACqkB,cAED,IAAAL,EAAOhkB,KAAUgkB,MAClBnR,EAAAvO,KAAAK,IAAA6F,KAAAkX,MAAA1hB,KAAAikB,cAAA,GAEMllB,EAAAiB,KAAAskB,OAAAzR,GAAP0R,EAAA9O,KAAAC,UAkBCpL,GAjBC,IAEAtK,KAAOwkB,MAAKzlB,EAAMwlB,QACXN,cAACpR,EAEEmR,EAAMjhB,KAAI8P,GAAQ7S,KAAU+jB,UAC9B/jB,KAACykB,OAAAzkB,KAAAskB,OAAAN,EAAApC,mBAIL,OAAC,iBAIA3iB,UAAAkU,IAAA,SAAA+Q,GACH,IAAEjR,EAAAjT,KAEL,YADIqkB,cACJrkB,KAAAgkB,MAAAvkB,MAAA,EAAAykB,GAEM3Q,IAAA,SAAAV,GACD,IAAC9T,EAAAkU,EAAcqR,OAAAzR,GAEb,IACA,IAAQ0R,EAAMtR,EAAOyR,KAAC3lB,GAEpB,OAAM8T,UAAYA,EAAWvI,MADpBmL,KAAAa,MAAAiO,EAAAla,IAGf,MAAM9J,GAET,OADE0S,EAAA0R,WAAA5lB,GACF,QAGMqjB,OAAM,SAAQja,GAAC,OAAS,MAAAA,KAE/Bgc,EAACllB,UAAAkW,OAAA,SAAAtC,GASO7S,KAAAqkB,cACN,IAAIL,EAAMhkB,KAAOgkB,MACfve,EAAKue,EAAQ1c,QAAKuL,MAClBpN,GAAK,EAAA,CACN,IAAA1G,EAAAiB,KAAAskB,OAAAzR,GACF7S,KAAA2kB,WAAA5lB,GAEOilB,EAAA9gB,OAAAuC,EAAA,OAGLxG,UAAAiV,MAAA,WAAC,IAAAjB,EAAYjT,KACdA,KAACgkB,MAAAY,QAAA,SAAAzc,GAAA,OAAA8K,EAAA0R,WAAA1R,EAAAqR,OAAAnc,MACFnI,KAAAgkB,YAED/kB,UAoBColB,YAAA,WAnBMrkB,KAAAgkB,QACHhkB,KAAMgkB,MAAOhkB,KAAK6kB,cAClB7kB,KAAAikB,cAAgB3f,KAACK,IAAG5E,MAAAuE,MAAA,GAAA8Z,OAAApe,KAAAgkB,QAAA,MAGZ/kB,UAAU0lB,WAAG,SAAA5lB,mBAEfA,iBAIFE,UAAK4lB,YAAgB,iBACrB7kB,gBAEMA,KAAA8kB,cACFvR,IAAA,SAAKxU,GACd,IAAa,IAAG8T,EAAAI,EAAA8R,aAAAhmB,GACR,OAAG8T,IACXI,EAAA0R,WAAA5lB,GACF,MAGH,MAAsBwB,GAEJ,OADC0S,EAAA0R,WAAA5lB,GACI,QAEZqjB,OAAC,SAAAvP,GAAA,OAAA,MAAAA,IACN2L,KAAO,SAASwG,EAAO1W,GAAA,OAAA0W,EAAA1W,IAE1B,MAAA/N,GACM,WAK2B4jB,OAeHA,oBAAAA,QAPnB,SAAYc,YAErBpa,EAAAqa,EAAA/L,EAAA4K,QAAY,IAAX5K,IAAWA,EAAA,2BACE,IAAb4K,IAAaA,EAAA,IACf,IAAC9Q,EAAAgS,EAAA9lB,KAAAa,KAAA+jB,IAAA/jB,KASI,OARNiT,EAAAkG,OAAAA,EAAA+L,EAAA,IAQMjS,WAZHpI,EAAYoa,GAchBpa,EAACC,YAAA,WAEM,IACL,IAAOC,EAAOpM,OAAAwmB,aACfC,EAAA,mBAGC,OADKra,EAAAsa,QAAAD,EAAAA,GAAPra,EAAAua,WAGCF,IAFQ,EAER,MAAAllB,GAEM,OAAA,IAIA2K,EAAA5L,UAAAulB,MAAM,SAAbzlB,EAAcuL,GACZ3L,OAAOwmB,aAAWE,QAAGtmB,EAAUuL,IAG1BO,EAAA5L,UAAAylB,KAAA,SAAP3lB,GACE,OAAOJ,OAAAwmB,aAAoBI,QAAKxmB,IAEpC8L,EAAA5L,UAAC6lB,YAAA,WA7CmC,IAAA7R,EAAAjT,KAAvB,OAAAhB,OAAAka,KAAAva,OAAAwmB,cAiDb/C,OAAA,SAAArjB,GAAA,OAAA,IAAAA,EAAAuI,QAAA2L,EAAAkG,WA+CAtO,EAAC5L,UAAAwlB,OAAA,SAAA1lB,GA9CQJ,OAAAwmB,aAAAG,WAAKvmB,MAEFE,UAAoBqlB,OAAO,SAAezR,UAEhD7S,KAAMmZ,OAA0BtG,KAC3B5T,UAAW8lB,aAAA,SAAAhmB,mBACPA,EAAKymB,OAAMxlB,KAAEmZ,OAASlW,QAAA,aAMjC4H,eAAAA,QACiB,oBACfe,cAEW3M,UAAKqX,MAAA,SAAAtU,EAAAxB,YACdilB,EAAYC,gBAGVrR,EAAA,EAASsR,GAFY,iBAARD,GAA2BA,GAAcA,OAElCrR,EAAAsR,EAAA1iB,OAAAoR,IAAA,KACpBuR,EAAAD,EAAatR,KACbtR,MAAQxB,KAAMqkB,WAEjB5f,EAsBP,IAACmG,EAAAnK,EAAAiP,YAAA,0BA/CYjP,EAAAiP,YA+CZ,0BAID3R,EAAA8B,kBAAAZ,EAAA,IAAA,IAAA2L,EA4BC,MAAA,IAAAzC,MAAA,+CA1BG,IAAI5I,EAAqB,iBAAT,EAAgCN,OAAA5B,SAE/CkS,KAAA3E,EAAA5K,KAEKT,QAAOqL,EAAiBrL,SAAAN,EAAAM,SAAAA,EACxBihB,YA9BN,SAAC8D,OAKG,IADEC,KACKzR,EAAC,EAAA0R,EAAYF,EAAwBxR,EAAC0R,EAAA9iB,OAAAoR,IAAA,CAC7C,IAAA2R,EAASD,EAAkB1R,GAE1ByR,EAAU/iB,MACPxB,MAASykB,EAAClmB,MAPZ,eAOYkF,QAAA,IAPZ,eAQL0gB,WAAAD,EAAAO,EAAAvf,MAEYwf,UAAUD,EAAAjlB,IAChBmlB,YAAAF,EAAAvkB,MAAA,EACCC,OAAUskB,EAAKtkB,QAAA,IAGrB,OAAAokB,GAasD3Z,EAAoB9L,uCAKpEuL,QACM,kCAGT3M,UAAA0kB,WAAA,SAAA3hB,gBAAS+B,SAAGoC,qDAIFA,qBAAoB,gBAC1BD,EAAAjD,OAAA,MACJ,IAAAwC,EAAA,EAAAA,EAAAS,EAAAjD,OAAAwC,IACFS,EAAAT,GAAAe,IACFkd,EAAA3gB,MAEcojB,UAAA1gB,EAChBlE,KAAA2E,EAAAT,GAAAe,IACH2P,QAAC7K,EAAA4M,aAAAhS,EAAAT,GAAAe,OAIDN,EAAAT,GAAA2gB,WAAA1C,EAAA3gB,MAwBCojB,UAAA1gB,EAvBQlE,KAAA,aACQ4U,QAAK7K,EAAa+L,YAAYnR,EAAAT,GAAA2gB,WAAAxkB,oBAMzC8hB,iCAIe5X,QAEA,oBACfE,KA6IN,SA1IyB/M,UAAa4kB,eAAiB,SAAC7hB,OAClD+B,WAAYsiB,YAAW7kB,SACxB,OAAA,KAGF,IAAAiW,EAAAzV,EAAA2L,OAAAG,OAAAkT,eACH4C,GAACE,WAAAuC,UAAAxP,UAxBYyP,UAAA,WAAA9kB,SAAA+kB,SA4BbC,KAAAhlB,SAAAilB,SAIEC,KAAAllB,SAAAklB,MAA6B,KAA7BllB,SAA6BklB,KAA2B3P,SAAAvV,SAAAklB,KAAA,IAAA,GAA3B5X,KAAAtN,SAAAmlB,SACvBnP,QAASlM,EAAIsb,WAAA7iB,SAAoB4T,OAAQF,GACzCoP,aAAYvb,EAAIC,iBAAe/J,SAAYslB,OAAUthB,UAAC,GAAAiS,IAU9D,OAPA1T,SAAAgjB,UAAC,KAAAhjB,SAAAgjB,WAAAnD,EAAAmD,SAAAhjB,SAAAgjB,UAODnD,GAgHC5X,OA7GGA,4BAAkCA,QACF,2BACCmN,EAAA/D,QAEN,IAAvBA,IAA6BA,EAAA,KACjCpV,KAAI+N,MAAA,IAAalD,EAAkB,IAAAsO,EAAA/D,GACnCpV,KAAAqL,SAAA,IAAkBR,EAAiC,WAAAsO,EAAA,gCAI9CnO,QAEiB,kCAEP/L,UAAU4W,YAAA,SAAAxS,EAAA+N,EAAA4B,YASrBgU,EAAO9kB,EAAQ+kB,GAkBf,IAAIC,EAAJ,IAGE,MACFpmB,EAACmmB,EAAAE,WAACzjB,EAAWujB,EAAAvjB,eACNujB,EAAAxa,cACH2a,GAAqB,IAAX3a,IACX,iCAAM,UAENvK,IAAAmlB,GAAA5a,GAIL,GAAQA,EAAI,KAASA,EAAa,IAAE,CACrC,IAAA6a,EAAAL,EAAAK,aAED,GAAAA,GAAwCA,EAA6BxmB,QAC5DA,EAAYwmB,EAAiBxmB,aAE9B,GAAK4C,IAAmB,IAADA,EAAC4D,QAAA,WAExB,IACAxG,EAAW2U,KAAQa,MAAC5S,GAAA5C,QAEvB,MAAAZ,GACFY,EAAA4C,SAfC+I,EAAC,SAAApJ,EAAAuT,OAAA,IAAA,OAkBOxF,EAAS3E,GAAS,IAAA3L,GAAa,GAAO4C,EA7ChD,SAAC6jB,GASK,IAAA,IAHNnR,KAGM/B,EAAY,EAAWmT,GADHD,GAAW,IAAAtjB,MAAA,QACSoQ,EAAAmT,EAAAvkB,OAAAoR,IAAA,CAC1C,IAAMoT,EAAsBD,EAAAnT,GAExBqT,EAAgBD,EAAWngB,QAAI,MAC9BogB,EAAG,IACJtR,EAAKqR,EAAAjiB,UAAA,EAAAkiB,GAAA/O,cAXJ3T,QAAA,qCAAA,KAWIyiB,EAAAjiB,UAAAkiB,EAAA,IAEX,OAAMtR,GA6B4E6Q,EAAIU,uBAACV,EAAAU,iCApDrF,YACA,WACS,qBACR,KACF,EA8ED5mB,EAASsC,EAAGtC,MAA4B,IAAtBsC,EAAAtC,IAAAuG,QAAS,KAAc,IAAA,KAAA,gBAAA2O,mBAAA5S,EAAAoI,QACzCwb,WA9BMpQ,EAAAD,EAAA7V,OACNkmB,EAAM,IAAI3jB,eAyBb,OAxBEskB,KAAAX,GAEGA,EAAIzjB,KAAEoT,EAAA7V,GAAA,GACRkmB,EAAIY,iBAAgB,yBAAAhR,GACrB,SAAAD,GAEMqQ,EAAIY,iBAAA,eAAA,qBAIqB,oBAAtBC,gBACJC,GAAG,GACTd,EAAQ,IAAAa,gBACTtkB,KAAAoT,EAAA,UAAApV,SAAA+kB,SAAAxlB,EAAAiE,QAAA,SAAA,SAAAjE,IAKGkmB,EAAI,KAEJA,IAEAA,EAAAe,QAAS,KAEZf,GAIa5jB,EAAMwT,UAAQxT,EAAQuT,QAAO,OAAA7V,GAC3C,IAAIkmB,EAEA,OAAA7V,GAAgBA,EAAA,IAAA,uBAEnBwW,KAAAX,IAAKA,EAAEgB,mBAAA,WACiB,IAAfhB,EAACiB,YAGflB,EAAAK,EAAAJ,KAIAA,EAAAkB,WAAA,aAAqClB,EAAAmB,UAAA,WAAA,OAAmBpB,EAAAI,EAAAH,IAKtDA,EAAA3kB,QAAA,WAAY,OAAmB0kB,EAAiB,QAAwBC,IAAxBA,EAAAoB,OAAA,WAAA,OAAArB,EAAsBK,EAAAJ,IAAEc,EAAxEplB,WACE,WAAA,OAAMskB,EAASxjB,KAAAJ,EAYhBmN,OAAA,KAREyW,EAAAxjB,KAAAJ,EAAAmN,OAIDtE,OAGAA,yBAAyBA,oBAGpB,SAAAoc,EAAApD,EAAPqD,EAAapP,EAAa4K,EAAayE,QAC7B,IAAJrP,IAAqBA,EAAS,YACnC,IAAA4K,IAAAA,EAAA,IAEM,IAAA9Q,EAAAgS,EAAA9lB,KAAAa,KAAP+jB,IAAuB/jB,KACrBuoB,IACDA,EAAAxZ,EAAAxJ,KAAAwJ,EAAA0Z,QAAA9Z,EAAA+Z,KAAAC,UAAA,mBAED,IAAAC,EAAA7Z,EAICxJ,KAAAgjB,EAAArD,GAEM,OALLjS,EAAM4V,UAAS9Z,EAAA+Z,QAAgBF,KAC5BzP,OAAOA,IACPqP,GAAIA,GAACO,EACT9V,EAAA+V,MAAA/V,EAAA4V,WAEM5V,SAhBPjF,EAACsa,EAAArD,GAkBDqD,EAACrpB,UAAAulB,MAAA,SAAAzlB,EAAAuL,GAEMtK,KAAAwoB,GAAAS,cAAAlqB,EAAAuL,IAEPge,EAACrpB,UAAAylB,KAAA,SAAA3lB,GAEM,OAAAiB,KAAAwoB,GAAAU,aAAAnqB,EAAA,WAEKE,UAAK6lB,YAAmB,WACnC,IAAA7R,EAAAjT,KAEO,OAAAA,KAAAwoB,GAAAW,YAAKnpB,KAAb6oB,WACQzG,OAAO,SAAWgH,GAAQ,OAAE,IAAAA,EAAA9hB,QAAA2L,EAAAkG,UAC9B5F,IAAI,SAAM6V,GAAA,OAAAra,EAAAxJ,KAAA0N,EAAA4V,UAAAO,QAGHnqB,UAAQwlB,OAAQ,SAAA1lB,QACzBypB,GAAIa,WAAWtqB,MAEdE,UAAAqlB,OAAA,SAAAzR,UACE9D,EAAExJ,KAAQvF,KAAA6oB,UAAe,GAAM7oB,KAAImZ,OAAAtG,EAAA,YAErC5T,UAAA8lB,aAAA,SAAAhmB,UACDgY,SAAWhI,EAAGua,SAASvqB,EAAA,SACxBymB,OAAAxlB,KAAAmZ,OAAAlW,QAAA,KAELqlB,EAAArpB,UAAC+pB,MAAA,SAAAla,GAID,IAlEqC,IAAAya,EAAAza,EA8DpC7K,MAAA8K,EAAAya,KA9DYC,EAAA,GAkEbF,EAAAtmB,OAAA,GAAA,CAAA,IAAAymB,EAAAH,EAAA3H,QAkDC,KAAA8H,IAjDQD,EAAA1a,EAAAya,KAEGxpB,KAAgBwoB,GAAGmB,WAAAF,EAAAC,IACnB1pB,KAAAwoB,GAAAoB,UAAgBH,EAAAC,MAEpBA,EAAU3a,EAAKya,8BAKdlB,SAEmB,oBACvBpb,cAGajO,UAAA6jB,mBAAA,SAAA9gB,OAeZ4M,EACA,OAAA,SAGAiU,mBACcjU,EAAAib,OAAS5mB,6BACR2L,EAAQkb,qCACFlb,EAAAmb,uBACThd,QAAOid,KAAEzkB,KAAA,mBACpBwH,QAAAyT,OAAA,IAAAxb,QAAA,mBAAA,IACDilB,WAAAld,QAAAmd,IAAA,GAEGC,oBAAwBpd,QAAAqd,cAAAC,UAC3BC,aAAA1b,EAAgB2b,OACjBC,SAAA5b,EAAAkC,OAED2Z,YAAO7b,EAAA8b,UACRC,WA/BC,WAEM,IAAAC,KACJC,EAAiBjc,EAAGkc,oBASpB,OARA9rB,OAAAka,KAAA2R,GAAuBjG,QAAG,SAAUrjB,GACpCspB,EAAAtpB,GAAAqjB,QAA6B,SAAUmG,GAC3B,SAAUA,EAAKC,QAASD,EAAAE,UACxBL,EAAG7nB,KAAAgoB,EAAQG,aAKvBN,EAAUrlB,KAAG,SAoBnB4lB,aAAAvc,EAAA6X,WAAC2E,gBAAAre,QAAAoJ,QAlDY3F,MAsDb6a,QAAAzc,EAAAyc,UAAAC,SAAA1c,EAAA0c,WAiCCC,OAAA3c,EAAA2c,SAhCQC,OAAA5c,EAAA4c,kBAIH5c,EAAG6c,eAAajb,KAAAib,WAAA7c,EAAA6c,qDAOIve,UAChB,kCAGCjO,UAAAqX,MAAA,SAAAtU,EAAAxB,GAqBX,IAAAkrB,EAEU,MAAA,IAAAhiB,MAAuB,2CAkEhC,IAAAmc,EAAA6F,EAAApV,MAAA9V,OA/DQ,OAAPsQ,KAAAtQ,EAsBCe,KArBKT,QAACN,EAAaM,QAEdihB,qBA5BD8D,GAGF,IAAA,IADCC,KACDzR,EAAA,EAAAsX,EAAA9F,EAAAxR,EAAAsX,EAAA1oB,OAAAoR,IAAA,CAEI,IAAA2R,EAAe2F,EAAEtX,GACpByR,EAAU/iB,MACXxB,KAAAykB,EAAA4F,iBAAA5F,EAAA6F,kBAEK5F,UAAcD,EAAA8F,cACb5F,YAAAF,EAAA+F,iBAAA,EACCrqB,OAAUskB,EAAIgG,mBAAA,EACbC,eAAYjG,EAAOkG,cAC1B1b,MACA2b,UAAAnG,EAAA3e,cAAA2e,EAAA2C,UAAA,MAAA3C,EAAA2C,SAAA,IAAA,MAAA3C,EAAA2C,SAAA,MA/BO,OAAA7C,GA6CWD,KAIpB1Y,OAGAA,gBAAmBA,UACA,oBAEnBC,SACEgf,aAAa,OACbC,6BAECptB,UAAA0kB,WAAA,SAAA3hB,GAEH,IAAAiR,EAAOjT,aACJssB,cACA3d,EAAO+Z,KACX,SAED,IACM6D,GAqCLzd,EAAA2Z,QAAA9Z,EAAA+Z,KAAAC,UAAA,kBArCwB1lB,OAEtBupB,KAUD,OAXSxtB,OAAAka,KAAAvK,EAAA8K,OAGJmL,QAAc,SAAK7lB,GAElB,IAAAghB,EAAShhB,EAAAymB,OAAM+G,GAEjBxM,EAACA,EAAOyF,OAAE,EAAAzF,EAAAzY,QAAA,MACZklB,EAAOzM,IAAA,IAGL/gB,OAAKka,KAAAsT,GACJjZ,IAAA,SAAAxU,GAAA,OAAAkU,EAAAoZ,iBAAAttB,KACHqjB,OAAO,SAAWle,GAAA,YAAkBtF,IAAXsF,OACdjF,UAAAqtB,WAAA,eACXrZ,EAAOjT,KACT,IAACA,KAAAosB,YAAD,MAIEA,aAAO,EACT,IAACK,EAAA5d,EAAA6d,UAAA,OAAA,KAAA,YAAA,WAAAC,OAED,GAAIF,EAAJ,KAIElI,QAEE9O,KAAAa,MAAamW,EAAE7qB,4BAMnB,IAAGoiB,EAAAO,EAAAqI,aACJ,GAAA5I,EAAA,CAnEU,IAAAjE,EAAA,EAwEb/f,KAAAqsB,oBAAArtB,OAAAka,KAAA8K,GAAAY,QAAA,SAAA7lB,GA+BC,IAAAoJ,EAAA6b,EAAAjlB,GA9BQ8tB,GACC1G,UAAsBpG,IACvBxe,KAAQxC,EACXoX,QAAYhO,EAAAgO,SAGRlD,EAAAoZ,iBAAqBttB,GAAO8tB,mCAOdzf,UACE,oBACpBC,KA8FN,SA5FsBpO,UAAW4kB,eAAW,SAAgB7hB,OAEtDA,EAAAiP,YADc,YAEd,OAAA,KAGF,IAAMwG,EAAmBzV,EAAI2L,OAAaG,OAAOkT,eAC7C3d,EAAUrB,EAACiP,YANC,YAOd2S,GACDkJ,kBAAAzpB,EAAA0pB,GAEDjJ,WAAOzgB,EAAY+S,QAAA,cACpBkQ,UAAAjjB,EAAA2pB,OACHC,YAAA5pB,EAAAuT,OAAC4P,KAAAnjB,EAAAojB,UAAApjB,EAAAmjB,KA/BY1X,KAAAzL,EAAAyL,KAmCboe,UAAAzX,KAAAa,MAAAhL,EAAAoK,UAAArS,EAAA6B,SAAAuS,IAIED,QAAAlM,EAAAsb,WAAYvjB,EAAiB+S,QAAiBuB,OAAAF,GAAAoP,aAAApR,KAAAa,MAAAhL,EAAAoK,UAAArS,EAA2B8pB,WAAA1V,KAEnE+O,EAACnjB,EAAW+S,QAAIoQ,KACrBE,EAAAF,GAAAzP,SAAAyP,EAAA/mB,MAAA+mB,EAAAlf,QAAA,KAAA,GAAA,IAKH,OAJAof,EAAA,IAAC9C,EAAA8C,KAAAA,GAID9C,GA+DCvW,OA9DCA,yBAoCCA,UAnCoB,2BACIkb,EAASpP,EAAU/D,QACjC,IAAPA,IAAOA,EAAA,KACTpV,KAAC+N,MAAA,IAAAua,EAAA,IAAAC,EAAApP,EAAA/D,GAEDpV,KAAMqL,SAAU,IAAMid,EAAe,WAAKC,EAAApP,EAAA,iCAKnB5L,UACL,oBAChBD,cAEArO,UAAA4W,YAAA,SAAAxS,EAAA+N,EAAA4B,GAEF,IAAAC,EAAQjT,KAER,GAAIgT,EACFhT,KAAAotB,gBAAkB/pB,EAAA+N,OADpB,OAIIrQ,EAAAuV,MAAAjT,EAAAtC,KACHqL,GAEKihB,KAAA,UAAiBhqB,EAAWoI,OAC5B2K,WACJqQ,SAAQ6G,EAAM7G,SACd7P,OAAQvT,EAACuT,OACT8P,KAAA4G,EAAY5G,MAAQ3P,SAACuW,EAAU5G,KAAI,IACnC5X,KAAAzL,EAAYtC,KAGdqL,EAAAgK,QAAgB,cAAU/S,EAACwT,UACT,SAAlBxT,EAAAuT,SACDxK,EAAAgK,SAEOmX,eAAA,mBACFC,iBAAgBC,OAAAC,WAAArqB,EAAAmN,QAGpB,IAAMmd,GAAL,UAAAL,EAAA/G,SAAAqH,EAAA5e,GAA6B3L,QAAM+I,EAAY,SAACoH,GAC/C,IAAAtO,EAAU,GACXsO,EAAAqa,YAAA,QAEDra,EAAY9F,GAAA,OAAS,SAASogB,GAAU,OAAS5oB,GAAS4oB,IAC3Dta,EAAA9F,GAAA,MAAA,WAAA,OAAAuF,EAAA+T,SAAAxT,EAAAtO,EAAAsO,EAAA4C,QAAAhF,OAGCuc,EAAMjgB,GAAW,QAAQ,SAAUnN,GAAS,OAAA6Q,GAAAA,EAAA,IAAA7Q,EAAAO,WAC5C6sB,EAAY/oB,IAAMvB,EAAUmN,UAGVvR,UAAU+nB,SAAQ,SAAOxT,EAAA8T,EAAAyG,EAAA3c,OACtCtQ,EAEkB,IAAjB0S,EAASgH,WACT1Z,EAAS,gCAGhB0S,EAAAgH,WAAA,KAAAhH,EAAAgH,WAAA,OACH1Z,EAAA0S,EAAAwa,eAACxa,EAAA1S,SA/DYsQ,GAAAA,EAAAoC,EAAAgH,YAAA,IAAqB1Z,EAAAwmB,EAAAyG,IAoEhCzgB,EAAsBrO,UAAKmuB,gBAAY,SAAA/pB,EAAA+N,GACxC,IAAA6c,EAAAxY,KAAAC,UAAArS,GAKK6qB,EAPNrf,EAAA6d,UAEC3f,QAAAohB,UAAAxf,EAAAma,QAAA,qBAED3f,MAAA8kB,EACEG,OAAA,OAAA,OAAArhB,QAAAshB,UAEW1B,OAAK/qB,WACboE,EAAAyP,KAAAa,MAAA4X,GAED9c,GAAaA,EAAGpL,EAASyG,OAAAzG,EAAoBlF,QAASkF,EAAEwK,KAAAxK,EAAAoQ,8CAKrD9I,KAKL7C,UAAAA,IA4EAC,YAASA,EAETD,WAOEqC,OAAAA,EAiFJ3C,EAAC6C,SAAAA","file":"exceptionless.universal.min.js","sourcesContent":["/**\n * https://github.com/csnover/TraceKit\n * @license MIT\n * @namespace TraceKit\n */\n(function(window, undefined) {\nif (!window) {\n    return;\n}\n\nvar TraceKit = {};\nvar _oldTraceKit = window.TraceKit;\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\nvar ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/;\n\n/**\n * A better form of hasOwnProperty<br/>\n * Example: `_has(MainHostObject, property) === true/false`\n *\n * @param {Object} object to check property\n * @param {string} key to check\n * @return {Boolean} true if the object has the key and it is not inherited\n */\nfunction _has(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\n\n/**\n * Returns true if the parameter is undefined<br/>\n * Example: `_isUndefined(val) === true/false`\n *\n * @param {*} what Value to check\n * @return {Boolean} true if undefined and false otherwise\n */\nfunction _isUndefined(what) {\n    return typeof what === 'undefined';\n}\n\n/**\n * Export TraceKit out to another variable<br/>\n * Example: `var TK = TraceKit.noConflict()`\n * @return {Object} The TraceKit object\n * @memberof TraceKit\n */\nTraceKit.noConflict = function noConflict() {\n    window.TraceKit = _oldTraceKit;\n    return TraceKit;\n};\n\n/**\n * Wrap any function in a TraceKit reporter<br/>\n * Example: `func = TraceKit.wrap(func);`\n *\n * @param {Function} func Function to be wrapped\n * @return {Function} The wrapped func\n * @memberof TraceKit\n */\nTraceKit.wrap = function traceKitWrapper(func) {\n    function wrapped() {\n        try {\n            return func.apply(this, arguments);\n        } catch (e) {\n            TraceKit.report(e);\n            throw e;\n        }\n    }\n    return wrapped;\n};\n\n/**\n * Cross-browser processing of unhandled exceptions\n *\n * Syntax:\n * ```js\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n * ```\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *     on top frame; column number is not guaranteed\n *   - Opera: full stack trace with line and column numbers\n *   - Chrome: full stack trace with line and column numbers\n *   - Safari: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *   - IE: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a TraceKit.StackTrace object as described in the\n * TraceKit.computeStackTrace docs.\n *\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.report = (function reportModuleWrapper() {\n    var handlers = [],\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n\n        if (handlers.length === 0) {\n            window.onerror = _oldOnerrorHandler;\n            _onErrorHandlerInstalled = false;\n        }\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {TraceKit.StackTrace} stack\n     * @param {boolean} isWindowError Is this a top-level window error?\n     * @param {Error=} error The error that's being handled (if available, null otherwise)\n     * @memberof TraceKit.report\n     * @throws An exception if an error occurs while calling an handler.\n     */\n    function notifyHandlers(stack, isWindowError, error) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n          return;\n        }\n        for (var i in handlers) {\n            if (_has(handlers, i)) {\n                try {\n                    handlers[i](stack, isWindowError, error);\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error occurred.\n     * @param {(number|string)=} columnNo The column number at which the error occurred.\n     * @param {Error=} errorObj The actual Error object.\n     * @memberof TraceKit.report\n     */\n    function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {\n        var stack = null;\n\n        if (lastExceptionStack) {\n            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n    \t    processLastException();\n        } else if (errorObj) {\n            stack = TraceKit.computeStackTrace(errorObj);\n            notifyHandlers(stack, true, errorObj);\n        } else {\n            var location = {\n              'url': url,\n              'line': lineNo,\n              'column': columnNo\n            };\n\n            var name;\n            var msg = message; // must be new var or will modify original `arguments`\n            if ({}.toString.call(message) === '[object String]') {\n                var groups = message.match(ERROR_TYPES_RE);\n                if (groups) {\n                    name = groups[1];\n                    msg = groups[2];\n                }\n            }\n\n            location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);\n            location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);\n            stack = {\n                'name': name,\n                'message': msg,\n                'mode': 'onerror',\n                'stack': [location]\n            };\n\n            notifyHandlers(stack, true, null);\n        }\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    /**\n     * Install a global onerror handler\n     * @memberof TraceKit.report\n     */\n    function installGlobalHandler() {\n        if (_onErrorHandlerInstalled === true) {\n            return;\n        }\n\n        _oldOnerrorHandler = window.onerror;\n        window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    /**\n     * Process the most recent exception\n     * @memberof TraceKit.report\n     */\n    function processLastException() {\n        var _lastExceptionStack = lastExceptionStack,\n            _lastException = lastException;\n        lastExceptionStack = null;\n        lastException = null;\n        notifyHandlers(_lastExceptionStack, false, _lastException);\n    }\n\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     * @memberof TraceKit.report\n     * @throws An exception if an incomplete stack trace is detected (old IE browsers).\n     */\n    function report(ex) {\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n              processLastException();\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        setTimeout(function () {\n            if (lastException === ex) {\n                processLastException();\n            }\n        }, (stack.incomplete ? 2000 : 0));\n\n        throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    return report;\n}());\n\n/**\n * An object representing a single stack frame.\n * @typedef {Object} StackFrame\n * @property {string} url The JavaScript or HTML file URL.\n * @property {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * @property {string[]?} args The arguments passed to the function, if known.\n * @property {number=} line The line number, if known.\n * @property {number=} column The column number, if known.\n * @property {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n * @memberof TraceKit\n */\n\n/**\n * An object representing a JavaScript stack trace.\n * @typedef {Object} StackTrace\n * @property {string} name The name of the thrown exception.\n * @property {string} message The exception error message.\n * @property {TraceKit.StackFrame[]} stack An array of stack frames.\n * @property {string} mode 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace.\n * @memberof TraceKit\n */\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   ```js\n *   s = TraceKit.computeStackTrace.ofCaller([depth])\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n *   ```\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n * Tracing example:\n *  ```js\n *     function trace(message) {\n *         var stackInfo = TraceKit.computeStackTrace.ofCaller();\n *         var data = message + \"\\n\";\n *         for(var i in stackInfo.stack) {\n *             var item = stackInfo.stack[i];\n *             data += (item.func || '[anonymous]') + \"() in \" + item.url + \":\" + (item.line || '0') + \"\\n\";\n *         }\n *         if (window.console)\n *             console.info(data);\n *         else\n *             alert(data);\n *     }\n * ```\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n    var debug = false,\n        sourceCache = {};\n\n    /**\n     * Attempts to retrieve source code via XMLHttpRequest, which is used\n     * to look up anonymous function names.\n     * @param {string} url URL of source code.\n     * @return {string} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function loadSource(url) {\n        if (!TraceKit.remoteFetching) { //Only attempt request if remoteFetching is on.\n            return '';\n        }\n        try {\n            var getXHR = function() {\n                try {\n                    return new window.XMLHttpRequest();\n                } catch (e) {\n                    // explicitly bubble up the exception if not found\n                    return new window.ActiveXObject('Microsoft.XMLHTTP');\n                }\n            };\n\n            var request = getXHR();\n            request.open('GET', url, false);\n            request.send('');\n            return request.responseText;\n        } catch (e) {\n            return '';\n        }\n    }\n\n    /**\n     * Retrieves source code from the source code cache.\n     * @param {string} url URL of source code.\n     * @return {Array.<string>} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function getSource(url) {\n        if (typeof url !== 'string') {\n            return [];\n        }\n\n        if (!_has(sourceCache, url)) {\n            // URL needs to be able to fetched within the acceptable domain.  Otherwise,\n            // cross-domain errors will be triggered.\n            /*\n                Regex matches:\n                0 - Full Url\n                1 - Protocol\n                2 - Domain\n                3 - Port (Useful for internal applications)\n                4 - Path\n            */\n            var source = '';\n            var domain = '';\n            try { domain = window.document.domain; } catch (e) { }\n            var match = /(.*)\\:\\/\\/([^:\\/]+)([:\\d]*)\\/{0,1}([\\s\\S]*)/.exec(url);\n            if (match && match[2] === domain) {\n                source = loadSource(url);\n            }\n            sourceCache[url] = source ? source.split('\\n') : [];\n        }\n\n        return sourceCache[url];\n    }\n\n    /**\n     * Tries to use an externally loaded copy of source code to determine\n     * the name of a function by looking at the name of the variable it was\n     * assigned to, if any.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} lineNo Line number in source code.\n     * @return {string} The function name, if discoverable.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function guessFunctionName(url, lineNo) {\n        var reFunctionArgNames = /function ([^(]*)\\(([^)]*)\\)/,\n            reGuessFunction = /['\"]?([0-9A-Za-z$_]+)['\"]?\\s*[:=]\\s*(function|eval|new Function)/,\n            line = '',\n            maxLines = 10,\n            source = getSource(url),\n            m;\n\n        if (!source.length) {\n            return UNKNOWN_FUNCTION;\n        }\n\n        // Walk backwards from the first line in the function until we find the line which\n        // matches the pattern above, which is the function definition\n        for (var i = 0; i < maxLines; ++i) {\n            line = source[lineNo - i] + line;\n\n            if (!_isUndefined(line)) {\n                if ((m = reGuessFunction.exec(line))) {\n                    return m[1];\n                } else if ((m = reFunctionArgNames.exec(line))) {\n                    return m[1];\n                }\n            }\n        }\n\n        return UNKNOWN_FUNCTION;\n    }\n\n    /**\n     * Retrieves the surrounding lines from where an exception occurred.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} line Line number in source code to center around for context.\n     * @return {?Array.<string>} Lines of source code.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function gatherContext(url, line) {\n        var source = getSource(url);\n\n        if (!source.length) {\n            return null;\n        }\n\n        var context = [],\n            // linesBefore & linesAfter are inclusive with the offending line.\n            // if linesOfContext is even, there will be one extra line\n            //   *before* the offending line.\n            linesBefore = Math.floor(TraceKit.linesOfContext / 2),\n            // Add one extra line if linesOfContext is odd\n            linesAfter = linesBefore + (TraceKit.linesOfContext % 2),\n            start = Math.max(0, line - linesBefore - 1),\n            end = Math.min(source.length, line + linesAfter - 1);\n\n        line -= 1; // convert to 0-based index\n\n        for (var i = start; i < end; ++i) {\n            if (!_isUndefined(source[i])) {\n                context.push(source[i]);\n            }\n        }\n\n        return context.length > 0 ? context : null;\n    }\n\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    /**\n     * Determines where a code fragment occurs in the source code.\n     * @param {RegExp} re The function definition.\n     * @param {Array.<string>} urls A list of URLs to search.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInUrls(re, urls) {\n        var source, m;\n        for (var i = 0, j = urls.length; i < j; ++i) {\n            if ((source = getSource(urls[i])).length) {\n                source = source.join('\\n');\n                if ((m = re.exec(source))) {\n\n                    return {\n                        'url': urls[i],\n                        'line': source.substring(0, m.index).split('\\n').length,\n                        'column': m.index - source.lastIndexOf('\\n', m.index) - 1\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines at which column a code fragment occurs on a line of the\n     * source code.\n     * @param {string} fragment The code fragment.\n     * @param {string} url The URL to search.\n     * @param {(string|number)} line The line number to examine.\n     * @return {?number} The column number.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInLine(fragment, url, line) {\n        var source = getSource(url),\n            re = new RegExp('\\\\b' + escapeRegExp(fragment) + '\\\\b'),\n            m;\n\n        line -= 1;\n\n        if (source && source.length > line && (m = re.exec(source[line]))) {\n            return m.index;\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines where a function was defined within the source code.\n     * @param {(Function|string)} func A function reference or serialized\n     * function definition.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceByFunctionBody(func) {\n        if (_isUndefined(window && window.document)) {\n            return;\n        }\n\n        var urls = [window.location.href],\n            scripts = window.document.getElementsByTagName('script'),\n            body,\n            code = '' + func,\n            codeRE = /^function(?:\\s+([\\w$]+))?\\s*\\(([\\w\\s,]*)\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            eventRE = /^function on([\\w$]+)\\s*\\(event\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            re,\n            parts,\n            result;\n\n        for (var i = 0; i < scripts.length; ++i) {\n            var script = scripts[i];\n            if (script.src) {\n                urls.push(script.src);\n            }\n        }\n\n        if (!(parts = codeRE.exec(code))) {\n            re = new RegExp(escapeRegExp(code).replace(/\\s+/g, '\\\\s+'));\n        }\n\n        // not sure if this is really necessary, but I don’t have a test\n        // corpus large enough to confirm that and it was in the original.\n        else {\n            var name = parts[1] ? '\\\\s+' + parts[1] : '',\n                args = parts[2].split(',').join('\\\\s*,\\\\s*');\n\n            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\\s+/g, '\\\\s+');\n            re = new RegExp('function' + name + '\\\\s*\\\\(\\\\s*' + args + '\\\\s*\\\\)\\\\s*{\\\\s*' + body + '\\\\s*}');\n        }\n\n        // look for a normal function definition\n        if ((result = findSourceInUrls(re, urls))) {\n            return result;\n        }\n\n        // look for an old-school event handler function\n        if ((parts = eventRE.exec(code))) {\n            var event = parts[1];\n            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);\n\n            // look for a function defined in HTML as an onXXX handler\n            re = new RegExp('on' + event + '=[\\\\\\'\"]\\\\s*' + body + '\\\\s*[\\\\\\'\"]', 'i');\n\n            if ((result = findSourceInUrls(re, urls[0]))) {\n                return result;\n            }\n\n            // look for ???\n            re = new RegExp(body);\n\n            if ((result = findSourceInUrls(re, urls))) {\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (!ex.stack) {\n            return null;\n        }\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\\[native).*?|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n\n            // Used to additionally parse URL/line/column from eval frames\n            isEval,\n            geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i,\n            chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/,\n\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            submatch,\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if ((parts = chrome.exec(lines[i]))) {\n                var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n                isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n                if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n                    // throw out eval line/column and use top-most line/column number\n                    parts[2] = submatch[1]; // url\n                    parts[3] = submatch[2]; // line\n                    parts[4] = submatch[3]; // column\n                }\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ( parts = winjs.exec(lines[i]) ) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = gecko.exec(lines[i]))) {\n                isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n                if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n                    // throw out eval line/column and use top-most line number\n                    parts[3] = submatch[1];\n                    parts[4] = submatch[2];\n                    parts[5] = null; // no column when eval\n                } else if (i === 0 && !parts[5] && !_isUndefined(ex.columnNumber)) {\n                    // FireFox uses this awesome columnNumber property for its top frame\n                    // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n                    // so adding 1\n                    // NOTE: this hack doesn't work if top-most frame is eval\n                    stack[0].column = ex.columnNumber + 1;\n                }\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = guessFunctionName(element.url, element.line);\n            }\n\n            element.context = element.line ? gatherContext(element.url, element.line) : null;\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        if (stack[0] && stack[0].line && !stack[0].column && reference) {\n            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);\n        }\n\n        return {\n            'mode': 'stack',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * Computes stack trace information from the stacktrace property.\n     * Opera 10+ uses this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStacktraceProp(ex) {\n        // Access and store the stacktrace property before doing ANYTHING\n        // else to it because Opera is not very good at providing it\n        // reliably in other circumstances.\n        var stacktrace = ex.stacktrace;\n        if (!stacktrace) {\n            return;\n        }\n\n        var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i,\n            opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i,\n            lines = stacktrace.split('\\n'),\n            stack = [],\n            parts;\n\n        for (var line = 0; line < lines.length; line += 2) {\n            var element = null;\n            if ((parts = opera10Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[2],\n                    'line': +parts[1],\n                    'column': null,\n                    'func': parts[3],\n                    'args':[]\n                };\n            } else if ((parts = opera11Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[6],\n                    'line': +parts[1],\n                    'column': +parts[2],\n                    'func': parts[3] || parts[4],\n                    'args': parts[5] ? parts[5].split(',') : []\n                };\n            }\n\n            if (element) {\n                if (!element.func && element.line) {\n                    element.func = guessFunctionName(element.url, element.line);\n                }\n                if (element.line) {\n                    try {\n                        element.context = gatherContext(element.url, element.line);\n                    } catch (exc) {}\n                }\n\n                if (!element.context) {\n                    element.context = [lines[line + 1]];\n                }\n\n                stack.push(element);\n            }\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        return {\n            'mode': 'stacktrace',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * NOT TESTED.\n     * Computes stack trace information from an error message that includes\n     * the stack trace.\n     * Opera 9 and earlier use this method if the option to show stack\n     * traces is turned on in opera:config.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromOperaMultiLineMessage(ex) {\n        // TODO: Clean this function up\n        // Opera includes a stack trace into the exception message. An example is:\n        //\n        // Statement on line 3: Undefined variable: undefinedFunc\n        // Backtrace:\n        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz\n        //         undefinedFunc(a);\n        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy\n        //           zzz(x, y, z);\n        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx\n        //           yyy(a, a, a);\n        //   Line 1 of function script\n        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }\n        //   ...\n\n        var lines = ex.message.split('\\n');\n        if (lines.length < 4) {\n            return null;\n        }\n\n        var lineRE1 = /^\\s*Line (\\d+) of linked script ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE2 = /^\\s*Line (\\d+) of inline#(\\d+) script in ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE3 = /^\\s*Line (\\d+) of function script\\s*$/i,\n            stack = [],\n            scripts = (window && window.document && window.document.getElementsByTagName('script')),\n            inlineScriptBlocks = [],\n            parts;\n\n        for (var s in scripts) {\n            if (_has(scripts, s) && !scripts[s].src) {\n                inlineScriptBlocks.push(scripts[s]);\n            }\n        }\n\n        for (var line = 2; line < lines.length; line += 2) {\n            var item = null;\n            if ((parts = lineRE1.exec(lines[line]))) {\n                item = {\n                    'url': parts[2],\n                    'func': parts[3],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null\n                };\n            } else if ((parts = lineRE2.exec(lines[line]))) {\n                item = {\n                    'url': parts[3],\n                    'func': parts[4],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.\n                };\n                var relativeLine = (+parts[1]); // relative to the start of the <SCRIPT> block\n                var script = inlineScriptBlocks[parts[2] - 1];\n                if (script) {\n                    var source = getSource(item.url);\n                    if (source) {\n                        source = source.join('\\n');\n                        var pos = source.indexOf(script.innerText);\n                        if (pos >= 0) {\n                            item.line = relativeLine + source.substring(0, pos).split('\\n').length;\n                        }\n                    }\n                }\n            } else if ((parts = lineRE3.exec(lines[line]))) {\n                var url = window.location.href.replace(/#.*$/, '');\n                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));\n                var src = findSourceInUrls(re, [url]);\n                item = {\n                    'url': url,\n                    'func': '',\n                    'args': [],\n                    'line': src ? src.line : parts[1],\n                    'column': null\n                };\n            }\n\n            if (item) {\n                if (!item.func) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n                var context = gatherContext(item.url, item.line);\n                var midline = (context ? context[Math.floor(context.length / 2)] : null);\n                if (context && midline.replace(/^\\s*/, '') === lines[line + 1].replace(/^\\s*/, '')) {\n                    item.context = context;\n                } else {\n                    // if (context) alert(\"Context mismatch. Correct midline:\\n\" + lines[i+1] + \"\\n\\nMidline:\\n\" + midline + \"\\n\\nContext:\\n\" + context.join(\"\\n\") + \"\\n\\nURL:\\n\" + item.url);\n                    item.context = [lines[line + 1]];\n                }\n                stack.push(item);\n            }\n        }\n        if (!stack.length) {\n            return null; // could not parse multiline exception message as Opera stack trace\n        }\n\n        return {\n            'mode': 'multiline',\n            'name': ex.name,\n            'message': lines[0],\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {TraceKit.StackTrace} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = guessFunctionName(initial.url, initial.line);\n            }\n\n            if (!initial.context) {\n                initial.context = gatherContext(initial.url, initial.line);\n            }\n\n            var reference = / '([^']+)' /.exec(message);\n            if (reference) {\n                initial.column = findSourceInLine(reference[1], initial.url, initial.line);\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        stackInfo.stack[0].context = initial.context;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {TraceKit.StackTrace=} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'args': [],\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if ((parts = functionName.exec(curr.toString()))) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n              try {\n                item.func = parts.input.substring(0, parts.input.indexOf('{'));\n              } catch (e) { }\n            }\n\n            if ((source = findSourceByFunctionBody(curr))) {\n                item.url = source.url;\n                item.line = source.line;\n\n                if (item.func === UNKNOWN_FUNCTION) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n\n                var reference = / '([^']+)' /.exec(ex.message || ex.description);\n                if (reference) {\n                    item.column = findSourceInLine(reference[1], source.url, source.line);\n                }\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            }else{\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'mode': 'callers',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = (depth == null ? 0 : +depth);\n\n        try {\n            // This must be tried first because Opera 10 *destroys*\n            // its stacktrace property if you try to access the stack\n            // property first!!\n            stack = computeStackTraceFromStacktraceProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromOperaMultiLineMessage(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        return {\n            'name': ex.name,\n            'message': ex.message,\n            'mode': 'failed'\n        };\n    }\n\n    /**\n     * Logs a stacktrace starting from the previous call and working down.\n     * @param {(number|string)=} depth How many frames deep to trace.\n     * @return {TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceOfCaller(depth) {\n        depth = (depth == null ? 0 : +depth) + 1; // \"+ 1\" because \"ofCaller\" should drop one frame\n        try {\n            throw new Error();\n        } catch (ex) {\n            return computeStackTrace(ex, depth + 1);\n        }\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.computeStackTraceFromStackProp = computeStackTraceFromStackProp;\n    computeStackTrace.guessFunctionName = guessFunctionName;\n    computeStackTrace.gatherContext = gatherContext;\n    computeStackTrace.ofCaller = computeStackTraceOfCaller;\n    computeStackTrace.getSource = getSource;\n\n    return computeStackTrace;\n}());\n\n/**\n * Extends support for global error handling for asynchronous browser\n * functions. Adopted from Closure Library's errorhandler.js\n * @memberof TraceKit\n */\nTraceKit.extendToAsynchronousCallbacks = function () {\n    var _helper = function _helper(fnName) {\n        var originalFn = window[fnName];\n        window[fnName] = function traceKitAsyncExtension() {\n            // Make a copy of the arguments\n            var args = _slice.call(arguments);\n            var originalCallback = args[0];\n            if (typeof (originalCallback) === 'function') {\n                args[0] = TraceKit.wrap(originalCallback);\n            }\n            // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n            // also only supports 2 argument and doesn't care what \"this\" is, so we\n            // can just call the original function directly.\n            if (originalFn.apply) {\n                return originalFn.apply(this, args);\n            } else {\n                return originalFn(args[0], args[1]);\n            }\n        };\n    };\n\n    _helper('setTimeout');\n    _helper('setInterval');\n};\n\n//Default options:\nif (!TraceKit.remoteFetching) {\n    TraceKit.remoteFetching = true;\n}\nif (!TraceKit.collectWindowErrors) {\n    TraceKit.collectWindowErrors = true;\n}\nif (!TraceKit.linesOfContext || TraceKit.linesOfContext < 1) {\n    // 5 lines before, the offending line, 5 lines after\n    TraceKit.linesOfContext = 11;\n}\n\n// UMD export\nif (typeof define === 'function' && define.amd) {\n    define('TraceKit', [], TraceKit);\n} else if (typeof module !== 'undefined' && module.exports && window.module !== module) {\n    module.exports = TraceKit;\n} else {\n    window.TraceKit = TraceKit;\n}\n\n}(typeof window !== 'undefined' ? window : global));\n","import * as TraceKit from 'TraceKit';\nimport os = require('os');\nimport nodestacktrace = require('stack-trace');\nimport child = require('child_process');\nimport path = require('path');\nimport * as Fs from 'fs';\nimport * as Path from 'path';\nimport http = require('http');\nimport https = require('https');\nimport url = require('url');\nexport interface ILastReferenceIdManager {\n  getLast(): string;\n  clearLast(): void;\n  setLast(eventId: string): void;\n}\n\nexport interface ILog {\n  trace(message: string): void;\n  info(message: string): void;\n  warn(message: string): void;\n  error(message: string): void;\n}\n\n                                                                    \n\nexport class DefaultLastReferenceIdManager implements ILastReferenceIdManager {\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @type {string}\n   * @private\n   */\n  private _lastReferenceId: string = null;\n\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @returns {string}\n   */\n  public getLast(): string {\n    return this._lastReferenceId;\n  }\n\n  /**\n   * Clears the last event's reference id.\n   */\n  public clearLast(): void {\n    this._lastReferenceId = null;\n  }\n\n  /**\n   * Sets the last event's reference id.\n   * @param eventId\n   */\n  public setLast(eventId: string): void {\n    this._lastReferenceId = eventId;\n  }\n}\n\n                              \n\nexport class ConsoleLog implements ILog {\n  public trace(message: string): void {\n    this.log('debug', message);\n  }\n\n  public info(message: string): void {\n    this.log('info', message);\n  }\n\n  public warn(message: string): void {\n    this.log('warn', message);\n  }\n\n  public error(message: string): void {\n    this.log('error', message);\n  }\n\n  private log(level: string, message: string) {\n    if (console) {\n      const msg = `[${level}] Exceptionless: ${message}`;\n\n      if (console[level]) {\n        console[level](msg);\n      } else if (console.log) {\n        console[`log`](msg);\n      }\n    }\n  }\n}\n\n                              \n\nexport class NullLog implements ILog {\n  public trace(message: string): void { }\n  public info(message: string): void { }\n  public warn(message: string): void { }\n  public error(message: string): void { }\n}\n\nexport interface IUserInfo {\n  identity?: string;\n  name?: string;\n  data?: any;\n}\n\n                                                                                                                                                               \n\nexport class HeartbeatPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = 'HeartbeatPlugin';\n\n  private _interval: number;\n  private _intervalId: any;\n\n  constructor(heartbeatInterval: number = 30000) {\n    this._interval = heartbeatInterval;\n  }\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    clearInterval(this._intervalId);\n\n    const user: IUserInfo = context.event.data['@user'];\n    if (user && user.identity) {\n      this._intervalId = setInterval(() => context.client.submitSessionHeartbeat(user.identity), this._interval);\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                \n\nexport class ReferenceIdPlugin implements IEventPlugin {\n  public priority: number = 20;\n  public name: string = 'ReferenceIdPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    if ((!context.event.reference_id || context.event.reference_id.length === 0) && context.event.type === 'error') {\n      context.event.reference_id = Utils.guid().replace('-', '').substring(0, 10);\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                             \n\nexport class EventPluginContext {\n  public cancelled: boolean;\n  public client: ExceptionlessClient;\n  public event: IEvent;\n  public contextData: ContextData;\n\n  constructor(client: ExceptionlessClient, event: IEvent, contextData?: ContextData) {\n    this.client = client;\n    this.event = event;\n    this.contextData = contextData ? contextData : new ContextData();\n  }\n\n  public get log(): ILog {\n    return this.client.config.log;\n  }\n}\n\nn\nexport class EventPluginManager {\n  public static run(context: EventPluginContext, callback: (context?: EventPluginContext) => void): void {\n    const wrap = (plugin: IEventPlugin, next?: () => void): () => void => {\n      return () => {\n        try {\n          if (!context.cancelled) {\n            plugin.run(context, next);\n          }\n        } catch (ex) {\n          context.cancelled = true;\n          context.log.error(`Error running plugin '${plugin.name}': ${ex.message}. Discarding Event.`);\n        }\n\n        if (context.cancelled && !!callback) {\n          callback(context);\n        }\n      };\n    };\n\n    const plugins: IEventPlugin[] = context.client.config.plugins; // optimization for minifier.\n    const wrappedPlugins: Array<() => void> = [];\n    if (!!callback) {\n      wrappedPlugins[plugins.length] = wrap({ name: 'cb', priority: 9007199254740992, run: callback }, null);\n    }\n\n    for (let index = plugins.length - 1; index > -1; index--) {\n      wrappedPlugins[index] = wrap(plugins[index], !!callback || (index < plugins.length - 1) ? wrappedPlugins[index + 1] : null);\n    }\n\n    wrappedPlugins[0]();\n  }\n\n  public static addDefaultPlugins(config: Configuration): void {\n    config.addPlugin(new ConfigurationDefaultsPlugin());\n    config.addPlugin(new ErrorPlugin());\n    config.addPlugin(new DuplicateCheckerPlugin());\n    config.addPlugin(new EventExclusionPlugin());\n    config.addPlugin(new ModuleInfoPlugin());\n    config.addPlugin(new RequestInfoPlugin());\n    config.addPlugin(new EnvironmentInfoPlugin());\n    config.addPlugin(new SubmissionMethodPlugin());\n  }\n}\n\n                                                                                                         \n\nexport interface IEventPlugin {\n  priority?: number;\n  name?: string;\n  run(context: EventPluginContext, next?: () => void): void;\n}\n\n                                                                                                                                                                                                                                                                                                                                     \n\nexport class DefaultEventQueue implements IEventQueue {\n  /**\n   * The configuration object.\n   * @type {Configuration}\n   * @private\n   */\n  private _config: Configuration;\n\n  /**\n   * A list of handlers that will be fired when events are submitted.\n   * @type {Array}\n   * @private\n   */\n  private _handlers: Array<(events: IEvent[], response: SubmissionResponse) => void> = [];\n\n  /**\n   * Suspends processing until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _suspendProcessingUntil: Date;\n\n  /**\n   * Discards queued items until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _discardQueuedItemsUntil: Date;\n\n  /**\n   * Returns true if the queue is processing.\n   * @type {boolean}\n   * @private\n   */\n  private _processingQueue: boolean = false;\n\n  /**\n   * Processes the queue every xx seconds.\n   * @type {Timer}\n   * @private\n   */\n  private _queueTimer: any;\n\n  constructor(config: Configuration) {\n    this._config = config;\n  }\n\n  public enqueue(event: IEvent): void {\n    const eventWillNotBeQueued: string = 'The event will not be queued.'; // optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    if (this.areQueuedItemsDiscarded()) {\n      log.info(`Queue items are currently being discarded. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    this.ensureQueueTimer();\n\n    const timestamp = config.storage.queue.save(event);\n    const logText = `type=${event.type} ${!!event.reference_id ? 'refid=' + event.reference_id : ''}`;\n    if (timestamp) {\n      log.info(`Enqueuing event: ${timestamp} ${logText}`);\n    } else {\n      log.error(`Could not enqueue event ${logText}`);\n    }\n  }\n\n  public process(isAppExiting?: boolean): void {\n    const queueNotProcessed: string = 'The queue will not be processed.'; // optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (this._processingQueue) {\n      return;\n    }\n\n    log.info('Processing queue...');\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${queueNotProcessed}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${queueNotProcessed}`);\n      return;\n    }\n\n    this._processingQueue = true;\n    this.ensureQueueTimer();\n\n    try {\n      const events = config.storage.queue.get(config.submissionBatchSize);\n      if (!events || events.length === 0) {\n        this._processingQueue = false;\n        return;\n      }\n\n      log.info(`Sending ${events.length} events to ${config.serverUrl}.`);\n      config.submissionClient.postEvents(events.map((e) => e.value), config, (response: SubmissionResponse) => {\n        this.processSubmissionResponse(response, events);\n        this.eventsPosted(events.map((e) => e.value), response);\n        log.info('Finished processing queue.');\n        this._processingQueue = false;\n      }, isAppExiting);\n    } catch (ex) {\n      log.error(`Error processing queue: ${ex}`);\n      this.suspendProcessing();\n      this._processingQueue = false;\n    }\n  }\n\n  public suspendProcessing(durationInMinutes?: number, discardFutureQueuedItems?: boolean, clearQueue?: boolean): void {\n    const config: Configuration = this._config; // Optimization for minifier.\n\n    if (!durationInMinutes || durationInMinutes <= 0) {\n      durationInMinutes = 5;\n    }\n\n    config.log.info(`Suspending processing for ${durationInMinutes} minutes.`);\n    this._suspendProcessingUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\n\n    if (discardFutureQueuedItems) {\n      this._discardQueuedItemsUntil = this._suspendProcessingUntil;\n    }\n\n    if (clearQueue) {\n      // Account is over the limit and we want to ensure that the sample size being sent in will contain newer errors.\n      config.storage.queue.clear();\n    }\n  }\n\n  public onEventsPosted(handler: (events: IEvent[], response: SubmissionResponse) => void): void {\n    !!handler && this._handlers.push(handler);\n  }\n\n  private eventsPosted(events: IEvent[], response: SubmissionResponse) {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(events, response);\n      } catch (ex) {\n        this._config.log.error(`Error calling onEventsPosted handler: ${ex}`);\n      }\n    }\n  }\n\n  private areQueuedItemsDiscarded(): boolean {\n    return this._discardQueuedItemsUntil && this._discardQueuedItemsUntil > new Date();\n  }\n\n  private ensureQueueTimer(): void {\n    if (!this._queueTimer) {\n      this._queueTimer = setInterval(() => this.onProcessQueue(), 10000);\n    }\n  }\n\n  private isQueueProcessingSuspended(): boolean {\n    return this._suspendProcessingUntil && this._suspendProcessingUntil > new Date();\n  }\n\n  private onProcessQueue(): void {\n    if (!this.isQueueProcessingSuspended() && !this._processingQueue) {\n      this.process();\n    }\n  }\n\n  private processSubmissionResponse(response: SubmissionResponse, events: IStorageItem[]): void {\n    const noSubmission: string = 'The event will not be submitted.'; // Optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (response.success) {\n      log.info(`Sent ${events.length} events.`);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.serviceUnavailable) {\n      // You are currently over your rate limit or the servers are under stress.\n      log.error('Server returned service unavailable.');\n      this.suspendProcessing();\n      return;\n    }\n\n    if (response.paymentRequired) {\n      // If the organization over the rate limit then discard the event.\n      log.info('Too many events have been submitted, please upgrade your plan.');\n      this.suspendProcessing(null, true, true);\n      return;\n    }\n\n    if (response.unableToAuthenticate) {\n      // The api key was suspended or could not be authorized.\n      log.info(`Unable to authenticate, please check your configuration. ${noSubmission}`);\n      this.suspendProcessing(15);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.notFound || response.badRequest) {\n      // The service end point could not be found.\n      log.error(`Error while trying to submit data: ${response.message}`);\n      this.suspendProcessing(60 * 4);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.requestEntityTooLarge) {\n      const message = 'Event submission discarded for being too large.';\n      if (config.submissionBatchSize > 1) {\n        log.error(`${message} Retrying with smaller batch size.`);\n        config.submissionBatchSize = Math.max(1, Math.round(config.submissionBatchSize / 1.5));\n      } else {\n        log.error(`${message} ${noSubmission}`);\n        this.removeEvents(events);\n      }\n\n      return;\n    }\n\n    if (!response.success) {\n      log.error(`Error submitting events: ${response.message || 'Please check the network tab for more info.'}`);\n      this.suspendProcessing();\n    }\n  }\n\n  private removeEvents(events: IStorageItem[]) {\n    for (let index = 0; index < (events || []).length; index++) {\n      this._config.storage.queue.remove(events[index].timestamp);\n    }\n  }\n}\n\n                                                                                                                 \n\nexport interface IEventQueue {\n  enqueue(event: IEvent): void;\n  process(isAppExiting?: boolean): void;\n  suspendProcessing(durationInMinutes?: number, discardFutureQueuedItems?: boolean, clearQueue?: boolean): void;\n  onEventsPosted(handler: (events: IEvent[], response: SubmissionResponse) => void): void;\n}\n\n                                                                                                                                  \n\nexport interface IEnvironmentInfoCollector {\n  getEnvironmentInfo(context: EventPluginContext): IEnvironmentInfo;\n}\n\n                                                                                                              \n\nexport interface IErrorParser {\n  parse(context: EventPluginContext, exception: Error): IError;\n}\n\n                                                                                                                \n\nexport interface IModuleCollector {\n  getModules(context: EventPluginContext): IModule[];\n}\n\n                                                                                                                          \n\nexport interface IRequestInfoCollector {\n  getRequestInfo(context: EventPluginContext): IRequestInfo;\n}\n\n                                                                                                                                                  \n\nexport class InMemoryStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(maxQueueItems: number = 250) {\n    this.queue = new InMemoryStorage(maxQueueItems);\n    this.settings = new InMemoryStorage(1);\n  }\n\n}\n\n                                      \n\nexport interface IStorageProvider {\n  queue: IStorage;\n  settings: IStorage;\n}\n\nn\n// tslint:disable-next-line:prefer-const\ndeclare var XDomainRequest: { new (); create(); };\n\nexport class DefaultSubmissionClient implements ISubmissionClient {\n  public configurationVersionHeader: string = 'x-exceptionless-configversion';\n\n  public postEvents(events: IEvent[], config: Configuration, callback: (response: SubmissionResponse) => void, isAppExiting?: boolean): void {\n    const data = JSON.stringify(events);\n    const request = this.createRequest(config, 'POST',  `${config.serverUrl}/api/v2/events`, data);\n    const cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb, isAppExiting);\n  }\n\n  public postUserDescription(referenceId: string, description: IUserDescription, config: Configuration, callback: (response: SubmissionResponse) => void): void {\n    const path = `${config.serverUrl}/api/v2/events/by-ref/${encodeURIComponent(referenceId)}/user-description`;\n    const data = JSON.stringify(description);\n    const request = this.createRequest(config, 'POST', path, data);\n    const cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public getSettings(config: Configuration, version: number, callback: (response: SettingsResponse) => void): void {\n    const request = this.createRequest(config, 'GET', `${config.serverUrl}/api/v2/projects/config?v=${version}`);\n    const cb = (status, message, data?, headers?) => {\n      if (status !== 200) {\n        return callback(new SettingsResponse(false, null, -1, null, message));\n      }\n\n      let settings: IClientConfiguration;\n      try {\n        settings = JSON.parse(data);\n      } catch (e) {\n        config.log.error(`Unable to parse settings: '${data}'`);\n      }\n\n      if (!settings || isNaN(settings.version)) {\n        return callback(new SettingsResponse(false, null, -1, null, 'Invalid configuration settings.'));\n      }\n\n      callback(new SettingsResponse(true, settings.settings || {}, settings.version));\n    };\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public sendHeartbeat(sessionIdOrUserId: string, closeSession: boolean, config: Configuration): void {\n    const request = this.createRequest(config, 'GET', `${config.heartbeatServerUrl}/api/v2/events/session/heartbeat?id=${sessionIdOrUserId}&close=${closeSession}`);\n    config.submissionAdapter.sendRequest(request);\n  }\n\n  private createRequest(config: Configuration, method: string, url: string, data: string = null): SubmissionRequest {\n    return {\n      method,\n      url,\n      data,\n      apiKey: config.apiKey,\n      userAgent: config.userAgent\n    };\n  }\n\n  private createSubmissionCallback(config: Configuration, callback: (response: SubmissionResponse) => void) {\n    return (status, message, data?, headers?) => {\n      const settingsVersion: number = headers && parseInt(headers[this.configurationVersionHeader], 10);\n      SettingsManager.checkVersion(settingsVersion, config);\n\n      callback(new SubmissionResponse(status, message));\n    };\n  }\n}\n\n                                                                                                                   \n\nexport interface ISubmissionAdapter {\n  sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean): void;\n}\n\n                                                                                                                                                                                                                                                                                           \n\nexport interface ISubmissionClient {\n  postEvents(events: IEvent[], config: Configuration, callback: (response: SubmissionResponse) => void, isAppExiting?: boolean): void;\n  postUserDescription(referenceId: string, description: IUserDescription, config: Configuration, callback: (response: SubmissionResponse) => void): void;\n  getSettings(config: Configuration, version: number, callback: (response: SettingsResponse) => void): void;\n  sendHeartbeat(sessionIdOrUserId: string, closeSession: boolean, config: Configuration): void;\n}\n\nexport class Utils {\n  public static addRange<T>(target: T[], ...values: T[]) {\n    if (!target) {\n      target = [];\n    }\n\n    if (!values || values.length === 0) {\n      return target;\n    }\n\n    for (const value of values) {\n      if (value && target.indexOf(value) < 0) {\n        target.push(value);\n      }\n    }\n\n    return target;\n  }\n\n  public static getHashCode(source: string): number {\n    if (!source || source.length === 0) {\n      return 0;\n    }\n\n    let hash: number = 0;\n    for (let index = 0; index < source.length; index++) {\n      const character = source.charCodeAt(index);\n      hash = ((hash << 5) - hash) + character;\n      hash |= 0;\n    }\n\n    return hash;\n  }\n\n  public static getCookies(cookies: string, exclusions?: string[]): object {\n    const result: object = {};\n\n    const parts: string[] = (cookies || '').split('; ');\n    for (const part of parts) {\n      const cookie: string[] = part.split('=');\n      if (!Utils.isMatch(cookie[0], exclusions)) {\n        result[cookie[0]] = cookie[1];\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static guid(): string {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    }\n\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n  }\n\n  // tslint:disable-next-line:ban-types\n  public static merge(defaultValues: Object, values: Object) {\n    const result: object = {};\n\n    for (const key in defaultValues || {}) {\n      if (!!defaultValues[key]) {\n        result[key] = defaultValues[key];\n      }\n    }\n\n    for (const key in values || {}) {\n      if (!!values[key]) {\n        result[key] = values[key];\n      }\n    }\n\n    return result;\n  }\n\n  public static parseVersion(source: string): string {\n    if (!source) {\n      return null;\n    }\n\n    const versionRegex = /(v?((\\d+)\\.(\\d+)(\\.(\\d+))?)(?:-([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?(?:\\+([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?)/;\n    const matches = versionRegex.exec(source);\n    if (matches && matches.length > 0) {\n      return matches[0];\n    }\n\n    return null;\n  }\n\n  public static parseQueryString(query: string, exclusions?: string[]) {\n    if (!query || query.length === 0) {\n      return null;\n    }\n\n    const pairs: string[] = query.split('&');\n    if (pairs.length === 0) {\n      return null;\n    }\n\n    const result: object = {};\n    for (const pair of pairs) {\n      const parts = pair.split('=');\n      if (!Utils.isMatch(parts[0], exclusions)) {\n        result[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static randomNumber(): number {\n    return Math.floor(Math.random() * 9007199254740992);\n  }\n\n  /**\n   * Checks to see if a value matches a pattern.\n   * @param input the value to check against the @pattern.\n   * @param pattern The pattern to check, supports wild cards (*).\n   */\n  public static isMatch(input: string, patterns: string[], ignoreCase: boolean = true): boolean {\n    if (!input || typeof input !== 'string') {\n      return false;\n    }\n\n    const trim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n    input = (ignoreCase ? input.toLowerCase() : input).replace(trim, '');\n\n    return (patterns || []).some((pattern) => {\n      if (typeof pattern !== 'string') {\n        return false;\n      }\n\n      pattern = (ignoreCase ? pattern.toLowerCase() : pattern).replace(trim, '');\n      if (pattern.length <= 0) {\n        return false;\n      }\n\n      const startsWithWildcard: boolean = pattern[0] === '*';\n      if (startsWithWildcard) {\n        pattern = pattern.slice(1);\n      }\n\n      const endsWithWildcard: boolean = pattern[pattern.length - 1] === '*';\n      if (endsWithWildcard) {\n        pattern = pattern.substring(0, pattern.length - 1);\n      }\n\n      if (startsWithWildcard && endsWithWildcard) {\n        return pattern.length <= input.length && input.indexOf(pattern, 0) !== -1;\n      }\n\n      if (startsWithWildcard) {\n        return Utils.endsWith(input, pattern);\n      }\n\n      if (endsWithWildcard) {\n        return Utils.startsWith(input, pattern);\n      }\n\n      return input === pattern;\n    });\n  }\n\n  public static isEmpty(input: object) {\n    return input === null || (typeof (input) === 'object' && Object.keys(input).length === 0);\n  }\n\n  public static startsWith(input: string, prefix: string): boolean {\n    return input.substring(0, prefix.length) === prefix;\n  }\n\n  public static endsWith(input: string, suffix: string): boolean {\n    return input.indexOf(suffix, input.length - suffix.length) !== -1;\n  }\n\n  /**\n   * Stringifys an object with optional exclusions and max depth.\n   * @param data The data object to add.\n   * @param exclusions Any property names that should be excluded.\n   * @param maxDepth The max depth of the object to include.\n   */\n  public static stringify(data: any, exclusions?: string[], maxDepth?: number): string {\n    function stringifyImpl(obj: any, excludedKeys: string[]): string {\n      const cache: string[] = [];\n      return JSON.stringify(obj, (key: string, value: any) => {\n        if (Utils.isMatch(key, excludedKeys)) {\n          return;\n        }\n\n        if (typeof value === 'object' && !!value) {\n          if (cache.indexOf(value) !== -1) {\n            // Circular reference found, discard key\n            return;\n          }\n\n          cache.push(value);\n        }\n\n        return value;\n      });\n    }\n\n    if (({}).toString.call(data) === '[object Object]') {\n      const flattened = {};\n      /* tslint:disable:forin */\n      for (const prop in data) {\n        const value = data[prop];\n        if (value === data) {\n          continue;\n        }\n        flattened[prop] = data[prop];\n      }\n      /* tslint:enable:forin */\n\n      return stringifyImpl(flattened, exclusions);\n    }\n\n    if (({}).toString.call(data) === '[object Array]') {\n      const result = [];\n      for (let index = 0; index < data.length; index++) {\n        result[index] = JSON.parse(stringifyImpl(data[index], exclusions));\n      }\n\n      return JSON.stringify(result);\n    }\n\n    return stringifyImpl(data, exclusions);\n  }\n\n  public static toBoolean(input, defaultValue: boolean = false): boolean {\n    if (typeof input === 'boolean') {\n      return input;\n    }\n\n    if (input === null || typeof input !== 'number' && typeof input !== 'string') {\n      return defaultValue;\n    }\n\n    switch ((input + '').toLowerCase().trim()) {\n      case 'true': case 'yes': case '1': return true;\n      case 'false': case 'no': case '0': case null: return false;\n    }\n\n    return defaultValue;\n  }\n}\n\nn\nexport interface IConfigurationSettings {\n  apiKey?: string;\n  serverUrl?: string;\n  heartbeatServerUrl?: string;\n  updateSettingsWhenIdleInterval?: number;\n  environmentInfoCollector?: IEnvironmentInfoCollector;\n  errorParser?: IErrorParser;\n  lastReferenceIdManager?: ILastReferenceIdManager;\n  log?: ILog;\n  moduleCollector?: IModuleCollector;\n  requestInfoCollector?: IRequestInfoCollector;\n  submissionBatchSize?: number;\n  submissionClient?: ISubmissionClient;\n  submissionAdapter?: ISubmissionAdapter;\n  storage?: IStorageProvider;\n  queue?: IEventQueue;\n}\n\n                                                                                                                                                     \n\ninterface ISettingsWithVersion {\n  version: number;\n  settings: { [key: string]: string };\n}\n\nexport class SettingsManager {\n  /**\n   * A list of handlers that will be fired when the settings change.\n   * @type {Array}\n   * @private\n   */\n  private static _handlers: Array<(config: Configuration) => void> = [];\n\n  public static onChanged(handler: (config: Configuration) => void) {\n    !!handler && this._handlers.push(handler);\n  }\n\n  public static applySavedServerSettings(config: Configuration): void {\n    if (!config || !config.isValid) {\n      return;\n    }\n\n    const savedSettings = this.getSavedServerSettings(config);\n    config.log.info(`Applying saved settings: v${savedSettings.version}`);\n    config.settings = Utils.merge(config.settings, savedSettings.settings);\n    this.changed(config);\n  }\n\n  public static getVersion(config: Configuration): number {\n    if (!config || !config.isValid) {\n      return 0;\n    }\n\n    const savedSettings = this.getSavedServerSettings(config);\n    return savedSettings.version || 0;\n  }\n\n  public static checkVersion(version: number, config: Configuration): void {\n    const currentVersion: number = this.getVersion(config);\n    if (version <= currentVersion) {\n      return;\n    }\n\n    config.log.info(`Updating settings from v${currentVersion} to v${version}`);\n    this.updateSettings(config, currentVersion);\n  }\n\n  public static updateSettings(config: Configuration, version?: number): void {\n    if (!config || !config.enabled) {\n      return;\n    }\n\n    const unableToUpdateMessage = 'Unable to update settings';\n    if (!config.isValid) {\n      config.log.error(`${unableToUpdateMessage}: ApiKey is not set.`);\n      return;\n    }\n\n    if (!version || version < 0) {\n      version = this.getVersion(config);\n    }\n\n    config.log.info(`Checking for updated settings from: v${version}.`);\n    config.submissionClient.getSettings(config, version, (response: SettingsResponse) => {\n      if (!config || !response || !response.success || !response.settings) {\n        config.log.warn(`${unableToUpdateMessage}: ${response.message}`);\n        return;\n      }\n\n      config.settings = Utils.merge(config.settings, response.settings);\n\n      // TODO: Store snapshot of settings after reading from config and attributes and use that to revert to defaults.\n      // Remove any existing server settings that are not in the new server settings.\n      const savedServerSettings = SettingsManager.getSavedServerSettings(config);\n      for (const key in savedServerSettings) {\n        if (response.settings[key]) {\n          continue;\n        }\n\n        delete config.settings[key];\n      }\n\n      const newSettings: ISettingsWithVersion = {\n        version: response.settingsVersion,\n        settings: response.settings\n      };\n\n      config.storage.settings.save(newSettings);\n\n      config.log.info(`Updated settings: v${newSettings.version}`);\n      this.changed(config);\n    });\n  }\n\n  private static changed(config: Configuration) {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(config);\n      } catch (ex) {\n        config.log.error(`Error calling onChanged handler: ${ex}`);\n      }\n    }\n  }\n\n  private static getSavedServerSettings(config: Configuration): ISettingsWithVersion {\n    const item = config.storage.settings.get()[0];\n    if (item && item.value && item.value.version && item.value.settings) {\n      return item.value;\n    }\n\n    return { version: 0, settings: {} };\n  }\n}\n\nexport interface IEvent {\n  type?: string;\n  source?: string;\n  date?: Date;\n  tags?: string[];\n  message?: string;\n  geo?: string;\n  value?: number;\n  data?: any;\n  reference_id?: string;\n  count?: number;\n}\n\nexport class SubmissionResponse {\n  public success: boolean = false;\n  public badRequest: boolean = false;\n  public serviceUnavailable: boolean = false;\n  public paymentRequired: boolean = false;\n  public unableToAuthenticate: boolean = false;\n  public notFound: boolean = false;\n  public requestEntityTooLarge: boolean = false;\n  public statusCode: number;\n  public message: string;\n\n  constructor(statusCode: number, message?: string) {\n    this.statusCode = statusCode;\n    this.message = message;\n\n    this.success = statusCode >= 200 && statusCode <= 299;\n    this.badRequest = statusCode === 400;\n    this.serviceUnavailable = statusCode === 503;\n    this.paymentRequired = statusCode === 402;\n    this.unableToAuthenticate = statusCode === 401 || statusCode === 403;\n    this.notFound = statusCode === 404;\n    this.requestEntityTooLarge = statusCode === 413;\n  }\n}\n\nn\nexport class ExceptionlessClient {\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   * @private\n   */\n  private static _instance: ExceptionlessClient = null;\n\n  public config: Configuration;\n\n  private _intervalId: any;\n  private _timeoutId: any;\n\n  constructor();\n  constructor(settings: IConfigurationSettings);\n  constructor(apiKey: string, serverUrl?: string);\n  constructor(settingsOrApiKey?: IConfigurationSettings | string, serverUrl?: string) {\n    this.config = typeof settingsOrApiKey === 'object'\n      ? new Configuration(settingsOrApiKey)\n      : new Configuration({ apiKey:  settingsOrApiKey as string, serverUrl });\n\n    this.updateSettingsTimer(5000);\n    this.config.onChanged((config) => this.updateSettingsTimer(this._timeoutId > 0 ? 5000 : 0));\n    this.config.queue.onEventsPosted((events, response) =>  this.updateSettingsTimer());\n  }\n\n  public createException(exception: Error): EventBuilder {\n    const pluginContextData = new ContextData();\n    pluginContextData.setException(exception);\n    return this.createEvent(pluginContextData).setType('error');\n  }\n\n  public submitException(exception: Error, callback?: (context: EventPluginContext) => void): void {\n    this.createException(exception).submit(callback);\n  }\n\n  public createUnhandledException(exception: Error, submissionMethod?: string): EventBuilder {\n    const builder = this.createException(exception);\n    builder.pluginContextData.markAsUnhandledError();\n    builder.pluginContextData.setSubmissionMethod(submissionMethod);\n\n    return builder;\n  }\n\n  public submitUnhandledException(exception: Error, submissionMethod?: string, callback?: (context: EventPluginContext) => void) {\n    this.createUnhandledException(exception, submissionMethod).submit(callback);\n  }\n\n  public createFeatureUsage(feature: string): EventBuilder {\n    return this.createEvent().setType('usage').setSource(feature);\n  }\n\n  public submitFeatureUsage(feature: string, callback?: (context: EventPluginContext) => void): void {\n    this.createFeatureUsage(feature).submit(callback);\n  }\n\n  public createLog(message: string): EventBuilder;\n  public createLog(source: string, message: string): EventBuilder;\n  public createLog(source: string, message: string, level: string): EventBuilder;\n  public createLog(sourceOrMessage: string, message?: string, level?: string): EventBuilder {\n    let builder = this.createEvent().setType('log');\n\n    if (message && level) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message).setProperty('@level', level);\n    } else if (message) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message);\n    } else {\n      builder = builder.setMessage(sourceOrMessage);\n\n      try {\n        // TODO: Look into using https: //www.stevefenton.co.uk/Content/Blog/Date/201304/Blog/Obtaining-A-Class-Name-At-Runtime-In-TypeScript/\n        const caller: any = this.createLog.caller;\n        builder = builder.setSource(caller && caller.caller && caller.caller.name);\n      } catch (e) {\n        this.config.log.trace('Unable to resolve log source: ' + e.message);\n      }\n    }\n\n    return builder;\n  }\n\n  public submitLog(message: string): void;\n  public submitLog(source: string, message: string): void;\n  public submitLog(source: string, message: string, level: string, callback?: (context: EventPluginContext) => void): void;\n  public submitLog(sourceOrMessage: string, message?: string, level?: string, callback?: (context: EventPluginContext) => void): void {\n    this.createLog(sourceOrMessage, message, level).submit(callback);\n  }\n\n  public createNotFound(resource: string): EventBuilder {\n    return this.createEvent().setType('404').setSource(resource);\n  }\n\n  public submitNotFound(resource: string, callback?: (context: EventPluginContext) => void): void {\n    this.createNotFound(resource).submit(callback);\n  }\n\n  public createSessionStart(): EventBuilder {\n    return this.createEvent().setType('session');\n  }\n\n  public submitSessionStart(callback?: (context: EventPluginContext) => void): void {\n    this.createSessionStart().submit(callback);\n  }\n\n  public submitSessionEnd(sessionIdOrUserId: string): void {\n    if (sessionIdOrUserId) {\n      this.config.log.info(`Submitting session end: ${sessionIdOrUserId}`);\n      this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, true, this.config);\n    }\n  }\n\n  public submitSessionHeartbeat(sessionIdOrUserId: string): void {\n    if (sessionIdOrUserId) {\n      this.config.log.info(`Submitting session heartbeat: ${sessionIdOrUserId}`);\n      this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, false, this.config);\n    }\n  }\n\n  public createEvent(pluginContextData?: ContextData): EventBuilder {\n    return new EventBuilder({ date: new Date() }, this, pluginContextData);\n  }\n\n  /**\n   * Submits the event to be sent to the server.\n   * @param event The event data.\n   * @param pluginContextData Any contextual data objects to be used by Exceptionless plugins to gather default information for inclusion in the report information.\n   * @param callback\n   */\n  public submitEvent(event: IEvent, pluginContextData?: ContextData, callback?: (context: EventPluginContext) => void): void {\n    function cancelled(context: EventPluginContext) {\n      if (!!context) {\n        context.cancelled = true;\n      }\n\n      return !!callback && callback(context);\n    }\n\n    const context = new EventPluginContext(this, event, pluginContextData);\n    if (!event) {\n      return cancelled(context);\n    }\n\n    if (!this.config.enabled) {\n      this.config.log.info('Event submission is currently disabled.');\n      return cancelled(context);\n    }\n\n    if (!event.data) {\n      event.data = {};\n    }\n\n    if (!event.tags || !event.tags.length) {\n      event.tags = [];\n    }\n\n    EventPluginManager.run(context, (ctx: EventPluginContext) => {\n      const config = ctx.client.config;\n      const ev = ctx.event;\n\n      if (!ctx.cancelled) {\n        // ensure all required data\n        if (!ev.type || ev.type.length === 0) {\n          ev.type = 'log';\n        }\n\n        if (!ev.date) {\n          ev.date = new Date();\n        }\n\n        config.queue.enqueue(ev);\n\n        if (ev.reference_id && ev.reference_id.length > 0) {\n          ctx.log.info(`Setting last reference id '${ev.reference_id}'`);\n          config.lastReferenceIdManager.setLast(ev.reference_id);\n        }\n      }\n\n      !!callback && callback(ctx);\n    });\n  }\n\n  /**\n   * Updates the user's email address and description of an event for the specified reference id.\n   * @param referenceId The reference id of the event to update.\n   * @param email The user's email address to set on the event.\n   * @param description The user's description of the event.\n   * @param callback The submission response.\n   */\n  public updateUserEmailAndDescription(referenceId: string, email: string, description: string, callback?: (response: SubmissionResponse) => void) {\n    if (!referenceId || !email || !description || !this.config.enabled) {\n      return !!callback && callback(new SubmissionResponse(500, 'cancelled'));\n    }\n\n    const userDescription: IUserDescription = { email_address: email, description };\n    this.config.submissionClient.postUserDescription(referenceId, userDescription, this.config, (response: SubmissionResponse) => {\n      if (!response.success) {\n        this.config.log.error(`Failed to submit user email and description for event '${referenceId}': ${response.statusCode} ${response.message}`);\n      }\n\n      !!callback && callback(response);\n    });\n  }\n\n  /**\n   * Gets the last event client id that was submitted to the server.\n   * @returns {string} The event client id.\n   */\n  public getLastReferenceId(): string {\n    return this.config.lastReferenceIdManager.getLast();\n  }\n\n  private updateSettingsTimer(initialDelay?: number) {\n    this.config.log.info(`Updating settings timer with delay: ${initialDelay}`);\n\n    this._timeoutId = clearTimeout(this._timeoutId);\n    this._timeoutId = clearInterval(this._intervalId);\n\n    const interval = this.config.updateSettingsWhenIdleInterval;\n    if (interval > 0) {\n      const updateSettings = () => SettingsManager.updateSettings(this.config);\n      if (initialDelay > 0) {\n        this._timeoutId = setTimeout(updateSettings, initialDelay);\n      }\n\n      this._intervalId = setInterval(updateSettings, interval);\n    }\n  }\n\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   */\n  public static get default() {\n    if (ExceptionlessClient._instance === null) {\n      ExceptionlessClient._instance = new ExceptionlessClient(null);\n    }\n\n    return ExceptionlessClient._instance;\n  }\n}\n\nexport class ContextData {\n  public setException(exception: Error): void {\n    if (exception) {\n      this['@@_Exception'] = exception;\n    }\n  }\n\n  public get hasException(): boolean {\n    return !!this['@@_Exception'];\n  }\n\n  public getException(): Error {\n    return this['@@_Exception'] || null;\n  }\n\n  public markAsUnhandledError(): void {\n    this['@@_IsUnhandledError'] = true;\n  }\n\n  public get isUnhandledError(): boolean {\n    return !!this['@@_IsUnhandledError'];\n  }\n\n  public setSubmissionMethod(method: string): void {\n    if (method) {\n      this['@@_SubmissionMethod'] = method;\n    }\n  }\n\n  public getSubmissionMethod(): string {\n    return this['@@_SubmissionMethod'] || null;\n  }\n}\n\nexport interface IEnvironmentInfo {\n  processor_count?: number;\n  total_physical_memory?: number;\n  available_physical_memory?: number;\n  command_line?: string;\n  process_name?: string;\n  process_id?: string;\n  process_memory_size?: number;\n  thread_id?: string;\n  architecture?: string;\n  o_s_name?: string;\n  o_s_version?: string;\n  ip_address?: string;\n  machine_name?: string;\n  install_id?: string;\n  runtime_version?: string;\n  data?: any;\n}\n\nexport interface IParameter {\n  data?: any;\n  generic_arguments?: string[];\n\n  name?: string;\n  type?: string;\n  type_namespace?: string;\n}\n\n                                          \n\nexport interface IMethod {\n  data?: any;\n  generic_arguments?: string[];\n  parameters?: IParameter[];\n\n  is_signature_target?: boolean;\n  declaring_namespace?: string;\n  declaring_type?: string;\n  name?: string;\n  module_id?: number;\n}\n\n                                    \n\nexport interface IStackFrame extends IMethod {\n  file_name?: string;\n  line_number?: number;\n  column?: number;\n}\n\n                                                                                 \n\nexport interface IInnerError {\n  message?: string;\n  type?: string;\n  code?: string;\n  data?: any;\n  inner?: IInnerError;\n  stack_trace?: IStackFrame[];\n  target_method?: IMethod;\n}\n\nexport interface IModule {\n  data?: any;\n\n  module_id?: number;\n  name?: string;\n  version?: string;\n  is_entry?: boolean;\n  created_date?: Date;\n  modified_date?: Date;\n}\n\n                                                                                 \n\nexport interface IError extends IInnerError {\n  modules?: IModule[];\n}\n\nexport interface IRequestInfo {\n  user_agent?: string;\n  http_method?: string;\n  is_secure?: boolean;\n  host?: string;\n  port?: number;\n  path?: string;\n  referrer?: string;\n  client_ip_address?: string;\n  cookies?: any;\n  post_data?: any;\n  query_string?: any;\n  data?: any;\n}\n\nexport interface IStorageItem {\n  timestamp: number;\n  value: any;\n}\n\n                                              \n\nexport interface IStorage {\n  save(value: any): number;\n  get(limit?: number): IStorageItem[];\n  remove(timestamp: number): void;\n  clear(): void;\n}\n\nexport type SubmissionCallback = (status: number, message: string, data?: string, headers?: object) => void;\n\nexport interface SubmissionRequest {\n  apiKey: string;\n  userAgent: string;\n  method: string;\n  url: string;\n  data: string;\n}\n\nn\nexport class Configuration implements IConfigurationSettings {\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @type {IConfigurationSettings}\n   * @private\n   */\n  private static _defaultSettings: IConfigurationSettings = null;\n\n  /**\n   * A default list of tags that will automatically be added to every\n   * report submitted to the server.\n   *\n   * @type {Array}\n   */\n  public defaultTags: string[] = [];\n\n  /**\n   * A default list of of extended data objects that will automatically\n   * be added to every report submitted to the server.\n   *\n   * @type {{}}\n   */\n  public defaultData: object = {};\n\n  /**\n   * Whether the client is currently enabled or not. If it is disabled,\n   * submitted errors will be discarded and no data will be sent to the server.\n   *\n   * @returns {boolean}\n   */\n  public enabled: boolean = true;\n\n  public environmentInfoCollector: IEnvironmentInfoCollector;\n  public errorParser: IErrorParser;\n  public lastReferenceIdManager: ILastReferenceIdManager = new DefaultLastReferenceIdManager();\n  public log: ILog;\n  public moduleCollector: IModuleCollector;\n  public requestInfoCollector: IRequestInfoCollector;\n\n  /**\n   * Maximum number of events that should be sent to the server together in a batch. (Defaults to 50)\n   */\n  public submissionBatchSize: number;\n  public submissionAdapter: ISubmissionAdapter;\n  public submissionClient: ISubmissionClient;\n\n  /**\n   * Contains a dictionary of custom settings that can be used to control\n   * the client and will be automatically updated from the server.\n   */\n  public settings: object = {};\n\n  public storage: IStorageProvider;\n\n  public queue: IEventQueue;\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @type {string}\n   * @private\n   */\n  private _apiKey: string;\n\n  /**\n   * The server url that all events will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _serverUrl: string = 'https://collector.exceptionless.io';\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _heartbeatServerUrl: string = 'https://heartbeat.exceptionless.io';\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @type {number}\n   * @private\n   */\n  private _updateSettingsWhenIdleInterval: number = 120000;\n\n  /**\n   * A list of exclusion patterns.\n   * @type {Array}\n   * @private\n   */\n  private _dataExclusions: string[] = [];\n\n  /**\n   * A list of user agent patterns.\n   * @type {Array}\n   * @private\n   */\n  private _userAgentBotPatterns: string[] = [];\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @type {Array}\n   * @private\n   */\n  private _plugins: IEventPlugin[] = [];\n\n  /**\n   * A list of handlers that will be fired when configuration changes.\n   * @type {Array}\n   * @private\n   */\n  private _handlers: Array<(config: Configuration) => void> = [];\n\n  constructor(configSettings?: IConfigurationSettings) {\n    function inject(fn: any) {\n      return typeof fn === 'function' ? fn(this) : fn;\n    }\n\n    configSettings = Utils.merge(Configuration.defaults, configSettings);\n\n    this.log = inject(configSettings.log) || new NullLog();\n    this.apiKey = configSettings.apiKey;\n    this.serverUrl = configSettings.serverUrl;\n    this.heartbeatServerUrl = configSettings.heartbeatServerUrl;\n    this.updateSettingsWhenIdleInterval = configSettings.updateSettingsWhenIdleInterval;\n\n    this.environmentInfoCollector = inject(configSettings.environmentInfoCollector);\n    this.errorParser = inject(configSettings.errorParser);\n    this.lastReferenceIdManager = inject(configSettings.lastReferenceIdManager) || new DefaultLastReferenceIdManager();\n    this.moduleCollector = inject(configSettings.moduleCollector);\n    this.requestInfoCollector = inject(configSettings.requestInfoCollector);\n    this.submissionBatchSize = inject(configSettings.submissionBatchSize) || 50;\n    this.submissionAdapter = inject(configSettings.submissionAdapter);\n    this.submissionClient = inject(configSettings.submissionClient) || new DefaultSubmissionClient();\n    this.storage = inject(configSettings.storage) || new InMemoryStorageProvider();\n    this.queue = inject(configSettings.queue) || new DefaultEventQueue(this);\n\n    SettingsManager.applySavedServerSettings(this);\n    EventPluginManager.addDefaultPlugins(this);\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @returns {string}\n   */\n  public get apiKey(): string {\n    return this._apiKey;\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @param value\n   */\n  public set apiKey(value: string) {\n    this._apiKey = value || null;\n    this.log.info(`apiKey: ${this._apiKey}`);\n    this.changed();\n  }\n\n  /**\n   * Returns true if the apiKey is valid.\n   * @returns {boolean}\n   */\n  public get isValid(): boolean {\n    return !!this.apiKey && this.apiKey.length >= 10;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @returns {string}\n   */\n  public get serverUrl(): string {\n    return this._serverUrl;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @param value\n   */\n  public set serverUrl(value: string) {\n    if (!!value) {\n      this._serverUrl = value;\n      this._heartbeatServerUrl = value;\n      this.log.info(`serverUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @returns {string}\n   */\n  public get heartbeatServerUrl(): string {\n    return this._heartbeatServerUrl;\n  }\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @param value\n   */\n  public set heartbeatServerUrl(value: string) {\n    if (!!value) {\n      this._heartbeatServerUrl = value;\n      this.log.info(`heartbeatServerUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @returns {number}\n   */\n  public get updateSettingsWhenIdleInterval(): number {\n    return this._updateSettingsWhenIdleInterval;\n  }\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @param value\n   */\n  public set updateSettingsWhenIdleInterval(value: number) {\n    if (typeof value !== 'number') {\n      return;\n    }\n\n    if (value <= 0) {\n      value = -1;\n    } else if (value > 0 && value < 15000) {\n      value = 15000;\n    }\n\n    this._updateSettingsWhenIdleInterval = value;\n    this.log.info(`updateSettingsWhenIdleInterval: ${value}`);\n    this.changed();\n  }\n\n  /**\n   *  A list of exclusion patterns that will automatically remove any data that\n   *  matches them from any data submitted to the server.\n   *\n   *  For example, entering CreditCard will remove any extended data properties,\n   *  form fields, cookies and query parameters from the report.\n   *\n   * @returns {string[]}\n   */\n  public get dataExclusions(): string[] {\n    const exclusions: string = this.settings['@@DataExclusions'];\n    return this._dataExclusions.concat(exclusions && exclusions.split(',') || []);\n  }\n\n  /**\n   * Add items to the list of exclusion patterns that will automatically remove any\n   * data that matches them from any data submitted to the server.\n   *\n   * For example, entering CreditCard will remove any extended data properties, form\n   * fields, cookies and query parameters from the report.\n   *\n   * @param exclusions\n   */\n  public addDataExclusions(...exclusions: string[]) {\n    this._dataExclusions = Utils.addRange<string>(this._dataExclusions, ...exclusions);\n  }\n\n  /**\n   * A list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @returns {string[]}\n   */\n  public get userAgentBotPatterns(): string[] {\n    const patterns: string = this.settings['@@UserAgentBotPatterns'];\n    return this._userAgentBotPatterns.concat(patterns && patterns.split(',') || []);\n  }\n\n  /**\n   * Add items to the list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @param userAgentBotPatterns\n   */\n  public addUserAgentBotPatterns(...userAgentBotPatterns: string[]) {\n    this._userAgentBotPatterns = Utils.addRange<string>(this._userAgentBotPatterns, ...userAgentBotPatterns);\n  }\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @returns {IEventPlugin[]}\n   */\n  public get plugins(): IEventPlugin[] {\n    return this._plugins.sort((p1: IEventPlugin, p2: IEventPlugin) => {\n      return (p1.priority < p2.priority) ? -1 : (p1.priority > p2.priority) ? 1 : 0;\n    });\n  }\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param plugin\n   */\n  public addPlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param name The name used to identify the plugin.\n   * @param priority Used to determine plugins priority.\n   * @param pluginAction A function that is run.\n   */\n  public addPlugin(name: string, priority: number, pluginAction: (context: EventPluginContext, next?: () => void) => void): void;\n  public addPlugin(pluginOrName: IEventPlugin | string, priority?: number, pluginAction?: (context: EventPluginContext, next?: () => void) => void): void {\n    const plugin: IEventPlugin = !!pluginAction ? { name: pluginOrName as string, priority, run: pluginAction } :  pluginOrName as IEventPlugin;\n    if (!plugin || !plugin.run) {\n      this.log.error('Add plugin failed: Run method not defined');\n      return;\n    }\n\n    if (!plugin.name) {\n      plugin.name = Utils.guid();\n    }\n\n    if (!plugin.priority) {\n      plugin.priority = 0;\n    }\n\n    let pluginExists: boolean = false;\n    const plugins = this._plugins; // optimization for minifier.\n    for (const p of plugins) {\n      if (p.name === plugin.name) {\n        pluginExists = true;\n        break;\n      }\n    }\n\n    if (!pluginExists) {\n      plugins.push(plugin);\n    }\n  }\n\n  /**\n   * Remove the plugin from this configuration.\n   * @param plugin\n   */\n  public removePlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Remove an plugin by key from this configuration.\n   * @param name\n   */\n  public removePlugin(pluginOrName: IEventPlugin | string): void {\n    const name: string = typeof pluginOrName === 'string' ? pluginOrName : pluginOrName.name;\n    if (!name) {\n      this.log.error('Remove plugin failed: Plugin name not defined');\n      return;\n    }\n\n    const plugins = this._plugins; // optimization for minifier.\n    for (let index = 0; index < plugins.length; index++) {\n      if (plugins[index].name === name) {\n        plugins.splice(index, 1);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Automatically set the application version for events.\n   * @param version\n   */\n  public setVersion(version: string): void {\n    if (!!version) {\n      this.defaultData['@version'] = version;\n    }\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): void;\n  public setUserIdentity(identity: string): void;\n  public setUserIdentity(identity: string, name: string): void;\n  public setUserIdentity(userInfoOrIdentity: IUserInfo | string, name?: string): void {\n    const USER_KEY: string = '@user'; // optimization for minifier.\n    const userInfo: IUserInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name };\n\n    const shouldRemove: boolean = !userInfo || (!userInfo.identity && !userInfo.name);\n    if (shouldRemove) {\n      delete this.defaultData[USER_KEY];\n    } else {\n      this.defaultData[USER_KEY] = userInfo;\n    }\n\n    this.log.info(`user identity: ${shouldRemove ? 'null' : userInfo.identity}`);\n  }\n\n  /**\n   * Used to identify the client that sent the events to the server.\n   * @returns {string}\n   */\n  public get userAgent(): string {\n    return 'exceptionless-js/1.0.0.0';\n  }\n\n  /**\n   * Automatically send a heartbeat to keep the session alive.\n   */\n  public useSessions(sendHeartbeats: boolean = true, heartbeatInterval: number = 30000): void {\n    if (sendHeartbeats) {\n      this.addPlugin(new HeartbeatPlugin(heartbeatInterval));\n    }\n  }\n\n  /**\n   * Automatically set a reference id for error events.\n   */\n  public useReferenceIds(): void {\n    this.addPlugin(new ReferenceIdPlugin());\n  }\n\n  public useLocalStorage(): void {\n    // This method will be injected via the prototype.\n  }\n\n  // TODO: Support a min log level.\n  public useDebugLogger(): void {\n    this.log = new ConsoleLog();\n  }\n\n  public onChanged(handler: (config: Configuration) => void) {\n    !!handler && this._handlers.push(handler);\n  }\n\n  private changed() {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(this);\n      } catch (ex) {\n        this.log.error(`Error calling onChanged handler: ${ex}`);\n      }\n    }\n  }\n\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @returns {IConfigurationSettings}\n   */\n  public static get defaults() {\n    if (Configuration._defaultSettings === null) {\n      Configuration._defaultSettings = {};\n    }\n\n    return Configuration._defaultSettings;\n  }\n}\n\nexport interface IUserDescription {\n  email_address?: string;\n  description?: string;\n  data?: any;\n}\n\nexport class SettingsResponse {\n  public success: boolean = false;\n  public settings: any;\n  public settingsVersion: number = -1;\n  public message: string;\n  public exception: any;\n\n  constructor(success: boolean, settings: any, settingsVersion: number = -1, exception: any = null, message: string = null) {\n    this.success = success;\n    this.settings = settings;\n    this.settingsVersion = settingsVersion;\n    this.exception = exception;\n    this.message = message;\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                   \n\nexport class EventBuilder {\n  public target: IEvent;\n  public client: ExceptionlessClient;\n  public pluginContextData: ContextData;\n\n  private _validIdentifierErrorMessage: string = 'must contain between 8 and 100 alphanumeric or \\'-\\' characters.'; // optimization for minifier.\n\n  constructor(event: IEvent, client: ExceptionlessClient, pluginContextData?: ContextData) {\n    this.target = event;\n    this.client = client;\n    this.pluginContextData = pluginContextData || new ContextData();\n  }\n\n  public setType(type: string): EventBuilder {\n    if (!!type) {\n      this.target.type = type;\n    }\n\n    return this;\n  }\n\n  public setSource(source: string): EventBuilder {\n    if (!!source) {\n      this.target.source = source;\n    }\n\n    return this;\n  }\n\n  public setReferenceId(referenceId: string): EventBuilder {\n    if (!this.isValidIdentifier(referenceId)) {\n      throw new Error(`ReferenceId ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.target.reference_id = referenceId;\n    return this;\n  }\n\n  /**\n   * Allows you to reference a parent event by its ReferenceId property. This allows you to have parent and child relationships.\n   * @param name Reference name\n   * @param id The reference id that points to a specific event\n   * @returns {EventBuilder}\n   */\n  public setEventReference(name: string, id: string): EventBuilder {\n    if (!name) {\n      throw new Error('Invalid name');\n    }\n\n    if (!id || !this.isValidIdentifier(id)) {\n      throw new Error(`Id ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.setProperty('@ref:' + name, id);\n    return this;\n  }\n\n  public setMessage(message: string): EventBuilder {\n    if (!!message) {\n      this.target.message = message;\n    }\n\n    return this;\n  }\n\n  public setGeo(latitude: number, longitude: number): EventBuilder {\n    if (latitude < -90.0 || latitude > 90.0) {\n      throw new Error('Must be a valid latitude value between -90.0 and 90.0.');\n    }\n\n    if (longitude < -180.0 || longitude > 180.0) {\n      throw new Error('Must be a valid longitude value between -180.0 and 180.0.');\n    }\n\n    this.target.geo = `${latitude},${longitude}`;\n    return this;\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): EventBuilder;\n  public setUserIdentity(identity: string): EventBuilder;\n  public setUserIdentity(identity: string, name: string): EventBuilder;\n  public setUserIdentity(userInfoOrIdentity: IUserInfo | string, name?: string): EventBuilder {\n    const userInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name };\n    if (!userInfo || (!userInfo.identity && !userInfo.name)) {\n      return this;\n    }\n\n    this.setProperty('@user', userInfo);\n    return this;\n  }\n\n  /**\n   * Sets the user's description of the event.\n   *\n   * @param emailAddress The email address\n   * @param description The user's description of the event.\n   * @returns {EventBuilder}\n   */\n  public setUserDescription(emailAddress: string, description: string): EventBuilder {\n    if (emailAddress && description) {\n      this.setProperty('@user_description', { email_address: emailAddress, description });\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting manual\n   * stacking information.\n   * @param signatureData A dictionary of strings to use for stacking.\n   * @param title An optional title for the stacking information.\n   * @returns {EventBuilder}\n   */\n  public setManualStackingInfo(signatureData: any, title?: string) {\n    if (signatureData) {\n      const stack: IManualStackingInfo = { signature_data: signatureData };\n      if (title) {\n        stack.title = title;\n      }\n\n      this.setProperty('@stack', stack);\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting the stacking key.\n   * @param manualStackingKey The manual stacking key.\n   * @param title An optional title for the stacking information.\n   * @returns {EventBuilder}\n   */\n  public setManualStackingKey(manualStackingKey: string, title?: string): EventBuilder {\n    if (manualStackingKey) {\n      const data = { ManualStackingKey: manualStackingKey };\n      this.setManualStackingInfo(data, title);\n    }\n\n    return this;\n  }\n\n  public setValue(value: number): EventBuilder {\n    if (!!value) {\n      this.target.value = value;\n    }\n\n    return this;\n  }\n\n  public addTags(...tags: string[]): EventBuilder {\n    this.target.tags = Utils.addRange<string>(this.target.tags, ...tags);\n    return this;\n  }\n\n  /**\n   * Adds the object to extended data. Uses @excludedPropertyNames\n   * to exclude data from being included in the event.\n   * @param name The data object to add.\n   * @param value The name of the object to add.\n   * @param maxDepth The max depth of the object to include.\n   * @param excludedPropertyNames Any property names that should be excluded.\n   */\n  public setProperty(name: string, value: any, maxDepth?: number, excludedPropertyNames?: string[]): EventBuilder {\n    if (!name || (value === undefined || value == null)) {\n      return this;\n    }\n\n    if (!this.target.data) {\n      this.target.data = {};\n    }\n\n    const result = JSON.parse(Utils.stringify(value, this.client.config.dataExclusions.concat(excludedPropertyNames || []), maxDepth));\n    if (!Utils.isEmpty(result)) {\n      this.target.data[name] = result;\n    }\n\n    return this;\n  }\n\n  public markAsCritical(critical: boolean): EventBuilder {\n    if (critical) {\n      this.addTags('Critical');\n    }\n\n    return this;\n  }\n\n  public addRequestInfo(request: object): EventBuilder {\n    if (!!request) {\n      this.pluginContextData['@request'] = request;\n    }\n\n    return this;\n  }\n\n  public submit(callback?: (context: EventPluginContext) => void): void {\n    this.client.submitEvent(this.target, this.pluginContextData, callback);\n  }\n\n  private isValidIdentifier(value: string): boolean {\n    if (!value) {\n      return true;\n    }\n\n    if (value.length < 8 || value.length > 100) {\n      return false;\n    }\n\n    for (let index = 0; index < value.length; index++) {\n      const code = value.charCodeAt(index);\n      const isDigit = (code >= 48) && (code <= 57);\n      const isLetter = ((code >= 65) && (code <= 90)) || ((code >= 97) && (code <= 122));\n      const isMinus = code === 45;\n\n      if (!(isDigit || isLetter) && !isMinus) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nexport interface IManualStackingInfo {\n  title?: string;\n  signature_data?: any;\n}\n\n                                                                                                                                                \n\nexport class ConfigurationDefaultsPlugin implements IEventPlugin {\n  public priority: number = 10;\n  public name: string = 'ConfigurationDefaultsPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const config = context.client.config;\n    const defaultTags: string[] = config.defaultTags || [];\n    for (const tag of defaultTags) {\n      if (!!tag && context.event.tags.indexOf(tag) < 0) {\n        context.event.tags.push(tag);\n      }\n    }\n\n    // tslint:disable-next-line:ban-types\n    const defaultData: Object = config.defaultData || {};\n    for (const key in defaultData) {\n      if (!!defaultData[key]) {\n        const result = JSON.parse(Utils.stringify(defaultData[key], config.dataExclusions));\n        if (!Utils.isEmpty(result)) {\n          context.event.data[key] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                        \n\nexport class DuplicateCheckerPlugin implements IEventPlugin {\n  public priority: number = 1010;\n  public name: string = 'DuplicateCheckerPlugin';\n\n  private _mergedEvents: MergedEvent[] = [];\n  private _processedHashcodes: TimestampedHash[] = [];\n  private _getCurrentTime: () => number;\n  private _interval: number;\n\n  constructor(getCurrentTime: () => number = () => Date.now(), interval: number = 30000) {\n    this._getCurrentTime = getCurrentTime;\n    this._interval = interval;\n\n    setInterval(() => {\n      while (this._mergedEvents.length > 0) {\n        this._mergedEvents.shift().resubmit();\n      }\n    }, interval);\n  }\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    function getHashCode(error: IInnerError): number {\n      let hashCode = 0;\n      while (error) {\n        if (error.message && error.message.length) {\n          hashCode += (hashCode * 397) ^ Utils.getHashCode(error.message);\n        }\n        if (error.stack_trace && error.stack_trace.length) {\n          hashCode += (hashCode * 397) ^ Utils.getHashCode(JSON.stringify(error.stack_trace));\n        }\n        error = error.inner;\n      }\n\n      return hashCode;\n    }\n\n    const error = context.event.data['@error'];\n    const hashCode = getHashCode(error);\n    if (hashCode) {\n      const count = context.event.count || 1;\n      const now = this._getCurrentTime();\n\n      const merged = this._mergedEvents.filter((s) => s.hashCode === hashCode)[0];\n      if (merged) {\n        merged.incrementCount(count);\n        merged.updateDate(context.event.date);\n        context.log.info('Ignoring duplicate event with hash: ' + hashCode);\n        context.cancelled = true;\n      }\n\n      if (!context.cancelled && this._processedHashcodes.some((h) => h.hash === hashCode && h.timestamp >= (now - this._interval))) {\n        context.log.trace('Adding event with hash: ' + hashCode);\n        this._mergedEvents.push(new MergedEvent(hashCode, context, count));\n        context.cancelled = true;\n      }\n\n      if (!context.cancelled) {\n        context.log.trace('Enqueueing event with hash: ' + hashCode + 'to cache.');\n        this._processedHashcodes.push({ hash: hashCode, timestamp: now });\n\n        // Only keep the last 50 recent errors.\n        while (this._processedHashcodes.length > 50) {\n          this._processedHashcodes.shift();\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\ninterface TimestampedHash {\n  hash: number;\n  timestamp: number;\n}\n\nclass MergedEvent {\n  public hashCode: number;\n  private _count: number;\n  private _context: EventPluginContext;\n\n  constructor(hashCode: number, context: EventPluginContext, count: number) {\n    this.hashCode = hashCode;\n    this._context = context;\n    this._count = count;\n  }\n\n  public incrementCount(count: number) {\n    this._count += count;\n  }\n\n  public resubmit() {\n    this._context.event.count = this._count;\n    this._context.client.config.queue.enqueue(this._context.event);\n  }\n\n  public updateDate(date) {\n    if (date > this._context.event.date) {\n      this._context.event.date = date;\n    }\n  }\n}\n\n                                                                                                                                                                             \n\nexport class EnvironmentInfoPlugin implements IEventPlugin {\n  public priority: number = 80;\n  public name: string = 'EnvironmentInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ENVIRONMENT_KEY: string = '@environment'; // optimization for minifier.\n\n    const collector = context.client.config.environmentInfoCollector;\n    if (!context.event.data[ENVIRONMENT_KEY] && collector) {\n      const environmentInfo: IEnvironmentInfo = collector.getEnvironmentInfo(context);\n      if (!!environmentInfo) {\n        context.event.data[ENVIRONMENT_KEY] = environmentInfo;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                \n\nexport class ErrorPlugin implements IEventPlugin {\n  public priority: number = 30;\n  public name: string = 'ErrorPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\n    const ignoredProperties: string[] = [\n      'arguments',\n      'column',\n      'columnNumber',\n      'description',\n      'fileName',\n      'message',\n      'name',\n      'number',\n      'line',\n      'lineNumber',\n      'opera#sourceloc',\n      'sourceId',\n      'sourceURL',\n      'stack',\n      'stackArray',\n      'stacktrace'\n    ];\n\n    const exception = context.contextData.getException();\n    if (!!exception) {\n      context.event.type = 'error';\n\n      if (!context.event.data[ERROR_KEY]) {\n        const config = context.client.config;\n        const parser = config.errorParser;\n        if (!parser) {\n          throw new Error('No error parser was defined.');\n        }\n\n        const result = parser.parse(context, exception);\n        if (!!result) {\n          const additionalData = JSON.parse(Utils.stringify(exception, config.dataExclusions.concat(ignoredProperties)));\n          if (!Utils.isEmpty(additionalData)) {\n            if (!result.data) {\n              result.data = {};\n            }\n            result.data['@ext'] = additionalData;\n          }\n\n          context.event.data[ERROR_KEY] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                        \n\nexport class EventExclusionPlugin implements IEventPlugin {\n  public priority: number = 45;\n  public name: string = 'EventExclusionPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    function getLogLevel(level: string): number {\n      switch ((level || '').toLowerCase().trim()) {\n        case 'trace':\n        case 'true':\n        case '1':\n        case 'yes':\n          return 0;\n        case 'debug':\n          return 1;\n        case 'info':\n          return 2;\n        case 'warn':\n          return 3;\n        case 'error':\n          return 4;\n        case 'fatal':\n          return 5;\n        case 'off':\n        case 'false':\n        case '0':\n        case 'no':\n          return 6;\n        default:\n          return -1;\n      }\n    }\n\n    function getMinLogLevel(settings: object, loggerName: string = '*'): number {\n      return getLogLevel(getTypeAndSourceSetting(settings, 'log', loggerName, 'Trace') + '');\n    }\n\n    // tslint:disable-next-line:ban-types\n    function getTypeAndSourceSetting(settings: Object = {}, type: string, source: string, defaultValue?: string|boolean): string|boolean {\n      if (!type) {\n        return defaultValue;\n      }\n\n      const isLog = type === 'log';\n      const sourcePrefix =  `@@${type}:`;\n\n      const value = settings[sourcePrefix + source];\n      if (value) {\n        return !isLog ? Utils.toBoolean(value) : value;\n      }\n\n      // check for wildcard match\n      for (const key in settings) {\n        if (Utils.startsWith(key.toLowerCase(), sourcePrefix.toLowerCase()) && Utils.isMatch(source, [key.substring(sourcePrefix.length)])) {\n          return !isLog ? Utils.toBoolean(settings[key]) : settings[key];\n        }\n      }\n\n      return defaultValue;\n    }\n\n    const ev = context.event;\n    const log = context.log;\n    const settings = context.client.config.settings;\n\n    if (ev.type === 'log') {\n      const minLogLevel = getMinLogLevel(settings, ev.source);\n      const logLevel = getLogLevel(ev.data['@level']);\n\n      if (logLevel >= 0 && (logLevel > 5 || logLevel < minLogLevel)) {\n        log.info('Cancelling log event due to minimum log level.');\n        context.cancelled = true;\n      }\n    } else if (ev.type === 'error') {\n      let error: IInnerError = ev.data['@error'];\n      while (!context.cancelled && error) {\n        if (getTypeAndSourceSetting(settings, ev.type, error.type, true) === false) {\n          log.info(`Cancelling error from excluded exception type: ${error.type}`);\n          context.cancelled = true;\n        }\n\n        error = error.inner;\n      }\n    } else if (getTypeAndSourceSetting(settings, ev.type, ev.source, true) === false) {\n      log.info(`Cancelling event from excluded type: ${ev.type} and source: ${ev.source}`);\n      context.cancelled = true;\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                           \n\nexport class ModuleInfoPlugin implements IEventPlugin {\n  public priority: number = 50;\n  public name: string = 'ModuleInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\n\n    const collector = context.client.config.moduleCollector;\n    if (context.event.data[ERROR_KEY] && !context.event.data['@error'].modules && !!collector) {\n      const modules: IModule[] = collector.getModules(context);\n      if (modules && modules.length > 0) {\n        context.event.data[ERROR_KEY].modules = modules;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                          \n\nexport class RequestInfoPlugin implements IEventPlugin {\n  public priority: number = 70;\n  public name: string = 'RequestInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const REQUEST_KEY: string = '@request'; // optimization for minifier.\n\n    const config = context.client.config;\n    const collector = config.requestInfoCollector;\n    if (!context.event.data[REQUEST_KEY] && !!collector) {\n      const requestInfo: IRequestInfo = collector.getRequestInfo(context);\n      if (!!requestInfo) {\n        if (Utils.isMatch(requestInfo.user_agent, config.userAgentBotPatterns)) {\n          context.log.info('Cancelling event as the request user agent matches a known bot pattern');\n          context.cancelled = true;\n        } else {\n          context.event.data[REQUEST_KEY] = requestInfo;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                           \n\nexport class SubmissionMethodPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = 'SubmissionMethodPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const submissionMethod: string = context.contextData.getSubmissionMethod();\n    if (!!submissionMethod) {\n      context.event.data['@submission_method'] = submissionMethod;\n    }\n\n    next && next();\n  }\n}\n\n                                                                                     \n\nexport class InMemoryStorage implements IStorage {\n  private maxItems: number;\n  private items: IStorageItem[] = [];\n  private lastTimestamp: number = 0;\n\n  constructor(maxItems: number) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any): number {\n    if (!value) {\n      return null;\n    }\n\n    const items = this.items;\n    const timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    const item = { timestamp, value };\n\n    if (items.push(item) > this.maxItems) {\n      items.shift();\n    }\n\n    this.lastTimestamp = timestamp;\n    return item.timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    return this.items.slice(0, limit);\n  }\n\n  public remove(timestamp: number): void {\n    const items = this.items;\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].timestamp === timestamp) {\n        items.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  public clear(): void {\n    this.items = [];\n  }\n}\n\nexport interface IClientConfiguration {\n  settings: object;\n  version: number;\n}\n\n                                                                                     \n\nexport abstract class KeyValueStorageBase implements IStorage {\n  private maxItems: number;\n  private items: number[];\n  private lastTimestamp: number = 0;\n\n  constructor(maxItems) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any, single?: boolean): number {\n    if (!value) {\n      return null;\n    }\n\n    this.ensureIndex();\n\n    const items = this.items;\n    const timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    const key = this.getKey(timestamp);\n    const json = JSON.stringify(value);\n\n    try {\n      this.write(key, json);\n      this.lastTimestamp = timestamp;\n      if (items.push(timestamp) > this.maxItems) {\n        this.delete(this.getKey(items.shift()));\n      }\n    } catch (e) {\n      return null;\n    }\n\n    return timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    this.ensureIndex();\n\n    return this.items.slice(0, limit)\n      .map((timestamp) => {\n        // Read and parse item for this timestamp\n        const key = this.getKey(timestamp);\n        try {\n          const json = this.read(key);\n          const value = JSON.parse(json, parseDate);\n          return { timestamp, value };\n        } catch (error) {\n          // Something went wrong - try to delete the cause.\n          this.safeDelete(key);\n          return null;\n        }\n      })\n      .filter((item) => item != null);\n  }\n\n  public remove(timestamp: number): void {\n    this.ensureIndex();\n\n    const items = this.items;\n    const index = items.indexOf(timestamp);\n    if (index >= 0) {\n      const key = this.getKey(timestamp);\n      this.safeDelete(key);\n      items.splice(index, 1);\n    }\n  }\n\n  public clear(): void {\n    this.items.forEach((item) => this.safeDelete(this.getKey(item)));\n    this.items = [];\n  }\n\n  protected abstract write(key: string, value: string): void;\n  protected abstract read(key: string): string;\n  protected abstract readAllKeys(): string[];\n  protected abstract delete(key: string);\n  protected abstract getKey(timestamp: number): string;\n  protected abstract getTimestamp(key: string): number;\n\n  private ensureIndex() {\n    if (!this.items) {\n      this.items = this.createIndex();\n      this.lastTimestamp = Math.max(0, ...this.items) + 1;\n    }\n  }\n\n  private safeDelete(key: string): void {\n    try {\n      this.delete(key);\n    } catch (error) {\n    }\n  }\n\n  private createIndex() {\n    try {\n      const keys = this.readAllKeys();\n      return keys.map((key) => {\n        try {\n          const timestamp = this.getTimestamp(key);\n          if (!timestamp) {\n            this.safeDelete(key);\n            return null;\n          }\n          return timestamp;\n        } catch (error) {\n          this.safeDelete(key);\n          return null;\n        }\n      }).filter((timestamp) => timestamp != null)\n        .sort((a, b) => a - b);\n    } catch (error) {\n      return [];\n    }\n  }\n}\n\nfunction parseDate(key, value) {\n  const dateRegx = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/g;\n  if (typeof value === 'string') {\n    const a = dateRegx.exec(value);\n    if (a) {\n      return new Date(value);\n    }\n  }\n  return value;\n}\n\n                                                            \n\nexport class BrowserStorage extends KeyValueStorageBase {\n  private prefix: string;\n\n  public static isAvailable(): boolean {\n    try {\n      const storage = window.localStorage;\n      const x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  constructor(namespace: string, prefix: string = 'com.exceptionless.', maxItems: number = 20) {\n    super(maxItems);\n\n    this.prefix = prefix + namespace + '-';\n  }\n\n  public write(key: string, value: string) {\n    window.localStorage.setItem(key, value);\n  }\n\n  public read(key: string) {\n    return window.localStorage.getItem(key);\n  }\n\n  public readAllKeys() {\n    return Object.keys(window.localStorage)\n      .filter((key) => key.indexOf(this.prefix) === 0);\n  }\n\n  public delete(key: string) {\n    window.localStorage.removeItem(key);\n  }\n\n  public getKey(timestamp) {\n    return this.prefix + timestamp;\n  }\n\n  public getTimestamp(key) {\n    return parseInt(key.substr(this.prefix.length), 10);\n  }\n}\n\n                                                                                                                                                                                                                                                                                                           \n\nexport class DefaultErrorParser implements IErrorParser {\n  public parse(context: EventPluginContext, exception: Error): IError {\n    function getParameters(parameters: string | string[]): IParameter[] {\n      const params: string[] = (typeof parameters === 'string' ? [parameters] : parameters) || [];\n\n      const result: IParameter[] = [];\n      for (const param of params) {\n        result.push({ name: param });\n      }\n\n      return result;\n    }\n\n    function getStackFrames(stackFrames: TraceKit.StackFrame[]): IStackFrame[] {\n      const ANONYMOUS: string = '<anonymous>';\n      const frames: IStackFrame[] = [];\n\n      for (const frame of stackFrames) {\n        frames.push({\n          name: (frame.func || ANONYMOUS).replace('?', ANONYMOUS),\n          parameters: getParameters(frame.args),\n          file_name: frame.url,\n          line_number: frame.line || 0,\n          column: frame.column || 0\n        });\n      }\n\n      return frames;\n    }\n\n    const TRACEKIT_STACK_TRACE_KEY: string = '@@_TraceKit.StackTrace'; // optimization for minifier.\n\n    const stackTrace: TraceKit.StackTrace = !!context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      ? context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      : TraceKit.computeStackTrace(exception, 25);\n\n    if (!stackTrace) {\n      throw new Error('Unable to parse the exceptions stack trace.');\n    }\n\n    const message = typeof(exception) === 'string' ? exception as any : undefined;\n    return {\n      type: stackTrace.name,\n      message: stackTrace.message || exception.message || message,\n      stack_trace: getStackFrames(stackTrace.stack || [])\n    };\n  }\n}\n\n                                                                                                                                                                                                         \n\nexport class DefaultModuleCollector implements IModuleCollector {\n  public getModules(context: EventPluginContext): IModule[] {\n    if (document && document.getElementsByTagName) {\n      return null;\n    }\n\n    const modules: IModule[] = [];\n    const scripts: NodeListOf<HTMLScriptElement> = document.getElementsByTagName('script');\n    if (scripts && scripts.length > 0) {\n      for (let index = 0; index < scripts.length; index++) {\n        if (scripts[index].src) {\n          modules.push({\n            module_id: index,\n            name: scripts[index].src,\n            version: Utils.parseVersion(scripts[index].src)\n          });\n        } else if (!!scripts[index].innerHTML) {\n          modules.push({\n            module_id: index,\n            name: 'Script Tag',\n            version: Utils.getHashCode(scripts[index].innerHTML).toString()\n          });\n        }\n      }\n    }\n\n    return modules;\n  }\n}\n\n                                                                                                                                                                                                                             \n\nexport class DefaultRequestInfoCollector implements IRequestInfoCollector {\n  public getRequestInfo(context: EventPluginContext): IRequestInfo {\n    if (!document || !navigator || !location) {\n      return null;\n    }\n\n    const exclusions = context.client.config.dataExclusions;\n    const requestInfo: IRequestInfo = {\n      user_agent: navigator.userAgent,\n      is_secure: location.protocol === 'https:',\n      host: location.hostname,\n      port: location.port && location.port !== '' ? parseInt(location.port, 10) : 80,\n      path: location.pathname,\n      // client_ip_address: 'TODO',\n      cookies: Utils.getCookies(document.cookie, exclusions),\n      query_string: Utils.parseQueryString(location.search.substring(1), exclusions)\n    };\n\n    if (document.referrer && document.referrer !== '') {\n      requestInfo.referrer = document.referrer;\n    }\n\n    return requestInfo;\n  }\n}\n\n                                                                                                                                                \n\nexport class BrowserStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(prefix?: string, maxQueueItems: number = 250) {\n    this.queue = new BrowserStorage('q', prefix, maxQueueItems);\n    this.settings = new BrowserStorage('settings', prefix, 1);\n  }\n\n}\n\n                                                                                                                                                                              \n\n// tslint:disable-next-line:prefer-const\ndeclare var XDomainRequest: { new (); create(); };\n\nexport class DefaultSubmissionAdapter implements ISubmissionAdapter {\n  public sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean) {\n    // TODO: Handle sending events when app is exiting with send beacon.\n    const TIMEOUT: string = 'timeout';  // optimization for minifier.\n    const LOADED: string = 'loaded';  // optimization for minifier.\n    const WITH_CREDENTIALS: string = 'withCredentials';  // optimization for minifier.\n\n    let isCompleted: boolean = false;\n    let useSetTimeout: boolean = false;\n    function complete(mode: string, xhr: XMLHttpRequest) {\n      function parseResponseHeaders(headerStr) {\n        function trim(value) {\n          return value.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n        }\n\n        const headers = {};\n        const headerPairs = (headerStr || '').split('\\u000d\\u000a');\n        for (const headerPair of headerPairs) {\n          // Can't use split() here because it does the wrong thing\n          // if the header value has the string \": \" in it.\n          const separator = headerPair.indexOf('\\u003a\\u0020');\n          if (separator > 0) {\n            headers[trim(headerPair.substring(0, separator).toLowerCase())] = headerPair.substring(separator + 2);\n          }\n        }\n\n        return headers;\n      }\n\n      if (isCompleted) {\n        return;\n      }\n\n      isCompleted = true;\n\n      let message: string = xhr.statusText;\n      const responseText: string = xhr.responseText;\n      let status: number = xhr.status;\n\n      if (mode === TIMEOUT || status === 0) {\n        message = 'Unable to connect to server.';\n        status = 0;\n      } else if (mode === LOADED && !status) {\n        status = request.method === 'POST' ? 202 : 200;\n      } else if (status < 200 || status > 299) {\n        const responseBody: any = (xhr as any).responseBody;\n        if (!!responseBody && !!responseBody.message) {\n          message = responseBody.message;\n        } else if (!!responseText && responseText.indexOf('message') !== -1) {\n          try {\n            message = JSON.parse(responseText).message;\n          } catch (e) {\n            message = responseText;\n          }\n        }\n      }\n\n      callback && callback(status || 500, message || '', responseText, parseResponseHeaders(xhr.getAllResponseHeaders && xhr.getAllResponseHeaders()));\n    }\n\n    function createRequest(userAgent: string, method: string, url: string): XMLHttpRequest {\n      let xhr: any = new XMLHttpRequest();\n      if (WITH_CREDENTIALS in xhr) {\n        xhr.open(method, url, true);\n\n        xhr.setRequestHeader('X-Exceptionless-Client', userAgent);\n        if (method === 'POST') {\n          xhr.setRequestHeader('Content-Type', 'application/json');\n        }\n      } else if (typeof XDomainRequest !== 'undefined') {\n        useSetTimeout = true;\n        xhr = new XDomainRequest();\n        xhr.open(method, location.protocol === 'http:' ? url.replace('https:', 'http:') : url);\n      } else {\n        xhr = null;\n      }\n\n      if (xhr) {\n        xhr.timeout = 10000;\n      }\n\n      return xhr;\n    }\n\n    const url = `${request.url}${(request.url.indexOf('?') === -1 ? '?' : '&')}access_token=${encodeURIComponent(request.apiKey)}`;\n    const xhr = createRequest(request.userAgent, request.method || 'POST', url);\n    if (!xhr) {\n      return (callback && callback(503, 'CORS not supported.'));\n    }\n\n    if (WITH_CREDENTIALS in xhr) {\n      xhr.onreadystatechange = () => {\n        // xhr not ready.\n        if (xhr.readyState !== 4) {\n          return;\n        }\n\n        complete(LOADED, xhr);\n      };\n    }\n\n    xhr.onprogress = () => { };\n    xhr.ontimeout = () => complete(TIMEOUT, xhr);\n    xhr.onerror = () => complete('error', xhr);\n    xhr.onload = () => complete(LOADED, xhr);\n\n    if (useSetTimeout) {\n      setTimeout(() => xhr.send(request.data), 500);\n    } else {\n      xhr.send(request.data);\n    }\n  }\n}\n\n                                                                                                                     \n\nexport class NodeFileStorage extends KeyValueStorageBase {\n  private directory: string;\n  private prefix: string;\n  private fs: any;\n\n  constructor(namespace: string, folder?: string, prefix: string = 'ex-', maxItems: number = 20, fs?: any) {\n    super(maxItems);\n\n    if (!folder) {\n      folder = Path.join(Path.dirname(require.main.filename), '.exceptionless');\n    }\n\n    const subfolder = Path.join(folder, namespace);\n    this.directory = Path.resolve(subfolder);\n    this.prefix = prefix;\n    this.fs = fs ? fs : Fs;\n\n    this.mkdir(this.directory);\n  }\n\n  public write(key: string, value: string) {\n    this.fs.writeFileSync(key, value);\n  }\n\n  public read(key: string) {\n    return this.fs.readFileSync(key, 'utf8');\n  }\n\n  public readAllKeys() {\n    return this.fs.readdirSync(this.directory)\n      .filter((file) => file.indexOf(this.prefix) === 0)\n      .map((file) => Path.join(this.directory, file));\n  }\n\n  public delete(key: string) {\n    this.fs.unlinkSync(key);\n  }\n\n  public getKey(timestamp) {\n    return Path.join(this.directory, `${this.prefix}${timestamp}.json`);\n  }\n\n  public getTimestamp(key) {\n    return parseInt(Path.basename(key, '.json')\n      .substr(this.prefix.length), 10);\n  }\n\n  private mkdir(path) {\n    const dirs = path.split(Path.sep);\n    let root = '';\n\n    while (dirs.length > 0) {\n      const dir = dirs.shift();\n      if (dir === '') {\n        root = Path.sep;\n      }\n      if (!this.fs.existsSync(root + dir)) {\n        this.fs.mkdirSync(root + dir);\n      }\n      root += dir + Path.sep;\n    }\n  }\n}\n\n                                                                                                                                                                                                                                       \n\nexport class NodeEnvironmentInfoCollector implements IEnvironmentInfoCollector {\n  public getEnvironmentInfo(context: EventPluginContext): IEnvironmentInfo {\n    function getIpAddresses(): string {\n      const ips: string[] = [];\n      const interfaces = os.networkInterfaces();\n      Object.keys(interfaces).forEach((name) => {\n        interfaces[name].forEach((iface: any) => {\n          if ('IPv4' === iface.family && !iface.internal) {\n            ips.push(iface.address);\n          }\n        });\n      });\n\n      return ips.join(', ');\n    }\n\n    if (!os) {\n      return null;\n    }\n\n    const environmentInfo: IEnvironmentInfo = {\n      processor_count: os.cpus().length,\n      total_physical_memory: os.totalmem(),\n      available_physical_memory: os.freemem(),\n      command_line: process.argv.join(' '),\n      process_name: (process.title || '').replace(/[\\uE000-\\uF8FF]/g, ''),\n      process_id: process.pid + '',\n      process_memory_size: process.memoryUsage().heapTotal,\n      // thread_id: '',\n      architecture: os.arch(),\n      o_s_name: os.type(),\n      o_s_version: os.release(),\n      ip_address: getIpAddresses(),\n      machine_name: os.hostname(),\n      // install_id: '',\n      runtime_version: process.version,\n      data: {\n        loadavg: os.loadavg(),\n        platform: os.platform(),\n        tmpdir: os.tmpdir(),\n        uptime: os.uptime()\n      }\n    };\n\n    if ((os as any).endianness) {\n      environmentInfo.data.endianness = (os as any).endianness();\n    }\n\n    return environmentInfo;\n  }\n}\n\n                                                                                                                                                                                                                                                                   \n\nexport class NodeErrorParser implements IErrorParser {\n  public parse(context: EventPluginContext, exception: Error): IError {\n    function getStackFrames(stackFrames: any[]): IStackFrame[] {\n      const frames: IStackFrame[] = [];\n\n      for (const frame of stackFrames) {\n        frames.push({\n          name: frame.getMethodName() || frame.getFunctionName(),\n          // parameters: frame.args,\n          file_name: frame.getFileName(),\n          line_number: frame.getLineNumber() || 0,\n          column: frame.getColumnNumber() || 0,\n          declaring_type: frame.getTypeName(),\n          data: {\n            is_native: frame.isNative() || (!!frame.filename && frame.filename[0] !== '/' && frame.filename[0] !== '.')\n          }\n        });\n      }\n\n      return frames;\n    }\n\n    if (!nodestacktrace) {\n      throw new Error('Unable to load the stack trace library.');\n    }\n\n    const stackFrames = nodestacktrace.parse(exception) || [];\n    return {\n      type: exception.name,\n      message: exception.message,\n      stack_trace: getStackFrames(stackFrames)\n    };\n  }\n}\n\n                                                                                                                                                                                                                                                \n\nexport class NodeModuleCollector implements IModuleCollector {\n\n  private initialized: boolean = false;\n  private installedModules: { [id: string]: IModule } = {};\n\n  public getModules(context: EventPluginContext): IModule[] {\n    this.initialize();\n\n    if (!require.main) {\n      return [];\n    }\n\n    const modulePath = path.dirname(require.main.filename) + '/node_modules/';\n    const pathLength = modulePath.length;\n\n    const loadedKeys = Object.keys(require.cache);\n    const loadedModules = {};\n\n    loadedKeys.forEach((key) => {\n      let id = key.substr(pathLength);\n      id = id.substr(0, id.indexOf('/'));\n      loadedModules[id] = true;\n    });\n\n    return Object.keys(loadedModules)\n      .map((key) => this.installedModules[key])\n      .filter((m) => m !== undefined);\n  }\n\n  private initialize() {\n    if (this.initialized) {\n      return;\n    }\n\n    this.initialized = true;\n\n    const output = child.spawnSync('npm', ['ls', '--depth=0', '--json']).stdout;\n\n    if (!output) {\n      return;\n    }\n\n    let json;\n    try {\n      json = JSON.parse(output.toString());\n    } catch (e) {\n      return;\n    }\n\n    const items = json.dependencies;\n    if (!items) {\n      return;\n    }\n\n    let id = 0;\n    this.installedModules = {};\n\n    Object.keys(items).forEach((key) => {\n      const item = items[key];\n      const theModule: IModule = {\n        module_id: id++,\n        name: key,\n        version: item.version\n      };\n\n      this.installedModules[key] = theModule;\n    });\n  }\n}\n\n                                                                                                                                                                                                                             \n\nexport class NodeRequestInfoCollector implements IRequestInfoCollector {\n  public getRequestInfo(context: EventPluginContext): IRequestInfo {\n    const REQUEST_KEY: string = '@request'; // optimization for minifier.\n    if (!context.contextData[REQUEST_KEY]) {\n      return null;\n    }\n\n    const exclusions = context.client.config.dataExclusions;\n\n    // TODO: include referrer\n    const request = context.contextData[REQUEST_KEY];\n    const requestInfo: IRequestInfo = {\n      client_ip_address: request.ip,\n      user_agent: request.headers['user-agent'],\n      is_secure: request.secure,\n      http_method: request.method,\n      host: request.hostname || request.host,\n      path: request.path,\n      post_data: JSON.parse(Utils.stringify(request.body || {}, exclusions)),\n      cookies: Utils.getCookies(request.headers.cookie, exclusions),\n      query_string: JSON.parse(Utils.stringify(request.params || {}, exclusions))\n    };\n\n    const host = request.headers.host;\n    const port: number = host && parseInt(host.slice(host.indexOf(':') + 1), 10);\n    if (port > 0) {\n      requestInfo.port = port;\n    }\n\n    return requestInfo;\n  }\n}\n\n                                                                                                                                                  \n\nexport class NodeFileStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(folder?: string, prefix?: string, maxQueueItems: number = 250) {\n    this.queue = new NodeFileStorage('q', folder, prefix, maxQueueItems);\n    this.settings = new NodeFileStorage('settings', folder, prefix, 1);\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                     \n\nexport class NodeSubmissionAdapter implements ISubmissionAdapter {\n  public sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean) {\n    if (isAppExiting) {\n      this.sendRequestSync(request, callback);\n      return;\n    }\n\n    const parsedHost = url.parse(request.url);\n\n    const options: https.RequestOptions = {\n      auth: `client:${request.apiKey}`,\n      headers: {},\n      hostname: parsedHost.hostname,\n      method: request.method,\n      port: parsedHost.port && parseInt(parsedHost.port, 10),\n      path: request.url\n    };\n\n    options.headers['User-Agent'] = request.userAgent;\n\n    if (request.method === 'POST') {\n      options.headers = {\n        'Content-Type': 'application/json',\n        'Content-Length': Buffer.byteLength(request.data)\n      };\n    }\n\n    const protocol: any = (parsedHost.protocol === 'https' ? https : http);\n    const clientRequest: http.ClientRequest = protocol.request(options, (response: http.IncomingMessage) => {\n      let body = '';\n      response.setEncoding('utf8');\n      response.on('data', (chunk) => body += chunk);\n      response.on('end', () => this.complete(response, body, response.headers, callback));\n    });\n\n    clientRequest.on('error', (error: Error) => callback && callback(500, error.message));\n    clientRequest.end(request.data);\n  }\n\n  private complete(response: http.IncomingMessage, responseBody: string, responseHeaders: object, callback: SubmissionCallback): void {\n    let message: string;\n    if (response.statusCode === 0) {\n      message = 'Unable to connect to server.';\n    } else if (response.statusCode < 200 || response.statusCode > 299) {\n      message = response.statusMessage || ( response as any).message;\n    }\n\n    callback && callback(response.statusCode || 500, message, responseBody, responseHeaders);\n  }\n\n  private sendRequestSync(request: SubmissionRequest, callback: SubmissionCallback): void {\n    const requestJson = JSON.stringify(request);\n    const res = child.spawnSync(process.execPath, [require.resolve('./submitSync.js')],\n      {\n        input: requestJson,\n        stdio: ['pipe', 'pipe', process.stderr]\n      });\n\n    const out = res.stdout.toString();\n    const result = JSON.parse(out);\n\n    callback && callback(result.status, result.message, result.data, result.headers);\n  }\n}\n\nn\nexport function isBrowser(): boolean {\n  return typeof document !== 'undefined';\n}\n\nexport function browserInit() {\n  function getDefaultsSettingsFromScriptTag(): IConfigurationSettings {\n    if (!document || !document.getElementsByTagName) {\n      return null;\n    }\n\n    const scripts = document.getElementsByTagName('script');\n    // tslint:disable-next-line:prefer-for-of\n    for (let index = 0; index < scripts.length; index++) {\n      if (scripts[index].src && scripts[index].src.indexOf('/exceptionless') > -1) {\n        return Utils.parseQueryString(scripts[index].src.split('?').pop());\n      }\n    }\n    return null;\n  }\n\n  function processUnhandledException(stackTrace: TraceKit.StackTrace, options?: any): void {\n    const builder = ExceptionlessClient.default.createUnhandledException(new Error(stackTrace.message || (options || {}).status || 'Script error'), 'onerror');\n    builder.pluginContextData['@@_TraceKit.StackTrace'] = stackTrace;\n    builder.submit();\n  }\n\n  /*\n   TODO: We currently are unable to parse string exceptions.\n   function processJQueryAjaxError(event, xhr, settings, error:string): void {\n   let client = ExceptionlessClient.default;\n   if (xhr.status === 404) {\n   client.submitNotFound(settings.url);\n   } else if (xhr.status !== 401) {\n   client.createUnhandledException(error, 'JQuery.ajaxError')\n   .setSource(settings.url)\n   .setProperty('status', xhr.status)\n   .setProperty('request', settings.data)\n   .setProperty('response', xhr.responseText && xhr.responseText.slice && xhr.responseText.slice(0, 1024))\n   .submit();\n   }\n   }\n   */\n\n  Configuration.prototype.useLocalStorage = function() {\n    if (BrowserStorage.isAvailable()) {\n      this.storage = new BrowserStorageProvider();\n      SettingsManager.applySavedServerSettings(this);\n      this.changed();\n    }\n  };\n\n  const defaults = Configuration.defaults;\n  const settings = getDefaultsSettingsFromScriptTag();\n  if (settings && (settings.apiKey || settings.serverUrl)) {\n    defaults.apiKey = settings.apiKey;\n    defaults.serverUrl = settings.serverUrl;\n  }\n\n  defaults.errorParser = new DefaultErrorParser();\n  defaults.moduleCollector = new DefaultModuleCollector();\n  defaults.requestInfoCollector = new DefaultRequestInfoCollector();\n  defaults.submissionAdapter = new DefaultSubmissionAdapter();\n\n  TraceKit.report.subscribe(processUnhandledException);\n  TraceKit.extendToAsynchronousCallbacks();\n\n  // window && window.addEventListener && window.addEventListener('beforeunload', function () {\n  //   ExceptionlessClient.default.config.queue.process(true);\n  // });\n\n  // if (typeof $ !== 'undefined' && $(document)) {\n  //   $(document).ajaxError(processJQueryAjaxError);\n  // }\n\n  (Error as any).stackTraceLimit = Infinity;\n}\n\nif (isBrowser()) {\n  browserInit();\n}\n\n// tslint:disable-next-line:prefer-const\ndeclare var $;\n\nn\nexport function isNode(): boolean {\n  return typeof process !== 'undefined';\n}\n\nexport function nodeInit() {\n  const defaults = Configuration.defaults;\n  defaults.environmentInfoCollector = new NodeEnvironmentInfoCollector();\n  defaults.errorParser = new NodeErrorParser();\n  defaults.moduleCollector = new NodeModuleCollector();\n  defaults.requestInfoCollector = new NodeRequestInfoCollector();\n  defaults.submissionAdapter = new NodeSubmissionAdapter();\n\n  Configuration.prototype.useLocalStorage = function() {\n    this.storage = new NodeFileStorageProvider();\n    SettingsManager.applySavedServerSettings(this);\n    this.changed();\n  };\n\n  process.addListener('uncaughtException', (error: Error) => {\n    ExceptionlessClient.default.submitUnhandledException(error, 'uncaughtException');\n  });\n\n  process.on('exit', (code: number) => {\n    /**\n     * exit codes: https://nodejs.org/api/process.html#process_event_exit\n     * From now on, only synchronous code may run. As soon as this method\n     * ends, the application inevitably will exit.\n     */\n    function getExitCodeReason(exitCode: number): string {\n      if (exitCode === 1) {\n        return 'Uncaught Fatal Exception';\n      }\n\n      if (exitCode === 3) {\n        return 'Internal JavaScript Parse Error';\n      }\n\n      if (exitCode === 4) {\n        return 'Internal JavaScript Evaluation Failure';\n      }\n\n      if (exitCode === 5) {\n        return 'Fatal Exception';\n      }\n\n      if (exitCode === 6) {\n        return 'Non-function Internal Exception Handler ';\n      }\n\n      if (exitCode === 7) {\n        return 'Internal Exception Handler Run-Time Failure';\n      }\n\n      if (exitCode === 8) {\n        return 'Uncaught Exception';\n      }\n\n      if (exitCode === 9) {\n        return 'Invalid Argument';\n      }\n\n      if (exitCode === 10) {\n        return 'Internal JavaScript Run-Time Failure';\n      }\n\n      if (exitCode === 12) {\n        return 'Invalid Debug Argument';\n      }\n\n      return null;\n    }\n\n    const client = ExceptionlessClient.default;\n    const message = getExitCodeReason(code);\n\n    if (message !== null) {\n      client.submitLog('exit', message, 'Error');\n    }\n\n    client.config.queue.process(true);\n    // Application will now exit.\n  });\n\n  (Error as any).stackTraceLimit = Infinity;\n}\n\nif (isNode()) {\n  nodeInit();\n}\n\n                                                                                                                                                                               \n\nif (isNode()) {\n  nodeInit();\n  ExceptionlessClient.default.config.log.trace('Using node Exceptionless implementation.');\n} else if (isBrowser()) {\n  browserInit();\n  ExceptionlessClient.default.config.log.trace('Using browser Exceptionless implementation.');\n} else {\n  ExceptionlessClient.default.config.log.error('No Exceptionless implementation was found.');\n}\n\n"]}