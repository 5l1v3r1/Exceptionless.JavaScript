{"version":3,"sources":["tracekit.js","exceptionless.universal.ts"],"names":["window","undefined","_has","object","key","Object","prototype","hasOwnProperty","call","_isUndefined","what","TraceKit","_oldTraceKit","_slice","slice","UNKNOWN_FUNCTION","noConflict","wrap","func","apply","this","arguments","e","report","notifyHandlers","stack","isWindowError","exception","collectWindowErrors","i","handlers","concat","inner","traceKitWindowOnError","message","url","lineNo","columnNo","errorObj","lastExceptionStack","computeStackTrace","augmentStackTraceWithInitialElement","processLastException","location","line","column","guessFunctionName","context","gatherContext","mode","_oldOnerrorHandler","installGlobalHandler","_onErrorHandlerInstalled","onerror","_lastExceptionStack","_lastArgs","lastArgs","lastException","ex","setTimeout","incomplete","subscribe","handler","push","unsubscribe","length","splice","loadSource","remoteFetching","request","XMLHttpRequest","ActiveXObject","open","send","responseText","getSource","sourceCache","source","domain","document","match","exec","split","m","reFunctionArgNames","reGuessFunction","linesBefore","Math","floor","linesOfContext","linesAfter","start","max","end","min","escapeRegExp","text","replace","escapeCodeAsRegExpForMatchingInsideHTML","body","findSourceInUrls","re","urls","j","join","substring","index","lastIndexOf","findSourceInLine","fragment","RegExp","findSourceByFunctionBody","parts","result","href","scripts","getElementsByTagName","code","codeRE","eventRE","script","src","name","args","event","computeStackTraceFromStackProp","element","chrome","gecko","winjs","lines","reference","isNative","indexOf","columnNumber","computeStackTraceFromStacktraceProp","stacktrace","opera10Regex","opera11Regex","exc","computeStackTraceFromOperaMultiLineMessage","lineRE1","lineRE2","lineRE3","inlineScriptBlocks","s","item","relativeLine","pos","innerText","midline","stackInfo","initial","unshift","partial","computeStackTraceByWalkingCallerChain","depth","functionName","funcs","recursion","curr","caller","toString","input","description","sourceURL","fileName","lineNumber","debug","ofCaller","Error","extendToAsynchronousCallbacks","_helper","fnName","originalFn","originalCallback","module","exports","define","amd","global","parseDate","value","dateRegx","Date","isBrowser","browserInit","Configuration","useLocalStorage","BrowserStorage","isAvailable","storage","BrowserStorageProvider","SettingsManager","applySavedServerSettings","changed","defaults","settings","Utils","parseQueryString","pop","apiKey","serverUrl","errorParser","DefaultErrorParser","moduleCollector","DefaultModuleCollector","requestInfoCollector","DefaultRequestInfoCollector","submissionAdapter","DefaultSubmissionAdapter","stackTrace","options","builder","ExceptionlessClient","default","createUnhandledException","status","pluginContextData","submit","stackTraceLimit","Infinity","isNode","process","nodeInit","environmentInfoCollector","NodeEnvironmentInfoCollector","NodeErrorParser","NodeModuleCollector","NodeRequestInfoCollector","NodeSubmissionAdapter","NodeFileStorageProvider","error","submitUnhandledException","client","exitCode","submitLog","config","queue","__extends","extendStatics","setPrototypeOf","__proto__","Array","d","b","p","__","constructor","create","require","nodestacktrace","child","Fs","Path","https","DefaultLastReferenceIdManager","_lastReferenceId","getLast","clearLast","setLast","eventId","ConsoleLog","trace","info","warn","log","level","console","msg","NullLog","HeartbeatPlugin","heartbeatInterval","priority","_interval","run","next","clearInterval","_intervalId","user","data","identity","setInterval","submitSessionHeartbeat","ReferenceIdPlugin","reference_id","type","guid","EventPluginContext","contextData","ContextData","callback","plugin","cancelled","plugins","wrappedPlugins","addDefaultPlugins","addPlugin","ConfigurationDefaultsPlugin","ErrorPlugin","DuplicateCheckerPlugin","EventExclusionPlugin","ModuleInfoPlugin","RequestInfoPlugin","EnvironmentInfoPlugin","SubmissionMethodPlugin","EventPluginManager","DefaultEventQueue","_handlers","_processingQueue","_config","enqueue","enabled","isValid","areQueuedItemsDiscarded","ensureQueueTimer","timestamp","save","logText","isAppExiting","_this","events_1","get","submissionBatchSize","submissionClient","postEvents","map","response","processSubmissionResponse","eventsPosted","suspendProcessing","durationInMinutes","discardFutureQueuedItems","clearQueue","_suspendProcessingUntil","getTime","_discardQueuedItemsUntil","clear","onEventsPosted","events","_i","handlers_1","_queueTimer","onProcessQueue","isQueueProcessingSuspended","success","removeEvents","serviceUnavailable","paymentRequired","unableToAuthenticate","notFound","badRequest","requestEntityTooLarge","round","remove","maxQueueItems","InMemoryStorage","InMemoryStorageProvider","DefaultSubmissionClient","configurationVersionHeader","JSON","stringify","createRequest","cb","createSubmissionCallback","sendRequest","postUserDescription","referenceId","path","encodeURIComponent","getSettings","version","headers","SettingsResponse","parse","isNaN","sendHeartbeat","sessionIdOrUserId","closeSession","heartbeatServerUrl","method","userAgent","checkVersion","settingsVersion","SubmissionResponse","target","values","_a","values_1","getHashCode","hash","charCodeAt","getCookies","cookies","exclusions","parts_1","cookie","isMatch","isEmpty","s4","random","merge","defaultValues","parseVersion","matches","query","pairs","pairs_1","decodeURIComponent","patterns","ignoreCase","trim","toLowerCase","some","pattern","startsWithWildcard","endsWithWildcard","endsWith","startsWith","keys","prefix","suffix","maxDepth","stringifyImpl","obj","excludedKeys","cache","flattened","prop","defaultValue","onChanged","savedSettings","getSavedServerSettings","getVersion","currentVersion","updateSettings","savedServerSettings","newSettings","unableToUpdateMessage","handlers_2","statusCode","settingsOrApiKey","updateSettingsTimer","_timeoutId","createException","setException","createEvent","setType","submitException","submissionMethod","markAsUnhandledError","setSubmissionMethod","createFeatureUsage","feature","setSource","submitFeatureUsage","createLog","sourceOrMessage","setMessage","setProperty","createNotFound","resource","submitNotFound","createSessionStart","submitSessionStart","submitSessionEnd","EventBuilder","date","submitEvent","tags","ctx","ev","lastReferenceIdManager","updateUserEmailAndDescription","email","userDescription","email_address","getLastReferenceId","initialDelay","clearTimeout","interval","updateSettingsWhenIdleInterval","defineProperty","_instance","enumerable","configurable","getException","getSubmissionMethod","configSettings","inject","fn","defaultTags","defaultData","_serverUrl","_heartbeatServerUrl","_updateSettingsWhenIdleInterval","_dataExclusions","_userAgentBotPatterns","_plugins","set","_apiKey","addDataExclusions","addRange","addUserAgentBotPatterns","userAgentBotPatterns","sort","p1","p2","pluginOrName","pluginAction","pluginExists","plugins_1","removePlugin","setVersion","setUserIdentity","userInfoOrIdentity","shouldRemove","userInfo","useSessions","sendHeartbeats","useReferenceIds","useDebugLogger","handlers_3","_defaultSettings","_validIdentifierErrorMessage","setReferenceId","isValidIdentifier","setEventReference","id","setGeo","latitude","longitude","geo","setUserDescription","emailAddress","setManualStackingInfo","signatureData","title","signature_data","setManualStackingKey","manualStackingKey","setValue","addTags","excludedPropertyNames","dataExclusions","markAsCritical","critical","addRequestInfo","isDigit","isLetter","isMinus","defaultTags_1","tag","getCurrentTime","now","_mergedEvents","shift","resubmit","hashCode","stack_trace","count","now_1","_getCurrentTime","merged","filter","incrementCount","updateDate","_processedHashcodes","h","MergedEvent","_context","_count","collector","environmentInfo","getEnvironmentInfo","ignoredProperties","parser","additionalData","getLogLevel","getTypeAndSourceSetting","isLog","sourcePrefix","toBoolean","minLogLevel","loggerName","logLevel","modules","getModules","requestInfo","getRequestInfo","user_agent","maxItems","items","lastTimestamp","limit","KeyValueStorageBase","single","ensureIndex","getKey","json","write","delete","read","safeDelete","forEach","createIndex","readAllKeys","getTimestamp","a","_super","namespace","localStorage","x","setItem","removeItem","getItem","parseInt","substr","parameters","params_1","param","stackFrames","frames","stackFrames_1","frame","getParameters","file_name","line_number","module_id","innerHTML","navigator","is_secure","protocol","host","hostname","port","pathname","query_string","search","referrer","complete","xhr","isCompleted","statusText","TIMEOUT","LOADED","responseBody","headerStr","headerPairs_1","headerPair","separator","getAllResponseHeaders","WITH_CREDENTIALS","setRequestHeader","XDomainRequest","useSetTimeout","timeout","onreadystatechange","readyState","onprogress","ontimeout","onload","NodeFileStorage","folder","fs","dirname","main","filename","subfolder","directory","resolve","mkdir","writeFileSync","readFileSync","readdirSync","file","unlinkSync","basename","dirs","sep","root","dir","existsSync","mkdirSync","os","cpus","totalmem","freemem","argv","process_name","process_id","pid","process_memory_size","memoryUsage","heapTotal","architecture","arch","o_s_name","o_s_version","release","ip_address","ips","interfaces","networkInterfaces","iface","family","internal","address","machine_name","runtime_version","loadavg","platform","tmpdir","uptime","endianness","stackFrames_2","getMethodName","getFunctionName","getFileName","getLineNumber","getColumnNumber","declaring_type","getTypeName","is_native","initialized","installedModules","initialize","pathLength","loadedModules","output","spawnSync","stdout","dependencies","theModule","client_ip_address","ip","secure","http_method","post_data","params","sendRequestSync","parsedHost","auth","Content-Type","Content-Length","Buffer","byteLength","clientRequest","http","setEncoding","on","chunk","responseHeaders","statusMessage","requestJson","out","execPath","stdio","stderr"],"mappings":"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","file":"exceptionless.universal.min.js","sourcesContent":["/**\n * https://github.com/csnover/TraceKit\n * @license MIT\n * @namespace TraceKit\n */\n(function(window, undefined) {\nif (!window) {\n    return;\n}\n\nvar TraceKit = {};\nvar _oldTraceKit = window.TraceKit;\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n/**\n * A better form of hasOwnProperty<br/>\n * Example: `_has(MainHostObject, property) === true/false`\n *\n * @param {Object} object to check property\n * @param {string} key to check\n * @return {Boolean} true if the object has the key and it is not inherited\n */\nfunction _has(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\n\n/**\n * Returns true if the parameter is undefined<br/>\n * Example: `_isUndefined(val) === true/false`\n *\n * @param {*} what Value to check\n * @return {Boolean} true if undefined and false otherwise\n */\nfunction _isUndefined(what) {\n    return typeof what === 'undefined';\n}\n\n/**\n * Export TraceKit out to another variable<br/>\n * Example: `var TK = TraceKit.noConflict()`\n * @return {Object} The TraceKit object\n * @memberof TraceKit\n */\nTraceKit.noConflict = function noConflict() {\n    window.TraceKit = _oldTraceKit;\n    return TraceKit;\n};\n\n/**\n * Wrap any function in a TraceKit reporter<br/>\n * Example: `func = TraceKit.wrap(func);`\n *\n * @param {Function} func Function to be wrapped\n * @return {Function} The wrapped func\n * @memberof TraceKit\n */\nTraceKit.wrap = function traceKitWrapper(func) {\n    function wrapped() {\n        try {\n            return func.apply(this, arguments);\n        } catch (e) {\n            TraceKit.report(e);\n            throw e;\n        }\n    }\n    return wrapped;\n};\n\n/**\n * Cross-browser processing of unhandled exceptions\n *\n * Syntax:\n * ```js\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n * ```\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *     on top frame; column number is not guaranteed\n *   - Opera: full stack trace with line and column numbers\n *   - Chrome: full stack trace with line and column numbers\n *   - Safari: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *   - IE: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a TraceKit.StackTrace object as described in the\n * TraceKit.computeStackTrace docs.\n *\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.report = (function reportModuleWrapper() {\n    var handlers = [],\n        lastArgs = null,\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {TraceKit.StackTrace} stack\n     * @param {boolean} isWindowError Is this a top-level window error?\n     * @memberof TraceKit.report\n     * @throws An exception if an error occurs while calling an handler.\n     */\n    function notifyHandlers(stack, isWindowError) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n          return;\n        }\n        for (var i in handlers) {\n            if (_has(handlers, i)) {\n                try {\n                    handlers[i].apply(null, [stack].concat(_slice.call(arguments, 2)));\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error occurred.\n     * @param {(number|string)=} columnNo The column number at which the error occurred.\n     * @param {Error=} errorObj The actual Error object.\n     * @memberof TraceKit.report\n     */\n    function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {\n        var stack = null;\n\n        if (lastExceptionStack) {\n            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n    \t    processLastException();\n\t    } else if (errorObj) {\n            stack = TraceKit.computeStackTrace(errorObj);\n            notifyHandlers(stack, true);\n        } else {\n            var location = {\n              'url': url,\n              'line': lineNo,\n              'column': columnNo\n            };\n            location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);\n            location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);\n            stack = {\n              'mode': 'onerror',\n              'message': message,\n              'stack': [location]\n            };\n\n            notifyHandlers(stack, true);\n        }\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    /**\n     * Install a global onerror handler\n     * @memberof TraceKit.report\n     */\n    function installGlobalHandler () {\n        if (_onErrorHandlerInstalled === true) {\n            return;\n        }\n        _oldOnerrorHandler = window.onerror;\n        window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    /**\n     * Process the most recent exception\n     * @memberof TraceKit.report\n     */\n    function processLastException() {\n        var _lastExceptionStack = lastExceptionStack,\n            _lastArgs = lastArgs;\n        lastArgs = null;\n        lastExceptionStack = null;\n        lastException = null;\n        notifyHandlers.apply(null, [_lastExceptionStack, false].concat(_lastArgs));\n    }\n\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     * @memberof TraceKit.report\n     * @throws An exception if an incomplete stack trace is detected (old IE browsers).\n     */\n    function report(ex) {\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n              processLastException();\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n        lastArgs = _slice.call(arguments, 1);\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        window.setTimeout(function () {\n            if (lastException === ex) {\n                processLastException();\n            }\n        }, (stack.incomplete ? 2000 : 0));\n\n        throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    return report;\n}());\n\n/**\n * An object representing a single stack frame.\n * @typedef {Object} StackFrame\n * @property {string} url The JavaScript or HTML file URL.\n * @property {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * @property {string[]?} args The arguments passed to the function, if known.\n * @property {number=} line The line number, if known.\n * @property {number=} column The column number, if known.\n * @property {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n * @memberof TraceKit\n */\n\n/**\n * An object representing a JavaScript stack trace.\n * @typedef {Object} StackTrace\n * @property {string} name The name of the thrown exception.\n * @property {string} message The exception error message.\n * @property {TraceKit.StackFrame[]} stack An array of stack frames.\n * @property {string} mode 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace.\n * @memberof TraceKit\n */\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   ```js\n *   s = TraceKit.computeStackTrace.ofCaller([depth])\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n *   ```\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n * Tracing example:\n *  ```js\n *     function trace(message) {\n *         var stackInfo = TraceKit.computeStackTrace.ofCaller();\n *         var data = message + \"\\n\";\n *         for(var i in stackInfo.stack) {\n *             var item = stackInfo.stack[i];\n *             data += (item.func || '[anonymous]') + \"() in \" + item.url + \":\" + (item.line || '0') + \"\\n\";\n *         }\n *         if (window.console)\n *             console.info(data);\n *         else\n *             alert(data);\n *     }\n * ```\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n    var debug = false,\n        sourceCache = {};\n\n    /**\n     * Attempts to retrieve source code via XMLHttpRequest, which is used\n     * to look up anonymous function names.\n     * @param {string} url URL of source code.\n     * @return {string} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function loadSource(url) {\n        if (!TraceKit.remoteFetching) { //Only attempt request if remoteFetching is on.\n            return '';\n        }\n        try {\n            var getXHR = function() {\n                try {\n                    return new window.XMLHttpRequest();\n                } catch (e) {\n                    // explicitly bubble up the exception if not found\n                    return new window.ActiveXObject('Microsoft.XMLHTTP');\n                }\n            };\n\n            var request = getXHR();\n            request.open('GET', url, false);\n            request.send('');\n            return request.responseText;\n        } catch (e) {\n            return '';\n        }\n    }\n\n    /**\n     * Retrieves source code from the source code cache.\n     * @param {string} url URL of source code.\n     * @return {Array.<string>} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function getSource(url) {\n        if (typeof url !== 'string') {\n            return [];\n        }\n\n        if (!_has(sourceCache, url)) {\n            // URL needs to be able to fetched within the acceptable domain.  Otherwise,\n            // cross-domain errors will be triggered.\n            /*\n                Regex matches:\n                0 - Full Url\n                1 - Protocol\n                2 - Domain\n                3 - Port (Useful for internal applications)\n                4 - Path\n            */\n            var source = '';\n            var domain = '';\n            try { domain = window.document.domain; } catch (e) { }\n            var match = /(.*)\\:\\/\\/([^:\\/]+)([:\\d]*)\\/{0,1}([\\s\\S]*)/.exec(url);\n            if (match && match[2] === domain) {\n                source = loadSource(url);\n            }\n            sourceCache[url] = source ? source.split('\\n') : [];\n        }\n\n        return sourceCache[url];\n    }\n\n    /**\n     * Tries to use an externally loaded copy of source code to determine\n     * the name of a function by looking at the name of the variable it was\n     * assigned to, if any.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} lineNo Line number in source code.\n     * @return {string} The function name, if discoverable.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function guessFunctionName(url, lineNo) {\n        var reFunctionArgNames = /function ([^(]*)\\(([^)]*)\\)/,\n            reGuessFunction = /['\"]?([0-9A-Za-z$_]+)['\"]?\\s*[:=]\\s*(function|eval|new Function)/,\n            line = '',\n            maxLines = 10,\n            source = getSource(url),\n            m;\n\n        if (!source.length) {\n            return UNKNOWN_FUNCTION;\n        }\n\n        // Walk backwards from the first line in the function until we find the line which\n        // matches the pattern above, which is the function definition\n        for (var i = 0; i < maxLines; ++i) {\n            line = source[lineNo - i] + line;\n\n            if (!_isUndefined(line)) {\n                if ((m = reGuessFunction.exec(line))) {\n                    return m[1];\n                } else if ((m = reFunctionArgNames.exec(line))) {\n                    return m[1];\n                }\n            }\n        }\n\n        return UNKNOWN_FUNCTION;\n    }\n\n    /**\n     * Retrieves the surrounding lines from where an exception occurred.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} line Line number in source code to centre\n     * around for context.\n     * @return {?Array.<string>} Lines of source code.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function gatherContext(url, line) {\n        var source = getSource(url);\n\n        if (!source.length) {\n            return null;\n        }\n\n        var context = [],\n            // linesBefore & linesAfter are inclusive with the offending line.\n            // if linesOfContext is even, there will be one extra line\n            //   *before* the offending line.\n            linesBefore = Math.floor(TraceKit.linesOfContext / 2),\n            // Add one extra line if linesOfContext is odd\n            linesAfter = linesBefore + (TraceKit.linesOfContext % 2),\n            start = Math.max(0, line - linesBefore - 1),\n            end = Math.min(source.length, line + linesAfter - 1);\n\n        line -= 1; // convert to 0-based index\n\n        for (var i = start; i < end; ++i) {\n            if (!_isUndefined(source[i])) {\n                context.push(source[i]);\n            }\n        }\n\n        return context.length > 0 ? context : null;\n    }\n\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    /**\n     * Determines where a code fragment occurs in the source code.\n     * @param {RegExp} re The function definition.\n     * @param {Array.<string>} urls A list of URLs to search.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInUrls(re, urls) {\n        var source, m;\n        for (var i = 0, j = urls.length; i < j; ++i) {\n            // console.log('searching', urls[i]);\n            if ((source = getSource(urls[i])).length) {\n                source = source.join('\\n');\n                if ((m = re.exec(source))) {\n                    // console.log('Found function in ' + urls[i]);\n\n                    return {\n                        'url': urls[i],\n                        'line': source.substring(0, m.index).split('\\n').length,\n                        'column': m.index - source.lastIndexOf('\\n', m.index) - 1\n                    };\n                }\n            }\n        }\n\n        // console.log('no match');\n\n        return null;\n    }\n\n    /**\n     * Determines at which column a code fragment occurs on a line of the\n     * source code.\n     * @param {string} fragment The code fragment.\n     * @param {string} url The URL to search.\n     * @param {(string|number)} line The line number to examine.\n     * @return {?number} The column number.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInLine(fragment, url, line) {\n        var source = getSource(url),\n            re = new RegExp('\\\\b' + escapeRegExp(fragment) + '\\\\b'),\n            m;\n\n        line -= 1;\n\n        if (source && source.length > line && (m = re.exec(source[line]))) {\n            return m.index;\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines where a function was defined within the source code.\n     * @param {(Function|string)} func A function reference or serialized\n     * function definition.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceByFunctionBody(func) {\n        if (_isUndefined(window && window.document)) {\n            return;\n        }\n\n        var urls = [window.location.href],\n            scripts = window.document.getElementsByTagName('script'),\n            body,\n            code = '' + func,\n            codeRE = /^function(?:\\s+([\\w$]+))?\\s*\\(([\\w\\s,]*)\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            eventRE = /^function on([\\w$]+)\\s*\\(event\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            re,\n            parts,\n            result;\n\n        for (var i = 0; i < scripts.length; ++i) {\n            var script = scripts[i];\n            if (script.src) {\n                urls.push(script.src);\n            }\n        }\n\n        if (!(parts = codeRE.exec(code))) {\n            re = new RegExp(escapeRegExp(code).replace(/\\s+/g, '\\\\s+'));\n        }\n\n        // not sure if this is really necessary, but I don’t have a test\n        // corpus large enough to confirm that and it was in the original.\n        else {\n            var name = parts[1] ? '\\\\s+' + parts[1] : '',\n                args = parts[2].split(',').join('\\\\s*,\\\\s*');\n\n            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\\s+/g, '\\\\s+');\n            re = new RegExp('function' + name + '\\\\s*\\\\(\\\\s*' + args + '\\\\s*\\\\)\\\\s*{\\\\s*' + body + '\\\\s*}');\n        }\n\n        // look for a normal function definition\n        if ((result = findSourceInUrls(re, urls))) {\n            return result;\n        }\n\n        // look for an old-school event handler function\n        if ((parts = eventRE.exec(code))) {\n            var event = parts[1];\n            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);\n\n            // look for a function defined in HTML as an onXXX handler\n            re = new RegExp('on' + event + '=[\\\\\\'\"]\\\\s*' + body + '\\\\s*[\\\\\\'\"]', 'i');\n\n            if ((result = findSourceInUrls(re, urls[0]))) {\n                return result;\n            }\n\n            // look for ???\n            re = new RegExp(body);\n\n            if ((result = findSourceInUrls(re, urls))) {\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (!ex.stack) {\n            return null;\n        }\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|webpack|eval).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|\\[native).*?)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if ((parts = chrome.exec(lines[i]))) {\n                var isNative = parts[2] && parts[2].indexOf('native') !== -1;\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ( parts = winjs.exec(lines[i]) ) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = gecko.exec(lines[i]))) {\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = guessFunctionName(element.url, element.line);\n            }\n\n            if (element.line) {\n                element.context = gatherContext(element.url, element.line);\n            }\n\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        if (stack[0] && stack[0].line && !stack[0].column && reference) {\n            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);\n        } else if (!stack[0].column && !_isUndefined(ex.columnNumber)) {\n            // FireFox uses this awesome columnNumber property for its top frame\n            // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n            // so adding 1\n            stack[0].column = ex.columnNumber + 1;\n        }\n\n        return {\n            'mode': 'stack',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * Computes stack trace information from the stacktrace property.\n     * Opera 10+ uses this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStacktraceProp(ex) {\n        // Access and store the stacktrace property before doing ANYTHING\n        // else to it because Opera is not very good at providing it\n        // reliably in other circumstances.\n        var stacktrace = ex.stacktrace;\n        if (!stacktrace) {\n            return;\n        }\n\n        var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i,\n            opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i,\n            lines = stacktrace.split('\\n'),\n            stack = [],\n            parts;\n\n        for (var line = 0; line < lines.length; line += 2) {\n            var element = null;\n            if ((parts = opera10Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[2],\n                    'line': +parts[1],\n                    'column': null,\n                    'func': parts[3],\n                    'args':[]\n                };\n            } else if ((parts = opera11Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[6],\n                    'line': +parts[1],\n                    'column': +parts[2],\n                    'func': parts[3] || parts[4],\n                    'args': parts[5] ? parts[5].split(',') : []\n                };\n            }\n\n            if (element) {\n                if (!element.func && element.line) {\n                    element.func = guessFunctionName(element.url, element.line);\n                }\n                if (element.line) {\n                    try {\n                        element.context = gatherContext(element.url, element.line);\n                    } catch (exc) {}\n                }\n\n                if (!element.context) {\n                    element.context = [lines[line + 1]];\n                }\n\n                stack.push(element);\n            }\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        return {\n            'mode': 'stacktrace',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * NOT TESTED.\n     * Computes stack trace information from an error message that includes\n     * the stack trace.\n     * Opera 9 and earlier use this method if the option to show stack\n     * traces is turned on in opera:config.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromOperaMultiLineMessage(ex) {\n        // TODO: Clean this function up\n        // Opera includes a stack trace into the exception message. An example is:\n        //\n        // Statement on line 3: Undefined variable: undefinedFunc\n        // Backtrace:\n        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz\n        //         undefinedFunc(a);\n        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy\n        //           zzz(x, y, z);\n        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx\n        //           yyy(a, a, a);\n        //   Line 1 of function script\n        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }\n        //   ...\n\n        var lines = ex.message.split('\\n');\n        if (lines.length < 4) {\n            return null;\n        }\n\n        var lineRE1 = /^\\s*Line (\\d+) of linked script ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE2 = /^\\s*Line (\\d+) of inline#(\\d+) script in ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE3 = /^\\s*Line (\\d+) of function script\\s*$/i,\n            stack = [],\n            scripts = (window && window.document && window.document.getElementsByTagName('script')),\n            inlineScriptBlocks = [],\n            parts;\n\n        for (var s in scripts) {\n            if (_has(scripts, s) && !scripts[s].src) {\n                inlineScriptBlocks.push(scripts[s]);\n            }\n        }\n\n        for (var line = 2; line < lines.length; line += 2) {\n            var item = null;\n            if ((parts = lineRE1.exec(lines[line]))) {\n                item = {\n                    'url': parts[2],\n                    'func': parts[3],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null\n                };\n            } else if ((parts = lineRE2.exec(lines[line]))) {\n                item = {\n                    'url': parts[3],\n                    'func': parts[4],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.\n                };\n                var relativeLine = (+parts[1]); // relative to the start of the <SCRIPT> block\n                var script = inlineScriptBlocks[parts[2] - 1];\n                if (script) {\n                    var source = getSource(item.url);\n                    if (source) {\n                        source = source.join('\\n');\n                        var pos = source.indexOf(script.innerText);\n                        if (pos >= 0) {\n                            item.line = relativeLine + source.substring(0, pos).split('\\n').length;\n                        }\n                    }\n                }\n            } else if ((parts = lineRE3.exec(lines[line]))) {\n                var url = window.location.href.replace(/#.*$/, '');\n                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));\n                var src = findSourceInUrls(re, [url]);\n                item = {\n                    'url': url,\n                    'func': '',\n                    'args': [],\n                    'line': src ? src.line : parts[1],\n                    'column': null\n                };\n            }\n\n            if (item) {\n                if (!item.func) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n                var context = gatherContext(item.url, item.line);\n                var midline = (context ? context[Math.floor(context.length / 2)] : null);\n                if (context && midline.replace(/^\\s*/, '') === lines[line + 1].replace(/^\\s*/, '')) {\n                    item.context = context;\n                } else {\n                    // if (context) alert(\"Context mismatch. Correct midline:\\n\" + lines[i+1] + \"\\n\\nMidline:\\n\" + midline + \"\\n\\nContext:\\n\" + context.join(\"\\n\") + \"\\n\\nURL:\\n\" + item.url);\n                    item.context = [lines[line + 1]];\n                }\n                stack.push(item);\n            }\n        }\n        if (!stack.length) {\n            return null; // could not parse multiline exception message as Opera stack trace\n        }\n\n        return {\n            'mode': 'multiline',\n            'name': ex.name,\n            'message': lines[0],\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {TraceKit.StackTrace} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = guessFunctionName(initial.url, initial.line);\n            }\n\n            if (!initial.context) {\n                initial.context = gatherContext(initial.url, initial.line);\n            }\n\n            var reference = / '([^']+)' /.exec(message);\n            if (reference) {\n                initial.column = findSourceInLine(reference[1], initial.url, initial.line);\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        stackInfo.stack[0].context = initial.context;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {TraceKit.StackTrace=} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                // console.log('skipping internal function');\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'args': [],\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if ((parts = functionName.exec(curr.toString()))) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n              try {\n                item.func = parts.input.substring(0, parts.input.indexOf('{'));\n              } catch (e) { }\n            }\n\n            if ((source = findSourceByFunctionBody(curr))) {\n                item.url = source.url;\n                item.line = source.line;\n\n                if (item.func === UNKNOWN_FUNCTION) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n\n                var reference = / '([^']+)' /.exec(ex.message || ex.description);\n                if (reference) {\n                    item.column = findSourceInLine(reference[1], source.url, source.line);\n                }\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            }else{\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            // console.log('depth is ' + depth);\n            // console.log('stack is ' + stack.length);\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'mode': 'callers',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = (depth == null ? 0 : +depth);\n\n        try {\n            // This must be tried first because Opera 10 *destroys*\n            // its stacktrace property if you try to access the stack\n            // property first!!\n            stack = computeStackTraceFromStacktraceProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromOperaMultiLineMessage(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        return {\n            'mode': 'failed'\n        };\n    }\n\n    /**\n     * Logs a stacktrace starting from the previous call and working down.\n     * @param {(number|string)=} depth How many frames deep to trace.\n     * @return {TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceOfCaller(depth) {\n        depth = (depth == null ? 0 : +depth) + 1; // \"+ 1\" because \"ofCaller\" should drop one frame\n        try {\n            throw new Error();\n        } catch (ex) {\n            return computeStackTrace(ex, depth + 1);\n        }\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.guessFunctionName = guessFunctionName;\n    computeStackTrace.gatherContext = gatherContext;\n    computeStackTrace.ofCaller = computeStackTraceOfCaller;\n    computeStackTrace.getSource = getSource;\n\n    return computeStackTrace;\n}());\n\n/**\n * Extends support for global error handling for asynchronous browser\n * functions. Adopted from Closure Library's errorhandler.js\n * @memberof TraceKit\n */\nTraceKit.extendToAsynchronousCallbacks = function () {\n    var _helper = function _helper(fnName) {\n        var originalFn = window[fnName];\n        window[fnName] = function traceKitAsyncExtension() {\n            // Make a copy of the arguments\n            var args = _slice.call(arguments);\n            var originalCallback = args[0];\n            if (typeof (originalCallback) === 'function') {\n                args[0] = TraceKit.wrap(originalCallback);\n            }\n            // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n            // also only supports 2 argument and doesn't care what \"this\" is, so we\n            // can just call the original function directly.\n            if (originalFn.apply) {\n                return originalFn.apply(this, args);\n            } else {\n                return originalFn(args[0], args[1]);\n            }\n        };\n    };\n\n    _helper('setTimeout');\n    _helper('setInterval');\n};\n\n//Default options:\nif (!TraceKit.remoteFetching) {\n    TraceKit.remoteFetching = true;\n}\nif (!TraceKit.collectWindowErrors) {\n    TraceKit.collectWindowErrors = true;\n}\nif (!TraceKit.linesOfContext || TraceKit.linesOfContext < 1) {\n    // 5 lines before, the offending line, 5 lines after\n    TraceKit.linesOfContext = 11;\n}\n\n// UMD export\nif (typeof module !== 'undefined' && module.exports && window.module !== module) {\n    module.exports = TraceKit;\n} else if (typeof define === 'function' && define.amd) {\n    define('TraceKit', [], TraceKit);\n} else {\n    window.TraceKit = TraceKit;\n}\n\n}(typeof window !== 'undefined' ? window : global));\n","import * as TraceKit from 'TraceKit';\nimport os = require('os');\nimport nodestacktrace = require('stack-trace');\nimport child = require('child_process');\nimport path = require('path');\nimport * as Fs from 'fs';\nimport * as Path from 'path';\nimport http = require('http');\nimport https = require('https');\nimport url = require('url');\nexport interface ILastReferenceIdManager {\n  getLast(): string;\n  clearLast(): void;\n  setLast(eventId: string): void;\n}\n\nexport interface ILog {\n  trace(message: string): void;\n  info(message: string): void;\n  warn(message: string): void;\n  error(message: string): void;\n}\n\n                                                                    \n\nexport class DefaultLastReferenceIdManager implements ILastReferenceIdManager {\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @type {string}\n   * @private\n   */\n  private _lastReferenceId: string = null;\n\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @returns {string}\n   */\n  public getLast(): string {\n    return this._lastReferenceId;\n  }\n\n  /**\n   * Clears the last event's reference id.\n   */\n  public clearLast(): void {\n    this._lastReferenceId = null;\n  }\n\n  /**\n   * Sets the last event's reference id.\n   * @param eventId\n   */\n  public setLast(eventId: string): void {\n    this._lastReferenceId = eventId;\n  }\n}\n\n                              \n\nexport class ConsoleLog implements ILog {\n  public trace(message: string): void {\n    this.log('debug', message);\n  }\n\n  public info(message: string): void {\n    this.log('info', message);\n  }\n\n  public warn(message: string): void {\n    this.log('warn', message);\n  }\n\n  public error(message: string): void {\n    this.log('error', message);\n  }\n\n  private log(level: string, message: string) {\n    if (console) {\n      const msg = `[${level}] Exceptionless: ${message}`;\n\n      if (console[level]) {\n        console[level](msg);\n      } else if (console.log) {\n        console[`log`](msg);\n      }\n    }\n  }\n}\n\n                              \n\nexport class NullLog implements ILog {\n  public trace(message: string): void { }\n  public info(message: string): void { }\n  public warn(message: string): void { }\n  public error(message: string): void { }\n}\n\nexport interface IUserInfo {\n  identity?: string;\n  name?: string;\n  data?: any;\n}\n\n                                                                                                                                                               \n\nexport class HeartbeatPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = 'HeartbeatPlugin';\n\n  private _interval: number;\n  private _intervalId: any;\n\n  constructor(heartbeatInterval: number = 30000) {\n    this._interval = heartbeatInterval;\n  }\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    clearInterval(this._intervalId);\n\n    const user: IUserInfo = context.event.data['@user'];\n    if (user && user.identity) {\n      this._intervalId = setInterval(() => context.client.submitSessionHeartbeat(user.identity), this._interval);\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                \n\nexport class ReferenceIdPlugin implements IEventPlugin {\n  public priority: number = 20;\n  public name: string = 'ReferenceIdPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    if ((!context.event.reference_id || context.event.reference_id.length === 0) && context.event.type === 'error') {\n      context.event.reference_id = Utils.guid().replace('-', '').substring(0, 10);\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                             \n\nexport class EventPluginContext {\n  public cancelled: boolean;\n  public client: ExceptionlessClient;\n  public event: IEvent;\n  public contextData: ContextData;\n\n  constructor(client: ExceptionlessClient, event: IEvent, contextData?: ContextData) {\n    this.client = client;\n    this.event = event;\n    this.contextData = contextData ? contextData : new ContextData();\n  }\n\n  public get log(): ILog {\n    return this.client.config.log;\n  }\n}\n\nn\nexport class EventPluginManager {\n  public static run(context: EventPluginContext, callback: (context?: EventPluginContext) => void): void {\n    const wrap = (plugin: IEventPlugin, next?: () => void): () => void => {\n      return () => {\n        try {\n          if (!context.cancelled) {\n            plugin.run(context, next);\n          }\n        } catch (ex) {\n          context.cancelled = true;\n          context.log.error(`Error running plugin '${plugin.name}': ${ex.message}. Discarding Event.`);\n        }\n\n        if (context.cancelled && !!callback) {\n          callback(context);\n        }\n      };\n    };\n\n    const plugins: IEventPlugin[] = context.client.config.plugins; // optimization for minifier.\n    const wrappedPlugins: Array<() => void> = [];\n    if (!!callback) {\n      wrappedPlugins[plugins.length] = wrap({ name: 'cb', priority: 9007199254740992, run: callback }, null);\n    }\n\n    for (let index = plugins.length - 1; index > -1; index--) {\n      wrappedPlugins[index] = wrap(plugins[index], !!callback || (index < plugins.length - 1) ? wrappedPlugins[index + 1] : null);\n    }\n\n    wrappedPlugins[0]();\n  }\n\n  public static addDefaultPlugins(config: Configuration): void {\n    config.addPlugin(new ConfigurationDefaultsPlugin());\n    config.addPlugin(new ErrorPlugin());\n    config.addPlugin(new DuplicateCheckerPlugin());\n    config.addPlugin(new EventExclusionPlugin());\n    config.addPlugin(new ModuleInfoPlugin());\n    config.addPlugin(new RequestInfoPlugin());\n    config.addPlugin(new EnvironmentInfoPlugin());\n    config.addPlugin(new SubmissionMethodPlugin());\n  }\n}\n\n                                                                                                         \n\nexport interface IEventPlugin {\n  priority?: number;\n  name?: string;\n  run(context: EventPluginContext, next?: () => void): void;\n}\n\n                                                                                                                                                                                                                                                                                                                                     \n\nexport class DefaultEventQueue implements IEventQueue {\n  /**\n   * The configuration object.\n   * @type {Configuration}\n   * @private\n   */\n  private _config: Configuration;\n\n  /**\n   * A list of handlers that will be fired when events are submitted.\n   * @type {Array}\n   * @private\n   */\n  private _handlers: Array<(events: IEvent[], response: SubmissionResponse) => void> = [];\n\n  /**\n   * Suspends processing until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _suspendProcessingUntil: Date;\n\n  /**\n   * Discards queued items until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _discardQueuedItemsUntil: Date;\n\n  /**\n   * Returns true if the queue is processing.\n   * @type {boolean}\n   * @private\n   */\n  private _processingQueue: boolean = false;\n\n  /**\n   * Processes the queue every xx seconds.\n   * @type {Timer}\n   * @private\n   */\n  private _queueTimer: any;\n\n  constructor(config: Configuration) {\n    this._config = config;\n  }\n\n  public enqueue(event: IEvent): void {\n    const eventWillNotBeQueued: string = 'The event will not be queued.'; // optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    if (this.areQueuedItemsDiscarded()) {\n      log.info(`Queue items are currently being discarded. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    this.ensureQueueTimer();\n\n    const timestamp = config.storage.queue.save(event);\n    const logText = `type=${event.type} ${!!event.reference_id ? 'refid=' + event.reference_id : ''}`;\n    if (timestamp) {\n      log.info(`Enqueuing event: ${timestamp} ${logText}`);\n    } else {\n      log.error(`Could not enqueue event ${logText}`);\n    }\n  }\n\n  public process(isAppExiting?: boolean): void {\n    const queueNotProcessed: string = 'The queue will not be processed.'; // optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (this._processingQueue) {\n      return;\n    }\n\n    log.info('Processing queue...');\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${queueNotProcessed}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${queueNotProcessed}`);\n      return;\n    }\n\n    this._processingQueue = true;\n    this.ensureQueueTimer();\n\n    try {\n      const events = config.storage.queue.get(config.submissionBatchSize);\n      if (!events || events.length === 0) {\n        this._processingQueue = false;\n        return;\n      }\n\n      log.info(`Sending ${events.length} events to ${config.serverUrl}.`);\n      config.submissionClient.postEvents(events.map((e) => e.value), config, (response: SubmissionResponse) => {\n        this.processSubmissionResponse(response, events);\n        this.eventsPosted(events.map((e) => e.value), response);\n        log.info('Finished processing queue.');\n        this._processingQueue = false;\n      }, isAppExiting);\n    } catch (ex) {\n      log.error(`Error processing queue: ${ex}`);\n      this.suspendProcessing();\n      this._processingQueue = false;\n    }\n  }\n\n  public suspendProcessing(durationInMinutes?: number, discardFutureQueuedItems?: boolean, clearQueue?: boolean): void {\n    const config: Configuration = this._config; // Optimization for minifier.\n\n    if (!durationInMinutes || durationInMinutes <= 0) {\n      durationInMinutes = 5;\n    }\n\n    config.log.info(`Suspending processing for ${durationInMinutes} minutes.`);\n    this._suspendProcessingUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\n\n    if (discardFutureQueuedItems) {\n      this._discardQueuedItemsUntil = this._suspendProcessingUntil;\n    }\n\n    if (clearQueue) {\n      // Account is over the limit and we want to ensure that the sample size being sent in will contain newer errors.\n      config.storage.queue.clear();\n    }\n  }\n\n  public onEventsPosted(handler: (events: IEvent[], response: SubmissionResponse) => void): void {\n    !!handler && this._handlers.push(handler);\n  }\n\n  private eventsPosted(events: IEvent[], response: SubmissionResponse) {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(events, response);\n      } catch (ex) {\n        this._config.log.error(`Error calling onEventsPosted handler: ${ex}`);\n      }\n    }\n  }\n\n  private areQueuedItemsDiscarded(): boolean {\n    return this._discardQueuedItemsUntil && this._discardQueuedItemsUntil > new Date();\n  }\n\n  private ensureQueueTimer(): void {\n    if (!this._queueTimer) {\n      this._queueTimer = setInterval(() => this.onProcessQueue(), 10000);\n    }\n  }\n\n  private isQueueProcessingSuspended(): boolean {\n    return this._suspendProcessingUntil && this._suspendProcessingUntil > new Date();\n  }\n\n  private onProcessQueue(): void {\n    if (!this.isQueueProcessingSuspended() && !this._processingQueue) {\n      this.process();\n    }\n  }\n\n  private processSubmissionResponse(response: SubmissionResponse, events: IStorageItem[]): void {\n    const noSubmission: string = 'The event will not be submitted.'; // Optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (response.success) {\n      log.info(`Sent ${events.length} events.`);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.serviceUnavailable) {\n      // You are currently over your rate limit or the servers are under stress.\n      log.error('Server returned service unavailable.');\n      this.suspendProcessing();\n      return;\n    }\n\n    if (response.paymentRequired) {\n      // If the organization over the rate limit then discard the event.\n      log.info('Too many events have been submitted, please upgrade your plan.');\n      this.suspendProcessing(null, true, true);\n      return;\n    }\n\n    if (response.unableToAuthenticate) {\n      // The api key was suspended or could not be authorized.\n      log.info(`Unable to authenticate, please check your configuration. ${noSubmission}`);\n      this.suspendProcessing(15);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.notFound || response.badRequest) {\n      // The service end point could not be found.\n      log.error(`Error while trying to submit data: ${response.message}`);\n      this.suspendProcessing(60 * 4);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.requestEntityTooLarge) {\n      const message = 'Event submission discarded for being too large.';\n      if (config.submissionBatchSize > 1) {\n        log.error(`${message} Retrying with smaller batch size.`);\n        config.submissionBatchSize = Math.max(1, Math.round(config.submissionBatchSize / 1.5));\n      } else {\n        log.error(`${message} ${noSubmission}`);\n        this.removeEvents(events);\n      }\n\n      return;\n    }\n\n    if (!response.success) {\n      log.error(`Error submitting events: ${response.message || 'Please check the network tab for more info.'}`);\n      this.suspendProcessing();\n    }\n  }\n\n  private removeEvents(events: IStorageItem[]) {\n    for (let index = 0; index < (events || []).length; index++) {\n      this._config.storage.queue.remove(events[index].timestamp);\n    }\n  }\n}\n\n                                                                                                                 \n\nexport interface IEventQueue {\n  enqueue(event: IEvent): void;\n  process(isAppExiting?: boolean): void;\n  suspendProcessing(durationInMinutes?: number, discardFutureQueuedItems?: boolean, clearQueue?: boolean): void;\n  onEventsPosted(handler: (events: IEvent[], response: SubmissionResponse) => void): void;\n}\n\n                                                                                                                                  \n\nexport interface IEnvironmentInfoCollector {\n  getEnvironmentInfo(context: EventPluginContext): IEnvironmentInfo;\n}\n\n                                                                                                              \n\nexport interface IErrorParser {\n  parse(context: EventPluginContext, exception: Error): IError;\n}\n\n                                                                                                                \n\nexport interface IModuleCollector {\n  getModules(context: EventPluginContext): IModule[];\n}\n\n                                                                                                                          \n\nexport interface IRequestInfoCollector {\n  getRequestInfo(context: EventPluginContext): IRequestInfo;\n}\n\n                                                                                                                                                  \n\nexport class InMemoryStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(maxQueueItems: number = 250) {\n    this.queue = new InMemoryStorage(maxQueueItems);\n    this.settings = new InMemoryStorage(1);\n  }\n\n}\n\n                                      \n\nexport interface IStorageProvider {\n  queue: IStorage;\n  settings: IStorage;\n}\n\nn\n// tslint:disable-next-line:prefer-const\ndeclare var XDomainRequest: { new (); create(); };\n\nexport class DefaultSubmissionClient implements ISubmissionClient {\n  public configurationVersionHeader: string = 'x-exceptionless-configversion';\n\n  public postEvents(events: IEvent[], config: Configuration, callback: (response: SubmissionResponse) => void, isAppExiting?: boolean): void {\n    const data = JSON.stringify(events);\n    const request = this.createRequest(config, 'POST',  `${config.serverUrl}/api/v2/events`, data);\n    const cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb, isAppExiting);\n  }\n\n  public postUserDescription(referenceId: string, description: IUserDescription, config: Configuration, callback: (response: SubmissionResponse) => void): void {\n    const path = `${config.serverUrl}/api/v2/events/by-ref/${encodeURIComponent(referenceId)}/user-description`;\n    const data = JSON.stringify(description);\n    const request = this.createRequest(config, 'POST', path, data);\n    const cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public getSettings(config: Configuration, version: number, callback: (response: SettingsResponse) => void): void {\n    const request = this.createRequest(config, 'GET', `${config.serverUrl}/api/v2/projects/config?v=${version}`);\n    const cb = (status, message, data?, headers?) => {\n      if (status !== 200) {\n        return callback(new SettingsResponse(false, null, -1, null, message));\n      }\n\n      let settings: IClientConfiguration;\n      try {\n        settings = JSON.parse(data);\n      } catch (e) {\n        config.log.error(`Unable to parse settings: '${data}'`);\n      }\n\n      if (!settings || isNaN(settings.version)) {\n        return callback(new SettingsResponse(false, null, -1, null, 'Invalid configuration settings.'));\n      }\n\n      callback(new SettingsResponse(true, settings.settings || {}, settings.version));\n    };\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public sendHeartbeat(sessionIdOrUserId: string, closeSession: boolean, config: Configuration): void {\n    const request = this.createRequest(config, 'GET', `${config.heartbeatServerUrl}/api/v2/events/session/heartbeat?id=${sessionIdOrUserId}&close=${closeSession}`);\n    config.submissionAdapter.sendRequest(request);\n  }\n\n  private createRequest(config: Configuration, method: string, url: string, data: string = null): SubmissionRequest {\n    return {\n      method,\n      url,\n      data,\n      apiKey: config.apiKey,\n      userAgent: config.userAgent\n    };\n  }\n\n  private createSubmissionCallback(config: Configuration, callback: (response: SubmissionResponse) => void) {\n    return (status, message, data?, headers?) => {\n      const settingsVersion: number = headers && parseInt(headers[this.configurationVersionHeader], 10);\n      SettingsManager.checkVersion(settingsVersion, config);\n\n      callback(new SubmissionResponse(status, message));\n    };\n  }\n}\n\n                                                                                                                   \n\nexport interface ISubmissionAdapter {\n  sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean): void;\n}\n\n                                                                                                                                                                                                                                                                                           \n\nexport interface ISubmissionClient {\n  postEvents(events: IEvent[], config: Configuration, callback: (response: SubmissionResponse) => void, isAppExiting?: boolean): void;\n  postUserDescription(referenceId: string, description: IUserDescription, config: Configuration, callback: (response: SubmissionResponse) => void): void;\n  getSettings(config: Configuration, version: number, callback: (response: SettingsResponse) => void): void;\n  sendHeartbeat(sessionIdOrUserId: string, closeSession: boolean, config: Configuration): void;\n}\n\nexport class Utils {\n  public static addRange<T>(target: T[], ...values: T[]) {\n    if (!target) {\n      target = [];\n    }\n\n    if (!values || values.length === 0) {\n      return target;\n    }\n\n    for (const value of values) {\n      if (value && target.indexOf(value) < 0) {\n        target.push(value);\n      }\n    }\n\n    return target;\n  }\n\n  public static getHashCode(source: string): number {\n    if (!source || source.length === 0) {\n      return 0;\n    }\n\n    let hash: number = 0;\n    for (let index = 0; index < source.length; index++) {\n      const character = source.charCodeAt(index);\n      hash = ((hash << 5) - hash) + character;\n      hash |= 0;\n    }\n\n    return hash;\n  }\n\n  public static getCookies(cookies: string, exclusions?: string[]): object {\n    const result: object = {};\n\n    const parts: string[] = (cookies || '').split('; ');\n    for (const part of parts) {\n      const cookie: string[] = part.split('=');\n      if (!Utils.isMatch(cookie[0], exclusions)) {\n        result[cookie[0]] = cookie[1];\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static guid(): string {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    }\n\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n  }\n\n  // tslint:disable-next-line:ban-types\n  public static merge(defaultValues: Object, values: Object) {\n    const result: object = {};\n\n    for (const key in defaultValues || {}) {\n      if (!!defaultValues[key]) {\n        result[key] = defaultValues[key];\n      }\n    }\n\n    for (const key in values || {}) {\n      if (!!values[key]) {\n        result[key] = values[key];\n      }\n    }\n\n    return result;\n  }\n\n  public static parseVersion(source: string): string {\n    if (!source) {\n      return null;\n    }\n\n    const versionRegex = /(v?((\\d+)\\.(\\d+)(\\.(\\d+))?)(?:-([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?(?:\\+([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?)/;\n    const matches = versionRegex.exec(source);\n    if (matches && matches.length > 0) {\n      return matches[0];\n    }\n\n    return null;\n  }\n\n  public static parseQueryString(query: string, exclusions?: string[]) {\n    if (!query || query.length === 0) {\n      return null;\n    }\n\n    const pairs: string[] = query.split('&');\n    if (pairs.length === 0) {\n      return null;\n    }\n\n    const result: object = {};\n    for (const pair of pairs) {\n      const parts = pair.split('=');\n      if (!Utils.isMatch(parts[0], exclusions)) {\n        result[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static randomNumber(): number {\n    return Math.floor(Math.random() * 9007199254740992);\n  }\n\n  /**\n   * Checks to see if a value matches a pattern.\n   * @param input the value to check against the @pattern.\n   * @param pattern The pattern to check, supports wild cards (*).\n   */\n  public static isMatch(input: string, patterns: string[], ignoreCase: boolean = true): boolean {\n    if (!input || typeof input !== 'string') {\n      return false;\n    }\n\n    const trim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n    input = (ignoreCase ? input.toLowerCase() : input).replace(trim, '');\n\n    return (patterns || []).some((pattern) => {\n      if (typeof pattern !== 'string') {\n        return false;\n      }\n\n      pattern = (ignoreCase ? pattern.toLowerCase() : pattern).replace(trim, '');\n      if (pattern.length <= 0) {\n        return false;\n      }\n\n      const startsWithWildcard: boolean = pattern[0] === '*';\n      if (startsWithWildcard) {\n        pattern = pattern.slice(1);\n      }\n\n      const endsWithWildcard: boolean = pattern[pattern.length - 1] === '*';\n      if (endsWithWildcard) {\n        pattern = pattern.substring(0, pattern.length - 1);\n      }\n\n      if (startsWithWildcard && endsWithWildcard) {\n        return pattern.length <= input.length && input.indexOf(pattern, 0) !== -1;\n      }\n\n      if (startsWithWildcard) {\n        return Utils.endsWith(input, pattern);\n      }\n\n      if (endsWithWildcard) {\n        return Utils.startsWith(input, pattern);\n      }\n\n      return input === pattern;\n    });\n  }\n\n  public static isEmpty(input: object) {\n    return input === null || (typeof (input) === 'object' && Object.keys(input).length === 0);\n  }\n\n  public static startsWith(input: string, prefix: string): boolean {\n    return input.substring(0, prefix.length) === prefix;\n  }\n\n  public static endsWith(input: string, suffix: string): boolean {\n    return input.indexOf(suffix, input.length - suffix.length) !== -1;\n  }\n\n  /**\n   * Stringifys an object with optional exclusions and max depth.\n   * @param data The data object to add.\n   * @param exclusions Any property names that should be excluded.\n   * @param maxDepth The max depth of the object to include.\n   */\n  public static stringify(data: any, exclusions?: string[], maxDepth?: number): string {\n    function stringifyImpl(obj: any, excludedKeys: string[]): string {\n      const cache: string[] = [];\n      return JSON.stringify(obj, (key: string, value: any) => {\n        if (Utils.isMatch(key, excludedKeys)) {\n          return;\n        }\n\n        if (typeof value === 'object' && !!value) {\n          if (cache.indexOf(value) !== -1) {\n            // Circular reference found, discard key\n            return;\n          }\n\n          cache.push(value);\n        }\n\n        return value;\n      });\n    }\n\n    if (({}).toString.call(data) === '[object Object]') {\n      const flattened = {};\n      /* tslint:disable:forin */\n      for (const prop in data) {\n        const value = data[prop];\n        if (value === data) {\n          continue;\n        }\n        flattened[prop] = data[prop];\n      }\n      /* tslint:enable:forin */\n\n      return stringifyImpl(flattened, exclusions);\n    }\n\n    if (({}).toString.call(data) === '[object Array]') {\n      const result = [];\n      for (let index = 0; index < data.length; index++) {\n        result[index] = JSON.parse(stringifyImpl(data[index], exclusions));\n      }\n\n      return JSON.stringify(result);\n    }\n\n    return stringifyImpl(data, exclusions);\n  }\n\n  public static toBoolean(input, defaultValue: boolean = false): boolean {\n    if (typeof input === 'boolean') {\n      return input;\n    }\n\n    if (input === null || typeof input !== 'number' && typeof input !== 'string') {\n      return defaultValue;\n    }\n\n    switch ((input + '').toLowerCase().trim()) {\n      case 'true': case 'yes': case '1': return true;\n      case 'false': case 'no': case '0': case null: return false;\n    }\n\n    return defaultValue;\n  }\n}\n\nn\nexport interface IConfigurationSettings {\n  apiKey?: string;\n  serverUrl?: string;\n  heartbeatServerUrl?: string;\n  updateSettingsWhenIdleInterval?: number;\n  environmentInfoCollector?: IEnvironmentInfoCollector;\n  errorParser?: IErrorParser;\n  lastReferenceIdManager?: ILastReferenceIdManager;\n  log?: ILog;\n  moduleCollector?: IModuleCollector;\n  requestInfoCollector?: IRequestInfoCollector;\n  submissionBatchSize?: number;\n  submissionClient?: ISubmissionClient;\n  submissionAdapter?: ISubmissionAdapter;\n  storage?: IStorageProvider;\n  queue?: IEventQueue;\n}\n\n                                                                                                                                                     \n\ninterface ISettingsWithVersion {\n  version: number;\n  settings: { [key: string]: string };\n}\n\nexport class SettingsManager {\n  /**\n   * A list of handlers that will be fired when the settings change.\n   * @type {Array}\n   * @private\n   */\n  private static _handlers: Array<(config: Configuration) => void> = [];\n\n  public static onChanged(handler: (config: Configuration) => void) {\n    !!handler && this._handlers.push(handler);\n  }\n\n  public static applySavedServerSettings(config: Configuration): void {\n    if (!config || !config.isValid) {\n      return;\n    }\n\n    const savedSettings = this.getSavedServerSettings(config);\n    config.log.info(`Applying saved settings: v${savedSettings.version}`);\n    config.settings = Utils.merge(config.settings, savedSettings.settings);\n    this.changed(config);\n  }\n\n  public static getVersion(config: Configuration): number {\n    if (!config || !config.isValid) {\n      return 0;\n    }\n\n    const savedSettings = this.getSavedServerSettings(config);\n    return savedSettings.version || 0;\n  }\n\n  public static checkVersion(version: number, config: Configuration): void {\n    const currentVersion: number = this.getVersion(config);\n    if (version <= currentVersion) {\n      return;\n    }\n\n    config.log.info(`Updating settings from v${currentVersion} to v${version}`);\n    this.updateSettings(config, currentVersion);\n  }\n\n  public static updateSettings(config: Configuration, version?: number): void {\n    if (!config || !config.enabled) {\n      return;\n    }\n\n    const unableToUpdateMessage = 'Unable to update settings';\n    if (!config.isValid) {\n      config.log.error(`${unableToUpdateMessage}: ApiKey is not set.`);\n      return;\n    }\n\n    if (!version || version < 0) {\n      version = this.getVersion(config);\n    }\n\n    config.log.info(`Checking for updated settings from: v${version}.`);\n    config.submissionClient.getSettings(config, version, (response: SettingsResponse) => {\n      if (!config || !response || !response.success || !response.settings) {\n        config.log.warn(`${unableToUpdateMessage}: ${response.message}`);\n        return;\n      }\n\n      config.settings = Utils.merge(config.settings, response.settings);\n\n      // TODO: Store snapshot of settings after reading from config and attributes and use that to revert to defaults.\n      // Remove any existing server settings that are not in the new server settings.\n      const savedServerSettings = SettingsManager.getSavedServerSettings(config);\n      for (const key in savedServerSettings) {\n        if (response.settings[key]) {\n          continue;\n        }\n\n        delete config.settings[key];\n      }\n\n      const newSettings: ISettingsWithVersion = {\n        version: response.settingsVersion,\n        settings: response.settings\n      };\n\n      config.storage.settings.save(newSettings);\n\n      config.log.info(`Updated settings: v${newSettings.version}`);\n      this.changed(config);\n    });\n  }\n\n  private static changed(config: Configuration) {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(config);\n      } catch (ex) {\n        config.log.error(`Error calling onChanged handler: ${ex}`);\n      }\n    }\n  }\n\n  private static getSavedServerSettings(config: Configuration): ISettingsWithVersion {\n    const item = config.storage.settings.get()[0];\n    if (item && item.value && item.value.version && item.value.settings) {\n      return item.value;\n    }\n\n    return { version: 0, settings: {} };\n  }\n}\n\nexport interface IEvent {\n  type?: string;\n  source?: string;\n  date?: Date;\n  tags?: string[];\n  message?: string;\n  geo?: string;\n  value?: number;\n  data?: any;\n  reference_id?: string;\n  count?: number;\n}\n\nexport class SubmissionResponse {\n  public success: boolean = false;\n  public badRequest: boolean = false;\n  public serviceUnavailable: boolean = false;\n  public paymentRequired: boolean = false;\n  public unableToAuthenticate: boolean = false;\n  public notFound: boolean = false;\n  public requestEntityTooLarge: boolean = false;\n  public statusCode: number;\n  public message: string;\n\n  constructor(statusCode: number, message?: string) {\n    this.statusCode = statusCode;\n    this.message = message;\n\n    this.success = statusCode >= 200 && statusCode <= 299;\n    this.badRequest = statusCode === 400;\n    this.serviceUnavailable = statusCode === 503;\n    this.paymentRequired = statusCode === 402;\n    this.unableToAuthenticate = statusCode === 401 || statusCode === 403;\n    this.notFound = statusCode === 404;\n    this.requestEntityTooLarge = statusCode === 413;\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n\nexport class ExceptionlessClient {\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   * @private\n   */\n  private static _instance: ExceptionlessClient = null;\n\n  public config: Configuration;\n\n  private _intervalId: any;\n  private _timeoutId: any;\n\n  constructor();\n  constructor(settings: IConfigurationSettings);\n  constructor(apiKey: string, serverUrl?: string);\n  constructor(settingsOrApiKey?: IConfigurationSettings | string, serverUrl?: string) {\n    this.config = typeof settingsOrApiKey === 'object'\n      ? new Configuration(settingsOrApiKey)\n      : new Configuration({ apiKey:  settingsOrApiKey as string, serverUrl });\n\n    this.updateSettingsTimer(5000);\n    this.config.onChanged((config) => this.updateSettingsTimer(this._timeoutId > 0 ? 5000 : 0));\n    this.config.queue.onEventsPosted((events, response) =>  this.updateSettingsTimer());\n  }\n\n  public createException(exception: Error): EventBuilder {\n    const pluginContextData = new ContextData();\n    pluginContextData.setException(exception);\n    return this.createEvent(pluginContextData).setType('error');\n  }\n\n  public submitException(exception: Error, callback?: (context: EventPluginContext) => void): void {\n    this.createException(exception).submit(callback);\n  }\n\n  public createUnhandledException(exception: Error, submissionMethod?: string): EventBuilder {\n    const builder = this.createException(exception);\n    builder.pluginContextData.markAsUnhandledError();\n    builder.pluginContextData.setSubmissionMethod(submissionMethod);\n\n    return builder;\n  }\n\n  public submitUnhandledException(exception: Error, submissionMethod?: string, callback?: (context: EventPluginContext) => void) {\n    this.createUnhandledException(exception, submissionMethod).submit(callback);\n  }\n\n  public createFeatureUsage(feature: string): EventBuilder {\n    return this.createEvent().setType('usage').setSource(feature);\n  }\n\n  public submitFeatureUsage(feature: string, callback?: (context: EventPluginContext) => void): void {\n    this.createFeatureUsage(feature).submit(callback);\n  }\n\n  public createLog(message: string): EventBuilder;\n  public createLog(source: string, message: string): EventBuilder;\n  public createLog(source: string, message: string, level: string): EventBuilder;\n  public createLog(sourceOrMessage: string, message?: string, level?: string): EventBuilder {\n    let builder = this.createEvent().setType('log');\n\n    if (message && level) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message).setProperty('@level', level);\n    } else if (message) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message);\n    } else {\n      builder = builder.setMessage(sourceOrMessage);\n\n      try {\n        // TODO: Look into using https: //www.stevefenton.co.uk/Content/Blog/Date/201304/Blog/Obtaining-A-Class-Name-At-Runtime-In-TypeScript/\n        const caller: any = this.createLog.caller;\n        builder = builder.setSource(caller && caller.caller && caller.caller.name);\n      } catch (e) {\n        this.config.log.trace('Unable to resolve log source: ' + e.message);\n      }\n    }\n\n    return builder;\n  }\n\n  public submitLog(message: string): void;\n  public submitLog(source: string, message: string): void;\n  public submitLog(source: string, message: string, level: string, callback?: (context: EventPluginContext) => void): void;\n  public submitLog(sourceOrMessage: string, message?: string, level?: string, callback?: (context: EventPluginContext) => void): void {\n    this.createLog(sourceOrMessage, message, level).submit(callback);\n  }\n\n  public createNotFound(resource: string): EventBuilder {\n    return this.createEvent().setType('404').setSource(resource);\n  }\n\n  public submitNotFound(resource: string, callback?: (context: EventPluginContext) => void): void {\n    this.createNotFound(resource).submit(callback);\n  }\n\n  public createSessionStart(): EventBuilder {\n    return this.createEvent().setType('session');\n  }\n\n  public submitSessionStart(callback?: (context: EventPluginContext) => void): void {\n    this.createSessionStart().submit(callback);\n  }\n\n  public submitSessionEnd(sessionIdOrUserId: string): void {\n    if (sessionIdOrUserId) {\n      this.config.log.info(`Submitting session end: ${sessionIdOrUserId}`);\n      this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, true, this.config);\n    }\n  }\n\n  public submitSessionHeartbeat(sessionIdOrUserId: string): void {\n    if (sessionIdOrUserId) {\n      this.config.log.info(`Submitting session heartbeat: ${sessionIdOrUserId}`);\n      this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, false, this.config);\n    }\n  }\n\n  public createEvent(pluginContextData?: ContextData): EventBuilder {\n    return new EventBuilder({ date: new Date() }, this, pluginContextData);\n  }\n\n  /**\n   * Submits the event to be sent to the server.\n   * @param event The event data.\n   * @param pluginContextData Any contextual data objects to be used by Exceptionless plugins to gather default information for inclusion in the report information.\n   * @param callback\n   */\n  public submitEvent(event: IEvent, pluginContextData?: ContextData, callback?: (context: EventPluginContext) => void): void {\n    function cancelled(context: EventPluginContext) {\n      if (!!context) {\n        context.cancelled = true;\n      }\n\n      return !!callback && callback(context);\n    }\n\n    const context = new EventPluginContext(this, event, pluginContextData);\n    if (!event) {\n      return cancelled(context);\n    }\n\n    if (!this.config.enabled) {\n      this.config.log.info('Event submission is currently disabled.');\n      return cancelled(context);\n    }\n\n    if (!event.data) {\n      event.data = {};\n    }\n\n    if (!event.tags || !event.tags.length) {\n      event.tags = [];\n    }\n\n    EventPluginManager.run(context, (ctx: EventPluginContext) => {\n      const config = ctx.client.config;\n      const ev = ctx.event;\n\n      if (!ctx.cancelled) {\n        // ensure all required data\n        if (!ev.type || ev.type.length === 0) {\n          ev.type = 'log';\n        }\n\n        if (!ev.date) {\n          ev.date = new Date();\n        }\n\n        config.queue.enqueue(ev);\n\n        if (ev.reference_id && ev.reference_id.length > 0) {\n          ctx.log.info(`Setting last reference id '${ev.reference_id}'`);\n          config.lastReferenceIdManager.setLast(ev.reference_id);\n        }\n      }\n\n      !!callback && callback(ctx);\n    });\n  }\n\n  /**\n   * Updates the user's email address and description of an event for the specified reference id.\n   * @param referenceId The reference id of the event to update.\n   * @param email The user's email address to set on the event.\n   * @param description The user's description of the event.\n   * @param callback The submission response.\n   */\n  public updateUserEmailAndDescription(referenceId: string, email: string, description: string, callback?: (response: SubmissionResponse) => void) {\n    if (!referenceId || !email || !description || !this.config.enabled) {\n      return !!callback && callback(new SubmissionResponse(500, 'cancelled'));\n    }\n\n    const userDescription: IUserDescription = { email_address: email, description };\n    this.config.submissionClient.postUserDescription(referenceId, userDescription, this.config, (response: SubmissionResponse) => {\n      if (!response.success) {\n        this.config.log.error(`Failed to submit user email and description for event '${referenceId}': ${response.statusCode} ${response.message}`);\n      }\n\n      !!callback && callback(response);\n    });\n  }\n\n  /**\n   * Gets the last event client id that was submitted to the server.\n   * @returns {string} The event client id.\n   */\n  public getLastReferenceId(): string {\n    return this.config.lastReferenceIdManager.getLast();\n  }\n\n  private updateSettingsTimer(initialDelay?: number) {\n    this.config.log.info(`Updating settings timer with delay: ${initialDelay}`);\n\n    this._timeoutId = clearTimeout(this._timeoutId);\n    this._timeoutId = clearInterval(this._intervalId);\n\n    const interval = this.config.updateSettingsWhenIdleInterval;\n    if (interval > 0) {\n      const updateSettings = () => SettingsManager.updateSettings(this.config);\n      if (initialDelay > 0) {\n        this._timeoutId = setTimeout(updateSettings, initialDelay);\n      }\n\n      this._intervalId = setInterval(updateSettings, interval);\n    }\n  }\n\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   */\n  public static get default() {\n    if (ExceptionlessClient._instance === null) {\n      ExceptionlessClient._instance = new ExceptionlessClient(null);\n    }\n\n    return ExceptionlessClient._instance;\n  }\n}\n\nexport class ContextData {\n  public setException(exception: Error): void {\n    if (exception) {\n      this['@@_Exception'] = exception;\n    }\n  }\n\n  public get hasException(): boolean {\n    return !!this['@@_Exception'];\n  }\n\n  public getException(): Error {\n    return this['@@_Exception'] || null;\n  }\n\n  public markAsUnhandledError(): void {\n    this['@@_IsUnhandledError'] = true;\n  }\n\n  public get isUnhandledError(): boolean {\n    return !!this['@@_IsUnhandledError'];\n  }\n\n  public setSubmissionMethod(method: string): void {\n    if (method) {\n      this['@@_SubmissionMethod'] = method;\n    }\n  }\n\n  public getSubmissionMethod(): string {\n    return this['@@_SubmissionMethod'] || null;\n  }\n}\n\nexport interface IEnvironmentInfo {\n  processor_count?: number;\n  total_physical_memory?: number;\n  available_physical_memory?: number;\n  command_line?: string;\n  process_name?: string;\n  process_id?: string;\n  process_memory_size?: number;\n  thread_id?: string;\n  architecture?: string;\n  o_s_name?: string;\n  o_s_version?: string;\n  ip_address?: string;\n  machine_name?: string;\n  install_id?: string;\n  runtime_version?: string;\n  data?: any;\n}\n\nexport interface IParameter {\n  data?: any;\n  generic_arguments?: string[];\n\n  name?: string;\n  type?: string;\n  type_namespace?: string;\n}\n\n                                          \n\nexport interface IMethod {\n  data?: any;\n  generic_arguments?: string[];\n  parameters?: IParameter[];\n\n  is_signature_target?: boolean;\n  declaring_namespace?: string;\n  declaring_type?: string;\n  name?: string;\n  module_id?: number;\n}\n\n                                    \n\nexport interface IStackFrame extends IMethod {\n  file_name?: string;\n  line_number?: number;\n  column?: number;\n}\n\n                                                                                 \n\nexport interface IInnerError {\n  message?: string;\n  type?: string;\n  code?: string;\n  data?: any;\n  inner?: IInnerError;\n  stack_trace?: IStackFrame[];\n  target_method?: IMethod;\n}\n\nexport interface IModule {\n  data?: any;\n\n  module_id?: number;\n  name?: string;\n  version?: string;\n  is_entry?: boolean;\n  created_date?: Date;\n  modified_date?: Date;\n}\n\n                                                                                 \n\nexport interface IError extends IInnerError {\n  modules?: IModule[];\n}\n\nexport interface IRequestInfo {\n  user_agent?: string;\n  http_method?: string;\n  is_secure?: boolean;\n  host?: string;\n  port?: number;\n  path?: string;\n  referrer?: string;\n  client_ip_address?: string;\n  cookies?: any;\n  post_data?: any;\n  query_string?: any;\n  data?: any;\n}\n\nexport interface IStorageItem {\n  timestamp: number;\n  value: any;\n}\n\n                                              \n\nexport interface IStorage {\n  save(value: any): number;\n  get(limit?: number): IStorageItem[];\n  remove(timestamp: number): void;\n  clear(): void;\n}\n\nexport type SubmissionCallback = (status: number, message: string, data?: string, headers?: object) => void;\n\nexport interface SubmissionRequest {\n  apiKey: string;\n  userAgent: string;\n  method: string;\n  url: string;\n  data: string;\n}\n\nn\nexport class Configuration implements IConfigurationSettings {\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @type {IConfigurationSettings}\n   * @private\n   */\n  private static _defaultSettings: IConfigurationSettings = null;\n\n  /**\n   * A default list of tags that will automatically be added to every\n   * report submitted to the server.\n   *\n   * @type {Array}\n   */\n  public defaultTags: string[] = [];\n\n  /**\n   * A default list of of extended data objects that will automatically\n   * be added to every report submitted to the server.\n   *\n   * @type {{}}\n   */\n  public defaultData: object = {};\n\n  /**\n   * Whether the client is currently enabled or not. If it is disabled,\n   * submitted errors will be discarded and no data will be sent to the server.\n   *\n   * @returns {boolean}\n   */\n  public enabled: boolean = true;\n\n  public environmentInfoCollector: IEnvironmentInfoCollector;\n  public errorParser: IErrorParser;\n  public lastReferenceIdManager: ILastReferenceIdManager = new DefaultLastReferenceIdManager();\n  public log: ILog;\n  public moduleCollector: IModuleCollector;\n  public requestInfoCollector: IRequestInfoCollector;\n\n  /**\n   * Maximum number of events that should be sent to the server together in a batch. (Defaults to 50)\n   */\n  public submissionBatchSize: number;\n  public submissionAdapter: ISubmissionAdapter;\n  public submissionClient: ISubmissionClient;\n\n  /**\n   * Contains a dictionary of custom settings that can be used to control\n   * the client and will be automatically updated from the server.\n   */\n  public settings: object = {};\n\n  public storage: IStorageProvider;\n\n  public queue: IEventQueue;\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @type {string}\n   * @private\n   */\n  private _apiKey: string;\n\n  /**\n   * The server url that all events will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _serverUrl: string = 'https://collector.exceptionless.io';\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _heartbeatServerUrl: string = 'https://heartbeat.exceptionless.io';\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @type {number}\n   * @private\n   */\n  private _updateSettingsWhenIdleInterval: number = 120000;\n\n  /**\n   * A list of exclusion patterns.\n   * @type {Array}\n   * @private\n   */\n  private _dataExclusions: string[] = [];\n\n  /**\n   * A list of user agent patterns.\n   * @type {Array}\n   * @private\n   */\n  private _userAgentBotPatterns: string[] = [];\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @type {Array}\n   * @private\n   */\n  private _plugins: IEventPlugin[] = [];\n\n  /**\n   * A list of handlers that will be fired when configuration changes.\n   * @type {Array}\n   * @private\n   */\n  private _handlers: Array<(config: Configuration) => void> = [];\n\n  constructor(configSettings?: IConfigurationSettings) {\n    function inject(fn: any) {\n      return typeof fn === 'function' ? fn(this) : fn;\n    }\n\n    configSettings = Utils.merge(Configuration.defaults, configSettings);\n\n    this.log = inject(configSettings.log) || new NullLog();\n    this.apiKey = configSettings.apiKey;\n    this.serverUrl = configSettings.serverUrl;\n    this.heartbeatServerUrl = configSettings.heartbeatServerUrl;\n    this.updateSettingsWhenIdleInterval = configSettings.updateSettingsWhenIdleInterval;\n\n    this.environmentInfoCollector = inject(configSettings.environmentInfoCollector);\n    this.errorParser = inject(configSettings.errorParser);\n    this.lastReferenceIdManager = inject(configSettings.lastReferenceIdManager) || new DefaultLastReferenceIdManager();\n    this.moduleCollector = inject(configSettings.moduleCollector);\n    this.requestInfoCollector = inject(configSettings.requestInfoCollector);\n    this.submissionBatchSize = inject(configSettings.submissionBatchSize) || 50;\n    this.submissionAdapter = inject(configSettings.submissionAdapter);\n    this.submissionClient = inject(configSettings.submissionClient) || new DefaultSubmissionClient();\n    this.storage = inject(configSettings.storage) || new InMemoryStorageProvider();\n    this.queue = inject(configSettings.queue) || new DefaultEventQueue(this);\n\n    SettingsManager.applySavedServerSettings(this);\n    EventPluginManager.addDefaultPlugins(this);\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @returns {string}\n   */\n  public get apiKey(): string {\n    return this._apiKey;\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @param value\n   */\n  public set apiKey(value: string) {\n    this._apiKey = value || null;\n    this.log.info(`apiKey: ${this._apiKey}`);\n    this.changed();\n  }\n\n  /**\n   * Returns true if the apiKey is valid.\n   * @returns {boolean}\n   */\n  public get isValid(): boolean {\n    return !!this.apiKey && this.apiKey.length >= 10;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @returns {string}\n   */\n  public get serverUrl(): string {\n    return this._serverUrl;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @param value\n   */\n  public set serverUrl(value: string) {\n    if (!!value) {\n      this._serverUrl = value;\n      this._heartbeatServerUrl = value;\n      this.log.info(`serverUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @returns {string}\n   */\n  public get heartbeatServerUrl(): string {\n    return this._heartbeatServerUrl;\n  }\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @param value\n   */\n  public set heartbeatServerUrl(value: string) {\n    if (!!value) {\n      this._heartbeatServerUrl = value;\n      this.log.info(`heartbeatServerUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @returns {number}\n   */\n  public get updateSettingsWhenIdleInterval(): number {\n    return this._updateSettingsWhenIdleInterval;\n  }\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @param value\n   */\n  public set updateSettingsWhenIdleInterval(value: number) {\n    if (typeof value !== 'number') {\n      return;\n    }\n\n    if (value <= 0) {\n      value = -1;\n    } else if (value > 0 && value < 15000) {\n      value = 15000;\n    }\n\n    this._updateSettingsWhenIdleInterval = value;\n    this.log.info(`updateSettingsWhenIdleInterval: ${value}`);\n    this.changed();\n  }\n\n  /**\n   *  A list of exclusion patterns that will automatically remove any data that\n   *  matches them from any data submitted to the server.\n   *\n   *  For example, entering CreditCard will remove any extended data properties,\n   *  form fields, cookies and query parameters from the report.\n   *\n   * @returns {string[]}\n   */\n  public get dataExclusions(): string[] {\n    const exclusions: string = this.settings['@@DataExclusions'];\n    return this._dataExclusions.concat(exclusions && exclusions.split(',') || []);\n  }\n\n  /**\n   * Add items to the list of exclusion patterns that will automatically remove any\n   * data that matches them from any data submitted to the server.\n   *\n   * For example, entering CreditCard will remove any extended data properties, form\n   * fields, cookies and query parameters from the report.\n   *\n   * @param exclusions\n   */\n  public addDataExclusions(...exclusions: string[]) {\n    this._dataExclusions = Utils.addRange<string>(this._dataExclusions, ...exclusions);\n  }\n\n  /**\n   * A list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @returns {string[]}\n   */\n  public get userAgentBotPatterns(): string[] {\n    const patterns: string = this.settings['@@UserAgentBotPatterns'];\n    return this._userAgentBotPatterns.concat(patterns && patterns.split(',') || []);\n  }\n\n  /**\n   * Add items to the list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @param userAgentBotPatterns\n   */\n  public addUserAgentBotPatterns(...userAgentBotPatterns: string[]) {\n    this._userAgentBotPatterns = Utils.addRange<string>(this._userAgentBotPatterns, ...userAgentBotPatterns);\n  }\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @returns {IEventPlugin[]}\n   */\n  public get plugins(): IEventPlugin[] {\n    return this._plugins.sort((p1: IEventPlugin, p2: IEventPlugin) => {\n      return (p1.priority < p2.priority) ? -1 : (p1.priority > p2.priority) ? 1 : 0;\n    });\n  }\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param plugin\n   */\n  public addPlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param name The name used to identify the plugin.\n   * @param priority Used to determine plugins priority.\n   * @param pluginAction A function that is run.\n   */\n  public addPlugin(name: string, priority: number, pluginAction: (context: EventPluginContext, next?: () => void) => void): void;\n  public addPlugin(pluginOrName: IEventPlugin | string, priority?: number, pluginAction?: (context: EventPluginContext, next?: () => void) => void): void {\n    const plugin: IEventPlugin = !!pluginAction ? { name: pluginOrName as string, priority, run: pluginAction } :  pluginOrName as IEventPlugin;\n    if (!plugin || !plugin.run) {\n      this.log.error('Add plugin failed: Run method not defined');\n      return;\n    }\n\n    if (!plugin.name) {\n      plugin.name = Utils.guid();\n    }\n\n    if (!plugin.priority) {\n      plugin.priority = 0;\n    }\n\n    let pluginExists: boolean = false;\n    const plugins = this._plugins; // optimization for minifier.\n    for (const p of plugins) {\n      if (p.name === plugin.name) {\n        pluginExists = true;\n        break;\n      }\n    }\n\n    if (!pluginExists) {\n      plugins.push(plugin);\n    }\n  }\n\n  /**\n   * Remove the plugin from this configuration.\n   * @param plugin\n   */\n  public removePlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Remove an plugin by key from this configuration.\n   * @param name\n   */\n  public removePlugin(pluginOrName: IEventPlugin | string): void {\n    const name: string = typeof pluginOrName === 'string' ? pluginOrName : pluginOrName.name;\n    if (!name) {\n      this.log.error('Remove plugin failed: Plugin name not defined');\n      return;\n    }\n\n    const plugins = this._plugins; // optimization for minifier.\n    for (let index = 0; index < plugins.length; index++) {\n      if (plugins[index].name === name) {\n        plugins.splice(index, 1);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Automatically set the application version for events.\n   * @param version\n   */\n  public setVersion(version: string): void {\n    if (!!version) {\n      this.defaultData['@version'] = version;\n    }\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): void;\n  public setUserIdentity(identity: string): void;\n  public setUserIdentity(identity: string, name: string): void;\n  public setUserIdentity(userInfoOrIdentity: IUserInfo | string, name?: string): void {\n    const USER_KEY: string = '@user'; // optimization for minifier.\n    const userInfo: IUserInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name };\n\n    const shouldRemove: boolean = !userInfo || (!userInfo.identity && !userInfo.name);\n    if (shouldRemove) {\n      delete this.defaultData[USER_KEY];\n    } else {\n      this.defaultData[USER_KEY] = userInfo;\n    }\n\n    this.log.info(`user identity: ${shouldRemove ? 'null' : userInfo.identity}`);\n  }\n\n  /**\n   * Used to identify the client that sent the events to the server.\n   * @returns {string}\n   */\n  public get userAgent(): string {\n    return 'exceptionless-js/1.0.0.0';\n  }\n\n  /**\n   * Automatically send a heartbeat to keep the session alive.\n   */\n  public useSessions(sendHeartbeats: boolean = true, heartbeatInterval: number = 30000): void {\n    if (sendHeartbeats) {\n      this.addPlugin(new HeartbeatPlugin(heartbeatInterval));\n    }\n  }\n\n  /**\n   * Automatically set a reference id for error events.\n   */\n  public useReferenceIds(): void {\n    this.addPlugin(new ReferenceIdPlugin());\n  }\n\n  public useLocalStorage(): void {\n    // This method will be injected via the prototype.\n  }\n\n  // TODO: Support a min log level.\n  public useDebugLogger(): void {\n    this.log = new ConsoleLog();\n  }\n\n  public onChanged(handler: (config: Configuration) => void) {\n    !!handler && this._handlers.push(handler);\n  }\n\n  private changed() {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(this);\n      } catch (ex) {\n        this.log.error(`Error calling onChanged handler: ${ex}`);\n      }\n    }\n  }\n\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @returns {IConfigurationSettings}\n   */\n  public static get defaults() {\n    if (Configuration._defaultSettings === null) {\n      Configuration._defaultSettings = {};\n    }\n\n    return Configuration._defaultSettings;\n  }\n}\n\nexport interface IUserDescription {\n  email_address?: string;\n  description?: string;\n  data?: any;\n}\n\nexport class SettingsResponse {\n  public success: boolean = false;\n  public settings: any;\n  public settingsVersion: number = -1;\n  public message: string;\n  public exception: any;\n\n  constructor(success: boolean, settings: any, settingsVersion: number = -1, exception: any = null, message: string = null) {\n    this.success = success;\n    this.settings = settings;\n    this.settingsVersion = settingsVersion;\n    this.exception = exception;\n    this.message = message;\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                   \n\nexport class EventBuilder {\n  public target: IEvent;\n  public client: ExceptionlessClient;\n  public pluginContextData: ContextData;\n\n  private _validIdentifierErrorMessage: string = 'must contain between 8 and 100 alphanumeric or \\'-\\' characters.'; // optimization for minifier.\n\n  constructor(event: IEvent, client: ExceptionlessClient, pluginContextData?: ContextData) {\n    this.target = event;\n    this.client = client;\n    this.pluginContextData = pluginContextData || new ContextData();\n  }\n\n  public setType(type: string): EventBuilder {\n    if (!!type) {\n      this.target.type = type;\n    }\n\n    return this;\n  }\n\n  public setSource(source: string): EventBuilder {\n    if (!!source) {\n      this.target.source = source;\n    }\n\n    return this;\n  }\n\n  public setReferenceId(referenceId: string): EventBuilder {\n    if (!this.isValidIdentifier(referenceId)) {\n      throw new Error(`ReferenceId ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.target.reference_id = referenceId;\n    return this;\n  }\n\n  /**\n   * Allows you to reference a parent event by its ReferenceId property. This allows you to have parent and child relationships.\n   * @param name Reference name\n   * @param id The reference id that points to a specific event\n   * @returns {EventBuilder}\n   */\n  public setEventReference(name: string, id: string): EventBuilder {\n    if (!name) {\n      throw new Error('Invalid name');\n    }\n\n    if (!id || !this.isValidIdentifier(id)) {\n      throw new Error(`Id ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.setProperty('@ref:' + name, id);\n    return this;\n  }\n\n  public setMessage(message: string): EventBuilder {\n    if (!!message) {\n      this.target.message = message;\n    }\n\n    return this;\n  }\n\n  public setGeo(latitude: number, longitude: number): EventBuilder {\n    if (latitude < -90.0 || latitude > 90.0) {\n      throw new Error('Must be a valid latitude value between -90.0 and 90.0.');\n    }\n\n    if (longitude < -180.0 || longitude > 180.0) {\n      throw new Error('Must be a valid longitude value between -180.0 and 180.0.');\n    }\n\n    this.target.geo = `${latitude},${longitude}`;\n    return this;\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): EventBuilder;\n  public setUserIdentity(identity: string): EventBuilder;\n  public setUserIdentity(identity: string, name: string): EventBuilder;\n  public setUserIdentity(userInfoOrIdentity: IUserInfo | string, name?: string): EventBuilder {\n    const userInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name };\n    if (!userInfo || (!userInfo.identity && !userInfo.name)) {\n      return this;\n    }\n\n    this.setProperty('@user', userInfo);\n    return this;\n  }\n\n  /**\n   * Sets the user's description of the event.\n   *\n   * @param emailAddress The email address\n   * @param description The user's description of the event.\n   * @returns {EventBuilder}\n   */\n  public setUserDescription(emailAddress: string, description: string): EventBuilder {\n    if (emailAddress && description) {\n      this.setProperty('@user_description', { email_address: emailAddress, description });\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting manual\n   * stacking information.\n   * @param signatureData A dictionary of strings to use for stacking.\n   * @param title An optional title for the stacking information.\n   * @returns {EventBuilder}\n   */\n  public setManualStackingInfo(signatureData: any, title?: string) {\n    if (signatureData) {\n      const stack: IManualStackingInfo = { signature_data: signatureData };\n      if (title) {\n        stack.title = title;\n      }\n\n      this.setProperty('@stack', stack);\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting the stacking key.\n   * @param manualStackingKey The manual stacking key.\n   * @param title An optional title for the stacking information.\n   * @returns {EventBuilder}\n   */\n  public setManualStackingKey(manualStackingKey: string, title?: string): EventBuilder {\n    if (manualStackingKey) {\n      const data = { ManualStackingKey: manualStackingKey };\n      this.setManualStackingInfo(data, title);\n    }\n\n    return this;\n  }\n\n  public setValue(value: number): EventBuilder {\n    if (!!value) {\n      this.target.value = value;\n    }\n\n    return this;\n  }\n\n  public addTags(...tags: string[]): EventBuilder {\n    this.target.tags = Utils.addRange<string>(this.target.tags, ...tags);\n    return this;\n  }\n\n  /**\n   * Adds the object to extended data. Uses @excludedPropertyNames\n   * to exclude data from being included in the event.\n   * @param name The data object to add.\n   * @param value The name of the object to add.\n   * @param maxDepth The max depth of the object to include.\n   * @param excludedPropertyNames Any property names that should be excluded.\n   */\n  public setProperty(name: string, value: any, maxDepth?: number, excludedPropertyNames?: string[]): EventBuilder {\n    if (!name || (value === undefined || value == null)) {\n      return this;\n    }\n\n    if (!this.target.data) {\n      this.target.data = {};\n    }\n\n    const result = JSON.parse(Utils.stringify(value, this.client.config.dataExclusions.concat(excludedPropertyNames || []), maxDepth));\n    if (!Utils.isEmpty(result)) {\n      this.target.data[name] = result;\n    }\n\n    return this;\n  }\n\n  public markAsCritical(critical: boolean): EventBuilder {\n    if (critical) {\n      this.addTags('Critical');\n    }\n\n    return this;\n  }\n\n  public addRequestInfo(request: object): EventBuilder {\n    if (!!request) {\n      this.pluginContextData['@request'] = request;\n    }\n\n    return this;\n  }\n\n  public submit(callback?: (context: EventPluginContext) => void): void {\n    this.client.submitEvent(this.target, this.pluginContextData, callback);\n  }\n\n  private isValidIdentifier(value: string): boolean {\n    if (!value) {\n      return true;\n    }\n\n    if (value.length < 8 || value.length > 100) {\n      return false;\n    }\n\n    for (let index = 0; index < value.length; index++) {\n      const code = value.charCodeAt(index);\n      const isDigit = (code >= 48) && (code <= 57);\n      const isLetter = ((code >= 65) && (code <= 90)) || ((code >= 97) && (code <= 122));\n      const isMinus = code === 45;\n\n      if (!(isDigit || isLetter) && !isMinus) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nexport interface IManualStackingInfo {\n  title?: string;\n  signature_data?: any;\n}\n\n                                                                                                                                                \n\nexport class ConfigurationDefaultsPlugin implements IEventPlugin {\n  public priority: number = 10;\n  public name: string = 'ConfigurationDefaultsPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const config = context.client.config;\n    const defaultTags: string[] = config.defaultTags || [];\n    for (const tag of defaultTags) {\n      if (!!tag && context.event.tags.indexOf(tag) < 0) {\n        context.event.tags.push(tag);\n      }\n    }\n\n    // tslint:disable-next-line:ban-types\n    const defaultData: Object = config.defaultData || {};\n    for (const key in defaultData) {\n      if (!!defaultData[key]) {\n        const result = JSON.parse(Utils.stringify(defaultData[key], config.dataExclusions));\n        if (!Utils.isEmpty(result)) {\n          context.event.data[key] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                        \n\nexport class DuplicateCheckerPlugin implements IEventPlugin {\n  public priority: number = 1010;\n  public name: string = 'DuplicateCheckerPlugin';\n\n  private _mergedEvents: MergedEvent[] = [];\n  private _processedHashcodes: TimestampedHash[] = [];\n  private _getCurrentTime: () => number;\n  private _interval: number;\n\n  constructor(getCurrentTime: () => number = () => Date.now(), interval: number = 30000) {\n    this._getCurrentTime = getCurrentTime;\n    this._interval = interval;\n\n    setInterval(() => {\n      while (this._mergedEvents.length > 0) {\n        this._mergedEvents.shift().resubmit();\n      }\n    }, interval);\n  }\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    function getHashCode(error: IInnerError): number {\n      let hashCode = 0;\n      while (error) {\n        if (error.message && error.message.length) {\n          hashCode += (hashCode * 397) ^ Utils.getHashCode(error.message);\n        }\n        if (error.stack_trace && error.stack_trace.length) {\n          hashCode += (hashCode * 397) ^ Utils.getHashCode(JSON.stringify(error.stack_trace));\n        }\n        error = error.inner;\n      }\n\n      return hashCode;\n    }\n\n    const error = context.event.data['@error'];\n    const hashCode = getHashCode(error);\n    if (hashCode) {\n      const count = context.event.count || 1;\n      const now = this._getCurrentTime();\n\n      const merged = this._mergedEvents.filter((s) => s.hashCode === hashCode)[0];\n      if (merged) {\n        merged.incrementCount(count);\n        merged.updateDate(context.event.date);\n        context.log.info('Ignoring duplicate event with hash: ' + hashCode);\n        context.cancelled = true;\n      }\n\n      if (!context.cancelled && this._processedHashcodes.some((h) => h.hash === hashCode && h.timestamp >= (now - this._interval))) {\n        context.log.trace('Adding event with hash: ' + hashCode);\n        this._mergedEvents.push(new MergedEvent(hashCode, context, count));\n        context.cancelled = true;\n      }\n\n      if (!context.cancelled) {\n        context.log.trace('Enqueueing event with hash: ' + hashCode + 'to cache.');\n        this._processedHashcodes.push({ hash: hashCode, timestamp: now });\n\n        // Only keep the last 50 recent errors.\n        while (this._processedHashcodes.length > 50) {\n          this._processedHashcodes.shift();\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\ninterface TimestampedHash {\n  hash: number;\n  timestamp: number;\n}\n\nclass MergedEvent {\n  public hashCode: number;\n  private _count: number;\n  private _context: EventPluginContext;\n\n  constructor(hashCode: number, context: EventPluginContext, count: number) {\n    this.hashCode = hashCode;\n    this._context = context;\n    this._count = count;\n  }\n\n  public incrementCount(count: number) {\n    this._count += count;\n  }\n\n  public resubmit() {\n    this._context.event.count = this._count;\n    this._context.client.config.queue.enqueue(this._context.event);\n  }\n\n  public updateDate(date) {\n    if (date > this._context.event.date) {\n      this._context.event.date = date;\n    }\n  }\n}\n\n                                                                                                                                                                             \n\nexport class EnvironmentInfoPlugin implements IEventPlugin {\n  public priority: number = 80;\n  public name: string = 'EnvironmentInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ENVIRONMENT_KEY: string = '@environment'; // optimization for minifier.\n\n    const collector = context.client.config.environmentInfoCollector;\n    if (!context.event.data[ENVIRONMENT_KEY] && collector) {\n      const environmentInfo: IEnvironmentInfo = collector.getEnvironmentInfo(context);\n      if (!!environmentInfo) {\n        context.event.data[ENVIRONMENT_KEY] = environmentInfo;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                \n\nexport class ErrorPlugin implements IEventPlugin {\n  public priority: number = 30;\n  public name: string = 'ErrorPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\n    const ignoredProperties: string[] = [\n      'arguments',\n      'column',\n      'columnNumber',\n      'description',\n      'fileName',\n      'message',\n      'name',\n      'number',\n      'line',\n      'lineNumber',\n      'opera#sourceloc',\n      'sourceId',\n      'sourceURL',\n      'stack',\n      'stackArray',\n      'stacktrace'\n    ];\n\n    const exception = context.contextData.getException();\n    if (!!exception) {\n      context.event.type = 'error';\n\n      if (!context.event.data[ERROR_KEY]) {\n        const config = context.client.config;\n        const parser = config.errorParser;\n        if (!parser) {\n          throw new Error('No error parser was defined.');\n        }\n\n        const result = parser.parse(context, exception);\n        if (!!result) {\n          const additionalData = JSON.parse(Utils.stringify(exception, config.dataExclusions.concat(ignoredProperties)));\n          if (!Utils.isEmpty(additionalData)) {\n            if (!result.data) {\n              result.data = {};\n            }\n            result.data['@ext'] = additionalData;\n          }\n\n          context.event.data[ERROR_KEY] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                        \n\nexport class EventExclusionPlugin implements IEventPlugin {\n  public priority: number = 45;\n  public name: string = 'EventExclusionPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    function getLogLevel(level: string): number {\n      switch ((level || '').toLowerCase().trim()) {\n        case 'trace':\n        case 'true':\n        case '1':\n        case 'yes':\n          return 0;\n        case 'debug':\n          return 1;\n        case 'info':\n          return 2;\n        case 'warn':\n          return 3;\n        case 'error':\n          return 4;\n        case 'fatal':\n          return 5;\n        case 'off':\n        case 'false':\n        case '0':\n        case 'no':\n          return 6;\n        default:\n          return -1;\n      }\n    }\n\n    function getMinLogLevel(settings: object, loggerName: string = '*'): number {\n      return getLogLevel(getTypeAndSourceSetting(settings, 'log', loggerName, 'Trace') + '');\n    }\n\n    // tslint:disable-next-line:ban-types\n    function getTypeAndSourceSetting(settings: Object = {}, type: string, source: string, defaultValue?: string|boolean): string|boolean {\n      if (!type) {\n        return defaultValue;\n      }\n\n      const isLog = type === 'log';\n      const sourcePrefix =  `@@${type}:`;\n\n      const value = settings[sourcePrefix + source];\n      if (value) {\n        return !isLog ? Utils.toBoolean(value) : value;\n      }\n\n      // check for wildcard match\n      for (const key in settings) {\n        if (Utils.startsWith(key.toLowerCase(), sourcePrefix.toLowerCase()) && Utils.isMatch(source, [key.substring(sourcePrefix.length)])) {\n          return !isLog ? Utils.toBoolean(settings[key]) : settings[key];\n        }\n      }\n\n      return defaultValue;\n    }\n\n    const ev = context.event;\n    const log = context.log;\n    const settings = context.client.config.settings;\n\n    if (ev.type === 'log') {\n      const minLogLevel = getMinLogLevel(settings, ev.source);\n      const logLevel = getLogLevel(ev.data['@level']);\n\n      if (logLevel >= 0 && (logLevel > 5 || logLevel < minLogLevel)) {\n        log.info('Cancelling log event due to minimum log level.');\n        context.cancelled = true;\n      }\n    } else if (ev.type === 'error') {\n      let error: IInnerError = ev.data['@error'];\n      while (!context.cancelled && error) {\n        if (getTypeAndSourceSetting(settings, ev.type, error.type, true) === false) {\n          log.info(`Cancelling error from excluded exception type: ${error.type}`);\n          context.cancelled = true;\n        }\n\n        error = error.inner;\n      }\n    } else if (getTypeAndSourceSetting(settings, ev.type, ev.source, true) === false) {\n      log.info(`Cancelling event from excluded type: ${ev.type} and source: ${ev.source}`);\n      context.cancelled = true;\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                           \n\nexport class ModuleInfoPlugin implements IEventPlugin {\n  public priority: number = 50;\n  public name: string = 'ModuleInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\n\n    const collector = context.client.config.moduleCollector;\n    if (context.event.data[ERROR_KEY] && !context.event.data['@error'].modules && !!collector) {\n      const modules: IModule[] = collector.getModules(context);\n      if (modules && modules.length > 0) {\n        context.event.data[ERROR_KEY].modules = modules;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                          \n\nexport class RequestInfoPlugin implements IEventPlugin {\n  public priority: number = 70;\n  public name: string = 'RequestInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const REQUEST_KEY: string = '@request'; // optimization for minifier.\n\n    const config = context.client.config;\n    const collector = config.requestInfoCollector;\n    if (!context.event.data[REQUEST_KEY] && !!collector) {\n      const requestInfo: IRequestInfo = collector.getRequestInfo(context);\n      if (!!requestInfo) {\n        if (Utils.isMatch(requestInfo.user_agent, config.userAgentBotPatterns)) {\n          context.log.info('Cancelling event as the request user agent matches a known bot pattern');\n          context.cancelled = true;\n        } else {\n          context.event.data[REQUEST_KEY] = requestInfo;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                           \n\nexport class SubmissionMethodPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = 'SubmissionMethodPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const submissionMethod: string = context.contextData.getSubmissionMethod();\n    if (!!submissionMethod) {\n      context.event.data['@submission_method'] = submissionMethod;\n    }\n\n    next && next();\n  }\n}\n\n                                                                                     \n\nexport class InMemoryStorage implements IStorage {\n  private maxItems: number;\n  private items: IStorageItem[] = [];\n  private lastTimestamp: number = 0;\n\n  constructor(maxItems: number) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any): number {\n    if (!value) {\n      return null;\n    }\n\n    const items = this.items;\n    const timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    const item = { timestamp, value };\n\n    if (items.push(item) > this.maxItems) {\n      items.shift();\n    }\n\n    this.lastTimestamp = timestamp;\n    return item.timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    return this.items.slice(0, limit);\n  }\n\n  public remove(timestamp: number): void {\n    const items = this.items;\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].timestamp === timestamp) {\n        items.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  public clear(): void {\n    this.items = [];\n  }\n}\n\nexport interface IClientConfiguration {\n  settings: object;\n  version: number;\n}\n\n                                                                                     \n\nexport abstract class KeyValueStorageBase implements IStorage {\n  private maxItems: number;\n  private items: number[];\n  private lastTimestamp: number = 0;\n\n  constructor(maxItems) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any, single?: boolean): number {\n    if (!value) {\n      return null;\n    }\n\n    this.ensureIndex();\n\n    const items = this.items;\n    const timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    const key = this.getKey(timestamp);\n    const json = JSON.stringify(value);\n\n    try {\n      this.write(key, json);\n      this.lastTimestamp = timestamp;\n      if (items.push(timestamp) > this.maxItems) {\n        this.delete(this.getKey(items.shift()));\n      }\n    } catch (e) {\n      return null;\n    }\n\n    return timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    this.ensureIndex();\n\n    return this.items.slice(0, limit)\n      .map((timestamp) => {\n        // Read and parse item for this timestamp\n        const key = this.getKey(timestamp);\n        try {\n          const json = this.read(key);\n          const value = JSON.parse(json, parseDate);\n          return { timestamp, value };\n        } catch (error) {\n          // Something went wrong - try to delete the cause.\n          this.safeDelete(key);\n          return null;\n        }\n      })\n      .filter((item) => item != null);\n  }\n\n  public remove(timestamp: number): void {\n    this.ensureIndex();\n\n    const items = this.items;\n    const index = items.indexOf(timestamp);\n    if (index >= 0) {\n      const key = this.getKey(timestamp);\n      this.safeDelete(key);\n      items.splice(index, 1);\n    }\n  }\n\n  public clear(): void {\n    this.items.forEach((item) => this.safeDelete(this.getKey(item)));\n    this.items = [];\n  }\n\n  protected abstract write(key: string, value: string): void;\n  protected abstract read(key: string): string;\n  protected abstract readAllKeys(): string[];\n  protected abstract delete(key: string);\n  protected abstract getKey(timestamp: number): string;\n  protected abstract getTimestamp(key: string): number;\n\n  private ensureIndex() {\n    if (!this.items) {\n      this.items = this.createIndex();\n      this.lastTimestamp = Math.max(0, ...this.items) + 1;\n    }\n  }\n\n  private safeDelete(key: string): void {\n    try {\n      this.delete(key);\n    } catch (error) {\n    }\n  }\n\n  private createIndex() {\n    try {\n      const keys = this.readAllKeys();\n      return keys.map((key) => {\n        try {\n          const timestamp = this.getTimestamp(key);\n          if (!timestamp) {\n            this.safeDelete(key);\n            return null;\n          }\n          return timestamp;\n        } catch (error) {\n          this.safeDelete(key);\n          return null;\n        }\n      }).filter((timestamp) => timestamp != null)\n        .sort((a, b) => a - b);\n    } catch (error) {\n      return [];\n    }\n  }\n}\n\nfunction parseDate(key, value) {\n  const dateRegx = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/g;\n  if (typeof value === 'string') {\n    const a = dateRegx.exec(value);\n    if (a) {\n      return new Date(value);\n    }\n  }\n  return value;\n}\n\n                                                            \n\nexport class BrowserStorage extends KeyValueStorageBase {\n  private prefix: string;\n\n  public static isAvailable(): boolean {\n    try {\n      const storage = window.localStorage;\n      const x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  constructor(namespace: string, prefix: string = 'com.exceptionless.', maxItems: number = 20) {\n    super(maxItems);\n\n    this.prefix = prefix + namespace + '-';\n  }\n\n  public write(key: string, value: string) {\n    window.localStorage.setItem(key, value);\n  }\n\n  public read(key: string) {\n    return window.localStorage.getItem(key);\n  }\n\n  public readAllKeys() {\n    return Object.keys(window.localStorage)\n      .filter((key) => key.indexOf(this.prefix) === 0);\n  }\n\n  public delete(key: string) {\n    window.localStorage.removeItem(key);\n  }\n\n  public getKey(timestamp) {\n    return this.prefix + timestamp;\n  }\n\n  public getTimestamp(key) {\n    return parseInt(key.substr(this.prefix.length), 10);\n  }\n}\n\n                                                                                                                                                                                                                                                                                                           \n\nexport class DefaultErrorParser implements IErrorParser {\n  public parse(context: EventPluginContext, exception: Error): IError {\n    function getParameters(parameters: string | string[]): IParameter[] {\n      const params: string[] = (typeof parameters === 'string' ? [parameters] : parameters) || [];\n\n      const result: IParameter[] = [];\n      for (const param of params) {\n        result.push({ name: param });\n      }\n\n      return result;\n    }\n\n    function getStackFrames(stackFrames: TraceKit.StackFrame[]): IStackFrame[] {\n      const ANONYMOUS: string = '<anonymous>';\n      const frames: IStackFrame[] = [];\n\n      for (const frame of stackFrames) {\n        frames.push({\n          name: (frame.func || ANONYMOUS).replace('?', ANONYMOUS),\n          parameters: getParameters(frame.args),\n          file_name: frame.url,\n          line_number: frame.line || 0,\n          column: frame.column || 0\n        });\n      }\n\n      return frames;\n    }\n\n    const TRACEKIT_STACK_TRACE_KEY: string = '@@_TraceKit.StackTrace'; // optimization for minifier.\n\n    const stackTrace: TraceKit.StackTrace = !!context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      ? context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      : TraceKit.computeStackTrace(exception, 25);\n\n    if (!stackTrace) {\n      throw new Error('Unable to parse the exceptions stack trace.');\n    }\n\n    const message = typeof(exception) === 'string' ? exception as any : undefined;\n    return {\n      type: stackTrace.name,\n      message: stackTrace.message || exception.message || message,\n      stack_trace: getStackFrames(stackTrace.stack || [])\n    };\n  }\n}\n\n                                                                                                                                                                                                         \n\nexport class DefaultModuleCollector implements IModuleCollector {\n  public getModules(context: EventPluginContext): IModule[] {\n    if (document && document.getElementsByTagName) {\n      return null;\n    }\n\n    const modules: IModule[] = [];\n    const scripts: NodeListOf<HTMLScriptElement> = document.getElementsByTagName('script');\n    if (scripts && scripts.length > 0) {\n      for (let index = 0; index < scripts.length; index++) {\n        if (scripts[index].src) {\n          modules.push({\n            module_id: index,\n            name: scripts[index].src,\n            version: Utils.parseVersion(scripts[index].src)\n          });\n        } else if (!!scripts[index].innerHTML) {\n          modules.push({\n            module_id: index,\n            name: 'Script Tag',\n            version: Utils.getHashCode(scripts[index].innerHTML).toString()\n          });\n        }\n      }\n    }\n\n    return modules;\n  }\n}\n\n                                                                                                                                                                                                                             \n\nexport class DefaultRequestInfoCollector implements IRequestInfoCollector {\n  public getRequestInfo(context: EventPluginContext): IRequestInfo {\n    if (!document || !navigator || !location) {\n      return null;\n    }\n\n    const exclusions = context.client.config.dataExclusions;\n    const requestInfo: IRequestInfo = {\n      user_agent: navigator.userAgent,\n      is_secure: location.protocol === 'https:',\n      host: location.hostname,\n      port: location.port && location.port !== '' ? parseInt(location.port, 10) : 80,\n      path: location.pathname,\n      // client_ip_address: 'TODO',\n      cookies: Utils.getCookies(document.cookie, exclusions),\n      query_string: Utils.parseQueryString(location.search.substring(1), exclusions)\n    };\n\n    if (document.referrer && document.referrer !== '') {\n      requestInfo.referrer = document.referrer;\n    }\n\n    return requestInfo;\n  }\n}\n\n                                                                                                                                                \n\nexport class BrowserStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(prefix?: string, maxQueueItems: number = 250) {\n    this.queue = new BrowserStorage('q', prefix, maxQueueItems);\n    this.settings = new BrowserStorage('settings', prefix, 1);\n  }\n\n}\n\n                                                                                                                                                                              \n\n// tslint:disable-next-line:prefer-const\ndeclare var XDomainRequest: { new (); create(); };\n\nexport class DefaultSubmissionAdapter implements ISubmissionAdapter {\n  public sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean) {\n    // TODO: Handle sending events when app is exiting with send beacon.\n    const TIMEOUT: string = 'timeout';  // optimization for minifier.\n    const LOADED: string = 'loaded';  // optimization for minifier.\n    const WITH_CREDENTIALS: string = 'withCredentials';  // optimization for minifier.\n\n    let isCompleted: boolean = false;\n    let useSetTimeout: boolean = false;\n    function complete(mode: string, xhr: XMLHttpRequest) {\n      function parseResponseHeaders(headerStr) {\n        function trim(value) {\n          return value.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n        }\n\n        const headers = {};\n        const headerPairs = (headerStr || '').split('\\u000d\\u000a');\n        for (const headerPair of headerPairs) {\n          // Can't use split() here because it does the wrong thing\n          // if the header value has the string \": \" in it.\n          const separator = headerPair.indexOf('\\u003a\\u0020');\n          if (separator > 0) {\n            headers[trim(headerPair.substring(0, separator).toLowerCase())] = headerPair.substring(separator + 2);\n          }\n        }\n\n        return headers;\n      }\n\n      if (isCompleted) {\n        return;\n      }\n\n      isCompleted = true;\n\n      let message: string = xhr.statusText;\n      const responseText: string = xhr.responseText;\n      let status: number = xhr.status;\n\n      if (mode === TIMEOUT || status === 0) {\n        message = 'Unable to connect to server.';\n        status = 0;\n      } else if (mode === LOADED && !status) {\n        status = request.method === 'POST' ? 202 : 200;\n      } else if (status < 200 || status > 299) {\n        const responseBody: any = (xhr as any).responseBody;\n        if (!!responseBody && !!responseBody.message) {\n          message = responseBody.message;\n        } else if (!!responseText && responseText.indexOf('message') !== -1) {\n          try {\n            message = JSON.parse(responseText).message;\n          } catch (e) {\n            message = responseText;\n          }\n        }\n      }\n\n      callback && callback(status || 500, message || '', responseText, parseResponseHeaders(xhr.getAllResponseHeaders && xhr.getAllResponseHeaders()));\n    }\n\n    function createRequest(userAgent: string, method: string, url: string): XMLHttpRequest {\n      let xhr: any = new XMLHttpRequest();\n      if (WITH_CREDENTIALS in xhr) {\n        xhr.open(method, url, true);\n\n        xhr.setRequestHeader('X-Exceptionless-Client', userAgent);\n        if (method === 'POST') {\n          xhr.setRequestHeader('Content-Type', 'application/json');\n        }\n      } else if (typeof XDomainRequest !== 'undefined') {\n        useSetTimeout = true;\n        xhr = new XDomainRequest();\n        xhr.open(method, location.protocol === 'http:' ? url.replace('https:', 'http:') : url);\n      } else {\n        xhr = null;\n      }\n\n      if (xhr) {\n        xhr.timeout = 10000;\n      }\n\n      return xhr;\n    }\n\n    const url = `${request.url}${(request.url.indexOf('?') === -1 ? '?' : '&')}access_token=${encodeURIComponent(request.apiKey)}`;\n    const xhr = createRequest(request.userAgent, request.method || 'POST', url);\n    if (!xhr) {\n      return (callback && callback(503, 'CORS not supported.'));\n    }\n\n    if (WITH_CREDENTIALS in xhr) {\n      xhr.onreadystatechange = () => {\n        // xhr not ready.\n        if (xhr.readyState !== 4) {\n          return;\n        }\n\n        complete(LOADED, xhr);\n      };\n    }\n\n    xhr.onprogress = () => { };\n    xhr.ontimeout = () => complete(TIMEOUT, xhr);\n    xhr.onerror = () => complete('error', xhr);\n    xhr.onload = () => complete(LOADED, xhr);\n\n    if (useSetTimeout) {\n      setTimeout(() => xhr.send(request.data), 500);\n    } else {\n      xhr.send(request.data);\n    }\n  }\n}\n\n                                                                                                                     \n\nexport class NodeFileStorage extends KeyValueStorageBase {\n  private directory: string;\n  private prefix: string;\n  private fs: any;\n\n  constructor(namespace: string, folder?: string, prefix: string = 'ex-', maxItems: number = 20, fs?: any) {\n    super(maxItems);\n\n    if (!folder) {\n      folder = Path.join(Path.dirname(require.main.filename), '.exceptionless');\n    }\n\n    const subfolder = Path.join(folder, namespace);\n    this.directory = Path.resolve(subfolder);\n    this.prefix = prefix;\n    this.fs = fs ? fs : Fs;\n\n    this.mkdir(this.directory);\n  }\n\n  public write(key: string, value: string) {\n    this.fs.writeFileSync(key, value);\n  }\n\n  public read(key: string) {\n    return this.fs.readFileSync(key, 'utf8');\n  }\n\n  public readAllKeys() {\n    return this.fs.readdirSync(this.directory)\n      .filter((file) => file.indexOf(this.prefix) === 0)\n      .map((file) => Path.join(this.directory, file));\n  }\n\n  public delete(key: string) {\n    this.fs.unlinkSync(key);\n  }\n\n  public getKey(timestamp) {\n    return Path.join(this.directory, `${this.prefix}${timestamp}.json`);\n  }\n\n  public getTimestamp(key) {\n    return parseInt(Path.basename(key, '.json')\n      .substr(this.prefix.length), 10);\n  }\n\n  private mkdir(path) {\n    const dirs = path.split(Path.sep);\n    let root = '';\n\n    while (dirs.length > 0) {\n      const dir = dirs.shift();\n      if (dir === '') {\n        root = Path.sep;\n      }\n      if (!this.fs.existsSync(root + dir)) {\n        this.fs.mkdirSync(root + dir);\n      }\n      root += dir + Path.sep;\n    }\n  }\n}\n\n                                                                                                                                                                                                                                       \n\nexport class NodeEnvironmentInfoCollector implements IEnvironmentInfoCollector {\n  public getEnvironmentInfo(context: EventPluginContext): IEnvironmentInfo {\n    function getIpAddresses(): string {\n      const ips: string[] = [];\n      const interfaces = os.networkInterfaces();\n      Object.keys(interfaces).forEach((name) => {\n        interfaces[name].forEach((iface: any) => {\n          if ('IPv4' === iface.family && !iface.internal) {\n            ips.push(iface.address);\n          }\n        });\n      });\n\n      return ips.join(', ');\n    }\n\n    if (!os) {\n      return null;\n    }\n\n    const environmentInfo: IEnvironmentInfo = {\n      processor_count: os.cpus().length,\n      total_physical_memory: os.totalmem(),\n      available_physical_memory: os.freemem(),\n      command_line: process.argv.join(' '),\n      process_name: (process.title || '').replace(/[\\uE000-\\uF8FF]/g, ''),\n      process_id: process.pid + '',\n      process_memory_size: process.memoryUsage().heapTotal,\n      // thread_id: '',\n      architecture: os.arch(),\n      o_s_name: os.type(),\n      o_s_version: os.release(),\n      ip_address: getIpAddresses(),\n      machine_name: os.hostname(),\n      // install_id: '',\n      runtime_version: process.version,\n      data: {\n        loadavg: os.loadavg(),\n        platform: os.platform(),\n        tmpdir: os.tmpdir(),\n        uptime: os.uptime()\n      }\n    };\n\n    if ((os as any).endianness) {\n      environmentInfo.data.endianness = (os as any).endianness();\n    }\n\n    return environmentInfo;\n  }\n}\n\n                                                                                                                                                                                                                                                                   \n\nexport class NodeErrorParser implements IErrorParser {\n  public parse(context: EventPluginContext, exception: Error): IError {\n    function getStackFrames(stackFrames: any[]): IStackFrame[] {\n      const frames: IStackFrame[] = [];\n\n      for (const frame of stackFrames) {\n        frames.push({\n          name: frame.getMethodName() || frame.getFunctionName(),\n          // parameters: frame.args,\n          file_name: frame.getFileName(),\n          line_number: frame.getLineNumber() || 0,\n          column: frame.getColumnNumber() || 0,\n          declaring_type: frame.getTypeName(),\n          data: {\n            is_native: frame.isNative() || (!!frame.filename && frame.filename[0] !== '/' && frame.filename[0] !== '.')\n          }\n        });\n      }\n\n      return frames;\n    }\n\n    if (!nodestacktrace) {\n      throw new Error('Unable to load the stack trace library.');\n    }\n\n    const stackFrames = nodestacktrace.parse(exception) || [];\n    return {\n      type: exception.name,\n      message: exception.message,\n      stack_trace: getStackFrames(stackFrames)\n    };\n  }\n}\n\n                                                                                                                                                                                                                                                \n\nexport class NodeModuleCollector implements IModuleCollector {\n\n  private initialized: boolean = false;\n  private installedModules: { [id: string]: IModule } = {};\n\n  public getModules(context: EventPluginContext): IModule[] {\n    this.initialize();\n\n    if (!require.main) {\n      return [];\n    }\n\n    const modulePath = path.dirname(require.main.filename) + '/node_modules/';\n    const pathLength = modulePath.length;\n\n    const loadedKeys = Object.keys(require.cache);\n    const loadedModules = {};\n\n    loadedKeys.forEach((key) => {\n      let id = key.substr(pathLength);\n      id = id.substr(0, id.indexOf('/'));\n      loadedModules[id] = true;\n    });\n\n    return Object.keys(loadedModules)\n      .map((key) => this.installedModules[key])\n      .filter((m) => m !== undefined);\n  }\n\n  private initialize() {\n    if (this.initialized) {\n      return;\n    }\n\n    this.initialized = true;\n\n    const output = child.spawnSync('npm', ['ls', '--depth=0', '--json']).stdout;\n\n    if (!output) {\n      return;\n    }\n\n    let json;\n    try {\n      json = JSON.parse(output.toString());\n    } catch (e) {\n      return;\n    }\n\n    const items = json.dependencies;\n    if (!items) {\n      return;\n    }\n\n    let id = 0;\n    this.installedModules = {};\n\n    Object.keys(items).forEach((key) => {\n      const item = items[key];\n      const theModule: IModule = {\n        module_id: id++,\n        name: key,\n        version: item.version\n      };\n\n      this.installedModules[key] = theModule;\n    });\n  }\n}\n\n                                                                                                                                                                                                                             \n\nexport class NodeRequestInfoCollector implements IRequestInfoCollector {\n  public getRequestInfo(context: EventPluginContext): IRequestInfo {\n    const REQUEST_KEY: string = '@request'; // optimization for minifier.\n    if (!context.contextData[REQUEST_KEY]) {\n      return null;\n    }\n\n    const exclusions = context.client.config.dataExclusions;\n\n    // TODO: include referrer\n    const request = context.contextData[REQUEST_KEY];\n    const requestInfo: IRequestInfo = {\n      client_ip_address: request.ip,\n      user_agent: request.headers['user-agent'],\n      is_secure: request.secure,\n      http_method: request.method,\n      host: request.hostname || request.host,\n      path: request.path,\n      post_data: JSON.parse(Utils.stringify(request.body || {}, exclusions)),\n      cookies: Utils.getCookies(request.headers.cookie, exclusions),\n      query_string: JSON.parse(Utils.stringify(request.params || {}, exclusions))\n    };\n\n    const host = request.headers.host;\n    const port: number = host && parseInt(host.slice(host.indexOf(':') + 1), 10);\n    if (port > 0) {\n      requestInfo.port = port;\n    }\n\n    return requestInfo;\n  }\n}\n\n                                                                                                                                                  \n\nexport class NodeFileStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(folder?: string, prefix?: string, maxQueueItems: number = 250) {\n    this.queue = new NodeFileStorage('q', folder, prefix, maxQueueItems);\n    this.settings = new NodeFileStorage('settings', folder, prefix, 1);\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                     \n\nexport class NodeSubmissionAdapter implements ISubmissionAdapter {\n  public sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean) {\n    if (isAppExiting) {\n      this.sendRequestSync(request, callback);\n      return;\n    }\n\n    const parsedHost = url.parse(request.url);\n\n    const options: https.RequestOptions = {\n      auth: `client:${request.apiKey}`,\n      headers: {},\n      hostname: parsedHost.hostname,\n      method: request.method,\n      port: parsedHost.port && parseInt(parsedHost.port, 10),\n      path: request.url\n    };\n\n    options.headers['User-Agent'] = request.userAgent;\n\n    if (request.method === 'POST') {\n      options.headers = {\n        'Content-Type': 'application/json',\n        'Content-Length': Buffer.byteLength(request.data)\n      };\n    }\n\n    const protocol: any = (parsedHost.protocol === 'https' ? https : http);\n    const clientRequest: http.ClientRequest = protocol.request(options, (response: http.IncomingMessage) => {\n      let body = '';\n      response.setEncoding('utf8');\n      response.on('data', (chunk) => body += chunk);\n      response.on('end', () => this.complete(response, body, response.headers, callback));\n    });\n\n    clientRequest.on('error', (error: Error) => callback && callback(500, error.message));\n    clientRequest.end(request.data);\n  }\n\n  private complete(response: http.IncomingMessage, responseBody: string, responseHeaders: object, callback: SubmissionCallback): void {\n    let message: string;\n    if (response.statusCode === 0) {\n      message = 'Unable to connect to server.';\n    } else if (response.statusCode < 200 || response.statusCode > 299) {\n      message = response.statusMessage || ( response as any).message;\n    }\n\n    callback && callback(response.statusCode || 500, message, responseBody, responseHeaders);\n  }\n\n  private sendRequestSync(request: SubmissionRequest, callback: SubmissionCallback): void {\n    const requestJson = JSON.stringify(request);\n    const res = child.spawnSync(process.execPath, [require.resolve('./submitSync.js')],\n      {\n        input: requestJson,\n        stdio: ['pipe', 'pipe', process.stderr]\n      });\n\n    const out = res.stdout.toString();\n    const result = JSON.parse(out);\n\n    callback && callback(result.status, result.message, result.data, result.headers);\n  }\n}\n\nn\nexport function isBrowser(): boolean {\n  return typeof document !== 'undefined';\n}\n\nexport function browserInit() {\n  function getDefaultsSettingsFromScriptTag(): IConfigurationSettings {\n    if (!document || !document.getElementsByTagName) {\n      return null;\n    }\n\n    const scripts = document.getElementsByTagName('script');\n    // tslint:disable-next-line:prefer-for-of\n    for (let index = 0; index < scripts.length; index++) {\n      if (scripts[index].src && scripts[index].src.indexOf('/exceptionless') > -1) {\n        return Utils.parseQueryString(scripts[index].src.split('?').pop());\n      }\n    }\n    return null;\n  }\n\n  function processUnhandledException(stackTrace: TraceKit.StackTrace, options?: any): void {\n    const builder = ExceptionlessClient.default.createUnhandledException(new Error(stackTrace.message || (options || {}).status || 'Script error'), 'onerror');\n    builder.pluginContextData['@@_TraceKit.StackTrace'] = stackTrace;\n    builder.submit();\n  }\n\n  /*\n   TODO: We currently are unable to parse string exceptions.\n   function processJQueryAjaxError(event, xhr, settings, error:string): void {\n   let client = ExceptionlessClient.default;\n   if (xhr.status === 404) {\n   client.submitNotFound(settings.url);\n   } else if (xhr.status !== 401) {\n   client.createUnhandledException(error, 'JQuery.ajaxError')\n   .setSource(settings.url)\n   .setProperty('status', xhr.status)\n   .setProperty('request', settings.data)\n   .setProperty('response', xhr.responseText && xhr.responseText.slice && xhr.responseText.slice(0, 1024))\n   .submit();\n   }\n   }\n   */\n\n  Configuration.prototype.useLocalStorage = function() {\n    if (BrowserStorage.isAvailable()) {\n      this.storage = new BrowserStorageProvider();\n      SettingsManager.applySavedServerSettings(this);\n      this.changed();\n    }\n  };\n\n  const defaults = Configuration.defaults;\n  const settings = getDefaultsSettingsFromScriptTag();\n  if (settings && (settings.apiKey || settings.serverUrl)) {\n    defaults.apiKey = settings.apiKey;\n    defaults.serverUrl = settings.serverUrl;\n  }\n\n  defaults.errorParser = new DefaultErrorParser();\n  defaults.moduleCollector = new DefaultModuleCollector();\n  defaults.requestInfoCollector = new DefaultRequestInfoCollector();\n  defaults.submissionAdapter = new DefaultSubmissionAdapter();\n\n  TraceKit.report.subscribe(processUnhandledException);\n  TraceKit.extendToAsynchronousCallbacks();\n\n  // window && window.addEventListener && window.addEventListener('beforeunload', function () {\n  //   ExceptionlessClient.default.config.queue.process(true);\n  // });\n\n  // if (typeof $ !== 'undefined' && $(document)) {\n  //   $(document).ajaxError(processJQueryAjaxError);\n  // }\n\n  (Error as any).stackTraceLimit = Infinity;\n}\n\nif (isBrowser()) {\n  browserInit();\n}\n\n// tslint:disable-next-line:prefer-const\ndeclare var $;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n\nexport function isNode(): boolean {\n  return typeof process !== 'undefined';\n}\n\nexport function nodeInit() {\n  const defaults = Configuration.defaults;\n  defaults.environmentInfoCollector = new NodeEnvironmentInfoCollector();\n  defaults.errorParser = new NodeErrorParser();\n  defaults.moduleCollector = new NodeModuleCollector();\n  defaults.requestInfoCollector = new NodeRequestInfoCollector();\n  defaults.submissionAdapter = new NodeSubmissionAdapter();\n\n  Configuration.prototype.useLocalStorage = function() {\n    this.storage = new NodeFileStorageProvider();\n    SettingsManager.applySavedServerSettings(this);\n    this.changed();\n  };\n\n  process.addListener('uncaughtException', (error: Error) => {\n    ExceptionlessClient.default.submitUnhandledException(error, 'uncaughtException');\n  });\n\n  process.on('exit', (code: number) => {\n    /**\n     * exit codes: https://nodejs.org/api/process.html#process_event_exit\n     * From now on, only synchronous code may run. As soon as this method\n     * ends, the application inevitably will exit.\n     */\n    function getExitCodeReason(exitCode: number): string {\n      if (exitCode === 1) {\n        return 'Uncaught Fatal Exception';\n      }\n\n      if (exitCode === 3) {\n        return 'Internal JavaScript Parse Error';\n      }\n\n      if (exitCode === 4) {\n        return 'Internal JavaScript Evaluation Failure';\n      }\n\n      if (exitCode === 5) {\n        return 'Fatal Exception';\n      }\n\n      if (exitCode === 6) {\n        return 'Non-function Internal Exception Handler ';\n      }\n\n      if (exitCode === 7) {\n        return 'Internal Exception Handler Run-Time Failure';\n      }\n\n      if (exitCode === 8) {\n        return 'Uncaught Exception';\n      }\n\n      if (exitCode === 9) {\n        return 'Invalid Argument';\n      }\n\n      if (exitCode === 10) {\n        return 'Internal JavaScript Run-Time Failure';\n      }\n\n      if (exitCode === 12) {\n        return 'Invalid Debug Argument';\n      }\n\n      return null;\n    }\n\n    const client = ExceptionlessClient.default;\n    const message = getExitCodeReason(code);\n\n    if (message !== null) {\n      client.submitLog('exit', message, 'Error');\n    }\n\n    client.config.queue.process(true);\n    // Application will now exit.\n  });\n\n  (Error as any).stackTraceLimit = Infinity;\n}\n\nif (isNode()) {\n  nodeInit();\n}\n\n                                                                                                                                                                               \n\nif (isNode()) {\n  nodeInit();\n  ExceptionlessClient.default.config.log.trace('Using node Exceptionless implementation.');\n} else if (isBrowser()) {\n  browserInit();\n  ExceptionlessClient.default.config.log.trace('Using browser Exceptionless implementation.');\n} else {\n  ExceptionlessClient.default.config.log.error('No Exceptionless implementation was found.');\n}\n\n"]}