{"version":3,"file":"submitSync.js","sourceRoot":"/source/","sources":["submitSync.ts"],"names":[],"mappings":"AAAA,sCAAsC,oCAAoC,CAAC,CAAA;AAG3E,IAAY,MAAM,WAAM,QAAQ,CAAC,CAAA;AACjC,+BAA8B,gBAAgB,CAAC,CAAA;AAE/C,IAAI,OAAO,GAAG,IAAI,8BAAa,CAAC,MAAM,CAAC,CAAC;AACxC,IAAI,OAAO,GAAa,EAAE,CAAC;AAE3B,IAAI,UAAU,GAAG,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;AACvC,UAAU,CAAC,MAAM,GAAG,UAAC,KAAsB,EAAE,QAAgB,EAAE,IAAc;IAC3E,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAS,KAAK,CAAC,CAAC,CAAC;IAC3C,IAAI,EAAE,CAAC;AACT,CAAC,CAAC;AAEF,UAAU,CAAC,EAAE,CAAC,QAAQ,EAAE;IACtB,IAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC5B,IAAI,OAAO,GAAsB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAClD,IAAI,OAAO,GAAG,IAAI,6CAAqB,EAAE,CAAC;IAC1C,OAAO,CAAC,WAAW,CAAC,OAAO,EAAE,UAAC,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO;QAC1D,IAAI,MAAM,GAAG;YACX,QAAA,MAAM;YACN,SAAA,OAAO;YACP,MAAA,IAAI;YACJ,SAAA,OAAO;SACR,CAAC;QACF,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;QAC7C,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC","sourcesContent":["import * as events from \"events\";\nimport * as net from \"net\";\nimport * as stream from \"stream\";\nimport * as child from \"child_process\";\nimport * as tls from \"tls\";\nimport * as http from \"http\";\nimport * as crypto from \"crypto\";\nexport interface SubmissionCallback {\n  (status: number, message: string, data?: string, headers?: Object): void;\n}\n\nexport interface SubmissionRequest {\n  serverUrl: string;\n  apiKey: string;\n  userAgent: string;\n  method: string;\n  path: string;\n  data: string;\n}\n\n                                                                                                                   \n\nexport interface ISubmissionAdapter {\n  sendRequest(request: SubmissionRequest, callback: SubmissionCallback, isAppExiting?: boolean): void;\n}\n\nimport https = require('https');\nimport url = require('url');\n                                                                                                                                                                                                                                                                                                                     \n\nexport class NodeSubmissionAdapter implements ISubmissionAdapter {\n  public sendRequest(request: SubmissionRequest, callback: SubmissionCallback, isAppExiting?: boolean) {\n    if (isAppExiting) {\n      this.sendRequestSync(request, callback);\n      return;\n    }\n\n    let parsedHost = url.parse(request.serverUrl);\n\n    let options: https.RequestOptions = {\n      auth: `client:${request.apiKey}`,\n      headers: {},\n      hostname: parsedHost.hostname,\n      method: request.method,\n      port: parsedHost.port && parseInt(parsedHost.port, 10),\n      path: request.path\n    };\n\n    options.headers['User-Agent'] = request.userAgent;\n\n    if (request.method === 'POST') {\n      options.headers = {\n        'Content-Type': 'application/json',\n        'Content-Length': request.data.length\n      };\n    }\n\n    let protocol = (parsedHost.protocol === 'https' ? https : http);\n    let clientRequest: http.ClientRequest = protocol.request(options, (response: http.IncomingMessage) => {\n      let body = '';\n      response.setEncoding('utf8');\n      response.on('data', (chunk) => body += chunk);\n      response.on('end', () => this.complete(response, body, response.headers, callback));\n    });\n\n    clientRequest.on('error', (error: Error) => callback(500, error.message));\n    clientRequest.end(request.data);\n  }\n\n  private complete(response: http.IncomingMessage, responseBody: string, responseHeaders: Object, callback: SubmissionCallback): void {\n    let message: string;\n    if (response.statusCode === 0) {\n      message = 'Unable to connect to server.';\n    } else if (response.statusCode < 200 || response.statusCode > 299) {\n      message = response.statusMessage || (<any>response).message;\n    }\n\n    callback(response.statusCode || 500, message, responseBody, responseHeaders);\n  }\n\n  private sendRequestSync(request: SubmissionRequest, callback: SubmissionCallback): void {\n    let requestJson = JSON.stringify(request);\n    let res = child.spawnSync(process.execPath, [require.resolve('./submitSync.js')],\n      {\n        input: requestJson,\n        stdio: ['pipe', 'pipe', process.stderr]\n      });\n\n    let out = res.stdout.toString();\n    let result = JSON.parse(out);\n\n    callback(result.status, result.message, result.data, result.headers);\n  }\n}\n\nimport { StringDecoder } from 'string_decoder';\n                                                                                                                                                                                                                                  \n\nlet decoder = new StringDecoder('utf8');\nlet strings: string[] = [];\n\nlet jsonStream = new stream.Writable();\njsonStream._write = (chunk: Buffer | string, encoding: string, next: Function) => {\n  strings.push(decoder.write(<Buffer>chunk));\n  next();\n};\n\njsonStream.on('finish', () => {\n  let json = strings.join('');\n  let request: SubmissionRequest = JSON.parse(json);\n  let adapter = new NodeSubmissionAdapter();\n  adapter.sendRequest(request, (status, message, data, headers) => {\n    let result = {\n      status,\n      message,\n      data,\n      headers\n    };\n    process.stdout.write(JSON.stringify(result));\n    process.exit(0);\n  });\n});\n\nprocess.stdin.pipe(jsonStream);\n\n"]}