{"version":3,"file":"submitSync.js","sourceRoot":"/source/","sources":["submitSync.ts"],"names":[],"mappings":"AAAA,sCAAqD,oCAAoC,CAAC,CAAA;AAE1F,IAAY,MAAM,WAAM,QAAQ,CAAC,CAAA;AACjC,+BAA8B,gBAAgB,CAAC,CAAA;AAE/C,IAAI,OAAO,GAAG,IAAI,8BAAa,CAAC,MAAM,CAAC,CAAC;AACxC,IAAI,OAAO,GAAa,EAAE,CAAC;AAE3B,IAAI,UAAU,GAAG,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;AACvC,UAAU,CAAC,MAAM,GAAG,UAAC,KAAoB,EAAE,QAAgB,EAAE,IAAc;IACvE,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAS,KAAK,CAAC,CAAC,CAAC;IAC3C,IAAI,EAAE,CAAC;AACX,CAAC,CAAC;AAEF,UAAU,CAAC,EAAE,CAAC,QAAQ,EAAE;IACtB,IAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC5B,IAAI,OAAO,GAAyB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAErD,qCAAa,CAAC,OAAO,EAAE,UAAC,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO;QACpD,IAAI,MAAM,GAAG;YACX,QAAA,MAAM;YACN,SAAA,OAAO;YACP,MAAA,IAAI;YACJ,SAAA,OAAO;SACR,CAAC;QACF,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;QAC7C,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC","sourcesContent":["import * as events from \"events\";\nimport * as net from \"net\";\nimport * as stream from \"stream\";\nimport * as child from \"child_process\";\nimport * as tls from \"tls\";\nimport * as http from \"http\";\nimport * as crypto from \"crypto\";\nimport https = require('https');\nimport url = require('url');\n                                                                                            \n\nexport interface NodeSubmissionCallback {\n  (status: number, message: string, data?: string, headers?: Object): void\n}\n\nexport interface NodeSubmissionRequest {\n  serverUrl: string;\n  apiKey: string;\n  userAgent: string;\n  method: string;\n  path: string;\n  data: string;\n}\n\nfunction complete(response: http.IncomingMessage, responseBody: string, responseHeaders: Object, callback:NodeSubmissionCallback): void {\n    var message: string;\n    if(response.statusCode === 0) {\n    message = 'Unable to connect to server.';\n    } else if (response.statusCode < 200 || response.statusCode > 299) {\n    message = response.statusMessage || (<any>response).message;\n    }\n\n    callback(response.statusCode || 500, message, responseBody, responseHeaders);\n}\n\nexport function submitRequest(request: NodeSubmissionRequest, callback: NodeSubmissionCallback): void {\n  var parsedHost = url.parse(request.serverUrl);\n\n  var options: https.RequestOptions = {\n    auth: `client:${request.apiKey}`,\n    headers: {},\n    hostname: parsedHost.hostname,\n    method: request.method,\n    port: parsedHost.port && parseInt(parsedHost.port),\n    path: request.path\n  };\n\n  options.headers['User-Agent'] = request.userAgent;\n\n  if (request.method === 'POST') {\n    options.headers = {\n      'Content-Type': 'application/json',\n      'Content-Length': request.data.length\n    }\n  }\n\n  var protocol = (parsedHost.protocol === 'https' ? https : http);\n  var clientRequest: http.ClientRequest = protocol.request(options, (response: http.IncomingMessage) => {\n    var body = '';\n    response.setEncoding('utf8');\n    response.on('data', (chunk) => body += chunk);\n    response.on('end', () => complete(response, body, response.headers, callback));\n  });\n\n  clientRequest.on('error', (error: Error) => callback(500, error.message));\n  clientRequest.end(request.data);\n}\n\nimport { StringDecoder } from 'string_decoder';\n                                                                                                                                                                             \n\nvar decoder = new StringDecoder('utf8');\nvar strings: string[] = [];\n\nvar jsonStream = new stream.Writable();\njsonStream._write = (chunk: Buffer|string, encoding: string, next: Function) => {\n    strings.push(decoder.write(<Buffer>chunk));\n    next();\n};\n\njsonStream.on(\"finish\", () => {\n  var json = strings.join(\"\");\n  var request:NodeSubmissionRequest = JSON.parse(json);\n\n  submitRequest(request, (status, message, data, headers) => {\n    var result = {\n      status,\n      message,\n      data,\n      headers\n    };\n    process.stdout.write(JSON.stringify(result));\n    process.exit(0);\n  });\n});\n\nprocess.stdin.pipe(jsonStream);\n\n"]}